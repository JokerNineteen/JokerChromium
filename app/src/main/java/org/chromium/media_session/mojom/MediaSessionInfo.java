// MediaSessionInfo.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/media_session/public/mojom/media_session.mojom
//

package org.chromium.media_session.mojom;


public final class MediaSessionInfo extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 40;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0),new org.chromium.mojo.bindings.DataHeader(24, 1),new org.chromium.mojo.bindings.DataHeader(24, 2),new org.chromium.mojo.bindings.DataHeader(24, 4),new org.chromium.mojo.bindings.DataHeader(24, 6),new org.chromium.mojo.bindings.DataHeader(24, 7),new org.chromium.mojo.bindings.DataHeader(32, 8),new org.chromium.mojo.bindings.DataHeader(40, 9)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[7];

    public static final class SessionState {
        private static final boolean IS_EXTENSIBLE = true;

        public static final int ACTIVE = 0;
        public static final int DUCKING = 1;
        public static final int SUSPENDED = 2;
        public static final int INACTIVE = 3;
        public static final int MIN_VALUE = 0;
        public static final int MAX_VALUE = 3;

        public static boolean isKnownValue(int value) {
            return value >= 0 && value <= 3;
        }

        public static void validate(int value) {
            if (IS_EXTENSIBLE || isKnownValue(value)) return;
            throw new org.chromium.mojo.bindings.DeserializationException("Invalid enum value.");
        }

        private SessionState() {}
    }
    public int state;
    public boolean forceDuck;
    public int playbackState;
    public boolean isControllable;
    public boolean preferStopForGainFocusLoss;
    public boolean isSensitive;
    public int pictureInPictureState;
    public int audioVideoState;
    public String audioSinkId;

    private MediaSessionInfo(int version) {
        super(STRUCT_SIZE, version);
    }

    public MediaSessionInfo() {
        this(9);
    }

    public static MediaSessionInfo deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MediaSessionInfo deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MediaSessionInfo decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        MediaSessionInfo result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new MediaSessionInfo(elementsOrVersion);
                {
                    
                result.state = decoder0.readInt(8);
                    MediaSessionInfo.SessionState.validate(result.state);
                }
                {
                    
                result.forceDuck = decoder0.readBoolean(12, 0);
                }
            if (elementsOrVersion >= 2) {
                {
                    
                result.isControllable = decoder0.readBoolean(12, 1);
                }
            }
            if (elementsOrVersion >= 4) {
                {
                    
                result.preferStopForGainFocusLoss = decoder0.readBoolean(12, 2);
                }
            }
            if (elementsOrVersion >= 6) {
                {
                    
                result.isSensitive = decoder0.readBoolean(12, 3);
                }
            }
            if (elementsOrVersion >= 1) {
                {
                    
                result.playbackState = decoder0.readInt(16);
                    MediaPlaybackState.validate(result.playbackState);
                }
            }
            if (elementsOrVersion >= 7) {
                {
                    
                result.pictureInPictureState = decoder0.readInt(20);
                    MediaPictureInPictureState.validate(result.pictureInPictureState);
                }
            }
            if (elementsOrVersion >= 8) {
                {
                    
                result.audioVideoState = decoder0.readInt(24);
                    MediaAudioVideoState.validate(result.audioVideoState);
                }
            }
            if (elementsOrVersion >= 9) {
                {
                    
                result.audioSinkId = decoder0.readString(32, true);
                }
            }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.state, 8);
        
        encoder0.encode(this.forceDuck, 12, 0);
        
        encoder0.encode(this.isControllable, 12, 1);
        
        encoder0.encode(this.preferStopForGainFocusLoss, 12, 2);
        
        encoder0.encode(this.isSensitive, 12, 3);
        
        encoder0.encode(this.playbackState, 16);
        
        encoder0.encode(this.pictureInPictureState, 20);
        
        encoder0.encode(this.audioVideoState, 24);
        
        encoder0.encode(this.audioSinkId, 32, true);
    }
}