// YuvVideoQuadState.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/viz/public/mojom/compositing/quads.mojom
//

package org.chromium.viz.mojom;


public final class YuvVideoQuadState extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 88;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(88, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public org.chromium.gfx.mojom.RectF yaTexCoordRect;
    public org.chromium.gfx.mojom.RectF uvTexCoordRect;
    public org.chromium.gfx.mojom.Size yaTexSize;
    public org.chromium.gfx.mojom.Size uvTexSize;
    public int yPlaneResourceId;
    public int uPlaneResourceId;
    public int vPlaneResourceId;
    public int aPlaneResourceId;
    public float resourceOffset;
    public float resourceMultiplier;
    public int bitsPerChannel;
    public org.chromium.gfx.mojom.ColorSpace videoColorSpace;
    public int protectedVideoType;
    public org.chromium.gfx.mojom.HdrMetadata hdrMetadata;

    private YuvVideoQuadState(int version) {
        super(STRUCT_SIZE, version);
    }

    public YuvVideoQuadState() {
        this(0);
    }

    public static YuvVideoQuadState deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static YuvVideoQuadState deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static YuvVideoQuadState decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        YuvVideoQuadState result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new YuvVideoQuadState(elementsOrVersion);
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                result.yaTexCoordRect = org.chromium.gfx.mojom.RectF.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                result.uvTexCoordRect = org.chromium.gfx.mojom.RectF.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                result.yaTexSize = org.chromium.gfx.mojom.Size.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                result.uvTexSize = org.chromium.gfx.mojom.Size.decode(decoder1);
                }
                {
                    
                result.yPlaneResourceId = decoder0.readInt(40);
                }
                {
                    
                result.uPlaneResourceId = decoder0.readInt(44);
                }
                {
                    
                result.vPlaneResourceId = decoder0.readInt(48);
                }
                {
                    
                result.aPlaneResourceId = decoder0.readInt(52);
                }
                {
                    
                result.resourceOffset = decoder0.readFloat(56);
                }
                {
                    
                result.resourceMultiplier = decoder0.readFloat(60);
                }
                {
                    
                result.bitsPerChannel = decoder0.readInt(64);
                }
                {
                    
                result.protectedVideoType = decoder0.readInt(68);
                    ProtectedVideoState.validate(result.protectedVideoType);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(72, false);
                result.videoColorSpace = org.chromium.gfx.mojom.ColorSpace.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(80, false);
                result.hdrMetadata = org.chromium.gfx.mojom.HdrMetadata.decode(decoder1);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.yaTexCoordRect, 8, false);
        
        encoder0.encode(this.uvTexCoordRect, 16, false);
        
        encoder0.encode(this.yaTexSize, 24, false);
        
        encoder0.encode(this.uvTexSize, 32, false);
        
        encoder0.encode(this.yPlaneResourceId, 40);
        
        encoder0.encode(this.uPlaneResourceId, 44);
        
        encoder0.encode(this.vPlaneResourceId, 48);
        
        encoder0.encode(this.aPlaneResourceId, 52);
        
        encoder0.encode(this.resourceOffset, 56);
        
        encoder0.encode(this.resourceMultiplier, 60);
        
        encoder0.encode(this.bitsPerChannel, 64);
        
        encoder0.encode(this.protectedVideoType, 68);
        
        encoder0.encode(this.videoColorSpace, 72, false);
        
        encoder0.encode(this.hdrMetadata, 80, false);
    }
}