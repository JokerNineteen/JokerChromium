// GpuMemoryBufferFactory_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/viz/public/mojom/gpu.mojom
//

package org.chromium.viz.mojom;


class GpuMemoryBufferFactory_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<GpuMemoryBufferFactory, GpuMemoryBufferFactory.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<GpuMemoryBufferFactory, GpuMemoryBufferFactory.Proxy>() {

        @Override
        public String getName() {
            return "viz.mojom.GpuMemoryBufferFactory";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, GpuMemoryBufferFactory impl) {
            return new Stub(core, impl);
        }

        @Override
        public GpuMemoryBufferFactory[] buildArray(int size) {
          return new GpuMemoryBufferFactory[size];
        }
    };


    private static final int CREATE_GPU_MEMORY_BUFFER_ORDINAL = 0;

    private static final int DESTROY_GPU_MEMORY_BUFFER_ORDINAL = 1;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements GpuMemoryBufferFactory.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void createGpuMemoryBuffer(
org.chromium.gfx.mojom.GpuMemoryBufferId id, org.chromium.gfx.mojom.Size size, int format, int usage, 
CreateGpuMemoryBufferResponse callback) {

            GpuMemoryBufferFactoryCreateGpuMemoryBufferParams _message = new GpuMemoryBufferFactoryCreateGpuMemoryBufferParams();

            _message.id = id;

            _message.size = size;

            _message.format = format;

            _message.usage = usage;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CREATE_GPU_MEMORY_BUFFER_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParamsForwardToCallback(callback));

        }


        @Override
        public void destroyGpuMemoryBuffer(
org.chromium.gfx.mojom.GpuMemoryBufferId id, org.chromium.gpu.mojom.SyncToken syncToken) {

            GpuMemoryBufferFactoryDestroyGpuMemoryBufferParams _message = new GpuMemoryBufferFactoryDestroyGpuMemoryBufferParams();

            _message.id = id;

            _message.syncToken = syncToken;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DESTROY_GPU_MEMORY_BUFFER_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<GpuMemoryBufferFactory> {

        Stub(org.chromium.mojo.system.Core core, GpuMemoryBufferFactory impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                GpuMemoryBufferFactory_Internal.MANAGER, messageWithHeader);







                    case DESTROY_GPU_MEMORY_BUFFER_ORDINAL: {

                        GpuMemoryBufferFactoryDestroyGpuMemoryBufferParams data =
                                GpuMemoryBufferFactoryDestroyGpuMemoryBufferParams.deserialize(messageWithHeader.getPayload());

                        getImpl().destroyGpuMemoryBuffer(data.id, data.syncToken);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), GpuMemoryBufferFactory_Internal.MANAGER, messageWithHeader, receiver);







                    case CREATE_GPU_MEMORY_BUFFER_ORDINAL: {

                        GpuMemoryBufferFactoryCreateGpuMemoryBufferParams data =
                                GpuMemoryBufferFactoryCreateGpuMemoryBufferParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createGpuMemoryBuffer(data.id, data.size, data.format, data.usage, new GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }




                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class GpuMemoryBufferFactoryCreateGpuMemoryBufferParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.GpuMemoryBufferId id;
        public org.chromium.gfx.mojom.Size size;
        public int format;
        public int usage;

        private GpuMemoryBufferFactoryCreateGpuMemoryBufferParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public GpuMemoryBufferFactoryCreateGpuMemoryBufferParams() {
            this(0);
        }

        public static GpuMemoryBufferFactoryCreateGpuMemoryBufferParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static GpuMemoryBufferFactoryCreateGpuMemoryBufferParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static GpuMemoryBufferFactoryCreateGpuMemoryBufferParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            GpuMemoryBufferFactoryCreateGpuMemoryBufferParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new GpuMemoryBufferFactoryCreateGpuMemoryBufferParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.id = org.chromium.gfx.mojom.GpuMemoryBufferId.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.size = org.chromium.gfx.mojom.Size.decode(decoder1);
                    }
                    {
                        
                    result.format = decoder0.readInt(24);
                        org.chromium.gfx.mojom.BufferFormat.validate(result.format);
                    }
                    {
                        
                    result.usage = decoder0.readInt(28);
                        org.chromium.gfx.mojom.BufferUsage.validate(result.usage);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.id, 8, false);
            
            encoder0.encode(this.size, 16, false);
            
            encoder0.encode(this.format, 24);
            
            encoder0.encode(this.usage, 28);
        }
    }



    
    static final class GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.GpuMemoryBufferHandle bufferHandle;

        private GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParams() {
            this(0);
        }

        public static GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.bufferHandle = org.chromium.gfx.mojom.GpuMemoryBufferHandle.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.bufferHandle, 8, false);
        }
    }

    static class GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final GpuMemoryBufferFactory.CreateGpuMemoryBufferResponse mCallback;

        GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParamsForwardToCallback(GpuMemoryBufferFactory.CreateGpuMemoryBufferResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CREATE_GPU_MEMORY_BUFFER_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParams response = GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.bufferHandle);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParamsProxyToResponder implements GpuMemoryBufferFactory.CreateGpuMemoryBufferResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(org.chromium.gfx.mojom.GpuMemoryBufferHandle bufferHandle) {
            GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParams _response = new GpuMemoryBufferFactoryCreateGpuMemoryBufferResponseParams();

            _response.bufferHandle = bufferHandle;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CREATE_GPU_MEMORY_BUFFER_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class GpuMemoryBufferFactoryDestroyGpuMemoryBufferParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.GpuMemoryBufferId id;
        public org.chromium.gpu.mojom.SyncToken syncToken;

        private GpuMemoryBufferFactoryDestroyGpuMemoryBufferParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public GpuMemoryBufferFactoryDestroyGpuMemoryBufferParams() {
            this(0);
        }

        public static GpuMemoryBufferFactoryDestroyGpuMemoryBufferParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static GpuMemoryBufferFactoryDestroyGpuMemoryBufferParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static GpuMemoryBufferFactoryDestroyGpuMemoryBufferParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            GpuMemoryBufferFactoryDestroyGpuMemoryBufferParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new GpuMemoryBufferFactoryDestroyGpuMemoryBufferParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.id = org.chromium.gfx.mojom.GpuMemoryBufferId.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.syncToken = org.chromium.gpu.mojom.SyncToken.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.id, 8, false);
            
            encoder0.encode(this.syncToken, 16, false);
        }
    }



}
