// OriginPolicyManager_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/origin_policy_manager.mojom
//

package org.chromium.network.mojom;


class OriginPolicyManager_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<OriginPolicyManager, OriginPolicyManager.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<OriginPolicyManager, OriginPolicyManager.Proxy>() {

        @Override
        public String getName() {
            return "network.mojom.OriginPolicyManager";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, OriginPolicyManager impl) {
            return new Stub(core, impl);
        }

        @Override
        public OriginPolicyManager[] buildArray(int size) {
          return new OriginPolicyManager[size];
        }
    };


    private static final int RETRIEVE_ORIGIN_POLICY_ORDINAL = 0;

    private static final int ADD_EXCEPTION_FOR_ORDINAL = 1;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements OriginPolicyManager.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void retrieveOriginPolicy(
org.chromium.url.internal.mojom.Origin origin, IsolationInfo isolationInfo, String headerValue, 
RetrieveOriginPolicyResponse callback) {

            OriginPolicyManagerRetrieveOriginPolicyParams _message = new OriginPolicyManagerRetrieveOriginPolicyParams();

            _message.origin = origin;

            _message.isolationInfo = isolationInfo;

            _message.headerValue = headerValue;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RETRIEVE_ORIGIN_POLICY_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new OriginPolicyManagerRetrieveOriginPolicyResponseParamsForwardToCallback(callback));

        }


        @Override
        public void addExceptionFor(
org.chromium.url.internal.mojom.Origin origin) {

            OriginPolicyManagerAddExceptionForParams _message = new OriginPolicyManagerAddExceptionForParams();

            _message.origin = origin;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADD_EXCEPTION_FOR_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<OriginPolicyManager> {

        Stub(org.chromium.mojo.system.Core core, OriginPolicyManager impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                OriginPolicyManager_Internal.MANAGER, messageWithHeader);







                    case ADD_EXCEPTION_FOR_ORDINAL: {

                        OriginPolicyManagerAddExceptionForParams data =
                                OriginPolicyManagerAddExceptionForParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addExceptionFor(data.origin);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), OriginPolicyManager_Internal.MANAGER, messageWithHeader, receiver);







                    case RETRIEVE_ORIGIN_POLICY_ORDINAL: {

                        OriginPolicyManagerRetrieveOriginPolicyParams data =
                                OriginPolicyManagerRetrieveOriginPolicyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().retrieveOriginPolicy(data.origin, data.isolationInfo, data.headerValue, new OriginPolicyManagerRetrieveOriginPolicyResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }




                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class OriginPolicyManagerRetrieveOriginPolicyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.internal.mojom.Origin origin;
        public IsolationInfo isolationInfo;
        public String headerValue;

        private OriginPolicyManagerRetrieveOriginPolicyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public OriginPolicyManagerRetrieveOriginPolicyParams() {
            this(0);
        }

        public static OriginPolicyManagerRetrieveOriginPolicyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static OriginPolicyManagerRetrieveOriginPolicyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static OriginPolicyManagerRetrieveOriginPolicyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            OriginPolicyManagerRetrieveOriginPolicyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new OriginPolicyManagerRetrieveOriginPolicyParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.origin = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.isolationInfo = IsolationInfo.decode(decoder1);
                    }
                    {
                        
                    result.headerValue = decoder0.readString(24, true);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.origin, 8, false);
            
            encoder0.encode(this.isolationInfo, 16, false);
            
            encoder0.encode(this.headerValue, 24, true);
        }
    }



    
    static final class OriginPolicyManagerRetrieveOriginPolicyResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public OriginPolicy originPolicy;

        private OriginPolicyManagerRetrieveOriginPolicyResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public OriginPolicyManagerRetrieveOriginPolicyResponseParams() {
            this(0);
        }

        public static OriginPolicyManagerRetrieveOriginPolicyResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static OriginPolicyManagerRetrieveOriginPolicyResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static OriginPolicyManagerRetrieveOriginPolicyResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            OriginPolicyManagerRetrieveOriginPolicyResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new OriginPolicyManagerRetrieveOriginPolicyResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.originPolicy = OriginPolicy.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.originPolicy, 8, false);
        }
    }

    static class OriginPolicyManagerRetrieveOriginPolicyResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final OriginPolicyManager.RetrieveOriginPolicyResponse mCallback;

        OriginPolicyManagerRetrieveOriginPolicyResponseParamsForwardToCallback(OriginPolicyManager.RetrieveOriginPolicyResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(RETRIEVE_ORIGIN_POLICY_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                OriginPolicyManagerRetrieveOriginPolicyResponseParams response = OriginPolicyManagerRetrieveOriginPolicyResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.originPolicy);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class OriginPolicyManagerRetrieveOriginPolicyResponseParamsProxyToResponder implements OriginPolicyManager.RetrieveOriginPolicyResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        OriginPolicyManagerRetrieveOriginPolicyResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(OriginPolicy originPolicy) {
            OriginPolicyManagerRetrieveOriginPolicyResponseParams _response = new OriginPolicyManagerRetrieveOriginPolicyResponseParams();

            _response.originPolicy = originPolicy;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RETRIEVE_ORIGIN_POLICY_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class OriginPolicyManagerAddExceptionForParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.internal.mojom.Origin origin;

        private OriginPolicyManagerAddExceptionForParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public OriginPolicyManagerAddExceptionForParams() {
            this(0);
        }

        public static OriginPolicyManagerAddExceptionForParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static OriginPolicyManagerAddExceptionForParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static OriginPolicyManagerAddExceptionForParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            OriginPolicyManagerAddExceptionForParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new OriginPolicyManagerAddExceptionForParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.origin = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.origin, 8, false);
        }
    }



}
