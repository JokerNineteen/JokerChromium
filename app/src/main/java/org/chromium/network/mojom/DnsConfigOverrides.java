// DnsConfigOverrides.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/host_resolver.mojom
//

package org.chromium.network.mojom;


public final class DnsConfigOverrides extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 80;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(80, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

    public static final class Tristate {
        private static final boolean IS_EXTENSIBLE = false;

        public static final int NO_OVERRIDE = 0;
        public static final int TRISTATE_TRUE = 1;
        public static final int TRISTATE_FALSE = 2;
        public static final int MIN_VALUE = 0;
        public static final int MAX_VALUE = 2;

        public static boolean isKnownValue(int value) {
            return value >= 0 && value <= 2;
        }

        public static void validate(int value) {
            if (IS_EXTENSIBLE || isKnownValue(value)) return;
            throw new org.chromium.mojo.bindings.DeserializationException("Invalid enum value.");
        }

        private Tristate() {}
    }
    public IpEndPoint[] nameservers;
    public String[] search;
    public int appendToMultiLabelName;
    public byte ndots;
    public org.chromium.mojo_base.mojom.TimeDelta fallbackPeriod;
    public int attempts;
    public int rotate;
    public int useLocalIpv6;
    public DnsOverHttpsServer[] dnsOverHttpsServers;
    public int secureDnsMode;
    public int allowDnsOverHttpsUpgrade;
    public String[] disabledUpgradeProviders;
    public boolean clearHosts;

    private DnsConfigOverrides(int version) {
        super(STRUCT_SIZE, version);
        this.appendToMultiLabelName = (int) DnsConfigOverrides.Tristate.NO_OVERRIDE;
        this.ndots = (byte) -1;
        this.attempts = (int) -1;
        this.rotate = (int) DnsConfigOverrides.Tristate.NO_OVERRIDE;
        this.useLocalIpv6 = (int) DnsConfigOverrides.Tristate.NO_OVERRIDE;
        this.secureDnsMode = (int) OptionalSecureDnsMode.NO_OVERRIDE;
        this.allowDnsOverHttpsUpgrade = (int) DnsConfigOverrides.Tristate.NO_OVERRIDE;
        this.clearHosts = (boolean) false;
    }

    public DnsConfigOverrides() {
        this(0);
    }

    public static DnsConfigOverrides deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static DnsConfigOverrides deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static DnsConfigOverrides decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        DnsConfigOverrides result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new DnsConfigOverrides(elementsOrVersion);
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                if (decoder1 == null) {
                    result.nameservers = null;
                } else {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.nameservers = new IpEndPoint[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.nameservers[i1] = IpEndPoint.decode(decoder2);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                if (decoder1 == null) {
                    result.search = null;
                } else {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.search = new String[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        result.search[i1] = decoder1.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                    }
                }
                }
                {
                    
                result.appendToMultiLabelName = decoder0.readInt(24);
                    DnsConfigOverrides.Tristate.validate(result.appendToMultiLabelName);
                }
                {
                    
                result.ndots = decoder0.readByte(28);
                }
                {
                    
                result.clearHosts = decoder0.readBoolean(29, 0);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, true);
                result.fallbackPeriod = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
                }
                {
                    
                result.attempts = decoder0.readInt(40);
                }
                {
                    
                result.rotate = decoder0.readInt(44);
                    DnsConfigOverrides.Tristate.validate(result.rotate);
                }
                {
                    
                result.useLocalIpv6 = decoder0.readInt(48);
                    DnsConfigOverrides.Tristate.validate(result.useLocalIpv6);
                }
                {
                    
                result.secureDnsMode = decoder0.readInt(52);
                    OptionalSecureDnsMode.validate(result.secureDnsMode);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(56, true);
                if (decoder1 == null) {
                    result.dnsOverHttpsServers = null;
                } else {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.dnsOverHttpsServers = new DnsOverHttpsServer[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.dnsOverHttpsServers[i1] = DnsOverHttpsServer.decode(decoder2);
                    }
                }
                }
                {
                    
                result.allowDnsOverHttpsUpgrade = decoder0.readInt(64);
                    DnsConfigOverrides.Tristate.validate(result.allowDnsOverHttpsUpgrade);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(72, true);
                if (decoder1 == null) {
                    result.disabledUpgradeProviders = null;
                } else {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.disabledUpgradeProviders = new String[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        result.disabledUpgradeProviders[i1] = decoder1.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                    }
                }
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        if (this.nameservers == null) {
            encoder0.encodeNullPointer(8, true);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.nameservers.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.nameservers.length; ++i0) {
                
                encoder1.encode(this.nameservers[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        if (this.search == null) {
            encoder0.encodeNullPointer(16, true);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.search.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.search.length; ++i0) {
                
                encoder1.encode(this.search[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.appendToMultiLabelName, 24);
        
        encoder0.encode(this.ndots, 28);
        
        encoder0.encode(this.clearHosts, 29, 0);
        
        encoder0.encode(this.fallbackPeriod, 32, true);
        
        encoder0.encode(this.attempts, 40);
        
        encoder0.encode(this.rotate, 44);
        
        encoder0.encode(this.useLocalIpv6, 48);
        
        encoder0.encode(this.secureDnsMode, 52);
        
        if (this.dnsOverHttpsServers == null) {
            encoder0.encodeNullPointer(56, true);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.dnsOverHttpsServers.length, 56, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.dnsOverHttpsServers.length; ++i0) {
                
                encoder1.encode(this.dnsOverHttpsServers[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.allowDnsOverHttpsUpgrade, 64);
        
        if (this.disabledUpgradeProviders == null) {
            encoder0.encodeNullPointer(72, true);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.disabledUpgradeProviders.length, 72, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.disabledUpgradeProviders.length; ++i0) {
                
                encoder1.encode(this.disabledUpgradeProviders[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
    }
}