// QuicTransport_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/quic_transport.mojom
//

package org.chromium.network.mojom;


class QuicTransport_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<QuicTransport, QuicTransport.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<QuicTransport, QuicTransport.Proxy>() {

        @Override
        public String getName() {
            return "network.mojom.QuicTransport";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, QuicTransport impl) {
            return new Stub(core, impl);
        }

        @Override
        public QuicTransport[] buildArray(int size) {
          return new QuicTransport[size];
        }
    };


    private static final int SEND_DATAGRAM_ORDINAL = 0;

    private static final int CREATE_STREAM_ORDINAL = 1;

    private static final int ACCEPT_BIDIRECTIONAL_STREAM_ORDINAL = 2;

    private static final int ACCEPT_UNIDIRECTIONAL_STREAM_ORDINAL = 3;

    private static final int SEND_FIN_ORDINAL = 4;

    private static final int ABORT_STREAM_ORDINAL = 5;

    private static final int SET_OUTGOING_DATAGRAM_EXPIRATION_DURATION_ORDINAL = 6;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements QuicTransport.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void sendDatagram(
org.chromium.mojo_base.mojom.ReadOnlyBuffer data, 
SendDatagramResponse callback) {

            QuicTransportSendDatagramParams _message = new QuicTransportSendDatagramParams();

            _message.data = data;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SEND_DATAGRAM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new QuicTransportSendDatagramResponseParamsForwardToCallback(callback));

        }


        @Override
        public void createStream(
org.chromium.mojo.system.DataPipe.ConsumerHandle readable, org.chromium.mojo.system.DataPipe.ProducerHandle writable, 
CreateStreamResponse callback) {

            QuicTransportCreateStreamParams _message = new QuicTransportCreateStreamParams();

            _message.readable = readable;

            _message.writable = writable;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CREATE_STREAM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new QuicTransportCreateStreamResponseParamsForwardToCallback(callback));

        }


        @Override
        public void acceptBidirectionalStream(

AcceptBidirectionalStreamResponse callback) {

            QuicTransportAcceptBidirectionalStreamParams _message = new QuicTransportAcceptBidirectionalStreamParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ACCEPT_BIDIRECTIONAL_STREAM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new QuicTransportAcceptBidirectionalStreamResponseParamsForwardToCallback(callback));

        }


        @Override
        public void acceptUnidirectionalStream(

AcceptUnidirectionalStreamResponse callback) {

            QuicTransportAcceptUnidirectionalStreamParams _message = new QuicTransportAcceptUnidirectionalStreamParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ACCEPT_UNIDIRECTIONAL_STREAM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new QuicTransportAcceptUnidirectionalStreamResponseParamsForwardToCallback(callback));

        }


        @Override
        public void sendFin(
int streamId) {

            QuicTransportSendFinParams _message = new QuicTransportSendFinParams();

            _message.streamId = streamId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SEND_FIN_ORDINAL)));

        }


        @Override
        public void abortStream(
int streamId, long code) {

            QuicTransportAbortStreamParams _message = new QuicTransportAbortStreamParams();

            _message.streamId = streamId;

            _message.code = code;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ABORT_STREAM_ORDINAL)));

        }


        @Override
        public void setOutgoingDatagramExpirationDuration(
org.chromium.mojo_base.mojom.TimeDelta duration) {

            QuicTransportSetOutgoingDatagramExpirationDurationParams _message = new QuicTransportSetOutgoingDatagramExpirationDurationParams();

            _message.duration = duration;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_OUTGOING_DATAGRAM_EXPIRATION_DURATION_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<QuicTransport> {

        Stub(org.chromium.mojo.system.Core core, QuicTransport impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                QuicTransport_Internal.MANAGER, messageWithHeader);













                    case SEND_FIN_ORDINAL: {

                        QuicTransportSendFinParams data =
                                QuicTransportSendFinParams.deserialize(messageWithHeader.getPayload());

                        getImpl().sendFin(data.streamId);
                        return true;
                    }





                    case ABORT_STREAM_ORDINAL: {

                        QuicTransportAbortStreamParams data =
                                QuicTransportAbortStreamParams.deserialize(messageWithHeader.getPayload());

                        getImpl().abortStream(data.streamId, data.code);
                        return true;
                    }





                    case SET_OUTGOING_DATAGRAM_EXPIRATION_DURATION_ORDINAL: {

                        QuicTransportSetOutgoingDatagramExpirationDurationParams data =
                                QuicTransportSetOutgoingDatagramExpirationDurationParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setOutgoingDatagramExpirationDuration(data.duration);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), QuicTransport_Internal.MANAGER, messageWithHeader, receiver);







                    case SEND_DATAGRAM_ORDINAL: {

                        QuicTransportSendDatagramParams data =
                                QuicTransportSendDatagramParams.deserialize(messageWithHeader.getPayload());

                        getImpl().sendDatagram(data.data, new QuicTransportSendDatagramResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case CREATE_STREAM_ORDINAL: {

                        QuicTransportCreateStreamParams data =
                                QuicTransportCreateStreamParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createStream(data.readable, data.writable, new QuicTransportCreateStreamResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case ACCEPT_BIDIRECTIONAL_STREAM_ORDINAL: {

                        QuicTransportAcceptBidirectionalStreamParams.deserialize(messageWithHeader.getPayload());

                        getImpl().acceptBidirectionalStream(new QuicTransportAcceptBidirectionalStreamResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case ACCEPT_UNIDIRECTIONAL_STREAM_ORDINAL: {

                        QuicTransportAcceptUnidirectionalStreamParams.deserialize(messageWithHeader.getPayload());

                        getImpl().acceptUnidirectionalStream(new QuicTransportAcceptUnidirectionalStreamResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }








                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class QuicTransportSendDatagramParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.ReadOnlyBuffer data;

        private QuicTransportSendDatagramParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public QuicTransportSendDatagramParams() {
            this(0);
        }

        public static QuicTransportSendDatagramParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static QuicTransportSendDatagramParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static QuicTransportSendDatagramParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            QuicTransportSendDatagramParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new QuicTransportSendDatagramParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.data = org.chromium.mojo_base.mojom.ReadOnlyBuffer.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.data, 8, false);
        }
    }



    
    static final class QuicTransportSendDatagramResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean result;

        private QuicTransportSendDatagramResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public QuicTransportSendDatagramResponseParams() {
            this(0);
        }

        public static QuicTransportSendDatagramResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static QuicTransportSendDatagramResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static QuicTransportSendDatagramResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            QuicTransportSendDatagramResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new QuicTransportSendDatagramResponseParams(elementsOrVersion);
                    {
                        
                    result.result = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8, 0);
        }
    }

    static class QuicTransportSendDatagramResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final QuicTransport.SendDatagramResponse mCallback;

        QuicTransportSendDatagramResponseParamsForwardToCallback(QuicTransport.SendDatagramResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(SEND_DATAGRAM_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                QuicTransportSendDatagramResponseParams response = QuicTransportSendDatagramResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class QuicTransportSendDatagramResponseParamsProxyToResponder implements QuicTransport.SendDatagramResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        QuicTransportSendDatagramResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean result) {
            QuicTransportSendDatagramResponseParams _response = new QuicTransportSendDatagramResponseParams();

            _response.result = result;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SEND_DATAGRAM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class QuicTransportCreateStreamParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.system.DataPipe.ConsumerHandle readable;
        public org.chromium.mojo.system.DataPipe.ProducerHandle writable;

        private QuicTransportCreateStreamParams(int version) {
            super(STRUCT_SIZE, version);
            this.readable = org.chromium.mojo.system.InvalidHandle.INSTANCE;
            this.writable = org.chromium.mojo.system.InvalidHandle.INSTANCE;
        }

        public QuicTransportCreateStreamParams() {
            this(0);
        }

        public static QuicTransportCreateStreamParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static QuicTransportCreateStreamParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static QuicTransportCreateStreamParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            QuicTransportCreateStreamParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new QuicTransportCreateStreamParams(elementsOrVersion);
                    {
                        
                    result.readable = decoder0.readConsumerHandle(8, false);
                    }
                    {
                        
                    result.writable = decoder0.readProducerHandle(12, true);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.readable, 8, false);
            
            encoder0.encode(this.writable, 12, true);
        }
    }



    
    static final class QuicTransportCreateStreamResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean succeeded;
        public int streamId;

        private QuicTransportCreateStreamResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public QuicTransportCreateStreamResponseParams() {
            this(0);
        }

        public static QuicTransportCreateStreamResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static QuicTransportCreateStreamResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static QuicTransportCreateStreamResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            QuicTransportCreateStreamResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new QuicTransportCreateStreamResponseParams(elementsOrVersion);
                    {
                        
                    result.succeeded = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.streamId = decoder0.readInt(12);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.succeeded, 8, 0);
            
            encoder0.encode(this.streamId, 12);
        }
    }

    static class QuicTransportCreateStreamResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final QuicTransport.CreateStreamResponse mCallback;

        QuicTransportCreateStreamResponseParamsForwardToCallback(QuicTransport.CreateStreamResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CREATE_STREAM_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                QuicTransportCreateStreamResponseParams response = QuicTransportCreateStreamResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.succeeded, response.streamId);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class QuicTransportCreateStreamResponseParamsProxyToResponder implements QuicTransport.CreateStreamResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        QuicTransportCreateStreamResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean succeeded, Integer streamId) {
            QuicTransportCreateStreamResponseParams _response = new QuicTransportCreateStreamResponseParams();

            _response.succeeded = succeeded;

            _response.streamId = streamId;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CREATE_STREAM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class QuicTransportAcceptBidirectionalStreamParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private QuicTransportAcceptBidirectionalStreamParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public QuicTransportAcceptBidirectionalStreamParams() {
            this(0);
        }

        public static QuicTransportAcceptBidirectionalStreamParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static QuicTransportAcceptBidirectionalStreamParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static QuicTransportAcceptBidirectionalStreamParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            QuicTransportAcceptBidirectionalStreamParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new QuicTransportAcceptBidirectionalStreamParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class QuicTransportAcceptBidirectionalStreamResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int streamId;
        public org.chromium.mojo.system.DataPipe.ConsumerHandle readable;
        public org.chromium.mojo.system.DataPipe.ProducerHandle writable;

        private QuicTransportAcceptBidirectionalStreamResponseParams(int version) {
            super(STRUCT_SIZE, version);
            this.readable = org.chromium.mojo.system.InvalidHandle.INSTANCE;
            this.writable = org.chromium.mojo.system.InvalidHandle.INSTANCE;
        }

        public QuicTransportAcceptBidirectionalStreamResponseParams() {
            this(0);
        }

        public static QuicTransportAcceptBidirectionalStreamResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static QuicTransportAcceptBidirectionalStreamResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static QuicTransportAcceptBidirectionalStreamResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            QuicTransportAcceptBidirectionalStreamResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new QuicTransportAcceptBidirectionalStreamResponseParams(elementsOrVersion);
                    {
                        
                    result.streamId = decoder0.readInt(8);
                    }
                    {
                        
                    result.readable = decoder0.readConsumerHandle(12, false);
                    }
                    {
                        
                    result.writable = decoder0.readProducerHandle(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.streamId, 8);
            
            encoder0.encode(this.readable, 12, false);
            
            encoder0.encode(this.writable, 16, false);
        }
    }

    static class QuicTransportAcceptBidirectionalStreamResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final QuicTransport.AcceptBidirectionalStreamResponse mCallback;

        QuicTransportAcceptBidirectionalStreamResponseParamsForwardToCallback(QuicTransport.AcceptBidirectionalStreamResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ACCEPT_BIDIRECTIONAL_STREAM_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                QuicTransportAcceptBidirectionalStreamResponseParams response = QuicTransportAcceptBidirectionalStreamResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.streamId, response.readable, response.writable);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class QuicTransportAcceptBidirectionalStreamResponseParamsProxyToResponder implements QuicTransport.AcceptBidirectionalStreamResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        QuicTransportAcceptBidirectionalStreamResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer streamId, org.chromium.mojo.system.DataPipe.ConsumerHandle readable, org.chromium.mojo.system.DataPipe.ProducerHandle writable) {
            QuicTransportAcceptBidirectionalStreamResponseParams _response = new QuicTransportAcceptBidirectionalStreamResponseParams();

            _response.streamId = streamId;

            _response.readable = readable;

            _response.writable = writable;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ACCEPT_BIDIRECTIONAL_STREAM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class QuicTransportAcceptUnidirectionalStreamParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private QuicTransportAcceptUnidirectionalStreamParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public QuicTransportAcceptUnidirectionalStreamParams() {
            this(0);
        }

        public static QuicTransportAcceptUnidirectionalStreamParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static QuicTransportAcceptUnidirectionalStreamParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static QuicTransportAcceptUnidirectionalStreamParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            QuicTransportAcceptUnidirectionalStreamParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new QuicTransportAcceptUnidirectionalStreamParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class QuicTransportAcceptUnidirectionalStreamResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int streamId;
        public org.chromium.mojo.system.DataPipe.ConsumerHandle readable;

        private QuicTransportAcceptUnidirectionalStreamResponseParams(int version) {
            super(STRUCT_SIZE, version);
            this.readable = org.chromium.mojo.system.InvalidHandle.INSTANCE;
        }

        public QuicTransportAcceptUnidirectionalStreamResponseParams() {
            this(0);
        }

        public static QuicTransportAcceptUnidirectionalStreamResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static QuicTransportAcceptUnidirectionalStreamResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static QuicTransportAcceptUnidirectionalStreamResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            QuicTransportAcceptUnidirectionalStreamResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new QuicTransportAcceptUnidirectionalStreamResponseParams(elementsOrVersion);
                    {
                        
                    result.streamId = decoder0.readInt(8);
                    }
                    {
                        
                    result.readable = decoder0.readConsumerHandle(12, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.streamId, 8);
            
            encoder0.encode(this.readable, 12, false);
        }
    }

    static class QuicTransportAcceptUnidirectionalStreamResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final QuicTransport.AcceptUnidirectionalStreamResponse mCallback;

        QuicTransportAcceptUnidirectionalStreamResponseParamsForwardToCallback(QuicTransport.AcceptUnidirectionalStreamResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ACCEPT_UNIDIRECTIONAL_STREAM_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                QuicTransportAcceptUnidirectionalStreamResponseParams response = QuicTransportAcceptUnidirectionalStreamResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.streamId, response.readable);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class QuicTransportAcceptUnidirectionalStreamResponseParamsProxyToResponder implements QuicTransport.AcceptUnidirectionalStreamResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        QuicTransportAcceptUnidirectionalStreamResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer streamId, org.chromium.mojo.system.DataPipe.ConsumerHandle readable) {
            QuicTransportAcceptUnidirectionalStreamResponseParams _response = new QuicTransportAcceptUnidirectionalStreamResponseParams();

            _response.streamId = streamId;

            _response.readable = readable;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ACCEPT_UNIDIRECTIONAL_STREAM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class QuicTransportSendFinParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int streamId;

        private QuicTransportSendFinParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public QuicTransportSendFinParams() {
            this(0);
        }

        public static QuicTransportSendFinParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static QuicTransportSendFinParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static QuicTransportSendFinParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            QuicTransportSendFinParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new QuicTransportSendFinParams(elementsOrVersion);
                    {
                        
                    result.streamId = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.streamId, 8);
        }
    }



    
    static final class QuicTransportAbortStreamParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int streamId;
        public long code;

        private QuicTransportAbortStreamParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public QuicTransportAbortStreamParams() {
            this(0);
        }

        public static QuicTransportAbortStreamParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static QuicTransportAbortStreamParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static QuicTransportAbortStreamParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            QuicTransportAbortStreamParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new QuicTransportAbortStreamParams(elementsOrVersion);
                    {
                        
                    result.streamId = decoder0.readInt(8);
                    }
                    {
                        
                    result.code = decoder0.readLong(16);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.streamId, 8);
            
            encoder0.encode(this.code, 16);
        }
    }



    
    static final class QuicTransportSetOutgoingDatagramExpirationDurationParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.TimeDelta duration;

        private QuicTransportSetOutgoingDatagramExpirationDurationParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public QuicTransportSetOutgoingDatagramExpirationDurationParams() {
            this(0);
        }

        public static QuicTransportSetOutgoingDatagramExpirationDurationParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static QuicTransportSetOutgoingDatagramExpirationDurationParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static QuicTransportSetOutgoingDatagramExpirationDurationParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            QuicTransportSetOutgoingDatagramExpirationDurationParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new QuicTransportSetOutgoingDatagramExpirationDurationParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.duration = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.duration, 8, false);
        }
    }



}
