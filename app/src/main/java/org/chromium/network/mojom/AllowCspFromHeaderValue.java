// AllowCspFromHeaderValue.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/content_security_policy.mojom
//

package org.chromium.network.mojom;


public final class AllowCspFromHeaderValue extends org.chromium.mojo.bindings.Union {

    public static final class Tag {
        public static final int AllowStar = 0;
        public static final int Origin = 1;
        public static final int ErrorMessage = 2;
    };
    private boolean mAllowStar;
    private org.chromium.url.internal.mojom.Origin mOrigin;
    private String mErrorMessage;

    public void setAllowStar(boolean allowStar) {
        this.mTag = Tag.AllowStar;
        this.mAllowStar = allowStar;
    }

    public boolean getAllowStar() {
        assert this.mTag == Tag.AllowStar;
        return this.mAllowStar;
    }

    public void setOrigin(org.chromium.url.internal.mojom.Origin origin) {
        this.mTag = Tag.Origin;
        this.mOrigin = origin;
    }

    public org.chromium.url.internal.mojom.Origin getOrigin() {
        assert this.mTag == Tag.Origin;
        return this.mOrigin;
    }

    public void setErrorMessage(String errorMessage) {
        this.mTag = Tag.ErrorMessage;
        this.mErrorMessage = errorMessage;
    }

    public String getErrorMessage() {
        assert this.mTag == Tag.ErrorMessage;
        return this.mErrorMessage;
    }


    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder0, int offset) {
        encoder0.encode(org.chromium.mojo.bindings.BindingsHelper.UNION_SIZE, offset);
        encoder0.encode(this.mTag, offset + 4);
        switch (mTag) {
            case Tag.AllowStar: {
                
                encoder0.encode(this.mAllowStar, offset + 8, 0);
                break;
            }
            case Tag.Origin: {
                
                encoder0.encode(this.mOrigin, offset + 8, false);
                break;
            }
            case Tag.ErrorMessage: {
                
                encoder0.encode(this.mErrorMessage, offset + 8, false);
                break;
            }
            default: {
                break;
            }
        }
    }

    public static AllowCspFromHeaderValue deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message).decoderForSerializedUnion(), 0);
    }

    public static final AllowCspFromHeaderValue decode(org.chromium.mojo.bindings.Decoder decoder0, int offset) {
        org.chromium.mojo.bindings.DataHeader dataHeader = decoder0.readDataHeaderForUnion(offset);
        if (dataHeader.size == 0) {
            return null;
        }
        AllowCspFromHeaderValue result = new AllowCspFromHeaderValue();
        switch (dataHeader.elementsOrVersion) {
            case Tag.AllowStar: {
                
                result.mAllowStar = decoder0.readBoolean(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, 0);
                result.mTag = Tag.AllowStar;
                break;
            }
            case Tag.Origin: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mOrigin = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                result.mTag = Tag.Origin;
                break;
            }
            case Tag.ErrorMessage: {
                
                result.mErrorMessage = decoder0.readString(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mTag = Tag.ErrorMessage;
                break;
            }
            default: {
                break;
            }
        }
        return result;
    }
}