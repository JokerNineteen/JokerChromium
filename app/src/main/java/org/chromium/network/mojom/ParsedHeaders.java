// ParsedHeaders.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/parsed_headers.mojom
//

package org.chromium.network.mojom;


public final class ParsedHeaders extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 80;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(80, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public ContentSecurityPolicy[] contentSecurityPolicy;
    public AllowCspFromHeaderValue allowCspFrom;
    public CrossOriginEmbedderPolicy crossOriginEmbedderPolicy;
    public CrossOriginOpenerPolicy crossOriginOpenerPolicy;
    public boolean originAgentCluster;
    public int[] acceptCh;
    public org.chromium.mojo_base.mojom.TimeDelta acceptChLifetime;
    public int[] criticalCh;
    public int xfo;

    private ParsedHeaders(int version) {
        super(STRUCT_SIZE, version);
        this.originAgentCluster = (boolean) false;
        this.xfo = (int) XFrameOptionsValue.NONE;
    }

    public ParsedHeaders() {
        this(0);
    }

    public static ParsedHeaders deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static ParsedHeaders deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static ParsedHeaders decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        ParsedHeaders result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new ParsedHeaders(elementsOrVersion);
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.contentSecurityPolicy = new ContentSecurityPolicy[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.contentSecurityPolicy[i1] = ContentSecurityPolicy.decode(decoder2);
                    }
                }
                }
                {
                    
                result.allowCspFrom = AllowCspFromHeaderValue.decode(decoder0, 16);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                result.crossOriginEmbedderPolicy = CrossOriginEmbedderPolicy.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                result.crossOriginOpenerPolicy = CrossOriginOpenerPolicy.decode(decoder1);
                }
                {
                    
                result.originAgentCluster = decoder0.readBoolean(48, 0);
                }
                {
                    
                result.xfo = decoder0.readInt(52);
                    XFrameOptionsValue.validate(result.xfo);
                    result.xfo = XFrameOptionsValue.toKnownValue(result.xfo);
                }
                {
                    
                result.acceptCh = decoder0.readInts(56, org.chromium.mojo.bindings.BindingsHelper.ARRAY_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                if (result.acceptCh != null) {
                    for (int i1 = 0; i1 < result.acceptCh.length; ++i1) {
                        WebClientHintsType.validate(result.acceptCh[i1]);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, false);
                result.acceptChLifetime = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
                }
                {
                    
                result.criticalCh = decoder0.readInts(72, org.chromium.mojo.bindings.BindingsHelper.ARRAY_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                if (result.criticalCh != null) {
                    for (int i1 = 0; i1 < result.criticalCh.length; ++i1) {
                        WebClientHintsType.validate(result.criticalCh[i1]);
                    }
                }
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        if (this.contentSecurityPolicy == null) {
            encoder0.encodeNullPointer(8, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.contentSecurityPolicy.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.contentSecurityPolicy.length; ++i0) {
                
                encoder1.encode(this.contentSecurityPolicy[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.allowCspFrom, 16, true);
        
        encoder0.encode(this.crossOriginEmbedderPolicy, 32, false);
        
        encoder0.encode(this.crossOriginOpenerPolicy, 40, false);
        
        encoder0.encode(this.originAgentCluster, 48, 0);
        
        encoder0.encode(this.xfo, 52);
        
        encoder0.encode(this.acceptCh, 56, org.chromium.mojo.bindings.BindingsHelper.ARRAY_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        
        encoder0.encode(this.acceptChLifetime, 64, false);
        
        encoder0.encode(this.criticalCh, 72, org.chromium.mojo.bindings.BindingsHelper.ARRAY_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
    }
}