// NetworkContextClient_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/network_context.mojom
//

package org.chromium.network.mojom;


class NetworkContextClient_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<NetworkContextClient, NetworkContextClient.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<NetworkContextClient, NetworkContextClient.Proxy>() {

        @Override
        public String getName() {
            return "network.mojom.NetworkContextClient";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, NetworkContextClient impl) {
            return new Stub(core, impl);
        }

        @Override
        public NetworkContextClient[] buildArray(int size) {
          return new NetworkContextClient[size];
        }
    };


    private static final int ON_AUTH_REQUIRED_ORDINAL = 0;

    private static final int ON_CERTIFICATE_REQUESTED_ORDINAL = 1;

    private static final int ON_SSL_CERTIFICATE_ERROR_ORDINAL = 2;

    private static final int ON_FILE_UPLOAD_REQUESTED_ORDINAL = 3;

    private static final int ON_CAN_SEND_REPORTING_REPORTS_ORDINAL = 4;

    private static final int ON_CAN_SEND_DOMAIN_RELIABILITY_UPLOAD_ORDINAL = 5;

    private static final int ON_CLEAR_SITE_DATA_ORDINAL = 6;

    private static final int ON_GENERATE_HTTP_NEGOTIATE_AUTH_TOKEN_ORDINAL = 7;

    private static final int ON_TRUST_TOKEN_ISSUANCE_DIVERTED_TO_SYSTEM_ORDINAL = 8;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements NetworkContextClient.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void onAuthRequired(
org.chromium.mojo_base.mojom.UnguessableToken windowId, int processId, int routingId, int requestId, org.chromium.url.mojom.Url url, boolean firstAuthAttempt, AuthChallengeInfo authInfo, UrlResponseHead head, AuthChallengeResponder authChallengeResponder) {

            NetworkContextClientOnAuthRequiredParams _message = new NetworkContextClientOnAuthRequiredParams();

            _message.windowId = windowId;

            _message.processId = processId;

            _message.routingId = routingId;

            _message.requestId = requestId;

            _message.url = url;

            _message.firstAuthAttempt = firstAuthAttempt;

            _message.authInfo = authInfo;

            _message.head = head;

            _message.authChallengeResponder = authChallengeResponder;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_AUTH_REQUIRED_ORDINAL)));

        }


        @Override
        public void onCertificateRequested(
org.chromium.mojo_base.mojom.UnguessableToken windowId, int processId, int routingId, int requestId, SslCertRequestInfo certInfo, ClientCertificateResponder certResponder) {

            NetworkContextClientOnCertificateRequestedParams _message = new NetworkContextClientOnCertificateRequestedParams();

            _message.windowId = windowId;

            _message.processId = processId;

            _message.routingId = routingId;

            _message.requestId = requestId;

            _message.certInfo = certInfo;

            _message.certResponder = certResponder;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_CERTIFICATE_REQUESTED_ORDINAL)));

        }


        @Override
        public void onSslCertificateError(
int processId, int routingId, org.chromium.url.mojom.Url url, int netError, SslInfo sslInfo, boolean fatal, 
OnSslCertificateErrorResponse callback) {

            NetworkContextClientOnSslCertificateErrorParams _message = new NetworkContextClientOnSslCertificateErrorParams();

            _message.processId = processId;

            _message.routingId = routingId;

            _message.url = url;

            _message.netError = netError;

            _message.sslInfo = sslInfo;

            _message.fatal = fatal;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_SSL_CERTIFICATE_ERROR_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NetworkContextClientOnSslCertificateErrorResponseParamsForwardToCallback(callback));

        }


        @Override
        public void onFileUploadRequested(
int processId, boolean async, org.chromium.mojo_base.mojom.FilePath[] filePaths, 
OnFileUploadRequestedResponse callback) {

            NetworkContextClientOnFileUploadRequestedParams _message = new NetworkContextClientOnFileUploadRequestedParams();

            _message.processId = processId;

            _message.async = async;

            _message.filePaths = filePaths;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_FILE_UPLOAD_REQUESTED_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NetworkContextClientOnFileUploadRequestedResponseParamsForwardToCallback(callback));

        }


        @Override
        public void onCanSendReportingReports(
org.chromium.url.internal.mojom.Origin[] origins, 
OnCanSendReportingReportsResponse callback) {

            NetworkContextClientOnCanSendReportingReportsParams _message = new NetworkContextClientOnCanSendReportingReportsParams();

            _message.origins = origins;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_CAN_SEND_REPORTING_REPORTS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NetworkContextClientOnCanSendReportingReportsResponseParamsForwardToCallback(callback));

        }


        @Override
        public void onCanSendDomainReliabilityUpload(
org.chromium.url.mojom.Url origin, 
OnCanSendDomainReliabilityUploadResponse callback) {

            NetworkContextClientOnCanSendDomainReliabilityUploadParams _message = new NetworkContextClientOnCanSendDomainReliabilityUploadParams();

            _message.origin = origin;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_CAN_SEND_DOMAIN_RELIABILITY_UPLOAD_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NetworkContextClientOnCanSendDomainReliabilityUploadResponseParamsForwardToCallback(callback));

        }


        @Override
        public void onClearSiteData(
int processId, int routingId, org.chromium.url.mojom.Url url, String headerValue, int loadFlags, 
OnClearSiteDataResponse callback) {

            NetworkContextClientOnClearSiteDataParams _message = new NetworkContextClientOnClearSiteDataParams();

            _message.processId = processId;

            _message.routingId = routingId;

            _message.url = url;

            _message.headerValue = headerValue;

            _message.loadFlags = loadFlags;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_CLEAR_SITE_DATA_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NetworkContextClientOnClearSiteDataResponseParamsForwardToCallback(callback));

        }


        @Override
        public void onGenerateHttpNegotiateAuthToken(
String serverAuthToken, boolean canDelegate, String authNegotiateAndroidAccountType, String spn, 
OnGenerateHttpNegotiateAuthTokenResponse callback) {

            NetworkContextClientOnGenerateHttpNegotiateAuthTokenParams _message = new NetworkContextClientOnGenerateHttpNegotiateAuthTokenParams();

            _message.serverAuthToken = serverAuthToken;

            _message.canDelegate = canDelegate;

            _message.authNegotiateAndroidAccountType = authNegotiateAndroidAccountType;

            _message.spn = spn;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_GENERATE_HTTP_NEGOTIATE_AUTH_TOKEN_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParamsForwardToCallback(callback));

        }


        @Override
        public void onTrustTokenIssuanceDivertedToSystem(
FulfillTrustTokenIssuanceRequest request, 
OnTrustTokenIssuanceDivertedToSystemResponse callback) {

            NetworkContextClientOnTrustTokenIssuanceDivertedToSystemParams _message = new NetworkContextClientOnTrustTokenIssuanceDivertedToSystemParams();

            _message.request = request;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_TRUST_TOKEN_ISSUANCE_DIVERTED_TO_SYSTEM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<NetworkContextClient> {

        Stub(org.chromium.mojo.system.Core core, NetworkContextClient impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                NetworkContextClient_Internal.MANAGER, messageWithHeader);





                    case ON_AUTH_REQUIRED_ORDINAL: {

                        NetworkContextClientOnAuthRequiredParams data =
                                NetworkContextClientOnAuthRequiredParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onAuthRequired(data.windowId, data.processId, data.routingId, data.requestId, data.url, data.firstAuthAttempt, data.authInfo, data.head, data.authChallengeResponder);
                        return true;
                    }





                    case ON_CERTIFICATE_REQUESTED_ORDINAL: {

                        NetworkContextClientOnCertificateRequestedParams data =
                                NetworkContextClientOnCertificateRequestedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onCertificateRequested(data.windowId, data.processId, data.routingId, data.requestId, data.certInfo, data.certResponder);
                        return true;
                    }
















                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), NetworkContextClient_Internal.MANAGER, messageWithHeader, receiver);











                    case ON_SSL_CERTIFICATE_ERROR_ORDINAL: {

                        NetworkContextClientOnSslCertificateErrorParams data =
                                NetworkContextClientOnSslCertificateErrorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onSslCertificateError(data.processId, data.routingId, data.url, data.netError, data.sslInfo, data.fatal, new NetworkContextClientOnSslCertificateErrorResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case ON_FILE_UPLOAD_REQUESTED_ORDINAL: {

                        NetworkContextClientOnFileUploadRequestedParams data =
                                NetworkContextClientOnFileUploadRequestedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onFileUploadRequested(data.processId, data.async, data.filePaths, new NetworkContextClientOnFileUploadRequestedResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case ON_CAN_SEND_REPORTING_REPORTS_ORDINAL: {

                        NetworkContextClientOnCanSendReportingReportsParams data =
                                NetworkContextClientOnCanSendReportingReportsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onCanSendReportingReports(data.origins, new NetworkContextClientOnCanSendReportingReportsResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case ON_CAN_SEND_DOMAIN_RELIABILITY_UPLOAD_ORDINAL: {

                        NetworkContextClientOnCanSendDomainReliabilityUploadParams data =
                                NetworkContextClientOnCanSendDomainReliabilityUploadParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onCanSendDomainReliabilityUpload(data.origin, new NetworkContextClientOnCanSendDomainReliabilityUploadResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case ON_CLEAR_SITE_DATA_ORDINAL: {

                        NetworkContextClientOnClearSiteDataParams data =
                                NetworkContextClientOnClearSiteDataParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onClearSiteData(data.processId, data.routingId, data.url, data.headerValue, data.loadFlags, new NetworkContextClientOnClearSiteDataResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case ON_GENERATE_HTTP_NEGOTIATE_AUTH_TOKEN_ORDINAL: {

                        NetworkContextClientOnGenerateHttpNegotiateAuthTokenParams data =
                                NetworkContextClientOnGenerateHttpNegotiateAuthTokenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onGenerateHttpNegotiateAuthToken(data.serverAuthToken, data.canDelegate, data.authNegotiateAndroidAccountType, data.spn, new NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case ON_TRUST_TOKEN_ISSUANCE_DIVERTED_TO_SYSTEM_ORDINAL: {

                        NetworkContextClientOnTrustTokenIssuanceDivertedToSystemParams data =
                                NetworkContextClientOnTrustTokenIssuanceDivertedToSystemParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onTrustTokenIssuanceDivertedToSystem(data.request, new NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class NetworkContextClientOnAuthRequiredParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 64;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(64, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken windowId;
        public int processId;
        public int routingId;
        public int requestId;
        public org.chromium.url.mojom.Url url;
        public boolean firstAuthAttempt;
        public AuthChallengeInfo authInfo;
        public UrlResponseHead head;
        public AuthChallengeResponder authChallengeResponder;

        private NetworkContextClientOnAuthRequiredParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClientOnAuthRequiredParams() {
            this(0);
        }

        public static NetworkContextClientOnAuthRequiredParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClientOnAuthRequiredParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClientOnAuthRequiredParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClientOnAuthRequiredParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClientOnAuthRequiredParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.windowId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    result.processId = decoder0.readInt(16);
                    }
                    {
                        
                    result.routingId = decoder0.readInt(20);
                    }
                    {
                        
                    result.requestId = decoder0.readInt(24);
                    }
                    {
                        
                    result.firstAuthAttempt = decoder0.readBoolean(28, 0);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                    result.authInfo = AuthChallengeInfo.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, true);
                    result.head = UrlResponseHead.decode(decoder1);
                    }
                    {
                        
                    result.authChallengeResponder = decoder0.readServiceInterface(56, false, AuthChallengeResponder.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.windowId, 8, true);
            
            encoder0.encode(this.processId, 16);
            
            encoder0.encode(this.routingId, 20);
            
            encoder0.encode(this.requestId, 24);
            
            encoder0.encode(this.firstAuthAttempt, 28, 0);
            
            encoder0.encode(this.url, 32, false);
            
            encoder0.encode(this.authInfo, 40, false);
            
            encoder0.encode(this.head, 48, true);
            
            encoder0.encode(this.authChallengeResponder, 56, false, AuthChallengeResponder.MANAGER);
        }
    }



    
    static final class NetworkContextClientOnCertificateRequestedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 48;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(48, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken windowId;
        public int processId;
        public int routingId;
        public int requestId;
        public SslCertRequestInfo certInfo;
        public ClientCertificateResponder certResponder;

        private NetworkContextClientOnCertificateRequestedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClientOnCertificateRequestedParams() {
            this(0);
        }

        public static NetworkContextClientOnCertificateRequestedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClientOnCertificateRequestedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClientOnCertificateRequestedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClientOnCertificateRequestedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClientOnCertificateRequestedParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.windowId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    result.processId = decoder0.readInt(16);
                    }
                    {
                        
                    result.routingId = decoder0.readInt(20);
                    }
                    {
                        
                    result.requestId = decoder0.readInt(24);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.certInfo = SslCertRequestInfo.decode(decoder1);
                    }
                    {
                        
                    result.certResponder = decoder0.readServiceInterface(40, false, ClientCertificateResponder.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.windowId, 8, true);
            
            encoder0.encode(this.processId, 16);
            
            encoder0.encode(this.routingId, 20);
            
            encoder0.encode(this.requestId, 24);
            
            encoder0.encode(this.certInfo, 32, false);
            
            encoder0.encode(this.certResponder, 40, false, ClientCertificateResponder.MANAGER);
        }
    }



    
    static final class NetworkContextClientOnSslCertificateErrorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int processId;
        public int routingId;
        public org.chromium.url.mojom.Url url;
        public int netError;
        public SslInfo sslInfo;
        public boolean fatal;

        private NetworkContextClientOnSslCertificateErrorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClientOnSslCertificateErrorParams() {
            this(0);
        }

        public static NetworkContextClientOnSslCertificateErrorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClientOnSslCertificateErrorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClientOnSslCertificateErrorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClientOnSslCertificateErrorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClientOnSslCertificateErrorParams(elementsOrVersion);
                    {
                        
                    result.processId = decoder0.readInt(8);
                    }
                    {
                        
                    result.routingId = decoder0.readInt(12);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.netError = decoder0.readInt(24);
                    }
                    {
                        
                    result.fatal = decoder0.readBoolean(28, 0);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.sslInfo = SslInfo.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.processId, 8);
            
            encoder0.encode(this.routingId, 12);
            
            encoder0.encode(this.url, 16, false);
            
            encoder0.encode(this.netError, 24);
            
            encoder0.encode(this.fatal, 28, 0);
            
            encoder0.encode(this.sslInfo, 32, false);
        }
    }



    
    static final class NetworkContextClientOnSslCertificateErrorResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int netError;

        private NetworkContextClientOnSslCertificateErrorResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClientOnSslCertificateErrorResponseParams() {
            this(0);
        }

        public static NetworkContextClientOnSslCertificateErrorResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClientOnSslCertificateErrorResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClientOnSslCertificateErrorResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClientOnSslCertificateErrorResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClientOnSslCertificateErrorResponseParams(elementsOrVersion);
                    {
                        
                    result.netError = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.netError, 8);
        }
    }

    static class NetworkContextClientOnSslCertificateErrorResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContextClient.OnSslCertificateErrorResponse mCallback;

        NetworkContextClientOnSslCertificateErrorResponseParamsForwardToCallback(NetworkContextClient.OnSslCertificateErrorResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ON_SSL_CERTIFICATE_ERROR_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextClientOnSslCertificateErrorResponseParams response = NetworkContextClientOnSslCertificateErrorResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.netError);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClientOnSslCertificateErrorResponseParamsProxyToResponder implements NetworkContextClient.OnSslCertificateErrorResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClientOnSslCertificateErrorResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer netError) {
            NetworkContextClientOnSslCertificateErrorResponseParams _response = new NetworkContextClientOnSslCertificateErrorResponseParams();

            _response.netError = netError;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_SSL_CERTIFICATE_ERROR_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NetworkContextClientOnFileUploadRequestedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int processId;
        public boolean async;
        public org.chromium.mojo_base.mojom.FilePath[] filePaths;

        private NetworkContextClientOnFileUploadRequestedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClientOnFileUploadRequestedParams() {
            this(0);
        }

        public static NetworkContextClientOnFileUploadRequestedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClientOnFileUploadRequestedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClientOnFileUploadRequestedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClientOnFileUploadRequestedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClientOnFileUploadRequestedParams(elementsOrVersion);
                    {
                        
                    result.processId = decoder0.readInt(8);
                    }
                    {
                        
                    result.async = decoder0.readBoolean(12, 0);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.filePaths = new org.chromium.mojo_base.mojom.FilePath[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.filePaths[i1] = org.chromium.mojo_base.mojom.FilePath.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.processId, 8);
            
            encoder0.encode(this.async, 12, 0);
            
            if (this.filePaths == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.filePaths.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.filePaths.length; ++i0) {
                    
                    encoder1.encode(this.filePaths[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class NetworkContextClientOnFileUploadRequestedResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int netError;
        public org.chromium.mojo_base.mojom.ReadOnlyFile[] files;

        private NetworkContextClientOnFileUploadRequestedResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClientOnFileUploadRequestedResponseParams() {
            this(0);
        }

        public static NetworkContextClientOnFileUploadRequestedResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClientOnFileUploadRequestedResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClientOnFileUploadRequestedResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClientOnFileUploadRequestedResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClientOnFileUploadRequestedResponseParams(elementsOrVersion);
                    {
                        
                    result.netError = decoder0.readInt(8);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.files = new org.chromium.mojo_base.mojom.ReadOnlyFile[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.files[i1] = org.chromium.mojo_base.mojom.ReadOnlyFile.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.netError, 8);
            
            if (this.files == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.files.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.files.length; ++i0) {
                    
                    encoder1.encode(this.files[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }

    static class NetworkContextClientOnFileUploadRequestedResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContextClient.OnFileUploadRequestedResponse mCallback;

        NetworkContextClientOnFileUploadRequestedResponseParamsForwardToCallback(NetworkContextClient.OnFileUploadRequestedResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ON_FILE_UPLOAD_REQUESTED_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextClientOnFileUploadRequestedResponseParams response = NetworkContextClientOnFileUploadRequestedResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.netError, response.files);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClientOnFileUploadRequestedResponseParamsProxyToResponder implements NetworkContextClient.OnFileUploadRequestedResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClientOnFileUploadRequestedResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer netError, org.chromium.mojo_base.mojom.ReadOnlyFile[] files) {
            NetworkContextClientOnFileUploadRequestedResponseParams _response = new NetworkContextClientOnFileUploadRequestedResponseParams();

            _response.netError = netError;

            _response.files = files;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_FILE_UPLOAD_REQUESTED_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NetworkContextClientOnCanSendReportingReportsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.internal.mojom.Origin[] origins;

        private NetworkContextClientOnCanSendReportingReportsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClientOnCanSendReportingReportsParams() {
            this(0);
        }

        public static NetworkContextClientOnCanSendReportingReportsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClientOnCanSendReportingReportsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClientOnCanSendReportingReportsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClientOnCanSendReportingReportsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClientOnCanSendReportingReportsParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.origins = new org.chromium.url.internal.mojom.Origin[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.origins[i1] = org.chromium.url.internal.mojom.Origin.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (this.origins == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.origins.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.origins.length; ++i0) {
                    
                    encoder1.encode(this.origins[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class NetworkContextClientOnCanSendReportingReportsResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.internal.mojom.Origin[] origins;

        private NetworkContextClientOnCanSendReportingReportsResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClientOnCanSendReportingReportsResponseParams() {
            this(0);
        }

        public static NetworkContextClientOnCanSendReportingReportsResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClientOnCanSendReportingReportsResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClientOnCanSendReportingReportsResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClientOnCanSendReportingReportsResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClientOnCanSendReportingReportsResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.origins = new org.chromium.url.internal.mojom.Origin[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.origins[i1] = org.chromium.url.internal.mojom.Origin.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (this.origins == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.origins.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.origins.length; ++i0) {
                    
                    encoder1.encode(this.origins[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }

    static class NetworkContextClientOnCanSendReportingReportsResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContextClient.OnCanSendReportingReportsResponse mCallback;

        NetworkContextClientOnCanSendReportingReportsResponseParamsForwardToCallback(NetworkContextClient.OnCanSendReportingReportsResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ON_CAN_SEND_REPORTING_REPORTS_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextClientOnCanSendReportingReportsResponseParams response = NetworkContextClientOnCanSendReportingReportsResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.origins);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClientOnCanSendReportingReportsResponseParamsProxyToResponder implements NetworkContextClient.OnCanSendReportingReportsResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClientOnCanSendReportingReportsResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(org.chromium.url.internal.mojom.Origin[] origins) {
            NetworkContextClientOnCanSendReportingReportsResponseParams _response = new NetworkContextClientOnCanSendReportingReportsResponseParams();

            _response.origins = origins;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_CAN_SEND_REPORTING_REPORTS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NetworkContextClientOnCanSendDomainReliabilityUploadParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url origin;

        private NetworkContextClientOnCanSendDomainReliabilityUploadParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClientOnCanSendDomainReliabilityUploadParams() {
            this(0);
        }

        public static NetworkContextClientOnCanSendDomainReliabilityUploadParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClientOnCanSendDomainReliabilityUploadParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClientOnCanSendDomainReliabilityUploadParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClientOnCanSendDomainReliabilityUploadParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClientOnCanSendDomainReliabilityUploadParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.origin = org.chromium.url.mojom.Url.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.origin, 8, false);
        }
    }



    
    static final class NetworkContextClientOnCanSendDomainReliabilityUploadResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean allowed;

        private NetworkContextClientOnCanSendDomainReliabilityUploadResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClientOnCanSendDomainReliabilityUploadResponseParams() {
            this(0);
        }

        public static NetworkContextClientOnCanSendDomainReliabilityUploadResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClientOnCanSendDomainReliabilityUploadResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClientOnCanSendDomainReliabilityUploadResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClientOnCanSendDomainReliabilityUploadResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClientOnCanSendDomainReliabilityUploadResponseParams(elementsOrVersion);
                    {
                        
                    result.allowed = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.allowed, 8, 0);
        }
    }

    static class NetworkContextClientOnCanSendDomainReliabilityUploadResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContextClient.OnCanSendDomainReliabilityUploadResponse mCallback;

        NetworkContextClientOnCanSendDomainReliabilityUploadResponseParamsForwardToCallback(NetworkContextClient.OnCanSendDomainReliabilityUploadResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ON_CAN_SEND_DOMAIN_RELIABILITY_UPLOAD_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextClientOnCanSendDomainReliabilityUploadResponseParams response = NetworkContextClientOnCanSendDomainReliabilityUploadResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.allowed);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClientOnCanSendDomainReliabilityUploadResponseParamsProxyToResponder implements NetworkContextClient.OnCanSendDomainReliabilityUploadResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClientOnCanSendDomainReliabilityUploadResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean allowed) {
            NetworkContextClientOnCanSendDomainReliabilityUploadResponseParams _response = new NetworkContextClientOnCanSendDomainReliabilityUploadResponseParams();

            _response.allowed = allowed;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_CAN_SEND_DOMAIN_RELIABILITY_UPLOAD_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NetworkContextClientOnClearSiteDataParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int processId;
        public int routingId;
        public org.chromium.url.mojom.Url url;
        public String headerValue;
        public int loadFlags;

        private NetworkContextClientOnClearSiteDataParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClientOnClearSiteDataParams() {
            this(0);
        }

        public static NetworkContextClientOnClearSiteDataParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClientOnClearSiteDataParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClientOnClearSiteDataParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClientOnClearSiteDataParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClientOnClearSiteDataParams(elementsOrVersion);
                    {
                        
                    result.processId = decoder0.readInt(8);
                    }
                    {
                        
                    result.routingId = decoder0.readInt(12);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.headerValue = decoder0.readString(24, false);
                    }
                    {
                        
                    result.loadFlags = decoder0.readInt(32);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.processId, 8);
            
            encoder0.encode(this.routingId, 12);
            
            encoder0.encode(this.url, 16, false);
            
            encoder0.encode(this.headerValue, 24, false);
            
            encoder0.encode(this.loadFlags, 32);
        }
    }



    
    static final class NetworkContextClientOnClearSiteDataResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkContextClientOnClearSiteDataResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClientOnClearSiteDataResponseParams() {
            this(0);
        }

        public static NetworkContextClientOnClearSiteDataResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClientOnClearSiteDataResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClientOnClearSiteDataResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClientOnClearSiteDataResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClientOnClearSiteDataResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkContextClientOnClearSiteDataResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContextClient.OnClearSiteDataResponse mCallback;

        NetworkContextClientOnClearSiteDataResponseParamsForwardToCallback(NetworkContextClient.OnClearSiteDataResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ON_CLEAR_SITE_DATA_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClientOnClearSiteDataResponseParamsProxyToResponder implements NetworkContextClient.OnClearSiteDataResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClientOnClearSiteDataResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkContextClientOnClearSiteDataResponseParams _response = new NetworkContextClientOnClearSiteDataResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_CLEAR_SITE_DATA_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NetworkContextClientOnGenerateHttpNegotiateAuthTokenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String serverAuthToken;
        public boolean canDelegate;
        public String authNegotiateAndroidAccountType;
        public String spn;

        private NetworkContextClientOnGenerateHttpNegotiateAuthTokenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClientOnGenerateHttpNegotiateAuthTokenParams() {
            this(0);
        }

        public static NetworkContextClientOnGenerateHttpNegotiateAuthTokenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClientOnGenerateHttpNegotiateAuthTokenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClientOnGenerateHttpNegotiateAuthTokenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClientOnGenerateHttpNegotiateAuthTokenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClientOnGenerateHttpNegotiateAuthTokenParams(elementsOrVersion);
                    {
                        
                    result.serverAuthToken = decoder0.readString(8, false);
                    }
                    {
                        
                    result.canDelegate = decoder0.readBoolean(16, 0);
                    }
                    {
                        
                    result.authNegotiateAndroidAccountType = decoder0.readString(24, false);
                    }
                    {
                        
                    result.spn = decoder0.readString(32, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.serverAuthToken, 8, false);
            
            encoder0.encode(this.canDelegate, 16, 0);
            
            encoder0.encode(this.authNegotiateAndroidAccountType, 24, false);
            
            encoder0.encode(this.spn, 32, false);
        }
    }



    
    static final class NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int result;
        public String authToken;

        private NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParams() {
            this(0);
        }

        public static NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParams(elementsOrVersion);
                    {
                        
                    result.result = decoder0.readInt(8);
                    }
                    {
                        
                    result.authToken = decoder0.readString(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8);
            
            encoder0.encode(this.authToken, 16, false);
        }
    }

    static class NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContextClient.OnGenerateHttpNegotiateAuthTokenResponse mCallback;

        NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParamsForwardToCallback(NetworkContextClient.OnGenerateHttpNegotiateAuthTokenResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ON_GENERATE_HTTP_NEGOTIATE_AUTH_TOKEN_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParams response = NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.authToken);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParamsProxyToResponder implements NetworkContextClient.OnGenerateHttpNegotiateAuthTokenResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer result, String authToken) {
            NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParams _response = new NetworkContextClientOnGenerateHttpNegotiateAuthTokenResponseParams();

            _response.result = result;

            _response.authToken = authToken;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_GENERATE_HTTP_NEGOTIATE_AUTH_TOKEN_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NetworkContextClientOnTrustTokenIssuanceDivertedToSystemParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FulfillTrustTokenIssuanceRequest request;

        private NetworkContextClientOnTrustTokenIssuanceDivertedToSystemParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClientOnTrustTokenIssuanceDivertedToSystemParams() {
            this(0);
        }

        public static NetworkContextClientOnTrustTokenIssuanceDivertedToSystemParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClientOnTrustTokenIssuanceDivertedToSystemParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClientOnTrustTokenIssuanceDivertedToSystemParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClientOnTrustTokenIssuanceDivertedToSystemParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClientOnTrustTokenIssuanceDivertedToSystemParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.request = FulfillTrustTokenIssuanceRequest.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.request, 8, false);
        }
    }



    
    static final class NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FulfillTrustTokenIssuanceAnswer response;

        private NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParams() {
            this(0);
        }

        public static NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.response = FulfillTrustTokenIssuanceAnswer.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.response, 8, false);
        }
    }

    static class NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkContextClient.OnTrustTokenIssuanceDivertedToSystemResponse mCallback;

        NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParamsForwardToCallback(NetworkContextClient.OnTrustTokenIssuanceDivertedToSystemResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ON_TRUST_TOKEN_ISSUANCE_DIVERTED_TO_SYSTEM_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParams response = NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.response);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParamsProxyToResponder implements NetworkContextClient.OnTrustTokenIssuanceDivertedToSystemResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(FulfillTrustTokenIssuanceAnswer response) {
            NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParams _response = new NetworkContextClientOnTrustTokenIssuanceDivertedToSystemResponseParams();

            _response.response = response;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_TRUST_TOKEN_ISSUANCE_DIVERTED_TO_SYSTEM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



}
