// NetworkService_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/network_service.mojom
//

package org.chromium.network.mojom;


class NetworkService_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<NetworkService, NetworkService.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<NetworkService, NetworkService.Proxy>() {

        @Override
        public String getName() {
            return "network.mojom.NetworkService";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, NetworkService impl) {
            return new Stub(core, impl);
        }

        @Override
        public NetworkService[] buildArray(int size) {
          return new NetworkService[size];
        }
    };


    private static final int SET_CLIENT_ORDINAL = 0;

    private static final int START_NET_LOG_ORDINAL = 1;

    private static final int ATTACH_NET_LOG_PROXY_ORDINAL = 2;

    private static final int SET_SSL_KEY_LOG_FILE_ORDINAL = 3;

    private static final int CREATE_NETWORK_CONTEXT_ORDINAL = 4;

    private static final int CONFIGURE_STUB_HOST_RESOLVER_ORDINAL = 5;

    private static final int DISABLE_QUIC_ORDINAL = 6;

    private static final int SET_UP_HTTP_AUTH_ORDINAL = 7;

    private static final int CONFIGURE_HTTP_AUTH_PREFS_ORDINAL = 8;

    private static final int SET_RAW_HEADERS_ACCESS_ORDINAL = 9;

    private static final int SET_MAX_CONNECTIONS_PER_PROXY_ORDINAL = 10;

    private static final int GET_NETWORK_CHANGE_MANAGER_ORDINAL = 11;

    private static final int GET_NETWORK_QUALITY_ESTIMATOR_MANAGER_ORDINAL = 12;

    private static final int GET_DNS_CONFIG_CHANGE_MANAGER_ORDINAL = 13;

    private static final int GET_TOTAL_NETWORK_USAGES_ORDINAL = 14;

    private static final int GET_NETWORK_LIST_ORDINAL = 15;

    private static final int UPDATE_CRL_SET_ORDINAL = 16;

    private static final int ON_CERT_DB_CHANGED_ORDINAL = 17;

    private static final int ADD_ALLOWED_REQUEST_INITIATOR_FOR_PLUGIN_ORDINAL = 18;

    private static final int REMOVE_SECURITY_EXCEPTIONS_FOR_PLUGIN_ORDINAL = 19;

    private static final int ON_MEMORY_PRESSURE_ORDINAL = 20;

    private static final int ON_PEER_TO_PEER_CONNECTIONS_COUNT_CHANGE_ORDINAL = 21;

    private static final int ON_APPLICATION_STATE_CHANGE_ORDINAL = 22;

    private static final int SET_ENVIRONMENT_ORDINAL = 23;

    private static final int SET_TRUST_TOKEN_KEY_COMMITMENTS_ORDINAL = 24;

    private static final int CLEAR_SCT_AUDITING_CACHE_ORDINAL = 25;

    private static final int CONFIGURE_SCT_AUDITING_ORDINAL = 26;

    private static final int DUMP_WITHOUT_CRASHING_ORDINAL = 27;

    private static final int BIND_TEST_INTERFACE_ORDINAL = 28;

    private static final int SET_PRELOADED_FIRST_PARTY_SETS_ORDINAL = 29;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements NetworkService.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void setClient(
NetworkServiceClient client, NetworkServiceParams params) {

            NetworkServiceSetClientParams _message = new NetworkServiceSetClientParams();

            _message.client = client;

            _message.params = params;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_CLIENT_ORDINAL)));

        }


        @Override
        public void startNetLog(
org.chromium.mojo_base.mojom.File file, int captureMode, org.chromium.mojo_base.mojom.DictionaryValue constants) {

            NetworkServiceStartNetLogParams _message = new NetworkServiceStartNetLogParams();

            _message.file = file;

            _message.captureMode = captureMode;

            _message.constants = constants;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(START_NET_LOG_ORDINAL)));

        }


        @Override
        public void attachNetLogProxy(
NetLogProxySource proxySource, org.chromium.mojo.bindings.InterfaceRequest<NetLogProxySink> proxySink) {

            NetworkServiceAttachNetLogProxyParams _message = new NetworkServiceAttachNetLogProxyParams();

            _message.proxySource = proxySource;

            _message.proxySink = proxySink;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ATTACH_NET_LOG_PROXY_ORDINAL)));

        }


        @Override
        public void setSslKeyLogFile(
org.chromium.mojo_base.mojom.File file) {

            NetworkServiceSetSslKeyLogFileParams _message = new NetworkServiceSetSslKeyLogFileParams();

            _message.file = file;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_SSL_KEY_LOG_FILE_ORDINAL)));

        }


        @Override
        public void createNetworkContext(
org.chromium.mojo.bindings.InterfaceRequest<NetworkContext> context, NetworkContextParams params) {

            NetworkServiceCreateNetworkContextParams _message = new NetworkServiceCreateNetworkContextParams();

            _message.context = context;

            _message.params = params;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_NETWORK_CONTEXT_ORDINAL)));

        }


        @Override
        public void configureStubHostResolver(
boolean insecureDnsClientEnabled, int secureDnsMode, DnsOverHttpsServer[] dnsOverHttpsServers) {

            NetworkServiceConfigureStubHostResolverParams _message = new NetworkServiceConfigureStubHostResolverParams();

            _message.insecureDnsClientEnabled = insecureDnsClientEnabled;

            _message.secureDnsMode = secureDnsMode;

            _message.dnsOverHttpsServers = dnsOverHttpsServers;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CONFIGURE_STUB_HOST_RESOLVER_ORDINAL)));

        }


        @Override
        public void disableQuic(
) {

            NetworkServiceDisableQuicParams _message = new NetworkServiceDisableQuicParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DISABLE_QUIC_ORDINAL)));

        }


        @Override
        public void setUpHttpAuth(
HttpAuthStaticParams httpAuthStaticParams) {

            NetworkServiceSetUpHttpAuthParams _message = new NetworkServiceSetUpHttpAuthParams();

            _message.httpAuthStaticParams = httpAuthStaticParams;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_UP_HTTP_AUTH_ORDINAL)));

        }


        @Override
        public void configureHttpAuthPrefs(
HttpAuthDynamicParams httpAuthDynamicParams) {

            NetworkServiceConfigureHttpAuthPrefsParams _message = new NetworkServiceConfigureHttpAuthPrefsParams();

            _message.httpAuthDynamicParams = httpAuthDynamicParams;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CONFIGURE_HTTP_AUTH_PREFS_ORDINAL)));

        }


        @Override
        public void setRawHeadersAccess(
int processId, org.chromium.url.internal.mojom.Origin[] origins) {

            NetworkServiceSetRawHeadersAccessParams _message = new NetworkServiceSetRawHeadersAccessParams();

            _message.processId = processId;

            _message.origins = origins;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_RAW_HEADERS_ACCESS_ORDINAL)));

        }


        @Override
        public void setMaxConnectionsPerProxy(
int maxConnections) {

            NetworkServiceSetMaxConnectionsPerProxyParams _message = new NetworkServiceSetMaxConnectionsPerProxyParams();

            _message.maxConnections = maxConnections;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_MAX_CONNECTIONS_PER_PROXY_ORDINAL)));

        }


        @Override
        public void getNetworkChangeManager(
org.chromium.mojo.bindings.InterfaceRequest<NetworkChangeManager> networkChangeManager) {

            NetworkServiceGetNetworkChangeManagerParams _message = new NetworkServiceGetNetworkChangeManagerParams();

            _message.networkChangeManager = networkChangeManager;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GET_NETWORK_CHANGE_MANAGER_ORDINAL)));

        }


        @Override
        public void getNetworkQualityEstimatorManager(
org.chromium.mojo.bindings.InterfaceRequest<NetworkQualityEstimatorManager> receiver) {

            NetworkServiceGetNetworkQualityEstimatorManagerParams _message = new NetworkServiceGetNetworkQualityEstimatorManagerParams();

            _message.receiver = receiver;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GET_NETWORK_QUALITY_ESTIMATOR_MANAGER_ORDINAL)));

        }


        @Override
        public void getDnsConfigChangeManager(
org.chromium.mojo.bindings.InterfaceRequest<DnsConfigChangeManager> receiver) {

            NetworkServiceGetDnsConfigChangeManagerParams _message = new NetworkServiceGetDnsConfigChangeManagerParams();

            _message.receiver = receiver;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GET_DNS_CONFIG_CHANGE_MANAGER_ORDINAL)));

        }


        @Override
        public void getTotalNetworkUsages(

GetTotalNetworkUsagesResponse callback) {

            NetworkServiceGetTotalNetworkUsagesParams _message = new NetworkServiceGetTotalNetworkUsagesParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_TOTAL_NETWORK_USAGES_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NetworkServiceGetTotalNetworkUsagesResponseParamsForwardToCallback(callback));

        }


        @Override
        public void getNetworkList(
int policy, 
GetNetworkListResponse callback) {

            NetworkServiceGetNetworkListParams _message = new NetworkServiceGetNetworkListParams();

            _message.policy = policy;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_NETWORK_LIST_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NetworkServiceGetNetworkListResponseParamsForwardToCallback(callback));

        }


        @Override
        public void updateCrlSet(
org.chromium.mojo_base.mojom.ReadOnlyBuffer crlSet, 
UpdateCrlSetResponse callback) {

            NetworkServiceUpdateCrlSetParams _message = new NetworkServiceUpdateCrlSetParams();

            _message.crlSet = crlSet;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    UPDATE_CRL_SET_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NetworkServiceUpdateCrlSetResponseParamsForwardToCallback(callback));

        }


        @Override
        public void onCertDbChanged(
) {

            NetworkServiceOnCertDbChangedParams _message = new NetworkServiceOnCertDbChangedParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_CERT_DB_CHANGED_ORDINAL)));

        }


        @Override
        public void addAllowedRequestInitiatorForPlugin(
int processId, org.chromium.url.internal.mojom.Origin allowedRequestInitiator) {

            NetworkServiceAddAllowedRequestInitiatorForPluginParams _message = new NetworkServiceAddAllowedRequestInitiatorForPluginParams();

            _message.processId = processId;

            _message.allowedRequestInitiator = allowedRequestInitiator;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADD_ALLOWED_REQUEST_INITIATOR_FOR_PLUGIN_ORDINAL)));

        }


        @Override
        public void removeSecurityExceptionsForPlugin(
int processId) {

            NetworkServiceRemoveSecurityExceptionsForPluginParams _message = new NetworkServiceRemoveSecurityExceptionsForPluginParams();

            _message.processId = processId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REMOVE_SECURITY_EXCEPTIONS_FOR_PLUGIN_ORDINAL)));

        }


        @Override
        public void onMemoryPressure(
int memoryPressureLevel) {

            NetworkServiceOnMemoryPressureParams _message = new NetworkServiceOnMemoryPressureParams();

            _message.memoryPressureLevel = memoryPressureLevel;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_MEMORY_PRESSURE_ORDINAL)));

        }


        @Override
        public void onPeerToPeerConnectionsCountChange(
int count) {

            NetworkServiceOnPeerToPeerConnectionsCountChangeParams _message = new NetworkServiceOnPeerToPeerConnectionsCountChangeParams();

            _message.count = count;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_PEER_TO_PEER_CONNECTIONS_COUNT_CHANGE_ORDINAL)));

        }


        @Override
        public void onApplicationStateChange(
int state) {

            NetworkServiceOnApplicationStateChangeParams _message = new NetworkServiceOnApplicationStateChangeParams();

            _message.state = state;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_APPLICATION_STATE_CHANGE_ORDINAL)));

        }


        @Override
        public void setEnvironment(
EnvironmentVariable[] environment) {

            NetworkServiceSetEnvironmentParams _message = new NetworkServiceSetEnvironmentParams();

            _message.environment = environment;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_ENVIRONMENT_ORDINAL)));

        }


        @Override
        public void setTrustTokenKeyCommitments(
String rawCommitments, 
SetTrustTokenKeyCommitmentsResponse callback) {

            NetworkServiceSetTrustTokenKeyCommitmentsParams _message = new NetworkServiceSetTrustTokenKeyCommitmentsParams();

            _message.rawCommitments = rawCommitments;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SET_TRUST_TOKEN_KEY_COMMITMENTS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NetworkServiceSetTrustTokenKeyCommitmentsResponseParamsForwardToCallback(callback));

        }


        @Override
        public void clearSctAuditingCache(
) {

            NetworkServiceClearSctAuditingCacheParams _message = new NetworkServiceClearSctAuditingCacheParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CLEAR_SCT_AUDITING_CACHE_ORDINAL)));

        }


        @Override
        public void configureSctAuditing(
boolean enabled, double samplingRate, org.chromium.url.mojom.Url reportUri, MutableNetworkTrafficAnnotationTag trafficAnnotation, UrlLoaderFactory factory) {

            NetworkServiceConfigureSctAuditingParams _message = new NetworkServiceConfigureSctAuditingParams();

            _message.enabled = enabled;

            _message.samplingRate = samplingRate;

            _message.reportUri = reportUri;

            _message.trafficAnnotation = trafficAnnotation;

            _message.factory = factory;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CONFIGURE_SCT_AUDITING_ORDINAL)));

        }


        @Override
        public void dumpWithoutCrashing(
org.chromium.mojo_base.mojom.Time dumpRequestTime) {

            NetworkServiceDumpWithoutCrashingParams _message = new NetworkServiceDumpWithoutCrashingParams();

            _message.dumpRequestTime = dumpRequestTime;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DUMP_WITHOUT_CRASHING_ORDINAL)));

        }


        @Override
        public void bindTestInterface(
org.chromium.mojo.bindings.InterfaceRequest<NetworkServiceTest> receiver) {

            NetworkServiceBindTestInterfaceParams _message = new NetworkServiceBindTestInterfaceParams();

            _message.receiver = receiver;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(BIND_TEST_INTERFACE_ORDINAL)));

        }


        @Override
        public void setPreloadedFirstPartySets(
String rawSets) {

            NetworkServiceSetPreloadedFirstPartySetsParams _message = new NetworkServiceSetPreloadedFirstPartySetsParams();

            _message.rawSets = rawSets;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_PRELOADED_FIRST_PARTY_SETS_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<NetworkService> {

        Stub(org.chromium.mojo.system.Core core, NetworkService impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                NetworkService_Internal.MANAGER, messageWithHeader);





                    case SET_CLIENT_ORDINAL: {

                        NetworkServiceSetClientParams data =
                                NetworkServiceSetClientParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setClient(data.client, data.params);
                        return true;
                    }





                    case START_NET_LOG_ORDINAL: {

                        NetworkServiceStartNetLogParams data =
                                NetworkServiceStartNetLogParams.deserialize(messageWithHeader.getPayload());

                        getImpl().startNetLog(data.file, data.captureMode, data.constants);
                        return true;
                    }





                    case ATTACH_NET_LOG_PROXY_ORDINAL: {

                        NetworkServiceAttachNetLogProxyParams data =
                                NetworkServiceAttachNetLogProxyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().attachNetLogProxy(data.proxySource, data.proxySink);
                        return true;
                    }





                    case SET_SSL_KEY_LOG_FILE_ORDINAL: {

                        NetworkServiceSetSslKeyLogFileParams data =
                                NetworkServiceSetSslKeyLogFileParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setSslKeyLogFile(data.file);
                        return true;
                    }





                    case CREATE_NETWORK_CONTEXT_ORDINAL: {

                        NetworkServiceCreateNetworkContextParams data =
                                NetworkServiceCreateNetworkContextParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createNetworkContext(data.context, data.params);
                        return true;
                    }





                    case CONFIGURE_STUB_HOST_RESOLVER_ORDINAL: {

                        NetworkServiceConfigureStubHostResolverParams data =
                                NetworkServiceConfigureStubHostResolverParams.deserialize(messageWithHeader.getPayload());

                        getImpl().configureStubHostResolver(data.insecureDnsClientEnabled, data.secureDnsMode, data.dnsOverHttpsServers);
                        return true;
                    }





                    case DISABLE_QUIC_ORDINAL: {

                        NetworkServiceDisableQuicParams.deserialize(messageWithHeader.getPayload());

                        getImpl().disableQuic();
                        return true;
                    }





                    case SET_UP_HTTP_AUTH_ORDINAL: {

                        NetworkServiceSetUpHttpAuthParams data =
                                NetworkServiceSetUpHttpAuthParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setUpHttpAuth(data.httpAuthStaticParams);
                        return true;
                    }





                    case CONFIGURE_HTTP_AUTH_PREFS_ORDINAL: {

                        NetworkServiceConfigureHttpAuthPrefsParams data =
                                NetworkServiceConfigureHttpAuthPrefsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().configureHttpAuthPrefs(data.httpAuthDynamicParams);
                        return true;
                    }





                    case SET_RAW_HEADERS_ACCESS_ORDINAL: {

                        NetworkServiceSetRawHeadersAccessParams data =
                                NetworkServiceSetRawHeadersAccessParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setRawHeadersAccess(data.processId, data.origins);
                        return true;
                    }





                    case SET_MAX_CONNECTIONS_PER_PROXY_ORDINAL: {

                        NetworkServiceSetMaxConnectionsPerProxyParams data =
                                NetworkServiceSetMaxConnectionsPerProxyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setMaxConnectionsPerProxy(data.maxConnections);
                        return true;
                    }





                    case GET_NETWORK_CHANGE_MANAGER_ORDINAL: {

                        NetworkServiceGetNetworkChangeManagerParams data =
                                NetworkServiceGetNetworkChangeManagerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getNetworkChangeManager(data.networkChangeManager);
                        return true;
                    }





                    case GET_NETWORK_QUALITY_ESTIMATOR_MANAGER_ORDINAL: {

                        NetworkServiceGetNetworkQualityEstimatorManagerParams data =
                                NetworkServiceGetNetworkQualityEstimatorManagerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getNetworkQualityEstimatorManager(data.receiver);
                        return true;
                    }





                    case GET_DNS_CONFIG_CHANGE_MANAGER_ORDINAL: {

                        NetworkServiceGetDnsConfigChangeManagerParams data =
                                NetworkServiceGetDnsConfigChangeManagerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getDnsConfigChangeManager(data.receiver);
                        return true;
                    }











                    case ON_CERT_DB_CHANGED_ORDINAL: {

                        NetworkServiceOnCertDbChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onCertDbChanged();
                        return true;
                    }





                    case ADD_ALLOWED_REQUEST_INITIATOR_FOR_PLUGIN_ORDINAL: {

                        NetworkServiceAddAllowedRequestInitiatorForPluginParams data =
                                NetworkServiceAddAllowedRequestInitiatorForPluginParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addAllowedRequestInitiatorForPlugin(data.processId, data.allowedRequestInitiator);
                        return true;
                    }





                    case REMOVE_SECURITY_EXCEPTIONS_FOR_PLUGIN_ORDINAL: {

                        NetworkServiceRemoveSecurityExceptionsForPluginParams data =
                                NetworkServiceRemoveSecurityExceptionsForPluginParams.deserialize(messageWithHeader.getPayload());

                        getImpl().removeSecurityExceptionsForPlugin(data.processId);
                        return true;
                    }





                    case ON_MEMORY_PRESSURE_ORDINAL: {

                        NetworkServiceOnMemoryPressureParams data =
                                NetworkServiceOnMemoryPressureParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onMemoryPressure(data.memoryPressureLevel);
                        return true;
                    }





                    case ON_PEER_TO_PEER_CONNECTIONS_COUNT_CHANGE_ORDINAL: {

                        NetworkServiceOnPeerToPeerConnectionsCountChangeParams data =
                                NetworkServiceOnPeerToPeerConnectionsCountChangeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onPeerToPeerConnectionsCountChange(data.count);
                        return true;
                    }





                    case ON_APPLICATION_STATE_CHANGE_ORDINAL: {

                        NetworkServiceOnApplicationStateChangeParams data =
                                NetworkServiceOnApplicationStateChangeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onApplicationStateChange(data.state);
                        return true;
                    }





                    case SET_ENVIRONMENT_ORDINAL: {

                        NetworkServiceSetEnvironmentParams data =
                                NetworkServiceSetEnvironmentParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setEnvironment(data.environment);
                        return true;
                    }







                    case CLEAR_SCT_AUDITING_CACHE_ORDINAL: {

                        NetworkServiceClearSctAuditingCacheParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearSctAuditingCache();
                        return true;
                    }





                    case CONFIGURE_SCT_AUDITING_ORDINAL: {

                        NetworkServiceConfigureSctAuditingParams data =
                                NetworkServiceConfigureSctAuditingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().configureSctAuditing(data.enabled, data.samplingRate, data.reportUri, data.trafficAnnotation, data.factory);
                        return true;
                    }





                    case DUMP_WITHOUT_CRASHING_ORDINAL: {

                        NetworkServiceDumpWithoutCrashingParams data =
                                NetworkServiceDumpWithoutCrashingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().dumpWithoutCrashing(data.dumpRequestTime);
                        return true;
                    }





                    case BIND_TEST_INTERFACE_ORDINAL: {

                        NetworkServiceBindTestInterfaceParams data =
                                NetworkServiceBindTestInterfaceParams.deserialize(messageWithHeader.getPayload());

                        getImpl().bindTestInterface(data.receiver);
                        return true;
                    }





                    case SET_PRELOADED_FIRST_PARTY_SETS_ORDINAL: {

                        NetworkServiceSetPreloadedFirstPartySetsParams data =
                                NetworkServiceSetPreloadedFirstPartySetsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setPreloadedFirstPartySets(data.rawSets);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), NetworkService_Internal.MANAGER, messageWithHeader, receiver);



































                    case GET_TOTAL_NETWORK_USAGES_ORDINAL: {

                        NetworkServiceGetTotalNetworkUsagesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getTotalNetworkUsages(new NetworkServiceGetTotalNetworkUsagesResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case GET_NETWORK_LIST_ORDINAL: {

                        NetworkServiceGetNetworkListParams data =
                                NetworkServiceGetNetworkListParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getNetworkList(data.policy, new NetworkServiceGetNetworkListResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case UPDATE_CRL_SET_ORDINAL: {

                        NetworkServiceUpdateCrlSetParams data =
                                NetworkServiceUpdateCrlSetParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateCrlSet(data.crlSet, new NetworkServiceUpdateCrlSetResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }





















                    case SET_TRUST_TOKEN_KEY_COMMITMENTS_ORDINAL: {

                        NetworkServiceSetTrustTokenKeyCommitmentsParams data =
                                NetworkServiceSetTrustTokenKeyCommitmentsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setTrustTokenKeyCommitments(data.rawCommitments, new NetworkServiceSetTrustTokenKeyCommitmentsResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }












                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class NetworkServiceSetClientParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NetworkServiceClient client;
        public NetworkServiceParams params;

        private NetworkServiceSetClientParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceSetClientParams() {
            this(0);
        }

        public static NetworkServiceSetClientParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceSetClientParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceSetClientParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceSetClientParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceSetClientParams(elementsOrVersion);
                    {
                        
                    result.client = decoder0.readServiceInterface(8, false, NetworkServiceClient.MANAGER);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.params = NetworkServiceParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.client, 8, false, NetworkServiceClient.MANAGER);
            
            encoder0.encode(this.params, 16, false);
        }
    }



    
    static final class NetworkServiceStartNetLogParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.File file;
        public int captureMode;
        public org.chromium.mojo_base.mojom.DictionaryValue constants;

        private NetworkServiceStartNetLogParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceStartNetLogParams() {
            this(0);
        }

        public static NetworkServiceStartNetLogParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceStartNetLogParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceStartNetLogParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceStartNetLogParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceStartNetLogParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.file = org.chromium.mojo_base.mojom.File.decode(decoder1);
                    }
                    {
                        
                    result.captureMode = decoder0.readInt(16);
                        NetLogCaptureMode.validate(result.captureMode);
                        result.captureMode = NetLogCaptureMode.toKnownValue(result.captureMode);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.constants = org.chromium.mojo_base.mojom.DictionaryValue.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.file, 8, false);
            
            encoder0.encode(this.captureMode, 16);
            
            encoder0.encode(this.constants, 24, false);
        }
    }



    
    static final class NetworkServiceAttachNetLogProxyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NetLogProxySource proxySource;
        public org.chromium.mojo.bindings.InterfaceRequest<NetLogProxySink> proxySink;

        private NetworkServiceAttachNetLogProxyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceAttachNetLogProxyParams() {
            this(0);
        }

        public static NetworkServiceAttachNetLogProxyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceAttachNetLogProxyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceAttachNetLogProxyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceAttachNetLogProxyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceAttachNetLogProxyParams(elementsOrVersion);
                    {
                        
                    result.proxySource = decoder0.readServiceInterface(8, false, NetLogProxySource.MANAGER);
                    }
                    {
                        
                    result.proxySink = decoder0.readInterfaceRequest(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.proxySource, 8, false, NetLogProxySource.MANAGER);
            
            encoder0.encode(this.proxySink, 16, false);
        }
    }



    
    static final class NetworkServiceSetSslKeyLogFileParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.File file;

        private NetworkServiceSetSslKeyLogFileParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceSetSslKeyLogFileParams() {
            this(0);
        }

        public static NetworkServiceSetSslKeyLogFileParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceSetSslKeyLogFileParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceSetSslKeyLogFileParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceSetSslKeyLogFileParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceSetSslKeyLogFileParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.file = org.chromium.mojo_base.mojom.File.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.file, 8, false);
        }
    }



    
    static final class NetworkServiceCreateNetworkContextParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<NetworkContext> context;
        public NetworkContextParams params;

        private NetworkServiceCreateNetworkContextParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceCreateNetworkContextParams() {
            this(0);
        }

        public static NetworkServiceCreateNetworkContextParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceCreateNetworkContextParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceCreateNetworkContextParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceCreateNetworkContextParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceCreateNetworkContextParams(elementsOrVersion);
                    {
                        
                    result.context = decoder0.readInterfaceRequest(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.params = NetworkContextParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.context, 8, false);
            
            encoder0.encode(this.params, 16, false);
        }
    }



    
    static final class NetworkServiceConfigureStubHostResolverParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean insecureDnsClientEnabled;
        public int secureDnsMode;
        public DnsOverHttpsServer[] dnsOverHttpsServers;

        private NetworkServiceConfigureStubHostResolverParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceConfigureStubHostResolverParams() {
            this(0);
        }

        public static NetworkServiceConfigureStubHostResolverParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceConfigureStubHostResolverParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceConfigureStubHostResolverParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceConfigureStubHostResolverParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceConfigureStubHostResolverParams(elementsOrVersion);
                    {
                        
                    result.insecureDnsClientEnabled = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.secureDnsMode = decoder0.readInt(12);
                        SecureDnsMode.validate(result.secureDnsMode);
                        result.secureDnsMode = SecureDnsMode.toKnownValue(result.secureDnsMode);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    if (decoder1 == null) {
                        result.dnsOverHttpsServers = null;
                    } else {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.dnsOverHttpsServers = new DnsOverHttpsServer[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.dnsOverHttpsServers[i1] = DnsOverHttpsServer.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.insecureDnsClientEnabled, 8, 0);
            
            encoder0.encode(this.secureDnsMode, 12);
            
            if (this.dnsOverHttpsServers == null) {
                encoder0.encodeNullPointer(16, true);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.dnsOverHttpsServers.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.dnsOverHttpsServers.length; ++i0) {
                    
                    encoder1.encode(this.dnsOverHttpsServers[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class NetworkServiceDisableQuicParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkServiceDisableQuicParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceDisableQuicParams() {
            this(0);
        }

        public static NetworkServiceDisableQuicParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceDisableQuicParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceDisableQuicParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceDisableQuicParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceDisableQuicParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class NetworkServiceSetUpHttpAuthParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public HttpAuthStaticParams httpAuthStaticParams;

        private NetworkServiceSetUpHttpAuthParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceSetUpHttpAuthParams() {
            this(0);
        }

        public static NetworkServiceSetUpHttpAuthParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceSetUpHttpAuthParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceSetUpHttpAuthParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceSetUpHttpAuthParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceSetUpHttpAuthParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.httpAuthStaticParams = HttpAuthStaticParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.httpAuthStaticParams, 8, false);
        }
    }



    
    static final class NetworkServiceConfigureHttpAuthPrefsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public HttpAuthDynamicParams httpAuthDynamicParams;

        private NetworkServiceConfigureHttpAuthPrefsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceConfigureHttpAuthPrefsParams() {
            this(0);
        }

        public static NetworkServiceConfigureHttpAuthPrefsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceConfigureHttpAuthPrefsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceConfigureHttpAuthPrefsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceConfigureHttpAuthPrefsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceConfigureHttpAuthPrefsParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.httpAuthDynamicParams = HttpAuthDynamicParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.httpAuthDynamicParams, 8, false);
        }
    }



    
    static final class NetworkServiceSetRawHeadersAccessParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int processId;
        public org.chromium.url.internal.mojom.Origin[] origins;

        private NetworkServiceSetRawHeadersAccessParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceSetRawHeadersAccessParams() {
            this(0);
        }

        public static NetworkServiceSetRawHeadersAccessParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceSetRawHeadersAccessParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceSetRawHeadersAccessParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceSetRawHeadersAccessParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceSetRawHeadersAccessParams(elementsOrVersion);
                    {
                        
                    result.processId = decoder0.readInt(8);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.origins = new org.chromium.url.internal.mojom.Origin[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.origins[i1] = org.chromium.url.internal.mojom.Origin.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.processId, 8);
            
            if (this.origins == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.origins.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.origins.length; ++i0) {
                    
                    encoder1.encode(this.origins[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class NetworkServiceSetMaxConnectionsPerProxyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int maxConnections;

        private NetworkServiceSetMaxConnectionsPerProxyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceSetMaxConnectionsPerProxyParams() {
            this(0);
        }

        public static NetworkServiceSetMaxConnectionsPerProxyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceSetMaxConnectionsPerProxyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceSetMaxConnectionsPerProxyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceSetMaxConnectionsPerProxyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceSetMaxConnectionsPerProxyParams(elementsOrVersion);
                    {
                        
                    result.maxConnections = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.maxConnections, 8);
        }
    }



    
    static final class NetworkServiceGetNetworkChangeManagerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<NetworkChangeManager> networkChangeManager;

        private NetworkServiceGetNetworkChangeManagerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceGetNetworkChangeManagerParams() {
            this(0);
        }

        public static NetworkServiceGetNetworkChangeManagerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceGetNetworkChangeManagerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceGetNetworkChangeManagerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceGetNetworkChangeManagerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceGetNetworkChangeManagerParams(elementsOrVersion);
                    {
                        
                    result.networkChangeManager = decoder0.readInterfaceRequest(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.networkChangeManager, 8, false);
        }
    }



    
    static final class NetworkServiceGetNetworkQualityEstimatorManagerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<NetworkQualityEstimatorManager> receiver;

        private NetworkServiceGetNetworkQualityEstimatorManagerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceGetNetworkQualityEstimatorManagerParams() {
            this(0);
        }

        public static NetworkServiceGetNetworkQualityEstimatorManagerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceGetNetworkQualityEstimatorManagerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceGetNetworkQualityEstimatorManagerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceGetNetworkQualityEstimatorManagerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceGetNetworkQualityEstimatorManagerParams(elementsOrVersion);
                    {
                        
                    result.receiver = decoder0.readInterfaceRequest(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.receiver, 8, false);
        }
    }



    
    static final class NetworkServiceGetDnsConfigChangeManagerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<DnsConfigChangeManager> receiver;

        private NetworkServiceGetDnsConfigChangeManagerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceGetDnsConfigChangeManagerParams() {
            this(0);
        }

        public static NetworkServiceGetDnsConfigChangeManagerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceGetDnsConfigChangeManagerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceGetDnsConfigChangeManagerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceGetDnsConfigChangeManagerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceGetDnsConfigChangeManagerParams(elementsOrVersion);
                    {
                        
                    result.receiver = decoder0.readInterfaceRequest(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.receiver, 8, false);
        }
    }



    
    static final class NetworkServiceGetTotalNetworkUsagesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkServiceGetTotalNetworkUsagesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceGetTotalNetworkUsagesParams() {
            this(0);
        }

        public static NetworkServiceGetTotalNetworkUsagesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceGetTotalNetworkUsagesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceGetTotalNetworkUsagesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceGetTotalNetworkUsagesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceGetTotalNetworkUsagesParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class NetworkServiceGetTotalNetworkUsagesResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NetworkUsage[] totalNetworkUsages;

        private NetworkServiceGetTotalNetworkUsagesResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceGetTotalNetworkUsagesResponseParams() {
            this(0);
        }

        public static NetworkServiceGetTotalNetworkUsagesResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceGetTotalNetworkUsagesResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceGetTotalNetworkUsagesResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceGetTotalNetworkUsagesResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceGetTotalNetworkUsagesResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.totalNetworkUsages = new NetworkUsage[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.totalNetworkUsages[i1] = NetworkUsage.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (this.totalNetworkUsages == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.totalNetworkUsages.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.totalNetworkUsages.length; ++i0) {
                    
                    encoder1.encode(this.totalNetworkUsages[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }

    static class NetworkServiceGetTotalNetworkUsagesResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkService.GetTotalNetworkUsagesResponse mCallback;

        NetworkServiceGetTotalNetworkUsagesResponseParamsForwardToCallback(NetworkService.GetTotalNetworkUsagesResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_TOTAL_NETWORK_USAGES_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkServiceGetTotalNetworkUsagesResponseParams response = NetworkServiceGetTotalNetworkUsagesResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.totalNetworkUsages);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkServiceGetTotalNetworkUsagesResponseParamsProxyToResponder implements NetworkService.GetTotalNetworkUsagesResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkServiceGetTotalNetworkUsagesResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(NetworkUsage[] totalNetworkUsages) {
            NetworkServiceGetTotalNetworkUsagesResponseParams _response = new NetworkServiceGetTotalNetworkUsagesResponseParams();

            _response.totalNetworkUsages = totalNetworkUsages;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_TOTAL_NETWORK_USAGES_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NetworkServiceGetNetworkListParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int policy;

        private NetworkServiceGetNetworkListParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceGetNetworkListParams() {
            this(0);
        }

        public static NetworkServiceGetNetworkListParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceGetNetworkListParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceGetNetworkListParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceGetNetworkListParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceGetNetworkListParams(elementsOrVersion);
                    {
                        
                    result.policy = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.policy, 8);
        }
    }



    
    static final class NetworkServiceGetNetworkListResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NetworkInterface[] networks;

        private NetworkServiceGetNetworkListResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceGetNetworkListResponseParams() {
            this(0);
        }

        public static NetworkServiceGetNetworkListResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceGetNetworkListResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceGetNetworkListResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceGetNetworkListResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceGetNetworkListResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    if (decoder1 == null) {
                        result.networks = null;
                    } else {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.networks = new NetworkInterface[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.networks[i1] = NetworkInterface.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (this.networks == null) {
                encoder0.encodeNullPointer(8, true);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.networks.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.networks.length; ++i0) {
                    
                    encoder1.encode(this.networks[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }

    static class NetworkServiceGetNetworkListResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkService.GetNetworkListResponse mCallback;

        NetworkServiceGetNetworkListResponseParamsForwardToCallback(NetworkService.GetNetworkListResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_NETWORK_LIST_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkServiceGetNetworkListResponseParams response = NetworkServiceGetNetworkListResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.networks);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkServiceGetNetworkListResponseParamsProxyToResponder implements NetworkService.GetNetworkListResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkServiceGetNetworkListResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(NetworkInterface[] networks) {
            NetworkServiceGetNetworkListResponseParams _response = new NetworkServiceGetNetworkListResponseParams();

            _response.networks = networks;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_NETWORK_LIST_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NetworkServiceUpdateCrlSetParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.ReadOnlyBuffer crlSet;

        private NetworkServiceUpdateCrlSetParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceUpdateCrlSetParams() {
            this(0);
        }

        public static NetworkServiceUpdateCrlSetParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceUpdateCrlSetParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceUpdateCrlSetParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceUpdateCrlSetParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceUpdateCrlSetParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.crlSet = org.chromium.mojo_base.mojom.ReadOnlyBuffer.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.crlSet, 8, false);
        }
    }



    
    static final class NetworkServiceUpdateCrlSetResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkServiceUpdateCrlSetResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceUpdateCrlSetResponseParams() {
            this(0);
        }

        public static NetworkServiceUpdateCrlSetResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceUpdateCrlSetResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceUpdateCrlSetResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceUpdateCrlSetResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceUpdateCrlSetResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkServiceUpdateCrlSetResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkService.UpdateCrlSetResponse mCallback;

        NetworkServiceUpdateCrlSetResponseParamsForwardToCallback(NetworkService.UpdateCrlSetResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(UPDATE_CRL_SET_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkServiceUpdateCrlSetResponseParamsProxyToResponder implements NetworkService.UpdateCrlSetResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkServiceUpdateCrlSetResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkServiceUpdateCrlSetResponseParams _response = new NetworkServiceUpdateCrlSetResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    UPDATE_CRL_SET_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NetworkServiceOnCertDbChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkServiceOnCertDbChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceOnCertDbChangedParams() {
            this(0);
        }

        public static NetworkServiceOnCertDbChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceOnCertDbChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceOnCertDbChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceOnCertDbChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceOnCertDbChangedParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class NetworkServiceAddAllowedRequestInitiatorForPluginParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int processId;
        public org.chromium.url.internal.mojom.Origin allowedRequestInitiator;

        private NetworkServiceAddAllowedRequestInitiatorForPluginParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceAddAllowedRequestInitiatorForPluginParams() {
            this(0);
        }

        public static NetworkServiceAddAllowedRequestInitiatorForPluginParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceAddAllowedRequestInitiatorForPluginParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceAddAllowedRequestInitiatorForPluginParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceAddAllowedRequestInitiatorForPluginParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceAddAllowedRequestInitiatorForPluginParams(elementsOrVersion);
                    {
                        
                    result.processId = decoder0.readInt(8);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.allowedRequestInitiator = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.processId, 8);
            
            encoder0.encode(this.allowedRequestInitiator, 16, false);
        }
    }



    
    static final class NetworkServiceRemoveSecurityExceptionsForPluginParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int processId;

        private NetworkServiceRemoveSecurityExceptionsForPluginParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceRemoveSecurityExceptionsForPluginParams() {
            this(0);
        }

        public static NetworkServiceRemoveSecurityExceptionsForPluginParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceRemoveSecurityExceptionsForPluginParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceRemoveSecurityExceptionsForPluginParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceRemoveSecurityExceptionsForPluginParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceRemoveSecurityExceptionsForPluginParams(elementsOrVersion);
                    {
                        
                    result.processId = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.processId, 8);
        }
    }



    
    static final class NetworkServiceOnMemoryPressureParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int memoryPressureLevel;

        private NetworkServiceOnMemoryPressureParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceOnMemoryPressureParams() {
            this(0);
        }

        public static NetworkServiceOnMemoryPressureParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceOnMemoryPressureParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceOnMemoryPressureParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceOnMemoryPressureParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceOnMemoryPressureParams(elementsOrVersion);
                    {
                        
                    result.memoryPressureLevel = decoder0.readInt(8);
                        org.chromium.mojo_base.mojom.MemoryPressureLevel.validate(result.memoryPressureLevel);
                        result.memoryPressureLevel = org.chromium.mojo_base.mojom.MemoryPressureLevel.toKnownValue(result.memoryPressureLevel);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.memoryPressureLevel, 8);
        }
    }



    
    static final class NetworkServiceOnPeerToPeerConnectionsCountChangeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int count;

        private NetworkServiceOnPeerToPeerConnectionsCountChangeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceOnPeerToPeerConnectionsCountChangeParams() {
            this(0);
        }

        public static NetworkServiceOnPeerToPeerConnectionsCountChangeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceOnPeerToPeerConnectionsCountChangeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceOnPeerToPeerConnectionsCountChangeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceOnPeerToPeerConnectionsCountChangeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceOnPeerToPeerConnectionsCountChangeParams(elementsOrVersion);
                    {
                        
                    result.count = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.count, 8);
        }
    }



    
    static final class NetworkServiceOnApplicationStateChangeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int state;

        private NetworkServiceOnApplicationStateChangeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceOnApplicationStateChangeParams() {
            this(0);
        }

        public static NetworkServiceOnApplicationStateChangeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceOnApplicationStateChangeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceOnApplicationStateChangeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceOnApplicationStateChangeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceOnApplicationStateChangeParams(elementsOrVersion);
                    {
                        
                    result.state = decoder0.readInt(8);
                        org.chromium.mojo_base.mojom.ApplicationState.validate(result.state);
                        result.state = org.chromium.mojo_base.mojom.ApplicationState.toKnownValue(result.state);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.state, 8);
        }
    }



    
    static final class NetworkServiceSetEnvironmentParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public EnvironmentVariable[] environment;

        private NetworkServiceSetEnvironmentParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceSetEnvironmentParams() {
            this(0);
        }

        public static NetworkServiceSetEnvironmentParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceSetEnvironmentParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceSetEnvironmentParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceSetEnvironmentParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceSetEnvironmentParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.environment = new EnvironmentVariable[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.environment[i1] = EnvironmentVariable.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (this.environment == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.environment.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.environment.length; ++i0) {
                    
                    encoder1.encode(this.environment[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class NetworkServiceSetTrustTokenKeyCommitmentsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String rawCommitments;

        private NetworkServiceSetTrustTokenKeyCommitmentsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceSetTrustTokenKeyCommitmentsParams() {
            this(0);
        }

        public static NetworkServiceSetTrustTokenKeyCommitmentsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceSetTrustTokenKeyCommitmentsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceSetTrustTokenKeyCommitmentsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceSetTrustTokenKeyCommitmentsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceSetTrustTokenKeyCommitmentsParams(elementsOrVersion);
                    {
                        
                    result.rawCommitments = decoder0.readString(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.rawCommitments, 8, false);
        }
    }



    
    static final class NetworkServiceSetTrustTokenKeyCommitmentsResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkServiceSetTrustTokenKeyCommitmentsResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceSetTrustTokenKeyCommitmentsResponseParams() {
            this(0);
        }

        public static NetworkServiceSetTrustTokenKeyCommitmentsResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceSetTrustTokenKeyCommitmentsResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceSetTrustTokenKeyCommitmentsResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceSetTrustTokenKeyCommitmentsResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceSetTrustTokenKeyCommitmentsResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class NetworkServiceSetTrustTokenKeyCommitmentsResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkService.SetTrustTokenKeyCommitmentsResponse mCallback;

        NetworkServiceSetTrustTokenKeyCommitmentsResponseParamsForwardToCallback(NetworkService.SetTrustTokenKeyCommitmentsResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(SET_TRUST_TOKEN_KEY_COMMITMENTS_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkServiceSetTrustTokenKeyCommitmentsResponseParamsProxyToResponder implements NetworkService.SetTrustTokenKeyCommitmentsResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkServiceSetTrustTokenKeyCommitmentsResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            NetworkServiceSetTrustTokenKeyCommitmentsResponseParams _response = new NetworkServiceSetTrustTokenKeyCommitmentsResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SET_TRUST_TOKEN_KEY_COMMITMENTS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NetworkServiceClearSctAuditingCacheParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NetworkServiceClearSctAuditingCacheParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceClearSctAuditingCacheParams() {
            this(0);
        }

        public static NetworkServiceClearSctAuditingCacheParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceClearSctAuditingCacheParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceClearSctAuditingCacheParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceClearSctAuditingCacheParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceClearSctAuditingCacheParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class NetworkServiceConfigureSctAuditingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 48;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(48, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean enabled;
        public double samplingRate;
        public org.chromium.url.mojom.Url reportUri;
        public MutableNetworkTrafficAnnotationTag trafficAnnotation;
        public UrlLoaderFactory factory;

        private NetworkServiceConfigureSctAuditingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceConfigureSctAuditingParams() {
            this(0);
        }

        public static NetworkServiceConfigureSctAuditingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceConfigureSctAuditingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceConfigureSctAuditingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceConfigureSctAuditingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceConfigureSctAuditingParams(elementsOrVersion);
                    {
                        
                    result.enabled = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.samplingRate = decoder0.readDouble(16);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.reportUri = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.trafficAnnotation = MutableNetworkTrafficAnnotationTag.decode(decoder1);
                    }
                    {
                        
                    result.factory = decoder0.readServiceInterface(40, false, UrlLoaderFactory.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.enabled, 8, 0);
            
            encoder0.encode(this.samplingRate, 16);
            
            encoder0.encode(this.reportUri, 24, false);
            
            encoder0.encode(this.trafficAnnotation, 32, false);
            
            encoder0.encode(this.factory, 40, false, UrlLoaderFactory.MANAGER);
        }
    }



    
    static final class NetworkServiceDumpWithoutCrashingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.Time dumpRequestTime;

        private NetworkServiceDumpWithoutCrashingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceDumpWithoutCrashingParams() {
            this(0);
        }

        public static NetworkServiceDumpWithoutCrashingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceDumpWithoutCrashingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceDumpWithoutCrashingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceDumpWithoutCrashingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceDumpWithoutCrashingParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.dumpRequestTime = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.dumpRequestTime, 8, false);
        }
    }



    
    static final class NetworkServiceBindTestInterfaceParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<NetworkServiceTest> receiver;

        private NetworkServiceBindTestInterfaceParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceBindTestInterfaceParams() {
            this(0);
        }

        public static NetworkServiceBindTestInterfaceParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceBindTestInterfaceParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceBindTestInterfaceParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceBindTestInterfaceParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceBindTestInterfaceParams(elementsOrVersion);
                    {
                        
                    result.receiver = decoder0.readInterfaceRequest(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.receiver, 8, false);
        }
    }



    
    static final class NetworkServiceSetPreloadedFirstPartySetsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String rawSets;

        private NetworkServiceSetPreloadedFirstPartySetsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NetworkServiceSetPreloadedFirstPartySetsParams() {
            this(0);
        }

        public static NetworkServiceSetPreloadedFirstPartySetsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceSetPreloadedFirstPartySetsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NetworkServiceSetPreloadedFirstPartySetsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceSetPreloadedFirstPartySetsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NetworkServiceSetPreloadedFirstPartySetsParams(elementsOrVersion);
                    {
                        
                    result.rawSets = decoder0.readString(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.rawSets, 8, false);
        }
    }



}
