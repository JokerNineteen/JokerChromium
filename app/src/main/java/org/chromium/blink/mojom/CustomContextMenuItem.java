// CustomContextMenuItem.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/context_menu/context_menu.mojom
//

package org.chromium.blink.mojom;


public final class CustomContextMenuItem extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 56;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(56, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public org.chromium.mojo_base.mojom.String16 label;
    public org.chromium.mojo_base.mojom.String16 icon;
    public org.chromium.mojo_base.mojom.String16 toolTip;
    public int type;
    public int action;
    public boolean rtl;
    public boolean hasDirectionalOverride;
    public boolean enabled;
    public boolean checked;
    public CustomContextMenuItem[] submenu;

    private CustomContextMenuItem(int version) {
        super(STRUCT_SIZE, version);
    }

    public CustomContextMenuItem() {
        this(0);
    }

    public static CustomContextMenuItem deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static CustomContextMenuItem deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static CustomContextMenuItem decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        CustomContextMenuItem result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new CustomContextMenuItem(elementsOrVersion);
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                result.label = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                result.icon = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                result.toolTip = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                }
                {
                    
                result.type = decoder0.readInt(32);
                    CustomContextMenuItemType.validate(result.type);
                    result.type = CustomContextMenuItemType.toKnownValue(result.type);
                }
                {
                    
                result.action = decoder0.readInt(36);
                }
                {
                    
                result.rtl = decoder0.readBoolean(40, 0);
                }
                {
                    
                result.hasDirectionalOverride = decoder0.readBoolean(40, 1);
                }
                {
                    
                result.enabled = decoder0.readBoolean(40, 2);
                }
                {
                    
                result.checked = decoder0.readBoolean(40, 3);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.submenu = new CustomContextMenuItem[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.submenu[i1] = CustomContextMenuItem.decode(decoder2);
                    }
                }
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.label, 8, false);
        
        encoder0.encode(this.icon, 16, false);
        
        encoder0.encode(this.toolTip, 24, false);
        
        encoder0.encode(this.type, 32);
        
        encoder0.encode(this.action, 36);
        
        encoder0.encode(this.rtl, 40, 0);
        
        encoder0.encode(this.hasDirectionalOverride, 40, 1);
        
        encoder0.encode(this.enabled, 40, 2);
        
        encoder0.encode(this.checked, 40, 3);
        
        if (this.submenu == null) {
            encoder0.encodeNullPointer(48, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.submenu.length, 48, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.submenu.length; ++i0) {
                
                encoder1.encode(this.submenu[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
    }
}