// WidgetInputHandlerHost_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/input/input_handler.mojom
//

package org.chromium.blink.mojom;


class WidgetInputHandlerHost_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<WidgetInputHandlerHost, WidgetInputHandlerHost.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<WidgetInputHandlerHost, WidgetInputHandlerHost.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.WidgetInputHandlerHost";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, WidgetInputHandlerHost impl) {
            return new Stub(core, impl);
        }

        @Override
        public WidgetInputHandlerHost[] buildArray(int size) {
          return new WidgetInputHandlerHost[size];
        }
    };


    private static final int SET_TOUCH_ACTION_FROM_MAIN_ORDINAL = 0;

    private static final int DID_OVERSCROLL_ORDINAL = 1;

    private static final int DID_START_SCROLLING_VIEWPORT_ORDINAL = 2;

    private static final int IME_CANCEL_COMPOSITION_ORDINAL = 3;

    private static final int IME_COMPOSITION_RANGE_CHANGED_ORDINAL = 4;

    private static final int SET_MOUSE_CAPTURE_ORDINAL = 5;

    private static final int REQUEST_MOUSE_LOCK_ORDINAL = 6;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements WidgetInputHandlerHost.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void setTouchActionFromMain(
int touchAction) {

            WidgetInputHandlerHostSetTouchActionFromMainParams _message = new WidgetInputHandlerHostSetTouchActionFromMainParams();

            _message.touchAction = touchAction;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_TOUCH_ACTION_FROM_MAIN_ORDINAL)));

        }


        @Override
        public void didOverscroll(
DidOverscrollParams params) {

            WidgetInputHandlerHostDidOverscrollParams _message = new WidgetInputHandlerHostDidOverscrollParams();

            _message.params = params;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_OVERSCROLL_ORDINAL)));

        }


        @Override
        public void didStartScrollingViewport(
) {

            WidgetInputHandlerHostDidStartScrollingViewportParams _message = new WidgetInputHandlerHostDidStartScrollingViewportParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_START_SCROLLING_VIEWPORT_ORDINAL)));

        }


        @Override
        public void imeCancelComposition(
) {

            WidgetInputHandlerHostImeCancelCompositionParams _message = new WidgetInputHandlerHostImeCancelCompositionParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(IME_CANCEL_COMPOSITION_ORDINAL)));

        }


        @Override
        public void imeCompositionRangeChanged(
org.chromium.gfx.mojom.Range range, org.chromium.gfx.mojom.Rect[] bounds) {

            WidgetInputHandlerHostImeCompositionRangeChangedParams _message = new WidgetInputHandlerHostImeCompositionRangeChangedParams();

            _message.range = range;

            _message.bounds = bounds;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(IME_COMPOSITION_RANGE_CHANGED_ORDINAL)));

        }


        @Override
        public void setMouseCapture(
boolean capture) {

            WidgetInputHandlerHostSetMouseCaptureParams _message = new WidgetInputHandlerHostSetMouseCaptureParams();

            _message.capture = capture;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_MOUSE_CAPTURE_ORDINAL)));

        }


        @Override
        public void requestMouseLock(
boolean fromUserGesture, boolean unadjustedMovement, 
RequestMouseLockResponse callback) {

            WidgetInputHandlerHostRequestMouseLockParams _message = new WidgetInputHandlerHostRequestMouseLockParams();

            _message.fromUserGesture = fromUserGesture;

            _message.unadjustedMovement = unadjustedMovement;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    REQUEST_MOUSE_LOCK_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new WidgetInputHandlerHostRequestMouseLockResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<WidgetInputHandlerHost> {

        Stub(org.chromium.mojo.system.Core core, WidgetInputHandlerHost impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                WidgetInputHandlerHost_Internal.MANAGER, messageWithHeader);





                    case SET_TOUCH_ACTION_FROM_MAIN_ORDINAL: {

                        WidgetInputHandlerHostSetTouchActionFromMainParams data =
                                WidgetInputHandlerHostSetTouchActionFromMainParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setTouchActionFromMain(data.touchAction);
                        return true;
                    }





                    case DID_OVERSCROLL_ORDINAL: {

                        WidgetInputHandlerHostDidOverscrollParams data =
                                WidgetInputHandlerHostDidOverscrollParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didOverscroll(data.params);
                        return true;
                    }





                    case DID_START_SCROLLING_VIEWPORT_ORDINAL: {

                        WidgetInputHandlerHostDidStartScrollingViewportParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didStartScrollingViewport();
                        return true;
                    }





                    case IME_CANCEL_COMPOSITION_ORDINAL: {

                        WidgetInputHandlerHostImeCancelCompositionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().imeCancelComposition();
                        return true;
                    }





                    case IME_COMPOSITION_RANGE_CHANGED_ORDINAL: {

                        WidgetInputHandlerHostImeCompositionRangeChangedParams data =
                                WidgetInputHandlerHostImeCompositionRangeChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().imeCompositionRangeChanged(data.range, data.bounds);
                        return true;
                    }





                    case SET_MOUSE_CAPTURE_ORDINAL: {

                        WidgetInputHandlerHostSetMouseCaptureParams data =
                                WidgetInputHandlerHostSetMouseCaptureParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setMouseCapture(data.capture);
                        return true;
                    }




                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), WidgetInputHandlerHost_Internal.MANAGER, messageWithHeader, receiver);



















                    case REQUEST_MOUSE_LOCK_ORDINAL: {

                        WidgetInputHandlerHostRequestMouseLockParams data =
                                WidgetInputHandlerHostRequestMouseLockParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestMouseLock(data.fromUserGesture, data.unadjustedMovement, new WidgetInputHandlerHostRequestMouseLockResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class WidgetInputHandlerHostSetTouchActionFromMainParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int touchAction;

        private WidgetInputHandlerHostSetTouchActionFromMainParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerHostSetTouchActionFromMainParams() {
            this(0);
        }

        public static WidgetInputHandlerHostSetTouchActionFromMainParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerHostSetTouchActionFromMainParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerHostSetTouchActionFromMainParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerHostSetTouchActionFromMainParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerHostSetTouchActionFromMainParams(elementsOrVersion);
                    {
                        
                    result.touchAction = decoder0.readInt(8);
                        org.chromium.cc.mojom.TouchAction.validate(result.touchAction);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.touchAction, 8);
        }
    }



    
    static final class WidgetInputHandlerHostDidOverscrollParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public DidOverscrollParams params;

        private WidgetInputHandlerHostDidOverscrollParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerHostDidOverscrollParams() {
            this(0);
        }

        public static WidgetInputHandlerHostDidOverscrollParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerHostDidOverscrollParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerHostDidOverscrollParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerHostDidOverscrollParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerHostDidOverscrollParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.params = DidOverscrollParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.params, 8, false);
        }
    }



    
    static final class WidgetInputHandlerHostDidStartScrollingViewportParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private WidgetInputHandlerHostDidStartScrollingViewportParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerHostDidStartScrollingViewportParams() {
            this(0);
        }

        public static WidgetInputHandlerHostDidStartScrollingViewportParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerHostDidStartScrollingViewportParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerHostDidStartScrollingViewportParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerHostDidStartScrollingViewportParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerHostDidStartScrollingViewportParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class WidgetInputHandlerHostImeCancelCompositionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private WidgetInputHandlerHostImeCancelCompositionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerHostImeCancelCompositionParams() {
            this(0);
        }

        public static WidgetInputHandlerHostImeCancelCompositionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerHostImeCancelCompositionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerHostImeCancelCompositionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerHostImeCancelCompositionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerHostImeCancelCompositionParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class WidgetInputHandlerHostImeCompositionRangeChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Range range;
        public org.chromium.gfx.mojom.Rect[] bounds;

        private WidgetInputHandlerHostImeCompositionRangeChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerHostImeCompositionRangeChangedParams() {
            this(0);
        }

        public static WidgetInputHandlerHostImeCompositionRangeChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerHostImeCompositionRangeChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerHostImeCompositionRangeChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerHostImeCompositionRangeChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerHostImeCompositionRangeChangedParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.range = org.chromium.gfx.mojom.Range.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.bounds = new org.chromium.gfx.mojom.Rect[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.bounds[i1] = org.chromium.gfx.mojom.Rect.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.range, 8, false);
            
            if (this.bounds == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.bounds.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.bounds.length; ++i0) {
                    
                    encoder1.encode(this.bounds[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class WidgetInputHandlerHostSetMouseCaptureParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean capture;

        private WidgetInputHandlerHostSetMouseCaptureParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerHostSetMouseCaptureParams() {
            this(0);
        }

        public static WidgetInputHandlerHostSetMouseCaptureParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerHostSetMouseCaptureParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerHostSetMouseCaptureParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerHostSetMouseCaptureParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerHostSetMouseCaptureParams(elementsOrVersion);
                    {
                        
                    result.capture = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.capture, 8, 0);
        }
    }



    
    static final class WidgetInputHandlerHostRequestMouseLockParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean fromUserGesture;
        public boolean unadjustedMovement;

        private WidgetInputHandlerHostRequestMouseLockParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerHostRequestMouseLockParams() {
            this(0);
        }

        public static WidgetInputHandlerHostRequestMouseLockParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerHostRequestMouseLockParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerHostRequestMouseLockParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerHostRequestMouseLockParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerHostRequestMouseLockParams(elementsOrVersion);
                    {
                        
                    result.fromUserGesture = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.unadjustedMovement = decoder0.readBoolean(8, 1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.fromUserGesture, 8, 0);
            
            encoder0.encode(this.unadjustedMovement, 8, 1);
        }
    }



    
    static final class WidgetInputHandlerHostRequestMouseLockResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int result;
        public PointerLockContext context;

        private WidgetInputHandlerHostRequestMouseLockResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerHostRequestMouseLockResponseParams() {
            this(0);
        }

        public static WidgetInputHandlerHostRequestMouseLockResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerHostRequestMouseLockResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerHostRequestMouseLockResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerHostRequestMouseLockResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerHostRequestMouseLockResponseParams(elementsOrVersion);
                    {
                        
                    result.result = decoder0.readInt(8);
                        PointerLockResult.validate(result.result);
                    }
                    {
                        
                    result.context = decoder0.readServiceInterface(12, true, PointerLockContext.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8);
            
            encoder0.encode(this.context, 12, true, PointerLockContext.MANAGER);
        }
    }

    static class WidgetInputHandlerHostRequestMouseLockResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final WidgetInputHandlerHost.RequestMouseLockResponse mCallback;

        WidgetInputHandlerHostRequestMouseLockResponseParamsForwardToCallback(WidgetInputHandlerHost.RequestMouseLockResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(REQUEST_MOUSE_LOCK_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                WidgetInputHandlerHostRequestMouseLockResponseParams response = WidgetInputHandlerHostRequestMouseLockResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.context);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class WidgetInputHandlerHostRequestMouseLockResponseParamsProxyToResponder implements WidgetInputHandlerHost.RequestMouseLockResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        WidgetInputHandlerHostRequestMouseLockResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer result, PointerLockContext context) {
            WidgetInputHandlerHostRequestMouseLockResponseParams _response = new WidgetInputHandlerHostRequestMouseLockResponseParams();

            _response.result = result;

            _response.context = context;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    REQUEST_MOUSE_LOCK_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



}
