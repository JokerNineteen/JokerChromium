// PeerConnectionManager_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/peerconnection/peer_connection_tracker.mojom
//

package org.chromium.blink.mojom;


class PeerConnectionManager_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<PeerConnectionManager, PeerConnectionManager.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<PeerConnectionManager, PeerConnectionManager.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.PeerConnectionManager";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, PeerConnectionManager impl) {
            return new Stub(core, impl);
        }

        @Override
        public PeerConnectionManager[] buildArray(int size) {
          return new PeerConnectionManager[size];
        }
    };


    private static final int ON_SUSPEND_ORDINAL = 0;

    private static final int ON_THERMAL_STATE_CHANGE_ORDINAL = 1;

    private static final int START_EVENT_LOG_ORDINAL = 2;

    private static final int STOP_EVENT_LOG_ORDINAL = 3;

    private static final int GET_STANDARD_STATS_ORDINAL = 4;

    private static final int GET_LEGACY_STATS_ORDINAL = 5;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements PeerConnectionManager.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void onSuspend(
) {

            PeerConnectionManagerOnSuspendParams _message = new PeerConnectionManagerOnSuspendParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_SUSPEND_ORDINAL)));

        }


        @Override
        public void onThermalStateChange(
int thermalState) {

            PeerConnectionManagerOnThermalStateChangeParams _message = new PeerConnectionManagerOnThermalStateChangeParams();

            _message.thermalState = thermalState;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_THERMAL_STATE_CHANGE_ORDINAL)));

        }


        @Override
        public void startEventLog(
int peerConnectionLocalId, int outputPeriodMs) {

            PeerConnectionManagerStartEventLogParams _message = new PeerConnectionManagerStartEventLogParams();

            _message.peerConnectionLocalId = peerConnectionLocalId;

            _message.outputPeriodMs = outputPeriodMs;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(START_EVENT_LOG_ORDINAL)));

        }


        @Override
        public void stopEventLog(
int peerConnectionLocalId) {

            PeerConnectionManagerStopEventLogParams _message = new PeerConnectionManagerStopEventLogParams();

            _message.peerConnectionLocalId = peerConnectionLocalId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(STOP_EVENT_LOG_ORDINAL)));

        }


        @Override
        public void getStandardStats(
) {

            PeerConnectionManagerGetStandardStatsParams _message = new PeerConnectionManagerGetStandardStatsParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GET_STANDARD_STATS_ORDINAL)));

        }


        @Override
        public void getLegacyStats(
) {

            PeerConnectionManagerGetLegacyStatsParams _message = new PeerConnectionManagerGetLegacyStatsParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GET_LEGACY_STATS_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<PeerConnectionManager> {

        Stub(org.chromium.mojo.system.Core core, PeerConnectionManager impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                PeerConnectionManager_Internal.MANAGER, messageWithHeader);





                    case ON_SUSPEND_ORDINAL: {

                        PeerConnectionManagerOnSuspendParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onSuspend();
                        return true;
                    }





                    case ON_THERMAL_STATE_CHANGE_ORDINAL: {

                        PeerConnectionManagerOnThermalStateChangeParams data =
                                PeerConnectionManagerOnThermalStateChangeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onThermalStateChange(data.thermalState);
                        return true;
                    }





                    case START_EVENT_LOG_ORDINAL: {

                        PeerConnectionManagerStartEventLogParams data =
                                PeerConnectionManagerStartEventLogParams.deserialize(messageWithHeader.getPayload());

                        getImpl().startEventLog(data.peerConnectionLocalId, data.outputPeriodMs);
                        return true;
                    }





                    case STOP_EVENT_LOG_ORDINAL: {

                        PeerConnectionManagerStopEventLogParams data =
                                PeerConnectionManagerStopEventLogParams.deserialize(messageWithHeader.getPayload());

                        getImpl().stopEventLog(data.peerConnectionLocalId);
                        return true;
                    }





                    case GET_STANDARD_STATS_ORDINAL: {

                        PeerConnectionManagerGetStandardStatsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getStandardStats();
                        return true;
                    }





                    case GET_LEGACY_STATS_ORDINAL: {

                        PeerConnectionManagerGetLegacyStatsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getLegacyStats();
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), PeerConnectionManager_Internal.MANAGER, messageWithHeader, receiver);














                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class PeerConnectionManagerOnSuspendParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private PeerConnectionManagerOnSuspendParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PeerConnectionManagerOnSuspendParams() {
            this(0);
        }

        public static PeerConnectionManagerOnSuspendParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PeerConnectionManagerOnSuspendParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PeerConnectionManagerOnSuspendParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PeerConnectionManagerOnSuspendParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PeerConnectionManagerOnSuspendParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class PeerConnectionManagerOnThermalStateChangeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int thermalState;

        private PeerConnectionManagerOnThermalStateChangeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PeerConnectionManagerOnThermalStateChangeParams() {
            this(0);
        }

        public static PeerConnectionManagerOnThermalStateChangeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PeerConnectionManagerOnThermalStateChangeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PeerConnectionManagerOnThermalStateChangeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PeerConnectionManagerOnThermalStateChangeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PeerConnectionManagerOnThermalStateChangeParams(elementsOrVersion);
                    {
                        
                    result.thermalState = decoder0.readInt(8);
                        DeviceThermalState.validate(result.thermalState);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.thermalState, 8);
        }
    }



    
    static final class PeerConnectionManagerStartEventLogParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int peerConnectionLocalId;
        public int outputPeriodMs;

        private PeerConnectionManagerStartEventLogParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PeerConnectionManagerStartEventLogParams() {
            this(0);
        }

        public static PeerConnectionManagerStartEventLogParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PeerConnectionManagerStartEventLogParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PeerConnectionManagerStartEventLogParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PeerConnectionManagerStartEventLogParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PeerConnectionManagerStartEventLogParams(elementsOrVersion);
                    {
                        
                    result.peerConnectionLocalId = decoder0.readInt(8);
                    }
                    {
                        
                    result.outputPeriodMs = decoder0.readInt(12);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.peerConnectionLocalId, 8);
            
            encoder0.encode(this.outputPeriodMs, 12);
        }
    }



    
    static final class PeerConnectionManagerStopEventLogParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int peerConnectionLocalId;

        private PeerConnectionManagerStopEventLogParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PeerConnectionManagerStopEventLogParams() {
            this(0);
        }

        public static PeerConnectionManagerStopEventLogParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PeerConnectionManagerStopEventLogParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PeerConnectionManagerStopEventLogParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PeerConnectionManagerStopEventLogParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PeerConnectionManagerStopEventLogParams(elementsOrVersion);
                    {
                        
                    result.peerConnectionLocalId = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.peerConnectionLocalId, 8);
        }
    }



    
    static final class PeerConnectionManagerGetStandardStatsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private PeerConnectionManagerGetStandardStatsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PeerConnectionManagerGetStandardStatsParams() {
            this(0);
        }

        public static PeerConnectionManagerGetStandardStatsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PeerConnectionManagerGetStandardStatsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PeerConnectionManagerGetStandardStatsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PeerConnectionManagerGetStandardStatsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PeerConnectionManagerGetStandardStatsParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class PeerConnectionManagerGetLegacyStatsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private PeerConnectionManagerGetLegacyStatsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PeerConnectionManagerGetLegacyStatsParams() {
            this(0);
        }

        public static PeerConnectionManagerGetLegacyStatsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PeerConnectionManagerGetLegacyStatsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PeerConnectionManagerGetLegacyStatsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PeerConnectionManagerGetLegacyStatsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PeerConnectionManagerGetLegacyStatsParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



}
