// LocalFrame_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/frame/frame.mojom
//

package org.chromium.blink.mojom;


class LocalFrame_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<LocalFrame, LocalFrame.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<LocalFrame, LocalFrame.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.LocalFrame";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, LocalFrame impl) {
            return new Stub(core, impl);
        }

        @Override
        public LocalFrame[] buildArray(int size) {
          return new LocalFrame[size];
        }
    };


    private static final int GET_TEXT_SURROUNDING_SELECTION_ORDINAL = 0;

    private static final int SEND_INTERVENTION_REPORT_ORDINAL = 1;

    private static final int SET_FRAME_OWNER_PROPERTIES_ORDINAL = 2;

    private static final int NOTIFY_USER_ACTIVATION_ORDINAL = 3;

    private static final int NOTIFY_VIRTUAL_KEYBOARD_OVERLAY_RECT_ORDINAL = 4;

    private static final int ADD_MESSAGE_TO_CONSOLE_ORDINAL = 5;

    private static final int ADD_INSPECTOR_ISSUE_ORDINAL = 6;

    private static final int SWAP_IN_IMMEDIATELY_ORDINAL = 7;

    private static final int CHECK_COMPLETED_ORDINAL = 8;

    private static final int STOP_LOADING_ORDINAL = 9;

    private static final int COLLAPSE_ORDINAL = 10;

    private static final int ENABLE_VIEW_SOURCE_MODE_ORDINAL = 11;

    private static final int FOCUS_ORDINAL = 12;

    private static final int CLEAR_FOCUSED_ELEMENT_ORDINAL = 13;

    private static final int GET_RESOURCE_SNAPSHOT_FOR_WEB_BUNDLE_ORDINAL = 14;

    private static final int COPY_IMAGE_AT_ORDINAL = 15;

    private static final int SAVE_IMAGE_AT_ORDINAL = 16;

    private static final int REPORT_BLINK_FEATURE_USAGE_ORDINAL = 17;

    private static final int RENDER_FALLBACK_CONTENT_ORDINAL = 18;

    private static final int BEFORE_UNLOAD_ORDINAL = 19;

    private static final int MEDIA_PLAYER_ACTION_AT_ORDINAL = 20;

    private static final int ADVANCE_FOCUS_IN_FRAME_ORDINAL = 21;

    private static final int ADVANCE_FOCUS_IN_FORM_ORDINAL = 22;

    private static final int REPORT_CONTENT_SECURITY_POLICY_VIOLATION_ORDINAL = 23;

    private static final int DID_UPDATE_FRAME_POLICY_ORDINAL = 24;

    private static final int ON_SCREENS_CHANGE_ORDINAL = 25;

    private static final int POST_MESSAGE_EVENT_ORDINAL = 26;

    private static final int BIND_REPORTING_OBSERVER_ORDINAL = 27;

    private static final int UPDATE_OPENER_ORDINAL = 28;

    private static final int GET_SAVABLE_RESOURCE_LINKS_ORDINAL = 29;

    private static final int MIXED_CONTENT_FOUND_ORDINAL = 30;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements LocalFrame.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void getTextSurroundingSelection(
int maxLength, 
GetTextSurroundingSelectionResponse callback) {

            LocalFrameGetTextSurroundingSelectionParams _message = new LocalFrameGetTextSurroundingSelectionParams();

            _message.maxLength = maxLength;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_TEXT_SURROUNDING_SELECTION_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameGetTextSurroundingSelectionResponseParamsForwardToCallback(callback));

        }


        @Override
        public void sendInterventionReport(
String id, String message) {

            LocalFrameSendInterventionReportParams _message = new LocalFrameSendInterventionReportParams();

            _message.id = id;

            _message.message = message;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SEND_INTERVENTION_REPORT_ORDINAL)));

        }


        @Override
        public void setFrameOwnerProperties(
FrameOwnerProperties properties) {

            LocalFrameSetFrameOwnerPropertiesParams _message = new LocalFrameSetFrameOwnerPropertiesParams();

            _message.properties = properties;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_FRAME_OWNER_PROPERTIES_ORDINAL)));

        }


        @Override
        public void notifyUserActivation(
int notificationType) {

            LocalFrameNotifyUserActivationParams _message = new LocalFrameNotifyUserActivationParams();

            _message.notificationType = notificationType;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(NOTIFY_USER_ACTIVATION_ORDINAL)));

        }


        @Override
        public void notifyVirtualKeyboardOverlayRect(
org.chromium.gfx.mojom.Rect keyboardRect) {

            LocalFrameNotifyVirtualKeyboardOverlayRectParams _message = new LocalFrameNotifyVirtualKeyboardOverlayRectParams();

            _message.keyboardRect = keyboardRect;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(NOTIFY_VIRTUAL_KEYBOARD_OVERLAY_RECT_ORDINAL)));

        }


        @Override
        public void addMessageToConsole(
int level, String message, boolean discardDuplicates) {

            LocalFrameAddMessageToConsoleParams _message = new LocalFrameAddMessageToConsoleParams();

            _message.level = level;

            _message.message = message;

            _message.discardDuplicates = discardDuplicates;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADD_MESSAGE_TO_CONSOLE_ORDINAL)));

        }


        @Override
        public void addInspectorIssue(
InspectorIssueInfo info) {

            LocalFrameAddInspectorIssueParams _message = new LocalFrameAddInspectorIssueParams();

            _message.info = info;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADD_INSPECTOR_ISSUE_ORDINAL)));

        }


        @Override
        public void swapInImmediately(
) {

            LocalFrameSwapInImmediatelyParams _message = new LocalFrameSwapInImmediatelyParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SWAP_IN_IMMEDIATELY_ORDINAL)));

        }


        @Override
        public void checkCompleted(
) {

            LocalFrameCheckCompletedParams _message = new LocalFrameCheckCompletedParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CHECK_COMPLETED_ORDINAL)));

        }


        @Override
        public void stopLoading(
) {

            LocalFrameStopLoadingParams _message = new LocalFrameStopLoadingParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(STOP_LOADING_ORDINAL)));

        }


        @Override
        public void collapse(
boolean collapsed) {

            LocalFrameCollapseParams _message = new LocalFrameCollapseParams();

            _message.collapsed = collapsed;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(COLLAPSE_ORDINAL)));

        }


        @Override
        public void enableViewSourceMode(
) {

            LocalFrameEnableViewSourceModeParams _message = new LocalFrameEnableViewSourceModeParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENABLE_VIEW_SOURCE_MODE_ORDINAL)));

        }


        @Override
        public void focus(
) {

            LocalFrameFocusParams _message = new LocalFrameFocusParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(FOCUS_ORDINAL)));

        }


        @Override
        public void clearFocusedElement(
) {

            LocalFrameClearFocusedElementParams _message = new LocalFrameClearFocusedElementParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CLEAR_FOCUSED_ELEMENT_ORDINAL)));

        }


        @Override
        public void getResourceSnapshotForWebBundle(
org.chromium.mojo.bindings.InterfaceRequest<org.chromium.data_decoder.mojom.ResourceSnapshotForWebBundle> receiver) {

            LocalFrameGetResourceSnapshotForWebBundleParams _message = new LocalFrameGetResourceSnapshotForWebBundleParams();

            _message.receiver = receiver;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GET_RESOURCE_SNAPSHOT_FOR_WEB_BUNDLE_ORDINAL)));

        }


        @Override
        public void copyImageAt(
org.chromium.gfx.mojom.Point windowPoint) {

            LocalFrameCopyImageAtParams _message = new LocalFrameCopyImageAtParams();

            _message.windowPoint = windowPoint;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(COPY_IMAGE_AT_ORDINAL)));

        }


        @Override
        public void saveImageAt(
org.chromium.gfx.mojom.Point windowPoint) {

            LocalFrameSaveImageAtParams _message = new LocalFrameSaveImageAtParams();

            _message.windowPoint = windowPoint;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SAVE_IMAGE_AT_ORDINAL)));

        }


        @Override
        public void reportBlinkFeatureUsage(
int[] features) {

            LocalFrameReportBlinkFeatureUsageParams _message = new LocalFrameReportBlinkFeatureUsageParams();

            _message.features = features;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REPORT_BLINK_FEATURE_USAGE_ORDINAL)));

        }


        @Override
        public void renderFallbackContent(
) {

            LocalFrameRenderFallbackContentParams _message = new LocalFrameRenderFallbackContentParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(RENDER_FALLBACK_CONTENT_ORDINAL)));

        }


        @Override
        public void beforeUnload(
boolean isReload, 
BeforeUnloadResponse callback) {

            LocalFrameBeforeUnloadParams _message = new LocalFrameBeforeUnloadParams();

            _message.isReload = isReload;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    BEFORE_UNLOAD_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameBeforeUnloadResponseParamsForwardToCallback(callback));

        }


        @Override
        public void mediaPlayerActionAt(
org.chromium.gfx.mojom.Point location, MediaPlayerAction action) {

            LocalFrameMediaPlayerActionAtParams _message = new LocalFrameMediaPlayerActionAtParams();

            _message.location = location;

            _message.action = action;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(MEDIA_PLAYER_ACTION_AT_ORDINAL)));

        }


        @Override
        public void advanceFocusInFrame(
int focusType, RemoteFrameToken sourceFrameToken) {

            LocalFrameAdvanceFocusInFrameParams _message = new LocalFrameAdvanceFocusInFrameParams();

            _message.focusType = focusType;

            _message.sourceFrameToken = sourceFrameToken;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADVANCE_FOCUS_IN_FRAME_ORDINAL)));

        }


        @Override
        public void advanceFocusInForm(
int focusType) {

            LocalFrameAdvanceFocusInFormParams _message = new LocalFrameAdvanceFocusInFormParams();

            _message.focusType = focusType;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADVANCE_FOCUS_IN_FORM_ORDINAL)));

        }


        @Override
        public void reportContentSecurityPolicyViolation(
org.chromium.network.mojom.CspViolation violation) {

            LocalFrameReportContentSecurityPolicyViolationParams _message = new LocalFrameReportContentSecurityPolicyViolationParams();

            _message.violation = violation;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REPORT_CONTENT_SECURITY_POLICY_VIOLATION_ORDINAL)));

        }


        @Override
        public void didUpdateFramePolicy(
FramePolicy framePolicy) {

            LocalFrameDidUpdateFramePolicyParams _message = new LocalFrameDidUpdateFramePolicyParams();

            _message.framePolicy = framePolicy;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_UPDATE_FRAME_POLICY_ORDINAL)));

        }


        @Override
        public void onScreensChange(
) {

            LocalFrameOnScreensChangeParams _message = new LocalFrameOnScreensChangeParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_SCREENS_CHANGE_ORDINAL)));

        }


        @Override
        public void postMessageEvent(
RemoteFrameToken sourceFrameToken, org.chromium.mojo_base.mojom.String16 sourceOrigin, org.chromium.mojo_base.mojom.String16 targetOrigin, TransferableMessage message) {

            LocalFramePostMessageEventParams _message = new LocalFramePostMessageEventParams();

            _message.sourceFrameToken = sourceFrameToken;

            _message.sourceOrigin = sourceOrigin;

            _message.targetOrigin = targetOrigin;

            _message.message = message;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(POST_MESSAGE_EVENT_ORDINAL)));

        }


        @Override
        public void bindReportingObserver(
org.chromium.mojo.bindings.InterfaceRequest<ReportingObserver> receiver) {

            LocalFrameBindReportingObserverParams _message = new LocalFrameBindReportingObserverParams();

            _message.receiver = receiver;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(BIND_REPORTING_OBSERVER_ORDINAL)));

        }


        @Override
        public void updateOpener(
FrameToken openerFrameToken) {

            LocalFrameUpdateOpenerParams _message = new LocalFrameUpdateOpenerParams();

            _message.openerFrameToken = openerFrameToken;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_OPENER_ORDINAL)));

        }


        @Override
        public void getSavableResourceLinks(

GetSavableResourceLinksResponse callback) {

            LocalFrameGetSavableResourceLinksParams _message = new LocalFrameGetSavableResourceLinksParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_SAVABLE_RESOURCE_LINKS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameGetSavableResourceLinksResponseParamsForwardToCallback(callback));

        }


        @Override
        public void mixedContentFound(
org.chromium.url.mojom.Url mainResourceUrl, org.chromium.url.mojom.Url mixedContentUrl, int requestContext, boolean wasAllowed, org.chromium.url.mojom.Url urlBeforeRedirects, boolean hadRedirect, org.chromium.network.mojom.SourceLocation sourceLocation) {

            LocalFrameMixedContentFoundParams _message = new LocalFrameMixedContentFoundParams();

            _message.mainResourceUrl = mainResourceUrl;

            _message.mixedContentUrl = mixedContentUrl;

            _message.requestContext = requestContext;

            _message.wasAllowed = wasAllowed;

            _message.urlBeforeRedirects = urlBeforeRedirects;

            _message.hadRedirect = hadRedirect;

            _message.sourceLocation = sourceLocation;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(MIXED_CONTENT_FOUND_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<LocalFrame> {

        Stub(org.chromium.mojo.system.Core core, LocalFrame impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                LocalFrame_Internal.MANAGER, messageWithHeader);







                    case SEND_INTERVENTION_REPORT_ORDINAL: {

                        LocalFrameSendInterventionReportParams data =
                                LocalFrameSendInterventionReportParams.deserialize(messageWithHeader.getPayload());

                        getImpl().sendInterventionReport(data.id, data.message);
                        return true;
                    }





                    case SET_FRAME_OWNER_PROPERTIES_ORDINAL: {

                        LocalFrameSetFrameOwnerPropertiesParams data =
                                LocalFrameSetFrameOwnerPropertiesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setFrameOwnerProperties(data.properties);
                        return true;
                    }





                    case NOTIFY_USER_ACTIVATION_ORDINAL: {

                        LocalFrameNotifyUserActivationParams data =
                                LocalFrameNotifyUserActivationParams.deserialize(messageWithHeader.getPayload());

                        getImpl().notifyUserActivation(data.notificationType);
                        return true;
                    }





                    case NOTIFY_VIRTUAL_KEYBOARD_OVERLAY_RECT_ORDINAL: {

                        LocalFrameNotifyVirtualKeyboardOverlayRectParams data =
                                LocalFrameNotifyVirtualKeyboardOverlayRectParams.deserialize(messageWithHeader.getPayload());

                        getImpl().notifyVirtualKeyboardOverlayRect(data.keyboardRect);
                        return true;
                    }





                    case ADD_MESSAGE_TO_CONSOLE_ORDINAL: {

                        LocalFrameAddMessageToConsoleParams data =
                                LocalFrameAddMessageToConsoleParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addMessageToConsole(data.level, data.message, data.discardDuplicates);
                        return true;
                    }





                    case ADD_INSPECTOR_ISSUE_ORDINAL: {

                        LocalFrameAddInspectorIssueParams data =
                                LocalFrameAddInspectorIssueParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addInspectorIssue(data.info);
                        return true;
                    }





                    case SWAP_IN_IMMEDIATELY_ORDINAL: {

                        LocalFrameSwapInImmediatelyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().swapInImmediately();
                        return true;
                    }





                    case CHECK_COMPLETED_ORDINAL: {

                        LocalFrameCheckCompletedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().checkCompleted();
                        return true;
                    }





                    case STOP_LOADING_ORDINAL: {

                        LocalFrameStopLoadingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().stopLoading();
                        return true;
                    }





                    case COLLAPSE_ORDINAL: {

                        LocalFrameCollapseParams data =
                                LocalFrameCollapseParams.deserialize(messageWithHeader.getPayload());

                        getImpl().collapse(data.collapsed);
                        return true;
                    }





                    case ENABLE_VIEW_SOURCE_MODE_ORDINAL: {

                        LocalFrameEnableViewSourceModeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enableViewSourceMode();
                        return true;
                    }





                    case FOCUS_ORDINAL: {

                        LocalFrameFocusParams.deserialize(messageWithHeader.getPayload());

                        getImpl().focus();
                        return true;
                    }





                    case CLEAR_FOCUSED_ELEMENT_ORDINAL: {

                        LocalFrameClearFocusedElementParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearFocusedElement();
                        return true;
                    }





                    case GET_RESOURCE_SNAPSHOT_FOR_WEB_BUNDLE_ORDINAL: {

                        LocalFrameGetResourceSnapshotForWebBundleParams data =
                                LocalFrameGetResourceSnapshotForWebBundleParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getResourceSnapshotForWebBundle(data.receiver);
                        return true;
                    }





                    case COPY_IMAGE_AT_ORDINAL: {

                        LocalFrameCopyImageAtParams data =
                                LocalFrameCopyImageAtParams.deserialize(messageWithHeader.getPayload());

                        getImpl().copyImageAt(data.windowPoint);
                        return true;
                    }





                    case SAVE_IMAGE_AT_ORDINAL: {

                        LocalFrameSaveImageAtParams data =
                                LocalFrameSaveImageAtParams.deserialize(messageWithHeader.getPayload());

                        getImpl().saveImageAt(data.windowPoint);
                        return true;
                    }





                    case REPORT_BLINK_FEATURE_USAGE_ORDINAL: {

                        LocalFrameReportBlinkFeatureUsageParams data =
                                LocalFrameReportBlinkFeatureUsageParams.deserialize(messageWithHeader.getPayload());

                        getImpl().reportBlinkFeatureUsage(data.features);
                        return true;
                    }





                    case RENDER_FALLBACK_CONTENT_ORDINAL: {

                        LocalFrameRenderFallbackContentParams.deserialize(messageWithHeader.getPayload());

                        getImpl().renderFallbackContent();
                        return true;
                    }







                    case MEDIA_PLAYER_ACTION_AT_ORDINAL: {

                        LocalFrameMediaPlayerActionAtParams data =
                                LocalFrameMediaPlayerActionAtParams.deserialize(messageWithHeader.getPayload());

                        getImpl().mediaPlayerActionAt(data.location, data.action);
                        return true;
                    }





                    case ADVANCE_FOCUS_IN_FRAME_ORDINAL: {

                        LocalFrameAdvanceFocusInFrameParams data =
                                LocalFrameAdvanceFocusInFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().advanceFocusInFrame(data.focusType, data.sourceFrameToken);
                        return true;
                    }





                    case ADVANCE_FOCUS_IN_FORM_ORDINAL: {

                        LocalFrameAdvanceFocusInFormParams data =
                                LocalFrameAdvanceFocusInFormParams.deserialize(messageWithHeader.getPayload());

                        getImpl().advanceFocusInForm(data.focusType);
                        return true;
                    }





                    case REPORT_CONTENT_SECURITY_POLICY_VIOLATION_ORDINAL: {

                        LocalFrameReportContentSecurityPolicyViolationParams data =
                                LocalFrameReportContentSecurityPolicyViolationParams.deserialize(messageWithHeader.getPayload());

                        getImpl().reportContentSecurityPolicyViolation(data.violation);
                        return true;
                    }





                    case DID_UPDATE_FRAME_POLICY_ORDINAL: {

                        LocalFrameDidUpdateFramePolicyParams data =
                                LocalFrameDidUpdateFramePolicyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didUpdateFramePolicy(data.framePolicy);
                        return true;
                    }





                    case ON_SCREENS_CHANGE_ORDINAL: {

                        LocalFrameOnScreensChangeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onScreensChange();
                        return true;
                    }





                    case POST_MESSAGE_EVENT_ORDINAL: {

                        LocalFramePostMessageEventParams data =
                                LocalFramePostMessageEventParams.deserialize(messageWithHeader.getPayload());

                        getImpl().postMessageEvent(data.sourceFrameToken, data.sourceOrigin, data.targetOrigin, data.message);
                        return true;
                    }





                    case BIND_REPORTING_OBSERVER_ORDINAL: {

                        LocalFrameBindReportingObserverParams data =
                                LocalFrameBindReportingObserverParams.deserialize(messageWithHeader.getPayload());

                        getImpl().bindReportingObserver(data.receiver);
                        return true;
                    }





                    case UPDATE_OPENER_ORDINAL: {

                        LocalFrameUpdateOpenerParams data =
                                LocalFrameUpdateOpenerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateOpener(data.openerFrameToken);
                        return true;
                    }







                    case MIXED_CONTENT_FOUND_ORDINAL: {

                        LocalFrameMixedContentFoundParams data =
                                LocalFrameMixedContentFoundParams.deserialize(messageWithHeader.getPayload());

                        getImpl().mixedContentFound(data.mainResourceUrl, data.mixedContentUrl, data.requestContext, data.wasAllowed, data.urlBeforeRedirects, data.hadRedirect, data.sourceLocation);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), LocalFrame_Internal.MANAGER, messageWithHeader, receiver);







                    case GET_TEXT_SURROUNDING_SELECTION_ORDINAL: {

                        LocalFrameGetTextSurroundingSelectionParams data =
                                LocalFrameGetTextSurroundingSelectionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getTextSurroundingSelection(data.maxLength, new LocalFrameGetTextSurroundingSelectionResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }











































                    case BEFORE_UNLOAD_ORDINAL: {

                        LocalFrameBeforeUnloadParams data =
                                LocalFrameBeforeUnloadParams.deserialize(messageWithHeader.getPayload());

                        getImpl().beforeUnload(data.isReload, new LocalFrameBeforeUnloadResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }

























                    case GET_SAVABLE_RESOURCE_LINKS_ORDINAL: {

                        LocalFrameGetSavableResourceLinksParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getSavableResourceLinks(new LocalFrameGetSavableResourceLinksResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }




                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class LocalFrameGetTextSurroundingSelectionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int maxLength;

        private LocalFrameGetTextSurroundingSelectionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameGetTextSurroundingSelectionParams() {
            this(0);
        }

        public static LocalFrameGetTextSurroundingSelectionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameGetTextSurroundingSelectionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameGetTextSurroundingSelectionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameGetTextSurroundingSelectionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameGetTextSurroundingSelectionParams(elementsOrVersion);
                    {
                        
                    result.maxLength = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.maxLength, 8);
        }
    }



    
    static final class LocalFrameGetTextSurroundingSelectionResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16 content;
        public int startOffset;
        public int endOffset;

        private LocalFrameGetTextSurroundingSelectionResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameGetTextSurroundingSelectionResponseParams() {
            this(0);
        }

        public static LocalFrameGetTextSurroundingSelectionResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameGetTextSurroundingSelectionResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameGetTextSurroundingSelectionResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameGetTextSurroundingSelectionResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameGetTextSurroundingSelectionResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.content = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    result.startOffset = decoder0.readInt(16);
                    }
                    {
                        
                    result.endOffset = decoder0.readInt(20);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.content, 8, false);
            
            encoder0.encode(this.startOffset, 16);
            
            encoder0.encode(this.endOffset, 20);
        }
    }

    static class LocalFrameGetTextSurroundingSelectionResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrame.GetTextSurroundingSelectionResponse mCallback;

        LocalFrameGetTextSurroundingSelectionResponseParamsForwardToCallback(LocalFrame.GetTextSurroundingSelectionResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_TEXT_SURROUNDING_SELECTION_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                LocalFrameGetTextSurroundingSelectionResponseParams response = LocalFrameGetTextSurroundingSelectionResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.content, response.startOffset, response.endOffset);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameGetTextSurroundingSelectionResponseParamsProxyToResponder implements LocalFrame.GetTextSurroundingSelectionResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameGetTextSurroundingSelectionResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(org.chromium.mojo_base.mojom.String16 content, Integer startOffset, Integer endOffset) {
            LocalFrameGetTextSurroundingSelectionResponseParams _response = new LocalFrameGetTextSurroundingSelectionResponseParams();

            _response.content = content;

            _response.startOffset = startOffset;

            _response.endOffset = endOffset;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_TEXT_SURROUNDING_SELECTION_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameSendInterventionReportParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String id;
        public String message;

        private LocalFrameSendInterventionReportParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameSendInterventionReportParams() {
            this(0);
        }

        public static LocalFrameSendInterventionReportParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameSendInterventionReportParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameSendInterventionReportParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameSendInterventionReportParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameSendInterventionReportParams(elementsOrVersion);
                    {
                        
                    result.id = decoder0.readString(8, false);
                    }
                    {
                        
                    result.message = decoder0.readString(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.id, 8, false);
            
            encoder0.encode(this.message, 16, false);
        }
    }



    
    static final class LocalFrameSetFrameOwnerPropertiesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FrameOwnerProperties properties;

        private LocalFrameSetFrameOwnerPropertiesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameSetFrameOwnerPropertiesParams() {
            this(0);
        }

        public static LocalFrameSetFrameOwnerPropertiesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameSetFrameOwnerPropertiesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameSetFrameOwnerPropertiesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameSetFrameOwnerPropertiesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameSetFrameOwnerPropertiesParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.properties = FrameOwnerProperties.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.properties, 8, false);
        }
    }



    
    static final class LocalFrameNotifyUserActivationParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int notificationType;

        private LocalFrameNotifyUserActivationParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameNotifyUserActivationParams() {
            this(0);
        }

        public static LocalFrameNotifyUserActivationParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameNotifyUserActivationParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameNotifyUserActivationParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameNotifyUserActivationParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameNotifyUserActivationParams(elementsOrVersion);
                    {
                        
                    result.notificationType = decoder0.readInt(8);
                        UserActivationNotificationType.validate(result.notificationType);
                        result.notificationType = UserActivationNotificationType.toKnownValue(result.notificationType);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.notificationType, 8);
        }
    }



    
    static final class LocalFrameNotifyVirtualKeyboardOverlayRectParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Rect keyboardRect;

        private LocalFrameNotifyVirtualKeyboardOverlayRectParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameNotifyVirtualKeyboardOverlayRectParams() {
            this(0);
        }

        public static LocalFrameNotifyVirtualKeyboardOverlayRectParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameNotifyVirtualKeyboardOverlayRectParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameNotifyVirtualKeyboardOverlayRectParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameNotifyVirtualKeyboardOverlayRectParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameNotifyVirtualKeyboardOverlayRectParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.keyboardRect = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.keyboardRect, 8, false);
        }
    }



    
    static final class LocalFrameAddMessageToConsoleParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int level;
        public String message;
        public boolean discardDuplicates;

        private LocalFrameAddMessageToConsoleParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameAddMessageToConsoleParams() {
            this(0);
        }

        public static LocalFrameAddMessageToConsoleParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameAddMessageToConsoleParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameAddMessageToConsoleParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameAddMessageToConsoleParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameAddMessageToConsoleParams(elementsOrVersion);
                    {
                        
                    result.level = decoder0.readInt(8);
                        ConsoleMessageLevel.validate(result.level);
                        result.level = ConsoleMessageLevel.toKnownValue(result.level);
                    }
                    {
                        
                    result.discardDuplicates = decoder0.readBoolean(12, 0);
                    }
                    {
                        
                    result.message = decoder0.readString(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.level, 8);
            
            encoder0.encode(this.discardDuplicates, 12, 0);
            
            encoder0.encode(this.message, 16, false);
        }
    }



    
    static final class LocalFrameAddInspectorIssueParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public InspectorIssueInfo info;

        private LocalFrameAddInspectorIssueParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameAddInspectorIssueParams() {
            this(0);
        }

        public static LocalFrameAddInspectorIssueParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameAddInspectorIssueParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameAddInspectorIssueParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameAddInspectorIssueParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameAddInspectorIssueParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.info = InspectorIssueInfo.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.info, 8, false);
        }
    }



    
    static final class LocalFrameSwapInImmediatelyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameSwapInImmediatelyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameSwapInImmediatelyParams() {
            this(0);
        }

        public static LocalFrameSwapInImmediatelyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameSwapInImmediatelyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameSwapInImmediatelyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameSwapInImmediatelyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameSwapInImmediatelyParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameCheckCompletedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameCheckCompletedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameCheckCompletedParams() {
            this(0);
        }

        public static LocalFrameCheckCompletedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameCheckCompletedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameCheckCompletedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameCheckCompletedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameCheckCompletedParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameStopLoadingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameStopLoadingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameStopLoadingParams() {
            this(0);
        }

        public static LocalFrameStopLoadingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameStopLoadingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameStopLoadingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameStopLoadingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameStopLoadingParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameCollapseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean collapsed;

        private LocalFrameCollapseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameCollapseParams() {
            this(0);
        }

        public static LocalFrameCollapseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameCollapseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameCollapseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameCollapseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameCollapseParams(elementsOrVersion);
                    {
                        
                    result.collapsed = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.collapsed, 8, 0);
        }
    }



    
    static final class LocalFrameEnableViewSourceModeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameEnableViewSourceModeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameEnableViewSourceModeParams() {
            this(0);
        }

        public static LocalFrameEnableViewSourceModeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameEnableViewSourceModeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameEnableViewSourceModeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameEnableViewSourceModeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameEnableViewSourceModeParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameFocusParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameFocusParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameFocusParams() {
            this(0);
        }

        public static LocalFrameFocusParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameFocusParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameFocusParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameFocusParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameFocusParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameClearFocusedElementParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameClearFocusedElementParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameClearFocusedElementParams() {
            this(0);
        }

        public static LocalFrameClearFocusedElementParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameClearFocusedElementParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameClearFocusedElementParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameClearFocusedElementParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameClearFocusedElementParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameGetResourceSnapshotForWebBundleParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<org.chromium.data_decoder.mojom.ResourceSnapshotForWebBundle> receiver;

        private LocalFrameGetResourceSnapshotForWebBundleParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameGetResourceSnapshotForWebBundleParams() {
            this(0);
        }

        public static LocalFrameGetResourceSnapshotForWebBundleParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameGetResourceSnapshotForWebBundleParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameGetResourceSnapshotForWebBundleParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameGetResourceSnapshotForWebBundleParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameGetResourceSnapshotForWebBundleParams(elementsOrVersion);
                    {
                        
                    result.receiver = decoder0.readInterfaceRequest(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.receiver, 8, false);
        }
    }



    
    static final class LocalFrameCopyImageAtParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Point windowPoint;

        private LocalFrameCopyImageAtParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameCopyImageAtParams() {
            this(0);
        }

        public static LocalFrameCopyImageAtParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameCopyImageAtParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameCopyImageAtParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameCopyImageAtParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameCopyImageAtParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.windowPoint = org.chromium.gfx.mojom.Point.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.windowPoint, 8, false);
        }
    }



    
    static final class LocalFrameSaveImageAtParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Point windowPoint;

        private LocalFrameSaveImageAtParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameSaveImageAtParams() {
            this(0);
        }

        public static LocalFrameSaveImageAtParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameSaveImageAtParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameSaveImageAtParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameSaveImageAtParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameSaveImageAtParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.windowPoint = org.chromium.gfx.mojom.Point.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.windowPoint, 8, false);
        }
    }



    
    static final class LocalFrameReportBlinkFeatureUsageParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int[] features;

        private LocalFrameReportBlinkFeatureUsageParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameReportBlinkFeatureUsageParams() {
            this(0);
        }

        public static LocalFrameReportBlinkFeatureUsageParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameReportBlinkFeatureUsageParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameReportBlinkFeatureUsageParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameReportBlinkFeatureUsageParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameReportBlinkFeatureUsageParams(elementsOrVersion);
                    {
                        
                    result.features = decoder0.readInts(8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    {
                        for (int i1 = 0; i1 < result.features.length; ++i1) {
                            WebFeature.validate(result.features[i1]);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.features, 8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
    }



    
    static final class LocalFrameRenderFallbackContentParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameRenderFallbackContentParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameRenderFallbackContentParams() {
            this(0);
        }

        public static LocalFrameRenderFallbackContentParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameRenderFallbackContentParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameRenderFallbackContentParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameRenderFallbackContentParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameRenderFallbackContentParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameBeforeUnloadParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean isReload;

        private LocalFrameBeforeUnloadParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameBeforeUnloadParams() {
            this(0);
        }

        public static LocalFrameBeforeUnloadParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameBeforeUnloadParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameBeforeUnloadParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameBeforeUnloadParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameBeforeUnloadParams(elementsOrVersion);
                    {
                        
                    result.isReload = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.isReload, 8, 0);
        }
    }



    
    static final class LocalFrameBeforeUnloadResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean proceed;
        public org.chromium.mojo_base.mojom.TimeTicks beforeUnloadStartTime;
        public org.chromium.mojo_base.mojom.TimeTicks beforeUnloadEndTime;

        private LocalFrameBeforeUnloadResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameBeforeUnloadResponseParams() {
            this(0);
        }

        public static LocalFrameBeforeUnloadResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameBeforeUnloadResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameBeforeUnloadResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameBeforeUnloadResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameBeforeUnloadResponseParams(elementsOrVersion);
                    {
                        
                    result.proceed = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.beforeUnloadStartTime = org.chromium.mojo_base.mojom.TimeTicks.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.beforeUnloadEndTime = org.chromium.mojo_base.mojom.TimeTicks.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.proceed, 8, 0);
            
            encoder0.encode(this.beforeUnloadStartTime, 16, false);
            
            encoder0.encode(this.beforeUnloadEndTime, 24, false);
        }
    }

    static class LocalFrameBeforeUnloadResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrame.BeforeUnloadResponse mCallback;

        LocalFrameBeforeUnloadResponseParamsForwardToCallback(LocalFrame.BeforeUnloadResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(BEFORE_UNLOAD_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                LocalFrameBeforeUnloadResponseParams response = LocalFrameBeforeUnloadResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.proceed, response.beforeUnloadStartTime, response.beforeUnloadEndTime);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameBeforeUnloadResponseParamsProxyToResponder implements LocalFrame.BeforeUnloadResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameBeforeUnloadResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean proceed, org.chromium.mojo_base.mojom.TimeTicks beforeUnloadStartTime, org.chromium.mojo_base.mojom.TimeTicks beforeUnloadEndTime) {
            LocalFrameBeforeUnloadResponseParams _response = new LocalFrameBeforeUnloadResponseParams();

            _response.proceed = proceed;

            _response.beforeUnloadStartTime = beforeUnloadStartTime;

            _response.beforeUnloadEndTime = beforeUnloadEndTime;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    BEFORE_UNLOAD_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameMediaPlayerActionAtParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Point location;
        public MediaPlayerAction action;

        private LocalFrameMediaPlayerActionAtParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameMediaPlayerActionAtParams() {
            this(0);
        }

        public static LocalFrameMediaPlayerActionAtParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameMediaPlayerActionAtParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameMediaPlayerActionAtParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameMediaPlayerActionAtParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameMediaPlayerActionAtParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.location = org.chromium.gfx.mojom.Point.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.action = MediaPlayerAction.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.location, 8, false);
            
            encoder0.encode(this.action, 16, false);
        }
    }



    
    static final class LocalFrameAdvanceFocusInFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int focusType;
        public RemoteFrameToken sourceFrameToken;

        private LocalFrameAdvanceFocusInFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameAdvanceFocusInFrameParams() {
            this(0);
        }

        public static LocalFrameAdvanceFocusInFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameAdvanceFocusInFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameAdvanceFocusInFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameAdvanceFocusInFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameAdvanceFocusInFrameParams(elementsOrVersion);
                    {
                        
                    result.focusType = decoder0.readInt(8);
                        FocusType.validate(result.focusType);
                        result.focusType = FocusType.toKnownValue(result.focusType);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.sourceFrameToken = RemoteFrameToken.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.focusType, 8);
            
            encoder0.encode(this.sourceFrameToken, 16, true);
        }
    }



    
    static final class LocalFrameAdvanceFocusInFormParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int focusType;

        private LocalFrameAdvanceFocusInFormParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameAdvanceFocusInFormParams() {
            this(0);
        }

        public static LocalFrameAdvanceFocusInFormParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameAdvanceFocusInFormParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameAdvanceFocusInFormParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameAdvanceFocusInFormParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameAdvanceFocusInFormParams(elementsOrVersion);
                    {
                        
                    result.focusType = decoder0.readInt(8);
                        FocusType.validate(result.focusType);
                        result.focusType = FocusType.toKnownValue(result.focusType);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.focusType, 8);
        }
    }



    
    static final class LocalFrameReportContentSecurityPolicyViolationParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.network.mojom.CspViolation violation;

        private LocalFrameReportContentSecurityPolicyViolationParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameReportContentSecurityPolicyViolationParams() {
            this(0);
        }

        public static LocalFrameReportContentSecurityPolicyViolationParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameReportContentSecurityPolicyViolationParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameReportContentSecurityPolicyViolationParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameReportContentSecurityPolicyViolationParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameReportContentSecurityPolicyViolationParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.violation = org.chromium.network.mojom.CspViolation.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.violation, 8, false);
        }
    }



    
    static final class LocalFrameDidUpdateFramePolicyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FramePolicy framePolicy;

        private LocalFrameDidUpdateFramePolicyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameDidUpdateFramePolicyParams() {
            this(0);
        }

        public static LocalFrameDidUpdateFramePolicyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameDidUpdateFramePolicyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameDidUpdateFramePolicyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameDidUpdateFramePolicyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameDidUpdateFramePolicyParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.framePolicy = FramePolicy.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.framePolicy, 8, false);
        }
    }



    
    static final class LocalFrameOnScreensChangeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameOnScreensChangeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameOnScreensChangeParams() {
            this(0);
        }

        public static LocalFrameOnScreensChangeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameOnScreensChangeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameOnScreensChangeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameOnScreensChangeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameOnScreensChangeParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFramePostMessageEventParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public RemoteFrameToken sourceFrameToken;
        public org.chromium.mojo_base.mojom.String16 sourceOrigin;
        public org.chromium.mojo_base.mojom.String16 targetOrigin;
        public TransferableMessage message;

        private LocalFramePostMessageEventParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFramePostMessageEventParams() {
            this(0);
        }

        public static LocalFramePostMessageEventParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFramePostMessageEventParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFramePostMessageEventParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFramePostMessageEventParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFramePostMessageEventParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.sourceFrameToken = RemoteFrameToken.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.sourceOrigin = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.targetOrigin = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.message = TransferableMessage.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.sourceFrameToken, 8, true);
            
            encoder0.encode(this.sourceOrigin, 16, false);
            
            encoder0.encode(this.targetOrigin, 24, false);
            
            encoder0.encode(this.message, 32, false);
        }
    }



    
    static final class LocalFrameBindReportingObserverParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<ReportingObserver> receiver;

        private LocalFrameBindReportingObserverParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameBindReportingObserverParams() {
            this(0);
        }

        public static LocalFrameBindReportingObserverParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameBindReportingObserverParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameBindReportingObserverParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameBindReportingObserverParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameBindReportingObserverParams(elementsOrVersion);
                    {
                        
                    result.receiver = decoder0.readInterfaceRequest(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.receiver, 8, false);
        }
    }



    
    static final class LocalFrameUpdateOpenerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FrameToken openerFrameToken;

        private LocalFrameUpdateOpenerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameUpdateOpenerParams() {
            this(0);
        }

        public static LocalFrameUpdateOpenerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameUpdateOpenerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameUpdateOpenerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameUpdateOpenerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameUpdateOpenerParams(elementsOrVersion);
                    {
                        
                    result.openerFrameToken = FrameToken.decode(decoder0, 8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.openerFrameToken, 8, true);
        }
    }



    
    static final class LocalFrameGetSavableResourceLinksParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameGetSavableResourceLinksParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameGetSavableResourceLinksParams() {
            this(0);
        }

        public static LocalFrameGetSavableResourceLinksParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameGetSavableResourceLinksParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameGetSavableResourceLinksParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameGetSavableResourceLinksParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameGetSavableResourceLinksParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameGetSavableResourceLinksResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public GetSavableResourceLinksReply reply;

        private LocalFrameGetSavableResourceLinksResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameGetSavableResourceLinksResponseParams() {
            this(0);
        }

        public static LocalFrameGetSavableResourceLinksResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameGetSavableResourceLinksResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameGetSavableResourceLinksResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameGetSavableResourceLinksResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameGetSavableResourceLinksResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.reply = GetSavableResourceLinksReply.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.reply, 8, true);
        }
    }

    static class LocalFrameGetSavableResourceLinksResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrame.GetSavableResourceLinksResponse mCallback;

        LocalFrameGetSavableResourceLinksResponseParamsForwardToCallback(LocalFrame.GetSavableResourceLinksResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_SAVABLE_RESOURCE_LINKS_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                LocalFrameGetSavableResourceLinksResponseParams response = LocalFrameGetSavableResourceLinksResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.reply);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameGetSavableResourceLinksResponseParamsProxyToResponder implements LocalFrame.GetSavableResourceLinksResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameGetSavableResourceLinksResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(GetSavableResourceLinksReply reply) {
            LocalFrameGetSavableResourceLinksResponseParams _response = new LocalFrameGetSavableResourceLinksResponseParams();

            _response.reply = reply;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_SAVABLE_RESOURCE_LINKS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameMixedContentFoundParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 48;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(48, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url mainResourceUrl;
        public org.chromium.url.mojom.Url mixedContentUrl;
        public int requestContext;
        public boolean wasAllowed;
        public org.chromium.url.mojom.Url urlBeforeRedirects;
        public boolean hadRedirect;
        public org.chromium.network.mojom.SourceLocation sourceLocation;

        private LocalFrameMixedContentFoundParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameMixedContentFoundParams() {
            this(0);
        }

        public static LocalFrameMixedContentFoundParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameMixedContentFoundParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameMixedContentFoundParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameMixedContentFoundParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameMixedContentFoundParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.mainResourceUrl = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.mixedContentUrl = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.requestContext = decoder0.readInt(24);
                        RequestContextType.validate(result.requestContext);
                        result.requestContext = RequestContextType.toKnownValue(result.requestContext);
                    }
                    {
                        
                    result.wasAllowed = decoder0.readBoolean(28, 0);
                    }
                    {
                        
                    result.hadRedirect = decoder0.readBoolean(28, 1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.urlBeforeRedirects = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, true);
                    result.sourceLocation = org.chromium.network.mojom.SourceLocation.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.mainResourceUrl, 8, false);
            
            encoder0.encode(this.mixedContentUrl, 16, false);
            
            encoder0.encode(this.requestContext, 24);
            
            encoder0.encode(this.wasAllowed, 28, 0);
            
            encoder0.encode(this.hadRedirect, 28, 1);
            
            encoder0.encode(this.urlBeforeRedirects, 32, false);
            
            encoder0.encode(this.sourceLocation, 40, true);
        }
    }



}
