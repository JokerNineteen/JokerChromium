// AnchorElementMetricsHost_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/loader/navigation_predictor.mojom
//

package org.chromium.blink.mojom;


class AnchorElementMetricsHost_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<AnchorElementMetricsHost, AnchorElementMetricsHost.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<AnchorElementMetricsHost, AnchorElementMetricsHost.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.AnchorElementMetricsHost";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, AnchorElementMetricsHost impl) {
            return new Stub(core, impl);
        }

        @Override
        public AnchorElementMetricsHost[] buildArray(int size) {
          return new AnchorElementMetricsHost[size];
        }
    };


    private static final int REPORT_ANCHOR_ELEMENT_METRICS_ON_CLICK_ORDINAL = 0;

    private static final int REPORT_ANCHOR_ELEMENT_METRICS_ON_LOAD_ORDINAL = 1;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements AnchorElementMetricsHost.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void reportAnchorElementMetricsOnClick(
AnchorElementMetrics metrics) {

            AnchorElementMetricsHostReportAnchorElementMetricsOnClickParams _message = new AnchorElementMetricsHostReportAnchorElementMetricsOnClickParams();

            _message.metrics = metrics;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REPORT_ANCHOR_ELEMENT_METRICS_ON_CLICK_ORDINAL)));

        }


        @Override
        public void reportAnchorElementMetricsOnLoad(
AnchorElementMetrics[] metrics, org.chromium.gfx.mojom.Size viewportSize) {

            AnchorElementMetricsHostReportAnchorElementMetricsOnLoadParams _message = new AnchorElementMetricsHostReportAnchorElementMetricsOnLoadParams();

            _message.metrics = metrics;

            _message.viewportSize = viewportSize;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REPORT_ANCHOR_ELEMENT_METRICS_ON_LOAD_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<AnchorElementMetricsHost> {

        Stub(org.chromium.mojo.system.Core core, AnchorElementMetricsHost impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                AnchorElementMetricsHost_Internal.MANAGER, messageWithHeader);





                    case REPORT_ANCHOR_ELEMENT_METRICS_ON_CLICK_ORDINAL: {

                        AnchorElementMetricsHostReportAnchorElementMetricsOnClickParams data =
                                AnchorElementMetricsHostReportAnchorElementMetricsOnClickParams.deserialize(messageWithHeader.getPayload());

                        getImpl().reportAnchorElementMetricsOnClick(data.metrics);
                        return true;
                    }





                    case REPORT_ANCHOR_ELEMENT_METRICS_ON_LOAD_ORDINAL: {

                        AnchorElementMetricsHostReportAnchorElementMetricsOnLoadParams data =
                                AnchorElementMetricsHostReportAnchorElementMetricsOnLoadParams.deserialize(messageWithHeader.getPayload());

                        getImpl().reportAnchorElementMetricsOnLoad(data.metrics, data.viewportSize);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), AnchorElementMetricsHost_Internal.MANAGER, messageWithHeader, receiver);






                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class AnchorElementMetricsHostReportAnchorElementMetricsOnClickParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public AnchorElementMetrics metrics;

        private AnchorElementMetricsHostReportAnchorElementMetricsOnClickParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public AnchorElementMetricsHostReportAnchorElementMetricsOnClickParams() {
            this(0);
        }

        public static AnchorElementMetricsHostReportAnchorElementMetricsOnClickParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static AnchorElementMetricsHostReportAnchorElementMetricsOnClickParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static AnchorElementMetricsHostReportAnchorElementMetricsOnClickParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            AnchorElementMetricsHostReportAnchorElementMetricsOnClickParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new AnchorElementMetricsHostReportAnchorElementMetricsOnClickParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.metrics = AnchorElementMetrics.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.metrics, 8, false);
        }
    }



    
    static final class AnchorElementMetricsHostReportAnchorElementMetricsOnLoadParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public AnchorElementMetrics[] metrics;
        public org.chromium.gfx.mojom.Size viewportSize;

        private AnchorElementMetricsHostReportAnchorElementMetricsOnLoadParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public AnchorElementMetricsHostReportAnchorElementMetricsOnLoadParams() {
            this(0);
        }

        public static AnchorElementMetricsHostReportAnchorElementMetricsOnLoadParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static AnchorElementMetricsHostReportAnchorElementMetricsOnLoadParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static AnchorElementMetricsHostReportAnchorElementMetricsOnLoadParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            AnchorElementMetricsHostReportAnchorElementMetricsOnLoadParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new AnchorElementMetricsHostReportAnchorElementMetricsOnLoadParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.metrics = new AnchorElementMetrics[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.metrics[i1] = AnchorElementMetrics.decode(decoder2);
                        }
                    }
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.viewportSize = org.chromium.gfx.mojom.Size.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (this.metrics == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.metrics.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.metrics.length; ++i0) {
                    
                    encoder1.encode(this.metrics[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
            
            encoder0.encode(this.viewportSize, 16, false);
        }
    }



}
