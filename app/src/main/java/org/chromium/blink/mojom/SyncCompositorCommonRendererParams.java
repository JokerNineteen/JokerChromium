// SyncCompositorCommonRendererParams.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/input/synchronous_compositor.mojom
//

package org.chromium.blink.mojom;


public final class SyncCompositorCommonRendererParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 64;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(64, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public int version;
    public org.chromium.gfx.mojom.ScrollOffset totalScrollOffset;
    public org.chromium.gfx.mojom.ScrollOffset maxScrollOffset;
    public org.chromium.gfx.mojom.SizeF scrollableSize;
    public float pageScaleFactor;
    public float minPageScaleFactor;
    public float maxPageScaleFactor;
    public int needInvalidateCount;
    public boolean invalidateNeedsDraw;
    public int didActivatePendingTreeCount;

    private SyncCompositorCommonRendererParams(int version) {
        super(STRUCT_SIZE, version);
        this.version = (int) 0;
        this.pageScaleFactor = (float) 0;
        this.minPageScaleFactor = (float) 0;
        this.maxPageScaleFactor = (float) 0;
        this.needInvalidateCount = (int) 0;
        this.invalidateNeedsDraw = (boolean) true;
        this.didActivatePendingTreeCount = (int) 0;
    }

    public SyncCompositorCommonRendererParams() {
        this(0);
    }

    public static SyncCompositorCommonRendererParams deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static SyncCompositorCommonRendererParams deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static SyncCompositorCommonRendererParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        SyncCompositorCommonRendererParams result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new SyncCompositorCommonRendererParams(elementsOrVersion);
                {
                    
                result.version = decoder0.readInt(8);
                }
                {
                    
                result.pageScaleFactor = decoder0.readFloat(12);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                result.totalScrollOffset = org.chromium.gfx.mojom.ScrollOffset.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                result.maxScrollOffset = org.chromium.gfx.mojom.ScrollOffset.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                result.scrollableSize = org.chromium.gfx.mojom.SizeF.decode(decoder1);
                }
                {
                    
                result.minPageScaleFactor = decoder0.readFloat(40);
                }
                {
                    
                result.maxPageScaleFactor = decoder0.readFloat(44);
                }
                {
                    
                result.needInvalidateCount = decoder0.readInt(48);
                }
                {
                    
                result.invalidateNeedsDraw = decoder0.readBoolean(52, 0);
                }
                {
                    
                result.didActivatePendingTreeCount = decoder0.readInt(56);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.version, 8);
        
        encoder0.encode(this.pageScaleFactor, 12);
        
        encoder0.encode(this.totalScrollOffset, 16, false);
        
        encoder0.encode(this.maxScrollOffset, 24, false);
        
        encoder0.encode(this.scrollableSize, 32, false);
        
        encoder0.encode(this.minPageScaleFactor, 40);
        
        encoder0.encode(this.maxPageScaleFactor, 44);
        
        encoder0.encode(this.needInvalidateCount, 48);
        
        encoder0.encode(this.invalidateNeedsDraw, 52, 0);
        
        encoder0.encode(this.didActivatePendingTreeCount, 56);
    }
}