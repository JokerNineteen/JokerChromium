// NativeFileSystemHandle.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/file_system_access/native_file_system_directory_handle.mojom
//

package org.chromium.blink.mojom;


public final class NativeFileSystemHandle extends org.chromium.mojo.bindings.Union {

    public static final class Tag {
        public static final int File = 0;
        public static final int Directory = 1;
    };
    private NativeFileSystemFileHandle mFile;
    private NativeFileSystemDirectoryHandle mDirectory;

    public void setFile(NativeFileSystemFileHandle file) {
        this.mTag = Tag.File;
        this.mFile = file;
    }

    public NativeFileSystemFileHandle getFile() {
        assert this.mTag == Tag.File;
        return this.mFile;
    }

    public void setDirectory(NativeFileSystemDirectoryHandle directory) {
        this.mTag = Tag.Directory;
        this.mDirectory = directory;
    }

    public NativeFileSystemDirectoryHandle getDirectory() {
        assert this.mTag == Tag.Directory;
        return this.mDirectory;
    }


    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder0, int offset) {
        encoder0.encode(org.chromium.mojo.bindings.BindingsHelper.UNION_SIZE, offset);
        encoder0.encode(this.mTag, offset + 4);
        switch (mTag) {
            case Tag.File: {
                
                encoder0.encode(this.mFile, offset + 8, false, NativeFileSystemFileHandle.MANAGER);
                break;
            }
            case Tag.Directory: {
                
                encoder0.encode(this.mDirectory, offset + 8, false, NativeFileSystemDirectoryHandle.MANAGER);
                break;
            }
            default: {
                break;
            }
        }
    }

    public static NativeFileSystemHandle deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message).decoderForSerializedUnion(), 0);
    }

    public static final NativeFileSystemHandle decode(org.chromium.mojo.bindings.Decoder decoder0, int offset) {
        org.chromium.mojo.bindings.DataHeader dataHeader = decoder0.readDataHeaderForUnion(offset);
        if (dataHeader.size == 0) {
            return null;
        }
        NativeFileSystemHandle result = new NativeFileSystemHandle();
        switch (dataHeader.elementsOrVersion) {
            case Tag.File: {
                
                result.mFile = decoder0.readServiceInterface(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false, NativeFileSystemFileHandle.MANAGER);
                result.mTag = Tag.File;
                break;
            }
            case Tag.Directory: {
                
                result.mDirectory = decoder0.readServiceInterface(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false, NativeFileSystemDirectoryHandle.MANAGER);
                result.mTag = Tag.Directory;
                break;
            }
            default: {
                break;
            }
        }
        return result;
    }
}