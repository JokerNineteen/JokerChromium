// LocalFrameHost_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/frame/frame.mojom
//

package org.chromium.blink.mojom;


class LocalFrameHost_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<LocalFrameHost, LocalFrameHost.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<LocalFrameHost, LocalFrameHost.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.LocalFrameHost";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, LocalFrameHost impl) {
            return new Stub(core, impl);
        }

        @Override
        public LocalFrameHost[] buildArray(int size) {
          return new LocalFrameHost[size];
        }
    };


    private static final int ENTER_FULLSCREEN_ORDINAL = 0;

    private static final int EXIT_FULLSCREEN_ORDINAL = 1;

    private static final int FULLSCREEN_STATE_CHANGED_ORDINAL = 2;

    private static final int REGISTER_PROTOCOL_HANDLER_ORDINAL = 3;

    private static final int UNREGISTER_PROTOCOL_HANDLER_ORDINAL = 4;

    private static final int DID_DISPLAY_INSECURE_CONTENT_ORDINAL = 5;

    private static final int DID_CONTAIN_INSECURE_FORM_ACTION_ORDINAL = 6;

    private static final int DOCUMENT_AVAILABLE_IN_MAIN_FRAME_ORDINAL = 7;

    private static final int SET_NEEDS_OCCLUSION_TRACKING_ORDINAL = 8;

    private static final int SET_VIRTUAL_KEYBOARD_OVERLAY_POLICY_ORDINAL = 9;

    private static final int VISIBILITY_CHANGED_ORDINAL = 10;

    private static final int DID_CHANGE_THEME_COLOR_ORDINAL = 11;

    private static final int DID_CHANGE_BACKGROUND_COLOR_ORDINAL = 12;

    private static final int DID_FAIL_LOAD_WITH_ERROR_ORDINAL = 13;

    private static final int DID_FOCUS_FRAME_ORDINAL = 14;

    private static final int DID_CALL_FOCUS_ORDINAL = 15;

    private static final int DID_ADD_CONTENT_SECURITY_POLICIES_ORDINAL = 16;

    private static final int ENFORCE_INSECURE_REQUEST_POLICY_ORDINAL = 17;

    private static final int ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL = 18;

    private static final int DID_CHANGE_ACTIVE_SCHEDULER_TRACKED_FEATURES_ORDINAL = 19;

    private static final int SUDDEN_TERMINATION_DISABLER_CHANGED_ORDINAL = 20;

    private static final int HAD_STICKY_USER_ACTIVATION_BEFORE_NAVIGATION_CHANGED_ORDINAL = 21;

    private static final int SCROLL_RECT_TO_VISIBLE_IN_PARENT_FRAME_ORDINAL = 22;

    private static final int BUBBLE_LOGICAL_SCROLL_IN_PARENT_FRAME_ORDINAL = 23;

    private static final int DID_ACCESS_INITIAL_DOCUMENT_ORDINAL = 24;

    private static final int DID_BLOCK_NAVIGATION_ORDINAL = 25;

    private static final int DID_CHANGE_LOAD_PROGRESS_ORDINAL = 26;

    private static final int DID_FINISH_LOAD_ORDINAL = 27;

    private static final int DISPATCH_LOAD_ORDINAL = 28;

    private static final int GO_TO_ENTRY_AT_OFFSET_ORDINAL = 29;

    private static final int RENDER_FALLBACK_CONTENT_IN_PARENT_PROCESS_ORDINAL = 30;

    private static final int UPDATE_TITLE_ORDINAL = 31;

    private static final int UPDATE_USER_ACTIVATION_STATE_ORDINAL = 32;

    private static final int HANDLE_ACCESSIBILITY_FIND_IN_PAGE_RESULT_ORDINAL = 33;

    private static final int HANDLE_ACCESSIBILITY_FIND_IN_PAGE_TERMINATION_ORDINAL = 34;

    private static final int DOCUMENT_ON_LOAD_COMPLETED_ORDINAL = 35;

    private static final int FORWARD_RESOURCE_TIMING_TO_PARENT_ORDINAL = 36;

    private static final int DID_FINISH_DOCUMENT_LOAD_ORDINAL = 37;

    private static final int RUN_MODAL_ALERT_DIALOG_ORDINAL = 38;

    private static final int RUN_MODAL_CONFIRM_DIALOG_ORDINAL = 39;

    private static final int RUN_MODAL_PROMPT_DIALOG_ORDINAL = 40;

    private static final int RUN_BEFORE_UNLOAD_CONFIRM_ORDINAL = 41;

    private static final int UPDATE_FAVICON_URL_ORDINAL = 42;

    private static final int DOWNLOAD_URL_ORDINAL = 43;

    private static final int FOCUSED_ELEMENT_CHANGED_ORDINAL = 44;

    private static final int TEXT_SELECTION_CHANGED_ORDINAL = 45;

    private static final int SHOW_POPUP_MENU_ORDINAL = 46;

    private static final int DID_LOAD_RESOURCE_FROM_MEMORY_CACHE_ORDINAL = 47;

    private static final int DID_CHANGE_FRAME_OWNER_PROPERTIES_ORDINAL = 48;

    private static final int DID_CHANGE_OPENER_ORDINAL = 49;

    private static final int DID_CHANGE_FRAME_POLICY_ORDINAL = 50;

    private static final int DID_CHANGE_CSP_ATTRIBUTE_ORDINAL = 51;

    private static final int BIND_POLICY_CONTAINER_ORDINAL = 52;

    private static final int CAPTURE_PAINT_PREVIEW_OF_SUBFRAME_ORDINAL = 53;

    private static final int DETACH_ORDINAL = 54;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements LocalFrameHost.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void enterFullscreen(
FullscreenOptions options, 
EnterFullscreenResponse callback) {

            LocalFrameHostEnterFullscreenParams _message = new LocalFrameHostEnterFullscreenParams();

            _message.options = options;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ENTER_FULLSCREEN_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameHostEnterFullscreenResponseParamsForwardToCallback(callback));

        }


        @Override
        public void exitFullscreen(
) {

            LocalFrameHostExitFullscreenParams _message = new LocalFrameHostExitFullscreenParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(EXIT_FULLSCREEN_ORDINAL)));

        }


        @Override
        public void fullscreenStateChanged(
boolean isFullscreen) {

            LocalFrameHostFullscreenStateChangedParams _message = new LocalFrameHostFullscreenStateChangedParams();

            _message.isFullscreen = isFullscreen;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(FULLSCREEN_STATE_CHANGED_ORDINAL)));

        }


        @Override
        public void registerProtocolHandler(
String scheme, org.chromium.url.mojom.Url url, boolean userGesture) {

            LocalFrameHostRegisterProtocolHandlerParams _message = new LocalFrameHostRegisterProtocolHandlerParams();

            _message.scheme = scheme;

            _message.url = url;

            _message.userGesture = userGesture;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REGISTER_PROTOCOL_HANDLER_ORDINAL)));

        }


        @Override
        public void unregisterProtocolHandler(
String scheme, org.chromium.url.mojom.Url url, boolean userGesture) {

            LocalFrameHostUnregisterProtocolHandlerParams _message = new LocalFrameHostUnregisterProtocolHandlerParams();

            _message.scheme = scheme;

            _message.url = url;

            _message.userGesture = userGesture;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UNREGISTER_PROTOCOL_HANDLER_ORDINAL)));

        }


        @Override
        public void didDisplayInsecureContent(
) {

            LocalFrameHostDidDisplayInsecureContentParams _message = new LocalFrameHostDidDisplayInsecureContentParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_DISPLAY_INSECURE_CONTENT_ORDINAL)));

        }


        @Override
        public void didContainInsecureFormAction(
) {

            LocalFrameHostDidContainInsecureFormActionParams _message = new LocalFrameHostDidContainInsecureFormActionParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CONTAIN_INSECURE_FORM_ACTION_ORDINAL)));

        }


        @Override
        public void documentAvailableInMainFrame(
boolean usesTemporaryZoomLevel) {

            LocalFrameHostDocumentAvailableInMainFrameParams _message = new LocalFrameHostDocumentAvailableInMainFrameParams();

            _message.usesTemporaryZoomLevel = usesTemporaryZoomLevel;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DOCUMENT_AVAILABLE_IN_MAIN_FRAME_ORDINAL)));

        }


        @Override
        public void setNeedsOcclusionTracking(
boolean needsTracking) {

            LocalFrameHostSetNeedsOcclusionTrackingParams _message = new LocalFrameHostSetNeedsOcclusionTrackingParams();

            _message.needsTracking = needsTracking;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_NEEDS_OCCLUSION_TRACKING_ORDINAL)));

        }


        @Override
        public void setVirtualKeyboardOverlayPolicy(
boolean vkOverlaysContent) {

            LocalFrameHostSetVirtualKeyboardOverlayPolicyParams _message = new LocalFrameHostSetVirtualKeyboardOverlayPolicyParams();

            _message.vkOverlaysContent = vkOverlaysContent;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_VIRTUAL_KEYBOARD_OVERLAY_POLICY_ORDINAL)));

        }


        @Override
        public void visibilityChanged(
int visibility) {

            LocalFrameHostVisibilityChangedParams _message = new LocalFrameHostVisibilityChangedParams();

            _message.visibility = visibility;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(VISIBILITY_CHANGED_ORDINAL)));

        }


        @Override
        public void didChangeThemeColor(
org.chromium.skia.mojom.SkColor themeColor) {

            LocalFrameHostDidChangeThemeColorParams _message = new LocalFrameHostDidChangeThemeColorParams();

            _message.themeColor = themeColor;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_THEME_COLOR_ORDINAL)));

        }


        @Override
        public void didChangeBackgroundColor(
org.chromium.skia.mojom.SkColor backgroundColor, boolean colorAdjust) {

            LocalFrameHostDidChangeBackgroundColorParams _message = new LocalFrameHostDidChangeBackgroundColorParams();

            _message.backgroundColor = backgroundColor;

            _message.colorAdjust = colorAdjust;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_BACKGROUND_COLOR_ORDINAL)));

        }


        @Override
        public void didFailLoadWithError(
org.chromium.url.mojom.Url url, int errorCode) {

            LocalFrameHostDidFailLoadWithErrorParams _message = new LocalFrameHostDidFailLoadWithErrorParams();

            _message.url = url;

            _message.errorCode = errorCode;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_FAIL_LOAD_WITH_ERROR_ORDINAL)));

        }


        @Override
        public void didFocusFrame(
) {

            LocalFrameHostDidFocusFrameParams _message = new LocalFrameHostDidFocusFrameParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_FOCUS_FRAME_ORDINAL)));

        }


        @Override
        public void didCallFocus(
) {

            LocalFrameHostDidCallFocusParams _message = new LocalFrameHostDidCallFocusParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CALL_FOCUS_ORDINAL)));

        }


        @Override
        public void didAddContentSecurityPolicies(
org.chromium.network.mojom.ContentSecurityPolicy[] policies) {

            LocalFrameHostDidAddContentSecurityPoliciesParams _message = new LocalFrameHostDidAddContentSecurityPoliciesParams();

            _message.policies = policies;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_ADD_CONTENT_SECURITY_POLICIES_ORDINAL)));

        }


        @Override
        public void enforceInsecureRequestPolicy(
int policyBitmap) {

            LocalFrameHostEnforceInsecureRequestPolicyParams _message = new LocalFrameHostEnforceInsecureRequestPolicyParams();

            _message.policyBitmap = policyBitmap;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENFORCE_INSECURE_REQUEST_POLICY_ORDINAL)));

        }


        @Override
        public void enforceInsecureNavigationsSet(
int[] set) {

            LocalFrameHostEnforceInsecureNavigationsSetParams _message = new LocalFrameHostEnforceInsecureNavigationsSetParams();

            _message.set = set;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL)));

        }


        @Override
        public void didChangeActiveSchedulerTrackedFeatures(
long featuresMask) {

            LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams _message = new LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams();

            _message.featuresMask = featuresMask;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_ACTIVE_SCHEDULER_TRACKED_FEATURES_ORDINAL)));

        }


        @Override
        public void suddenTerminationDisablerChanged(
boolean present, int disablerType) {

            LocalFrameHostSuddenTerminationDisablerChangedParams _message = new LocalFrameHostSuddenTerminationDisablerChangedParams();

            _message.present = present;

            _message.disablerType = disablerType;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SUDDEN_TERMINATION_DISABLER_CHANGED_ORDINAL)));

        }


        @Override
        public void hadStickyUserActivationBeforeNavigationChanged(
boolean hasGesture) {

            LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams _message = new LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams();

            _message.hasGesture = hasGesture;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(HAD_STICKY_USER_ACTIVATION_BEFORE_NAVIGATION_CHANGED_ORDINAL)));

        }


        @Override
        public void scrollRectToVisibleInParentFrame(
org.chromium.gfx.mojom.Rect rectToScroll, ScrollIntoViewParams params) {

            LocalFrameHostScrollRectToVisibleInParentFrameParams _message = new LocalFrameHostScrollRectToVisibleInParentFrameParams();

            _message.rectToScroll = rectToScroll;

            _message.params = params;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SCROLL_RECT_TO_VISIBLE_IN_PARENT_FRAME_ORDINAL)));

        }


        @Override
        public void bubbleLogicalScrollInParentFrame(
int direction, int granularity) {

            LocalFrameHostBubbleLogicalScrollInParentFrameParams _message = new LocalFrameHostBubbleLogicalScrollInParentFrameParams();

            _message.direction = direction;

            _message.granularity = granularity;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(BUBBLE_LOGICAL_SCROLL_IN_PARENT_FRAME_ORDINAL)));

        }


        @Override
        public void didAccessInitialDocument(
) {

            LocalFrameHostDidAccessInitialDocumentParams _message = new LocalFrameHostDidAccessInitialDocumentParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_ACCESS_INITIAL_DOCUMENT_ORDINAL)));

        }


        @Override
        public void didBlockNavigation(
org.chromium.url.mojom.Url blockedUrl, org.chromium.url.mojom.Url initiatorUrl, int reason) {

            LocalFrameHostDidBlockNavigationParams _message = new LocalFrameHostDidBlockNavigationParams();

            _message.blockedUrl = blockedUrl;

            _message.initiatorUrl = initiatorUrl;

            _message.reason = reason;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_BLOCK_NAVIGATION_ORDINAL)));

        }


        @Override
        public void didChangeLoadProgress(
double loadProgress) {

            LocalFrameHostDidChangeLoadProgressParams _message = new LocalFrameHostDidChangeLoadProgressParams();

            _message.loadProgress = loadProgress;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_LOAD_PROGRESS_ORDINAL)));

        }


        @Override
        public void didFinishLoad(
org.chromium.url.mojom.Url validatedUrl) {

            LocalFrameHostDidFinishLoadParams _message = new LocalFrameHostDidFinishLoadParams();

            _message.validatedUrl = validatedUrl;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_FINISH_LOAD_ORDINAL)));

        }


        @Override
        public void dispatchLoad(
) {

            LocalFrameHostDispatchLoadParams _message = new LocalFrameHostDispatchLoadParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DISPATCH_LOAD_ORDINAL)));

        }


        @Override
        public void goToEntryAtOffset(
int offset, boolean hasUserGesture) {

            LocalFrameHostGoToEntryAtOffsetParams _message = new LocalFrameHostGoToEntryAtOffsetParams();

            _message.offset = offset;

            _message.hasUserGesture = hasUserGesture;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GO_TO_ENTRY_AT_OFFSET_ORDINAL)));

        }


        @Override
        public void renderFallbackContentInParentProcess(
) {

            LocalFrameHostRenderFallbackContentInParentProcessParams _message = new LocalFrameHostRenderFallbackContentInParentProcessParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(RENDER_FALLBACK_CONTENT_IN_PARENT_PROCESS_ORDINAL)));

        }


        @Override
        public void updateTitle(
org.chromium.mojo_base.mojom.String16 title, int titleDirection) {

            LocalFrameHostUpdateTitleParams _message = new LocalFrameHostUpdateTitleParams();

            _message.title = title;

            _message.titleDirection = titleDirection;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_TITLE_ORDINAL)));

        }


        @Override
        public void updateUserActivationState(
int updateType, int notificationType) {

            LocalFrameHostUpdateUserActivationStateParams _message = new LocalFrameHostUpdateUserActivationStateParams();

            _message.updateType = updateType;

            _message.notificationType = notificationType;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_USER_ACTIVATION_STATE_ORDINAL)));

        }


        @Override
        public void handleAccessibilityFindInPageResult(
FindInPageResultAxParams params) {

            LocalFrameHostHandleAccessibilityFindInPageResultParams _message = new LocalFrameHostHandleAccessibilityFindInPageResultParams();

            _message.params = params;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(HANDLE_ACCESSIBILITY_FIND_IN_PAGE_RESULT_ORDINAL)));

        }


        @Override
        public void handleAccessibilityFindInPageTermination(
) {

            LocalFrameHostHandleAccessibilityFindInPageTerminationParams _message = new LocalFrameHostHandleAccessibilityFindInPageTerminationParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(HANDLE_ACCESSIBILITY_FIND_IN_PAGE_TERMINATION_ORDINAL)));

        }


        @Override
        public void documentOnLoadCompleted(
) {

            LocalFrameHostDocumentOnLoadCompletedParams _message = new LocalFrameHostDocumentOnLoadCompletedParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DOCUMENT_ON_LOAD_COMPLETED_ORDINAL)));

        }


        @Override
        public void forwardResourceTimingToParent(
ResourceTimingInfo timing) {

            LocalFrameHostForwardResourceTimingToParentParams _message = new LocalFrameHostForwardResourceTimingToParentParams();

            _message.timing = timing;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(FORWARD_RESOURCE_TIMING_TO_PARENT_ORDINAL)));

        }


        @Override
        public void didFinishDocumentLoad(
) {

            LocalFrameHostDidFinishDocumentLoadParams _message = new LocalFrameHostDidFinishDocumentLoadParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_FINISH_DOCUMENT_LOAD_ORDINAL)));

        }


        @Override
        public void runModalAlertDialog(
org.chromium.mojo_base.mojom.String16 alertMessage, 
RunModalAlertDialogResponse callback) {

            LocalFrameHostRunModalAlertDialogParams _message = new LocalFrameHostRunModalAlertDialogParams();

            _message.alertMessage = alertMessage;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_ALERT_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameHostRunModalAlertDialogResponseParamsForwardToCallback(callback));

        }


        @Override
        public void runModalConfirmDialog(
org.chromium.mojo_base.mojom.String16 alertMessage, 
RunModalConfirmDialogResponse callback) {

            LocalFrameHostRunModalConfirmDialogParams _message = new LocalFrameHostRunModalConfirmDialogParams();

            _message.alertMessage = alertMessage;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_CONFIRM_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameHostRunModalConfirmDialogResponseParamsForwardToCallback(callback));

        }


        @Override
        public void runModalPromptDialog(
org.chromium.mojo_base.mojom.String16 alertMessage, org.chromium.mojo_base.mojom.String16 defaultValue, 
RunModalPromptDialogResponse callback) {

            LocalFrameHostRunModalPromptDialogParams _message = new LocalFrameHostRunModalPromptDialogParams();

            _message.alertMessage = alertMessage;

            _message.defaultValue = defaultValue;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_PROMPT_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameHostRunModalPromptDialogResponseParamsForwardToCallback(callback));

        }


        @Override
        public void runBeforeUnloadConfirm(
boolean isReload, 
RunBeforeUnloadConfirmResponse callback) {

            LocalFrameHostRunBeforeUnloadConfirmParams _message = new LocalFrameHostRunBeforeUnloadConfirmParams();

            _message.isReload = isReload;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_BEFORE_UNLOAD_CONFIRM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameHostRunBeforeUnloadConfirmResponseParamsForwardToCallback(callback));

        }


        @Override
        public void updateFaviconUrl(
FaviconUrl[] faviconUrls) {

            LocalFrameHostUpdateFaviconUrlParams _message = new LocalFrameHostUpdateFaviconUrlParams();

            _message.faviconUrls = faviconUrls;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_FAVICON_URL_ORDINAL)));

        }


        @Override
        public void downloadUrl(
DownloadUrlParams params) {

            LocalFrameHostDownloadUrlParams _message = new LocalFrameHostDownloadUrlParams();

            _message.params = params;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DOWNLOAD_URL_ORDINAL)));

        }


        @Override
        public void focusedElementChanged(
boolean isEditableElement, org.chromium.gfx.mojom.Rect boundsInFrameWidget, int focusType) {

            LocalFrameHostFocusedElementChangedParams _message = new LocalFrameHostFocusedElementChangedParams();

            _message.isEditableElement = isEditableElement;

            _message.boundsInFrameWidget = boundsInFrameWidget;

            _message.focusType = focusType;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(FOCUSED_ELEMENT_CHANGED_ORDINAL)));

        }


        @Override
        public void textSelectionChanged(
org.chromium.mojo_base.mojom.BigString16 text, int offset, org.chromium.gfx.mojom.Range range) {

            LocalFrameHostTextSelectionChangedParams _message = new LocalFrameHostTextSelectionChangedParams();

            _message.text = text;

            _message.offset = offset;

            _message.range = range;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(TEXT_SELECTION_CHANGED_ORDINAL)));

        }


        @Override
        public void showPopupMenu(
PopupMenuClient popupClient, org.chromium.gfx.mojom.Rect bounds, int itemHeight, double fontSize, int selectedItem, MenuItem[] menuItems, boolean rightAligned, boolean allowMultipleSelection) {

            LocalFrameHostShowPopupMenuParams _message = new LocalFrameHostShowPopupMenuParams();

            _message.popupClient = popupClient;

            _message.bounds = bounds;

            _message.itemHeight = itemHeight;

            _message.fontSize = fontSize;

            _message.selectedItem = selectedItem;

            _message.menuItems = menuItems;

            _message.rightAligned = rightAligned;

            _message.allowMultipleSelection = allowMultipleSelection;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SHOW_POPUP_MENU_ORDINAL)));

        }


        @Override
        public void didLoadResourceFromMemoryCache(
org.chromium.url.mojom.Url url, String httpMethod, String mimeType, int requestDestination) {

            LocalFrameHostDidLoadResourceFromMemoryCacheParams _message = new LocalFrameHostDidLoadResourceFromMemoryCacheParams();

            _message.url = url;

            _message.httpMethod = httpMethod;

            _message.mimeType = mimeType;

            _message.requestDestination = requestDestination;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_LOAD_RESOURCE_FROM_MEMORY_CACHE_ORDINAL)));

        }


        @Override
        public void didChangeFrameOwnerProperties(
org.chromium.mojo_base.mojom.UnguessableToken childFrameToken, FrameOwnerProperties frameOwnerProperties) {

            LocalFrameHostDidChangeFrameOwnerPropertiesParams _message = new LocalFrameHostDidChangeFrameOwnerPropertiesParams();

            _message.childFrameToken = childFrameToken;

            _message.frameOwnerProperties = frameOwnerProperties;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_FRAME_OWNER_PROPERTIES_ORDINAL)));

        }


        @Override
        public void didChangeOpener(
org.chromium.mojo_base.mojom.UnguessableToken openerFrame) {

            LocalFrameHostDidChangeOpenerParams _message = new LocalFrameHostDidChangeOpenerParams();

            _message.openerFrame = openerFrame;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_OPENER_ORDINAL)));

        }


        @Override
        public void didChangeFramePolicy(
org.chromium.mojo_base.mojom.UnguessableToken childFrameToken, FramePolicy framePolicy) {

            LocalFrameHostDidChangeFramePolicyParams _message = new LocalFrameHostDidChangeFramePolicyParams();

            _message.childFrameToken = childFrameToken;

            _message.framePolicy = framePolicy;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_FRAME_POLICY_ORDINAL)));

        }


        @Override
        public void didChangeCspAttribute(
org.chromium.mojo_base.mojom.UnguessableToken childFrameToken, org.chromium.network.mojom.ContentSecurityPolicy parsedCspAttribute) {

            LocalFrameHostDidChangeCspAttributeParams _message = new LocalFrameHostDidChangeCspAttributeParams();

            _message.childFrameToken = childFrameToken;

            _message.parsedCspAttribute = parsedCspAttribute;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_CSP_ATTRIBUTE_ORDINAL)));

        }


        @Override
        public void bindPolicyContainer(
org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported receiver) {

            LocalFrameHostBindPolicyContainerParams _message = new LocalFrameHostBindPolicyContainerParams();

            _message.receiver = receiver;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(BIND_POLICY_CONTAINER_ORDINAL)));

        }


        @Override
        public void capturePaintPreviewOfSubframe(
org.chromium.gfx.mojom.Rect clipRect, org.chromium.mojo_base.mojom.UnguessableToken guid) {

            LocalFrameHostCapturePaintPreviewOfSubframeParams _message = new LocalFrameHostCapturePaintPreviewOfSubframeParams();

            _message.clipRect = clipRect;

            _message.guid = guid;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CAPTURE_PAINT_PREVIEW_OF_SUBFRAME_ORDINAL)));

        }


        @Override
        public void detach(
) {

            LocalFrameHostDetachParams _message = new LocalFrameHostDetachParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DETACH_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<LocalFrameHost> {

        Stub(org.chromium.mojo.system.Core core, LocalFrameHost impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                LocalFrameHost_Internal.MANAGER, messageWithHeader);







                    case EXIT_FULLSCREEN_ORDINAL: {

                        LocalFrameHostExitFullscreenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().exitFullscreen();
                        return true;
                    }





                    case FULLSCREEN_STATE_CHANGED_ORDINAL: {

                        LocalFrameHostFullscreenStateChangedParams data =
                                LocalFrameHostFullscreenStateChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().fullscreenStateChanged(data.isFullscreen);
                        return true;
                    }





                    case REGISTER_PROTOCOL_HANDLER_ORDINAL: {

                        LocalFrameHostRegisterProtocolHandlerParams data =
                                LocalFrameHostRegisterProtocolHandlerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().registerProtocolHandler(data.scheme, data.url, data.userGesture);
                        return true;
                    }





                    case UNREGISTER_PROTOCOL_HANDLER_ORDINAL: {

                        LocalFrameHostUnregisterProtocolHandlerParams data =
                                LocalFrameHostUnregisterProtocolHandlerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().unregisterProtocolHandler(data.scheme, data.url, data.userGesture);
                        return true;
                    }





                    case DID_DISPLAY_INSECURE_CONTENT_ORDINAL: {

                        LocalFrameHostDidDisplayInsecureContentParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didDisplayInsecureContent();
                        return true;
                    }





                    case DID_CONTAIN_INSECURE_FORM_ACTION_ORDINAL: {

                        LocalFrameHostDidContainInsecureFormActionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didContainInsecureFormAction();
                        return true;
                    }





                    case DOCUMENT_AVAILABLE_IN_MAIN_FRAME_ORDINAL: {

                        LocalFrameHostDocumentAvailableInMainFrameParams data =
                                LocalFrameHostDocumentAvailableInMainFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().documentAvailableInMainFrame(data.usesTemporaryZoomLevel);
                        return true;
                    }





                    case SET_NEEDS_OCCLUSION_TRACKING_ORDINAL: {

                        LocalFrameHostSetNeedsOcclusionTrackingParams data =
                                LocalFrameHostSetNeedsOcclusionTrackingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setNeedsOcclusionTracking(data.needsTracking);
                        return true;
                    }





                    case SET_VIRTUAL_KEYBOARD_OVERLAY_POLICY_ORDINAL: {

                        LocalFrameHostSetVirtualKeyboardOverlayPolicyParams data =
                                LocalFrameHostSetVirtualKeyboardOverlayPolicyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setVirtualKeyboardOverlayPolicy(data.vkOverlaysContent);
                        return true;
                    }





                    case VISIBILITY_CHANGED_ORDINAL: {

                        LocalFrameHostVisibilityChangedParams data =
                                LocalFrameHostVisibilityChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().visibilityChanged(data.visibility);
                        return true;
                    }





                    case DID_CHANGE_THEME_COLOR_ORDINAL: {

                        LocalFrameHostDidChangeThemeColorParams data =
                                LocalFrameHostDidChangeThemeColorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeThemeColor(data.themeColor);
                        return true;
                    }





                    case DID_CHANGE_BACKGROUND_COLOR_ORDINAL: {

                        LocalFrameHostDidChangeBackgroundColorParams data =
                                LocalFrameHostDidChangeBackgroundColorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeBackgroundColor(data.backgroundColor, data.colorAdjust);
                        return true;
                    }





                    case DID_FAIL_LOAD_WITH_ERROR_ORDINAL: {

                        LocalFrameHostDidFailLoadWithErrorParams data =
                                LocalFrameHostDidFailLoadWithErrorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didFailLoadWithError(data.url, data.errorCode);
                        return true;
                    }





                    case DID_FOCUS_FRAME_ORDINAL: {

                        LocalFrameHostDidFocusFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didFocusFrame();
                        return true;
                    }





                    case DID_CALL_FOCUS_ORDINAL: {

                        LocalFrameHostDidCallFocusParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didCallFocus();
                        return true;
                    }





                    case DID_ADD_CONTENT_SECURITY_POLICIES_ORDINAL: {

                        LocalFrameHostDidAddContentSecurityPoliciesParams data =
                                LocalFrameHostDidAddContentSecurityPoliciesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didAddContentSecurityPolicies(data.policies);
                        return true;
                    }





                    case ENFORCE_INSECURE_REQUEST_POLICY_ORDINAL: {

                        LocalFrameHostEnforceInsecureRequestPolicyParams data =
                                LocalFrameHostEnforceInsecureRequestPolicyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enforceInsecureRequestPolicy(data.policyBitmap);
                        return true;
                    }





                    case ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL: {

                        LocalFrameHostEnforceInsecureNavigationsSetParams data =
                                LocalFrameHostEnforceInsecureNavigationsSetParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enforceInsecureNavigationsSet(data.set);
                        return true;
                    }





                    case DID_CHANGE_ACTIVE_SCHEDULER_TRACKED_FEATURES_ORDINAL: {

                        LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams data =
                                LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeActiveSchedulerTrackedFeatures(data.featuresMask);
                        return true;
                    }





                    case SUDDEN_TERMINATION_DISABLER_CHANGED_ORDINAL: {

                        LocalFrameHostSuddenTerminationDisablerChangedParams data =
                                LocalFrameHostSuddenTerminationDisablerChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().suddenTerminationDisablerChanged(data.present, data.disablerType);
                        return true;
                    }





                    case HAD_STICKY_USER_ACTIVATION_BEFORE_NAVIGATION_CHANGED_ORDINAL: {

                        LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams data =
                                LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().hadStickyUserActivationBeforeNavigationChanged(data.hasGesture);
                        return true;
                    }





                    case SCROLL_RECT_TO_VISIBLE_IN_PARENT_FRAME_ORDINAL: {

                        LocalFrameHostScrollRectToVisibleInParentFrameParams data =
                                LocalFrameHostScrollRectToVisibleInParentFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().scrollRectToVisibleInParentFrame(data.rectToScroll, data.params);
                        return true;
                    }





                    case BUBBLE_LOGICAL_SCROLL_IN_PARENT_FRAME_ORDINAL: {

                        LocalFrameHostBubbleLogicalScrollInParentFrameParams data =
                                LocalFrameHostBubbleLogicalScrollInParentFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().bubbleLogicalScrollInParentFrame(data.direction, data.granularity);
                        return true;
                    }





                    case DID_ACCESS_INITIAL_DOCUMENT_ORDINAL: {

                        LocalFrameHostDidAccessInitialDocumentParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didAccessInitialDocument();
                        return true;
                    }





                    case DID_BLOCK_NAVIGATION_ORDINAL: {

                        LocalFrameHostDidBlockNavigationParams data =
                                LocalFrameHostDidBlockNavigationParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didBlockNavigation(data.blockedUrl, data.initiatorUrl, data.reason);
                        return true;
                    }





                    case DID_CHANGE_LOAD_PROGRESS_ORDINAL: {

                        LocalFrameHostDidChangeLoadProgressParams data =
                                LocalFrameHostDidChangeLoadProgressParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeLoadProgress(data.loadProgress);
                        return true;
                    }





                    case DID_FINISH_LOAD_ORDINAL: {

                        LocalFrameHostDidFinishLoadParams data =
                                LocalFrameHostDidFinishLoadParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didFinishLoad(data.validatedUrl);
                        return true;
                    }





                    case DISPATCH_LOAD_ORDINAL: {

                        LocalFrameHostDispatchLoadParams.deserialize(messageWithHeader.getPayload());

                        getImpl().dispatchLoad();
                        return true;
                    }





                    case GO_TO_ENTRY_AT_OFFSET_ORDINAL: {

                        LocalFrameHostGoToEntryAtOffsetParams data =
                                LocalFrameHostGoToEntryAtOffsetParams.deserialize(messageWithHeader.getPayload());

                        getImpl().goToEntryAtOffset(data.offset, data.hasUserGesture);
                        return true;
                    }





                    case RENDER_FALLBACK_CONTENT_IN_PARENT_PROCESS_ORDINAL: {

                        LocalFrameHostRenderFallbackContentInParentProcessParams.deserialize(messageWithHeader.getPayload());

                        getImpl().renderFallbackContentInParentProcess();
                        return true;
                    }





                    case UPDATE_TITLE_ORDINAL: {

                        LocalFrameHostUpdateTitleParams data =
                                LocalFrameHostUpdateTitleParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateTitle(data.title, data.titleDirection);
                        return true;
                    }





                    case UPDATE_USER_ACTIVATION_STATE_ORDINAL: {

                        LocalFrameHostUpdateUserActivationStateParams data =
                                LocalFrameHostUpdateUserActivationStateParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateUserActivationState(data.updateType, data.notificationType);
                        return true;
                    }





                    case HANDLE_ACCESSIBILITY_FIND_IN_PAGE_RESULT_ORDINAL: {

                        LocalFrameHostHandleAccessibilityFindInPageResultParams data =
                                LocalFrameHostHandleAccessibilityFindInPageResultParams.deserialize(messageWithHeader.getPayload());

                        getImpl().handleAccessibilityFindInPageResult(data.params);
                        return true;
                    }





                    case HANDLE_ACCESSIBILITY_FIND_IN_PAGE_TERMINATION_ORDINAL: {

                        LocalFrameHostHandleAccessibilityFindInPageTerminationParams.deserialize(messageWithHeader.getPayload());

                        getImpl().handleAccessibilityFindInPageTermination();
                        return true;
                    }





                    case DOCUMENT_ON_LOAD_COMPLETED_ORDINAL: {

                        LocalFrameHostDocumentOnLoadCompletedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().documentOnLoadCompleted();
                        return true;
                    }





                    case FORWARD_RESOURCE_TIMING_TO_PARENT_ORDINAL: {

                        LocalFrameHostForwardResourceTimingToParentParams data =
                                LocalFrameHostForwardResourceTimingToParentParams.deserialize(messageWithHeader.getPayload());

                        getImpl().forwardResourceTimingToParent(data.timing);
                        return true;
                    }





                    case DID_FINISH_DOCUMENT_LOAD_ORDINAL: {

                        LocalFrameHostDidFinishDocumentLoadParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didFinishDocumentLoad();
                        return true;
                    }













                    case UPDATE_FAVICON_URL_ORDINAL: {

                        LocalFrameHostUpdateFaviconUrlParams data =
                                LocalFrameHostUpdateFaviconUrlParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateFaviconUrl(data.faviconUrls);
                        return true;
                    }





                    case DOWNLOAD_URL_ORDINAL: {

                        LocalFrameHostDownloadUrlParams data =
                                LocalFrameHostDownloadUrlParams.deserialize(messageWithHeader.getPayload());

                        getImpl().downloadUrl(data.params);
                        return true;
                    }





                    case FOCUSED_ELEMENT_CHANGED_ORDINAL: {

                        LocalFrameHostFocusedElementChangedParams data =
                                LocalFrameHostFocusedElementChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().focusedElementChanged(data.isEditableElement, data.boundsInFrameWidget, data.focusType);
                        return true;
                    }





                    case TEXT_SELECTION_CHANGED_ORDINAL: {

                        LocalFrameHostTextSelectionChangedParams data =
                                LocalFrameHostTextSelectionChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().textSelectionChanged(data.text, data.offset, data.range);
                        return true;
                    }





                    case SHOW_POPUP_MENU_ORDINAL: {

                        LocalFrameHostShowPopupMenuParams data =
                                LocalFrameHostShowPopupMenuParams.deserialize(messageWithHeader.getPayload());

                        getImpl().showPopupMenu(data.popupClient, data.bounds, data.itemHeight, data.fontSize, data.selectedItem, data.menuItems, data.rightAligned, data.allowMultipleSelection);
                        return true;
                    }





                    case DID_LOAD_RESOURCE_FROM_MEMORY_CACHE_ORDINAL: {

                        LocalFrameHostDidLoadResourceFromMemoryCacheParams data =
                                LocalFrameHostDidLoadResourceFromMemoryCacheParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didLoadResourceFromMemoryCache(data.url, data.httpMethod, data.mimeType, data.requestDestination);
                        return true;
                    }





                    case DID_CHANGE_FRAME_OWNER_PROPERTIES_ORDINAL: {

                        LocalFrameHostDidChangeFrameOwnerPropertiesParams data =
                                LocalFrameHostDidChangeFrameOwnerPropertiesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeFrameOwnerProperties(data.childFrameToken, data.frameOwnerProperties);
                        return true;
                    }





                    case DID_CHANGE_OPENER_ORDINAL: {

                        LocalFrameHostDidChangeOpenerParams data =
                                LocalFrameHostDidChangeOpenerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeOpener(data.openerFrame);
                        return true;
                    }





                    case DID_CHANGE_FRAME_POLICY_ORDINAL: {

                        LocalFrameHostDidChangeFramePolicyParams data =
                                LocalFrameHostDidChangeFramePolicyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeFramePolicy(data.childFrameToken, data.framePolicy);
                        return true;
                    }





                    case DID_CHANGE_CSP_ATTRIBUTE_ORDINAL: {

                        LocalFrameHostDidChangeCspAttributeParams data =
                                LocalFrameHostDidChangeCspAttributeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeCspAttribute(data.childFrameToken, data.parsedCspAttribute);
                        return true;
                    }





                    case BIND_POLICY_CONTAINER_ORDINAL: {

                        LocalFrameHostBindPolicyContainerParams data =
                                LocalFrameHostBindPolicyContainerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().bindPolicyContainer(data.receiver);
                        return true;
                    }





                    case CAPTURE_PAINT_PREVIEW_OF_SUBFRAME_ORDINAL: {

                        LocalFrameHostCapturePaintPreviewOfSubframeParams data =
                                LocalFrameHostCapturePaintPreviewOfSubframeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().capturePaintPreviewOfSubframe(data.clipRect, data.guid);
                        return true;
                    }





                    case DETACH_ORDINAL: {

                        LocalFrameHostDetachParams.deserialize(messageWithHeader.getPayload());

                        getImpl().detach();
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), LocalFrameHost_Internal.MANAGER, messageWithHeader, receiver);







                    case ENTER_FULLSCREEN_ORDINAL: {

                        LocalFrameHostEnterFullscreenParams data =
                                LocalFrameHostEnterFullscreenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enterFullscreen(data.options, new LocalFrameHostEnterFullscreenResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }

















































































                    case RUN_MODAL_ALERT_DIALOG_ORDINAL: {

                        LocalFrameHostRunModalAlertDialogParams data =
                                LocalFrameHostRunModalAlertDialogParams.deserialize(messageWithHeader.getPayload());

                        getImpl().runModalAlertDialog(data.alertMessage, new LocalFrameHostRunModalAlertDialogResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case RUN_MODAL_CONFIRM_DIALOG_ORDINAL: {

                        LocalFrameHostRunModalConfirmDialogParams data =
                                LocalFrameHostRunModalConfirmDialogParams.deserialize(messageWithHeader.getPayload());

                        getImpl().runModalConfirmDialog(data.alertMessage, new LocalFrameHostRunModalConfirmDialogResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case RUN_MODAL_PROMPT_DIALOG_ORDINAL: {

                        LocalFrameHostRunModalPromptDialogParams data =
                                LocalFrameHostRunModalPromptDialogParams.deserialize(messageWithHeader.getPayload());

                        getImpl().runModalPromptDialog(data.alertMessage, data.defaultValue, new LocalFrameHostRunModalPromptDialogResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case RUN_BEFORE_UNLOAD_CONFIRM_ORDINAL: {

                        LocalFrameHostRunBeforeUnloadConfirmParams data =
                                LocalFrameHostRunBeforeUnloadConfirmParams.deserialize(messageWithHeader.getPayload());

                        getImpl().runBeforeUnloadConfirm(data.isReload, new LocalFrameHostRunBeforeUnloadConfirmResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }




























                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class LocalFrameHostEnterFullscreenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FullscreenOptions options;

        private LocalFrameHostEnterFullscreenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostEnterFullscreenParams() {
            this(0);
        }

        public static LocalFrameHostEnterFullscreenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostEnterFullscreenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostEnterFullscreenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostEnterFullscreenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostEnterFullscreenParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.options = FullscreenOptions.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.options, 8, false);
        }
    }



    
    static final class LocalFrameHostEnterFullscreenResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean granted;

        private LocalFrameHostEnterFullscreenResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostEnterFullscreenResponseParams() {
            this(0);
        }

        public static LocalFrameHostEnterFullscreenResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostEnterFullscreenResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostEnterFullscreenResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostEnterFullscreenResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostEnterFullscreenResponseParams(elementsOrVersion);
                    {
                        
                    result.granted = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.granted, 8, 0);
        }
    }

    static class LocalFrameHostEnterFullscreenResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrameHost.EnterFullscreenResponse mCallback;

        LocalFrameHostEnterFullscreenResponseParamsForwardToCallback(LocalFrameHost.EnterFullscreenResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ENTER_FULLSCREEN_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                LocalFrameHostEnterFullscreenResponseParams response = LocalFrameHostEnterFullscreenResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.granted);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameHostEnterFullscreenResponseParamsProxyToResponder implements LocalFrameHost.EnterFullscreenResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameHostEnterFullscreenResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean granted) {
            LocalFrameHostEnterFullscreenResponseParams _response = new LocalFrameHostEnterFullscreenResponseParams();

            _response.granted = granted;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ENTER_FULLSCREEN_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameHostExitFullscreenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostExitFullscreenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostExitFullscreenParams() {
            this(0);
        }

        public static LocalFrameHostExitFullscreenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostExitFullscreenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostExitFullscreenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostExitFullscreenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostExitFullscreenParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostFullscreenStateChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean isFullscreen;

        private LocalFrameHostFullscreenStateChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostFullscreenStateChangedParams() {
            this(0);
        }

        public static LocalFrameHostFullscreenStateChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostFullscreenStateChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostFullscreenStateChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostFullscreenStateChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostFullscreenStateChangedParams(elementsOrVersion);
                    {
                        
                    result.isFullscreen = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.isFullscreen, 8, 0);
        }
    }



    
    static final class LocalFrameHostRegisterProtocolHandlerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String scheme;
        public org.chromium.url.mojom.Url url;
        public boolean userGesture;

        private LocalFrameHostRegisterProtocolHandlerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRegisterProtocolHandlerParams() {
            this(0);
        }

        public static LocalFrameHostRegisterProtocolHandlerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRegisterProtocolHandlerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRegisterProtocolHandlerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRegisterProtocolHandlerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRegisterProtocolHandlerParams(elementsOrVersion);
                    {
                        
                    result.scheme = decoder0.readString(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.userGesture = decoder0.readBoolean(24, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.scheme, 8, false);
            
            encoder0.encode(this.url, 16, false);
            
            encoder0.encode(this.userGesture, 24, 0);
        }
    }



    
    static final class LocalFrameHostUnregisterProtocolHandlerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String scheme;
        public org.chromium.url.mojom.Url url;
        public boolean userGesture;

        private LocalFrameHostUnregisterProtocolHandlerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostUnregisterProtocolHandlerParams() {
            this(0);
        }

        public static LocalFrameHostUnregisterProtocolHandlerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostUnregisterProtocolHandlerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostUnregisterProtocolHandlerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostUnregisterProtocolHandlerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostUnregisterProtocolHandlerParams(elementsOrVersion);
                    {
                        
                    result.scheme = decoder0.readString(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.userGesture = decoder0.readBoolean(24, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.scheme, 8, false);
            
            encoder0.encode(this.url, 16, false);
            
            encoder0.encode(this.userGesture, 24, 0);
        }
    }



    
    static final class LocalFrameHostDidDisplayInsecureContentParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidDisplayInsecureContentParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidDisplayInsecureContentParams() {
            this(0);
        }

        public static LocalFrameHostDidDisplayInsecureContentParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidDisplayInsecureContentParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidDisplayInsecureContentParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidDisplayInsecureContentParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidDisplayInsecureContentParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostDidContainInsecureFormActionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidContainInsecureFormActionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidContainInsecureFormActionParams() {
            this(0);
        }

        public static LocalFrameHostDidContainInsecureFormActionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidContainInsecureFormActionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidContainInsecureFormActionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidContainInsecureFormActionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidContainInsecureFormActionParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostDocumentAvailableInMainFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean usesTemporaryZoomLevel;

        private LocalFrameHostDocumentAvailableInMainFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDocumentAvailableInMainFrameParams() {
            this(0);
        }

        public static LocalFrameHostDocumentAvailableInMainFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDocumentAvailableInMainFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDocumentAvailableInMainFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDocumentAvailableInMainFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDocumentAvailableInMainFrameParams(elementsOrVersion);
                    {
                        
                    result.usesTemporaryZoomLevel = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.usesTemporaryZoomLevel, 8, 0);
        }
    }



    
    static final class LocalFrameHostSetNeedsOcclusionTrackingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean needsTracking;

        private LocalFrameHostSetNeedsOcclusionTrackingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostSetNeedsOcclusionTrackingParams() {
            this(0);
        }

        public static LocalFrameHostSetNeedsOcclusionTrackingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostSetNeedsOcclusionTrackingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostSetNeedsOcclusionTrackingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostSetNeedsOcclusionTrackingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostSetNeedsOcclusionTrackingParams(elementsOrVersion);
                    {
                        
                    result.needsTracking = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.needsTracking, 8, 0);
        }
    }



    
    static final class LocalFrameHostSetVirtualKeyboardOverlayPolicyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean vkOverlaysContent;

        private LocalFrameHostSetVirtualKeyboardOverlayPolicyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostSetVirtualKeyboardOverlayPolicyParams() {
            this(0);
        }

        public static LocalFrameHostSetVirtualKeyboardOverlayPolicyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostSetVirtualKeyboardOverlayPolicyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostSetVirtualKeyboardOverlayPolicyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostSetVirtualKeyboardOverlayPolicyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostSetVirtualKeyboardOverlayPolicyParams(elementsOrVersion);
                    {
                        
                    result.vkOverlaysContent = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.vkOverlaysContent, 8, 0);
        }
    }



    
    static final class LocalFrameHostVisibilityChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int visibility;

        private LocalFrameHostVisibilityChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostVisibilityChangedParams() {
            this(0);
        }

        public static LocalFrameHostVisibilityChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostVisibilityChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostVisibilityChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostVisibilityChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostVisibilityChangedParams(elementsOrVersion);
                    {
                        
                    result.visibility = decoder0.readInt(8);
                        FrameVisibility.validate(result.visibility);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.visibility, 8);
        }
    }



    
    static final class LocalFrameHostDidChangeThemeColorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.skia.mojom.SkColor themeColor;

        private LocalFrameHostDidChangeThemeColorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeThemeColorParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeThemeColorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeThemeColorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeThemeColorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeThemeColorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeThemeColorParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.themeColor = org.chromium.skia.mojom.SkColor.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.themeColor, 8, true);
        }
    }



    
    static final class LocalFrameHostDidChangeBackgroundColorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.skia.mojom.SkColor backgroundColor;
        public boolean colorAdjust;

        private LocalFrameHostDidChangeBackgroundColorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeBackgroundColorParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeBackgroundColorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeBackgroundColorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeBackgroundColorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeBackgroundColorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeBackgroundColorParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.backgroundColor = org.chromium.skia.mojom.SkColor.decode(decoder1);
                    }
                    {
                        
                    result.colorAdjust = decoder0.readBoolean(16, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.backgroundColor, 8, false);
            
            encoder0.encode(this.colorAdjust, 16, 0);
        }
    }



    
    static final class LocalFrameHostDidFailLoadWithErrorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url url;
        public int errorCode;

        private LocalFrameHostDidFailLoadWithErrorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidFailLoadWithErrorParams() {
            this(0);
        }

        public static LocalFrameHostDidFailLoadWithErrorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidFailLoadWithErrorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidFailLoadWithErrorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidFailLoadWithErrorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidFailLoadWithErrorParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.errorCode = decoder0.readInt(16);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.url, 8, false);
            
            encoder0.encode(this.errorCode, 16);
        }
    }



    
    static final class LocalFrameHostDidFocusFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidFocusFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidFocusFrameParams() {
            this(0);
        }

        public static LocalFrameHostDidFocusFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidFocusFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidFocusFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidFocusFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidFocusFrameParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostDidCallFocusParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidCallFocusParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidCallFocusParams() {
            this(0);
        }

        public static LocalFrameHostDidCallFocusParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidCallFocusParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidCallFocusParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidCallFocusParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidCallFocusParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostDidAddContentSecurityPoliciesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.network.mojom.ContentSecurityPolicy[] policies;

        private LocalFrameHostDidAddContentSecurityPoliciesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidAddContentSecurityPoliciesParams() {
            this(0);
        }

        public static LocalFrameHostDidAddContentSecurityPoliciesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidAddContentSecurityPoliciesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidAddContentSecurityPoliciesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidAddContentSecurityPoliciesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidAddContentSecurityPoliciesParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.policies = new org.chromium.network.mojom.ContentSecurityPolicy[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.policies[i1] = org.chromium.network.mojom.ContentSecurityPolicy.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (this.policies == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.policies.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.policies.length; ++i0) {
                    
                    encoder1.encode(this.policies[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class LocalFrameHostEnforceInsecureRequestPolicyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int policyBitmap;

        private LocalFrameHostEnforceInsecureRequestPolicyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostEnforceInsecureRequestPolicyParams() {
            this(0);
        }

        public static LocalFrameHostEnforceInsecureRequestPolicyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostEnforceInsecureRequestPolicyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostEnforceInsecureRequestPolicyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostEnforceInsecureRequestPolicyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostEnforceInsecureRequestPolicyParams(elementsOrVersion);
                    {
                        
                    result.policyBitmap = decoder0.readInt(8);
                        InsecureRequestPolicy.validate(result.policyBitmap);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.policyBitmap, 8);
        }
    }



    
    static final class LocalFrameHostEnforceInsecureNavigationsSetParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int[] set;

        private LocalFrameHostEnforceInsecureNavigationsSetParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostEnforceInsecureNavigationsSetParams() {
            this(0);
        }

        public static LocalFrameHostEnforceInsecureNavigationsSetParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostEnforceInsecureNavigationsSetParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostEnforceInsecureNavigationsSetParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostEnforceInsecureNavigationsSetParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostEnforceInsecureNavigationsSetParams(elementsOrVersion);
                    {
                        
                    result.set = decoder0.readInts(8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.set, 8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
    }



    
    static final class LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long featuresMask;

        private LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams(elementsOrVersion);
                    {
                        
                    result.featuresMask = decoder0.readLong(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.featuresMask, 8);
        }
    }



    
    static final class LocalFrameHostSuddenTerminationDisablerChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean present;
        public int disablerType;

        private LocalFrameHostSuddenTerminationDisablerChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostSuddenTerminationDisablerChangedParams() {
            this(0);
        }

        public static LocalFrameHostSuddenTerminationDisablerChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostSuddenTerminationDisablerChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostSuddenTerminationDisablerChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostSuddenTerminationDisablerChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostSuddenTerminationDisablerChangedParams(elementsOrVersion);
                    {
                        
                    result.present = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.disablerType = decoder0.readInt(12);
                        SuddenTerminationDisablerType.validate(result.disablerType);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.present, 8, 0);
            
            encoder0.encode(this.disablerType, 12);
        }
    }



    
    static final class LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean hasGesture;

        private LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams() {
            this(0);
        }

        public static LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams(elementsOrVersion);
                    {
                        
                    result.hasGesture = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.hasGesture, 8, 0);
        }
    }



    
    static final class LocalFrameHostScrollRectToVisibleInParentFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Rect rectToScroll;
        public ScrollIntoViewParams params;

        private LocalFrameHostScrollRectToVisibleInParentFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostScrollRectToVisibleInParentFrameParams() {
            this(0);
        }

        public static LocalFrameHostScrollRectToVisibleInParentFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostScrollRectToVisibleInParentFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostScrollRectToVisibleInParentFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostScrollRectToVisibleInParentFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostScrollRectToVisibleInParentFrameParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.rectToScroll = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.params = ScrollIntoViewParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.rectToScroll, 8, false);
            
            encoder0.encode(this.params, 16, false);
        }
    }



    
    static final class LocalFrameHostBubbleLogicalScrollInParentFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int direction;
        public int granularity;

        private LocalFrameHostBubbleLogicalScrollInParentFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostBubbleLogicalScrollInParentFrameParams() {
            this(0);
        }

        public static LocalFrameHostBubbleLogicalScrollInParentFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostBubbleLogicalScrollInParentFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostBubbleLogicalScrollInParentFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostBubbleLogicalScrollInParentFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostBubbleLogicalScrollInParentFrameParams(elementsOrVersion);
                    {
                        
                    result.direction = decoder0.readInt(8);
                        ScrollDirection.validate(result.direction);
                    }
                    {
                        
                    result.granularity = decoder0.readInt(12);
                        org.chromium.ui.mojom.ScrollGranularity.validate(result.granularity);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.direction, 8);
            
            encoder0.encode(this.granularity, 12);
        }
    }



    
    static final class LocalFrameHostDidAccessInitialDocumentParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidAccessInitialDocumentParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidAccessInitialDocumentParams() {
            this(0);
        }

        public static LocalFrameHostDidAccessInitialDocumentParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidAccessInitialDocumentParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidAccessInitialDocumentParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidAccessInitialDocumentParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidAccessInitialDocumentParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostDidBlockNavigationParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url blockedUrl;
        public org.chromium.url.mojom.Url initiatorUrl;
        public int reason;

        private LocalFrameHostDidBlockNavigationParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidBlockNavigationParams() {
            this(0);
        }

        public static LocalFrameHostDidBlockNavigationParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidBlockNavigationParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidBlockNavigationParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidBlockNavigationParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidBlockNavigationParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.blockedUrl = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.initiatorUrl = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.reason = decoder0.readInt(24);
                        NavigationBlockedReason.validate(result.reason);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.blockedUrl, 8, false);
            
            encoder0.encode(this.initiatorUrl, 16, false);
            
            encoder0.encode(this.reason, 24);
        }
    }



    
    static final class LocalFrameHostDidChangeLoadProgressParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public double loadProgress;

        private LocalFrameHostDidChangeLoadProgressParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeLoadProgressParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeLoadProgressParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeLoadProgressParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeLoadProgressParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeLoadProgressParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeLoadProgressParams(elementsOrVersion);
                    {
                        
                    result.loadProgress = decoder0.readDouble(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.loadProgress, 8);
        }
    }



    
    static final class LocalFrameHostDidFinishLoadParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url validatedUrl;

        private LocalFrameHostDidFinishLoadParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidFinishLoadParams() {
            this(0);
        }

        public static LocalFrameHostDidFinishLoadParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidFinishLoadParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidFinishLoadParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidFinishLoadParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidFinishLoadParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.validatedUrl = org.chromium.url.mojom.Url.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.validatedUrl, 8, false);
        }
    }



    
    static final class LocalFrameHostDispatchLoadParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDispatchLoadParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDispatchLoadParams() {
            this(0);
        }

        public static LocalFrameHostDispatchLoadParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDispatchLoadParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDispatchLoadParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDispatchLoadParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDispatchLoadParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostGoToEntryAtOffsetParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int offset;
        public boolean hasUserGesture;

        private LocalFrameHostGoToEntryAtOffsetParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostGoToEntryAtOffsetParams() {
            this(0);
        }

        public static LocalFrameHostGoToEntryAtOffsetParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostGoToEntryAtOffsetParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostGoToEntryAtOffsetParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostGoToEntryAtOffsetParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostGoToEntryAtOffsetParams(elementsOrVersion);
                    {
                        
                    result.offset = decoder0.readInt(8);
                    }
                    {
                        
                    result.hasUserGesture = decoder0.readBoolean(12, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.offset, 8);
            
            encoder0.encode(this.hasUserGesture, 12, 0);
        }
    }



    
    static final class LocalFrameHostRenderFallbackContentInParentProcessParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostRenderFallbackContentInParentProcessParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRenderFallbackContentInParentProcessParams() {
            this(0);
        }

        public static LocalFrameHostRenderFallbackContentInParentProcessParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRenderFallbackContentInParentProcessParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRenderFallbackContentInParentProcessParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRenderFallbackContentInParentProcessParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRenderFallbackContentInParentProcessParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostUpdateTitleParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16 title;
        public int titleDirection;

        private LocalFrameHostUpdateTitleParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostUpdateTitleParams() {
            this(0);
        }

        public static LocalFrameHostUpdateTitleParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostUpdateTitleParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostUpdateTitleParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostUpdateTitleParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostUpdateTitleParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.title = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    result.titleDirection = decoder0.readInt(16);
                        org.chromium.mojo_base.mojom.TextDirection.validate(result.titleDirection);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.title, 8, true);
            
            encoder0.encode(this.titleDirection, 16);
        }
    }



    
    static final class LocalFrameHostUpdateUserActivationStateParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int updateType;
        public int notificationType;

        private LocalFrameHostUpdateUserActivationStateParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostUpdateUserActivationStateParams() {
            this(0);
        }

        public static LocalFrameHostUpdateUserActivationStateParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostUpdateUserActivationStateParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostUpdateUserActivationStateParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostUpdateUserActivationStateParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostUpdateUserActivationStateParams(elementsOrVersion);
                    {
                        
                    result.updateType = decoder0.readInt(8);
                        UserActivationUpdateType.validate(result.updateType);
                    }
                    {
                        
                    result.notificationType = decoder0.readInt(12);
                        UserActivationNotificationType.validate(result.notificationType);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.updateType, 8);
            
            encoder0.encode(this.notificationType, 12);
        }
    }



    
    static final class LocalFrameHostHandleAccessibilityFindInPageResultParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FindInPageResultAxParams params;

        private LocalFrameHostHandleAccessibilityFindInPageResultParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostHandleAccessibilityFindInPageResultParams() {
            this(0);
        }

        public static LocalFrameHostHandleAccessibilityFindInPageResultParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostHandleAccessibilityFindInPageResultParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostHandleAccessibilityFindInPageResultParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostHandleAccessibilityFindInPageResultParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostHandleAccessibilityFindInPageResultParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.params = FindInPageResultAxParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.params, 8, false);
        }
    }



    
    static final class LocalFrameHostHandleAccessibilityFindInPageTerminationParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostHandleAccessibilityFindInPageTerminationParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostHandleAccessibilityFindInPageTerminationParams() {
            this(0);
        }

        public static LocalFrameHostHandleAccessibilityFindInPageTerminationParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostHandleAccessibilityFindInPageTerminationParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostHandleAccessibilityFindInPageTerminationParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostHandleAccessibilityFindInPageTerminationParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostHandleAccessibilityFindInPageTerminationParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostDocumentOnLoadCompletedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDocumentOnLoadCompletedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDocumentOnLoadCompletedParams() {
            this(0);
        }

        public static LocalFrameHostDocumentOnLoadCompletedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDocumentOnLoadCompletedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDocumentOnLoadCompletedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDocumentOnLoadCompletedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDocumentOnLoadCompletedParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostForwardResourceTimingToParentParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ResourceTimingInfo timing;

        private LocalFrameHostForwardResourceTimingToParentParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostForwardResourceTimingToParentParams() {
            this(0);
        }

        public static LocalFrameHostForwardResourceTimingToParentParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostForwardResourceTimingToParentParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostForwardResourceTimingToParentParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostForwardResourceTimingToParentParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostForwardResourceTimingToParentParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.timing = ResourceTimingInfo.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.timing, 8, false);
        }
    }



    
    static final class LocalFrameHostDidFinishDocumentLoadParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidFinishDocumentLoadParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidFinishDocumentLoadParams() {
            this(0);
        }

        public static LocalFrameHostDidFinishDocumentLoadParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidFinishDocumentLoadParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidFinishDocumentLoadParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidFinishDocumentLoadParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidFinishDocumentLoadParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostRunModalAlertDialogParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16 alertMessage;

        private LocalFrameHostRunModalAlertDialogParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalAlertDialogParams() {
            this(0);
        }

        public static LocalFrameHostRunModalAlertDialogParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalAlertDialogParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalAlertDialogParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalAlertDialogParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalAlertDialogParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.alertMessage = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.alertMessage, 8, false);
        }
    }



    
    static final class LocalFrameHostRunModalAlertDialogResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostRunModalAlertDialogResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalAlertDialogResponseParams() {
            this(0);
        }

        public static LocalFrameHostRunModalAlertDialogResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalAlertDialogResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalAlertDialogResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalAlertDialogResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalAlertDialogResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class LocalFrameHostRunModalAlertDialogResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrameHost.RunModalAlertDialogResponse mCallback;

        LocalFrameHostRunModalAlertDialogResponseParamsForwardToCallback(LocalFrameHost.RunModalAlertDialogResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(RUN_MODAL_ALERT_DIALOG_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameHostRunModalAlertDialogResponseParamsProxyToResponder implements LocalFrameHost.RunModalAlertDialogResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameHostRunModalAlertDialogResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            LocalFrameHostRunModalAlertDialogResponseParams _response = new LocalFrameHostRunModalAlertDialogResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_ALERT_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameHostRunModalConfirmDialogParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16 alertMessage;

        private LocalFrameHostRunModalConfirmDialogParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalConfirmDialogParams() {
            this(0);
        }

        public static LocalFrameHostRunModalConfirmDialogParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalConfirmDialogParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalConfirmDialogParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalConfirmDialogParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalConfirmDialogParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.alertMessage = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.alertMessage, 8, false);
        }
    }



    
    static final class LocalFrameHostRunModalConfirmDialogResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;

        private LocalFrameHostRunModalConfirmDialogResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalConfirmDialogResponseParams() {
            this(0);
        }

        public static LocalFrameHostRunModalConfirmDialogResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalConfirmDialogResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalConfirmDialogResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalConfirmDialogResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalConfirmDialogResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
        }
    }

    static class LocalFrameHostRunModalConfirmDialogResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrameHost.RunModalConfirmDialogResponse mCallback;

        LocalFrameHostRunModalConfirmDialogResponseParamsForwardToCallback(LocalFrameHost.RunModalConfirmDialogResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(RUN_MODAL_CONFIRM_DIALOG_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                LocalFrameHostRunModalConfirmDialogResponseParams response = LocalFrameHostRunModalConfirmDialogResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameHostRunModalConfirmDialogResponseParamsProxyToResponder implements LocalFrameHost.RunModalConfirmDialogResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameHostRunModalConfirmDialogResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success) {
            LocalFrameHostRunModalConfirmDialogResponseParams _response = new LocalFrameHostRunModalConfirmDialogResponseParams();

            _response.success = success;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_CONFIRM_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameHostRunModalPromptDialogParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16 alertMessage;
        public org.chromium.mojo_base.mojom.String16 defaultValue;

        private LocalFrameHostRunModalPromptDialogParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalPromptDialogParams() {
            this(0);
        }

        public static LocalFrameHostRunModalPromptDialogParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalPromptDialogParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalPromptDialogParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalPromptDialogParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalPromptDialogParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.alertMessage = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.defaultValue = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.alertMessage, 8, false);
            
            encoder0.encode(this.defaultValue, 16, false);
        }
    }



    
    static final class LocalFrameHostRunModalPromptDialogResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;
        public org.chromium.mojo_base.mojom.String16 result;

        private LocalFrameHostRunModalPromptDialogResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalPromptDialogResponseParams() {
            this(0);
        }

        public static LocalFrameHostRunModalPromptDialogResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalPromptDialogResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalPromptDialogResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalPromptDialogResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalPromptDialogResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.result = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
            
            encoder0.encode(this.result, 16, false);
        }
    }

    static class LocalFrameHostRunModalPromptDialogResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrameHost.RunModalPromptDialogResponse mCallback;

        LocalFrameHostRunModalPromptDialogResponseParamsForwardToCallback(LocalFrameHost.RunModalPromptDialogResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(RUN_MODAL_PROMPT_DIALOG_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                LocalFrameHostRunModalPromptDialogResponseParams response = LocalFrameHostRunModalPromptDialogResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success, response.result);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameHostRunModalPromptDialogResponseParamsProxyToResponder implements LocalFrameHost.RunModalPromptDialogResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameHostRunModalPromptDialogResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success, org.chromium.mojo_base.mojom.String16 result) {
            LocalFrameHostRunModalPromptDialogResponseParams _response = new LocalFrameHostRunModalPromptDialogResponseParams();

            _response.success = success;

            _response.result = result;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_PROMPT_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameHostRunBeforeUnloadConfirmParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean isReload;

        private LocalFrameHostRunBeforeUnloadConfirmParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunBeforeUnloadConfirmParams() {
            this(0);
        }

        public static LocalFrameHostRunBeforeUnloadConfirmParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunBeforeUnloadConfirmParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunBeforeUnloadConfirmParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunBeforeUnloadConfirmParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunBeforeUnloadConfirmParams(elementsOrVersion);
                    {
                        
                    result.isReload = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.isReload, 8, 0);
        }
    }



    
    static final class LocalFrameHostRunBeforeUnloadConfirmResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;

        private LocalFrameHostRunBeforeUnloadConfirmResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunBeforeUnloadConfirmResponseParams() {
            this(0);
        }

        public static LocalFrameHostRunBeforeUnloadConfirmResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunBeforeUnloadConfirmResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunBeforeUnloadConfirmResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunBeforeUnloadConfirmResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunBeforeUnloadConfirmResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
        }
    }

    static class LocalFrameHostRunBeforeUnloadConfirmResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrameHost.RunBeforeUnloadConfirmResponse mCallback;

        LocalFrameHostRunBeforeUnloadConfirmResponseParamsForwardToCallback(LocalFrameHost.RunBeforeUnloadConfirmResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(RUN_BEFORE_UNLOAD_CONFIRM_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                LocalFrameHostRunBeforeUnloadConfirmResponseParams response = LocalFrameHostRunBeforeUnloadConfirmResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameHostRunBeforeUnloadConfirmResponseParamsProxyToResponder implements LocalFrameHost.RunBeforeUnloadConfirmResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameHostRunBeforeUnloadConfirmResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success) {
            LocalFrameHostRunBeforeUnloadConfirmResponseParams _response = new LocalFrameHostRunBeforeUnloadConfirmResponseParams();

            _response.success = success;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_BEFORE_UNLOAD_CONFIRM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameHostUpdateFaviconUrlParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FaviconUrl[] faviconUrls;

        private LocalFrameHostUpdateFaviconUrlParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostUpdateFaviconUrlParams() {
            this(0);
        }

        public static LocalFrameHostUpdateFaviconUrlParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostUpdateFaviconUrlParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostUpdateFaviconUrlParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostUpdateFaviconUrlParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostUpdateFaviconUrlParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.faviconUrls = new FaviconUrl[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.faviconUrls[i1] = FaviconUrl.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (this.faviconUrls == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.faviconUrls.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.faviconUrls.length; ++i0) {
                    
                    encoder1.encode(this.faviconUrls[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class LocalFrameHostDownloadUrlParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public DownloadUrlParams params;

        private LocalFrameHostDownloadUrlParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDownloadUrlParams() {
            this(0);
        }

        public static LocalFrameHostDownloadUrlParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDownloadUrlParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDownloadUrlParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDownloadUrlParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDownloadUrlParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.params = DownloadUrlParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.params, 8, false);
        }
    }



    
    static final class LocalFrameHostFocusedElementChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean isEditableElement;
        public org.chromium.gfx.mojom.Rect boundsInFrameWidget;
        public int focusType;

        private LocalFrameHostFocusedElementChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostFocusedElementChangedParams() {
            this(0);
        }

        public static LocalFrameHostFocusedElementChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostFocusedElementChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostFocusedElementChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostFocusedElementChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostFocusedElementChangedParams(elementsOrVersion);
                    {
                        
                    result.isEditableElement = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.focusType = decoder0.readInt(12);
                        FocusType.validate(result.focusType);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.boundsInFrameWidget = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.isEditableElement, 8, 0);
            
            encoder0.encode(this.focusType, 12);
            
            encoder0.encode(this.boundsInFrameWidget, 16, false);
        }
    }



    
    static final class LocalFrameHostTextSelectionChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.BigString16 text;
        public int offset;
        public org.chromium.gfx.mojom.Range range;

        private LocalFrameHostTextSelectionChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostTextSelectionChangedParams() {
            this(0);
        }

        public static LocalFrameHostTextSelectionChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostTextSelectionChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostTextSelectionChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostTextSelectionChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostTextSelectionChangedParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.text = org.chromium.mojo_base.mojom.BigString16.decode(decoder1);
                    }
                    {
                        
                    result.offset = decoder0.readInt(16);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.range = org.chromium.gfx.mojom.Range.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.text, 8, false);
            
            encoder0.encode(this.offset, 16);
            
            encoder0.encode(this.range, 24, false);
        }
    }



    
    static final class LocalFrameHostShowPopupMenuParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 56;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(56, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PopupMenuClient popupClient;
        public org.chromium.gfx.mojom.Rect bounds;
        public int itemHeight;
        public double fontSize;
        public int selectedItem;
        public MenuItem[] menuItems;
        public boolean rightAligned;
        public boolean allowMultipleSelection;

        private LocalFrameHostShowPopupMenuParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostShowPopupMenuParams() {
            this(0);
        }

        public static LocalFrameHostShowPopupMenuParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostShowPopupMenuParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostShowPopupMenuParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostShowPopupMenuParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostShowPopupMenuParams(elementsOrVersion);
                    {
                        
                    result.popupClient = decoder0.readServiceInterface(8, false, PopupMenuClient.MANAGER);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.bounds = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }
                    {
                        
                    result.itemHeight = decoder0.readInt(24);
                    }
                    {
                        
                    result.selectedItem = decoder0.readInt(28);
                    }
                    {
                        
                    result.fontSize = decoder0.readDouble(32);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.menuItems = new MenuItem[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.menuItems[i1] = MenuItem.decode(decoder2);
                        }
                    }
                    }
                    {
                        
                    result.rightAligned = decoder0.readBoolean(48, 0);
                    }
                    {
                        
                    result.allowMultipleSelection = decoder0.readBoolean(48, 1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.popupClient, 8, false, PopupMenuClient.MANAGER);
            
            encoder0.encode(this.bounds, 16, false);
            
            encoder0.encode(this.itemHeight, 24);
            
            encoder0.encode(this.selectedItem, 28);
            
            encoder0.encode(this.fontSize, 32);
            
            if (this.menuItems == null) {
                encoder0.encodeNullPointer(40, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.menuItems.length, 40, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.menuItems.length; ++i0) {
                    
                    encoder1.encode(this.menuItems[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
            
            encoder0.encode(this.rightAligned, 48, 0);
            
            encoder0.encode(this.allowMultipleSelection, 48, 1);
        }
    }



    
    static final class LocalFrameHostDidLoadResourceFromMemoryCacheParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url url;
        public String httpMethod;
        public String mimeType;
        public int requestDestination;

        private LocalFrameHostDidLoadResourceFromMemoryCacheParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidLoadResourceFromMemoryCacheParams() {
            this(0);
        }

        public static LocalFrameHostDidLoadResourceFromMemoryCacheParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidLoadResourceFromMemoryCacheParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidLoadResourceFromMemoryCacheParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidLoadResourceFromMemoryCacheParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidLoadResourceFromMemoryCacheParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.httpMethod = decoder0.readString(16, false);
                    }
                    {
                        
                    result.mimeType = decoder0.readString(24, false);
                    }
                    {
                        
                    result.requestDestination = decoder0.readInt(32);
                        org.chromium.network.mojom.RequestDestination.validate(result.requestDestination);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.url, 8, false);
            
            encoder0.encode(this.httpMethod, 16, false);
            
            encoder0.encode(this.mimeType, 24, false);
            
            encoder0.encode(this.requestDestination, 32);
        }
    }



    
    static final class LocalFrameHostDidChangeFrameOwnerPropertiesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken childFrameToken;
        public FrameOwnerProperties frameOwnerProperties;

        private LocalFrameHostDidChangeFrameOwnerPropertiesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeFrameOwnerPropertiesParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeFrameOwnerPropertiesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeFrameOwnerPropertiesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeFrameOwnerPropertiesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeFrameOwnerPropertiesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeFrameOwnerPropertiesParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.childFrameToken = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.frameOwnerProperties = FrameOwnerProperties.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.childFrameToken, 8, false);
            
            encoder0.encode(this.frameOwnerProperties, 16, false);
        }
    }



    
    static final class LocalFrameHostDidChangeOpenerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken openerFrame;

        private LocalFrameHostDidChangeOpenerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeOpenerParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeOpenerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeOpenerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeOpenerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeOpenerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeOpenerParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.openerFrame = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.openerFrame, 8, true);
        }
    }



    
    static final class LocalFrameHostDidChangeFramePolicyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken childFrameToken;
        public FramePolicy framePolicy;

        private LocalFrameHostDidChangeFramePolicyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeFramePolicyParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeFramePolicyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeFramePolicyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeFramePolicyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeFramePolicyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeFramePolicyParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.childFrameToken = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.framePolicy = FramePolicy.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.childFrameToken, 8, false);
            
            encoder0.encode(this.framePolicy, 16, false);
        }
    }



    
    static final class LocalFrameHostDidChangeCspAttributeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken childFrameToken;
        public org.chromium.network.mojom.ContentSecurityPolicy parsedCspAttribute;

        private LocalFrameHostDidChangeCspAttributeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeCspAttributeParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeCspAttributeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeCspAttributeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeCspAttributeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeCspAttributeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeCspAttributeParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.childFrameToken = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.parsedCspAttribute = org.chromium.network.mojom.ContentSecurityPolicy.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.childFrameToken, 8, false);
            
            encoder0.encode(this.parsedCspAttribute, 16, true);
        }
    }



    
    static final class LocalFrameHostBindPolicyContainerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported receiver;

        private LocalFrameHostBindPolicyContainerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostBindPolicyContainerParams() {
            this(0);
        }

        public static LocalFrameHostBindPolicyContainerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostBindPolicyContainerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostBindPolicyContainerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostBindPolicyContainerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostBindPolicyContainerParams(elementsOrVersion);
                    {
                        
                    result.receiver = decoder0.readAssociatedInterfaceRequestNotSupported(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.receiver, 8, false);
        }
    }



    
    static final class LocalFrameHostCapturePaintPreviewOfSubframeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Rect clipRect;
        public org.chromium.mojo_base.mojom.UnguessableToken guid;

        private LocalFrameHostCapturePaintPreviewOfSubframeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostCapturePaintPreviewOfSubframeParams() {
            this(0);
        }

        public static LocalFrameHostCapturePaintPreviewOfSubframeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostCapturePaintPreviewOfSubframeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostCapturePaintPreviewOfSubframeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostCapturePaintPreviewOfSubframeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostCapturePaintPreviewOfSubframeParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.clipRect = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.guid = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.clipRect, 8, false);
            
            encoder0.encode(this.guid, 16, false);
        }
    }



    
    static final class LocalFrameHostDetachParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDetachParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDetachParams() {
            this(0);
        }

        public static LocalFrameHostDetachParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDetachParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDetachParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDetachParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDetachParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



}
