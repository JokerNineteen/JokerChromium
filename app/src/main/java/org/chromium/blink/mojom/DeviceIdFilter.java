// DeviceIdFilter.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/hid/hid.mojom
//

package org.chromium.blink.mojom;


public final class DeviceIdFilter extends org.chromium.mojo.bindings.Union {

    public static final class Tag {
        public static final int Vendor = 0;
        public static final int VendorAndProduct = 1;
    };
    private short mVendor;
    private VendorAndProduct mVendorAndProduct;

    public void setVendor(short vendor) {
        this.mTag = Tag.Vendor;
        this.mVendor = vendor;
    }

    public short getVendor() {
        assert this.mTag == Tag.Vendor;
        return this.mVendor;
    }

    public void setVendorAndProduct(VendorAndProduct vendorAndProduct) {
        this.mTag = Tag.VendorAndProduct;
        this.mVendorAndProduct = vendorAndProduct;
    }

    public VendorAndProduct getVendorAndProduct() {
        assert this.mTag == Tag.VendorAndProduct;
        return this.mVendorAndProduct;
    }


    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder0, int offset) {
        encoder0.encode(org.chromium.mojo.bindings.BindingsHelper.UNION_SIZE, offset);
        encoder0.encode(this.mTag, offset + 4);
        switch (mTag) {
            case Tag.Vendor: {
                
                encoder0.encode(this.mVendor, offset + 8);
                break;
            }
            case Tag.VendorAndProduct: {
                
                encoder0.encode(this.mVendorAndProduct, offset + 8, false);
                break;
            }
            default: {
                break;
            }
        }
    }

    public static DeviceIdFilter deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message).decoderForSerializedUnion(), 0);
    }

    public static final DeviceIdFilter decode(org.chromium.mojo.bindings.Decoder decoder0, int offset) {
        org.chromium.mojo.bindings.DataHeader dataHeader = decoder0.readDataHeaderForUnion(offset);
        if (dataHeader.size == 0) {
            return null;
        }
        DeviceIdFilter result = new DeviceIdFilter();
        switch (dataHeader.elementsOrVersion) {
            case Tag.Vendor: {
                
                result.mVendor = decoder0.readShort(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE);
                result.mTag = Tag.Vendor;
                break;
            }
            case Tag.VendorAndProduct: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mVendorAndProduct = VendorAndProduct.decode(decoder1);
                result.mTag = Tag.VendorAndProduct;
                break;
            }
            default: {
                break;
            }
        }
        return result;
    }
}