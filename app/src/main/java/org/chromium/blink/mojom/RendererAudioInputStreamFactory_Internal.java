// RendererAudioInputStreamFactory_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/media/renderer_audio_input_stream_factory.mojom
//

package org.chromium.blink.mojom;


class RendererAudioInputStreamFactory_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<RendererAudioInputStreamFactory, RendererAudioInputStreamFactory.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<RendererAudioInputStreamFactory, RendererAudioInputStreamFactory.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.RendererAudioInputStreamFactory";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, RendererAudioInputStreamFactory impl) {
            return new Stub(core, impl);
        }

        @Override
        public RendererAudioInputStreamFactory[] buildArray(int size) {
          return new RendererAudioInputStreamFactory[size];
        }
    };


    private static final int CREATE_STREAM_ORDINAL = 0;

    private static final int ASSOCIATE_INPUT_AND_OUTPUT_FOR_AEC_ORDINAL = 1;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements RendererAudioInputStreamFactory.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void createStream(
RendererAudioInputStreamFactoryClient client, org.chromium.mojo_base.mojom.UnguessableToken sessionId, org.chromium.media.mojom.AudioParameters params, boolean automaticGainControl, int sharedMemoryCount) {

            RendererAudioInputStreamFactoryCreateStreamParams _message = new RendererAudioInputStreamFactoryCreateStreamParams();

            _message.client = client;

            _message.sessionId = sessionId;

            _message.params = params;

            _message.automaticGainControl = automaticGainControl;

            _message.sharedMemoryCount = sharedMemoryCount;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_STREAM_ORDINAL)));

        }


        @Override
        public void associateInputAndOutputForAec(
org.chromium.mojo_base.mojom.UnguessableToken inputStreamId, String outputDeviceId) {

            RendererAudioInputStreamFactoryAssociateInputAndOutputForAecParams _message = new RendererAudioInputStreamFactoryAssociateInputAndOutputForAecParams();

            _message.inputStreamId = inputStreamId;

            _message.outputDeviceId = outputDeviceId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ASSOCIATE_INPUT_AND_OUTPUT_FOR_AEC_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<RendererAudioInputStreamFactory> {

        Stub(org.chromium.mojo.system.Core core, RendererAudioInputStreamFactory impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                RendererAudioInputStreamFactory_Internal.MANAGER, messageWithHeader);





                    case CREATE_STREAM_ORDINAL: {

                        RendererAudioInputStreamFactoryCreateStreamParams data =
                                RendererAudioInputStreamFactoryCreateStreamParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createStream(data.client, data.sessionId, data.params, data.automaticGainControl, data.sharedMemoryCount);
                        return true;
                    }





                    case ASSOCIATE_INPUT_AND_OUTPUT_FOR_AEC_ORDINAL: {

                        RendererAudioInputStreamFactoryAssociateInputAndOutputForAecParams data =
                                RendererAudioInputStreamFactoryAssociateInputAndOutputForAecParams.deserialize(messageWithHeader.getPayload());

                        getImpl().associateInputAndOutputForAec(data.inputStreamId, data.outputDeviceId);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), RendererAudioInputStreamFactory_Internal.MANAGER, messageWithHeader, receiver);






                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class RendererAudioInputStreamFactoryCreateStreamParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public RendererAudioInputStreamFactoryClient client;
        public org.chromium.mojo_base.mojom.UnguessableToken sessionId;
        public org.chromium.media.mojom.AudioParameters params;
        public boolean automaticGainControl;
        public int sharedMemoryCount;

        private RendererAudioInputStreamFactoryCreateStreamParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RendererAudioInputStreamFactoryCreateStreamParams() {
            this(0);
        }

        public static RendererAudioInputStreamFactoryCreateStreamParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RendererAudioInputStreamFactoryCreateStreamParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RendererAudioInputStreamFactoryCreateStreamParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RendererAudioInputStreamFactoryCreateStreamParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RendererAudioInputStreamFactoryCreateStreamParams(elementsOrVersion);
                    {
                        
                    result.client = decoder0.readServiceInterface(8, false, RendererAudioInputStreamFactoryClient.MANAGER);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.sessionId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.params = org.chromium.media.mojom.AudioParameters.decode(decoder1);
                    }
                    {
                        
                    result.automaticGainControl = decoder0.readBoolean(32, 0);
                    }
                    {
                        
                    result.sharedMemoryCount = decoder0.readInt(36);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.client, 8, false, RendererAudioInputStreamFactoryClient.MANAGER);
            
            encoder0.encode(this.sessionId, 16, false);
            
            encoder0.encode(this.params, 24, false);
            
            encoder0.encode(this.automaticGainControl, 32, 0);
            
            encoder0.encode(this.sharedMemoryCount, 36);
        }
    }



    
    static final class RendererAudioInputStreamFactoryAssociateInputAndOutputForAecParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken inputStreamId;
        public String outputDeviceId;

        private RendererAudioInputStreamFactoryAssociateInputAndOutputForAecParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RendererAudioInputStreamFactoryAssociateInputAndOutputForAecParams() {
            this(0);
        }

        public static RendererAudioInputStreamFactoryAssociateInputAndOutputForAecParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RendererAudioInputStreamFactoryAssociateInputAndOutputForAecParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RendererAudioInputStreamFactoryAssociateInputAndOutputForAecParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RendererAudioInputStreamFactoryAssociateInputAndOutputForAecParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RendererAudioInputStreamFactoryAssociateInputAndOutputForAecParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.inputStreamId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    result.outputDeviceId = decoder0.readString(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.inputStreamId, 8, false);
            
            encoder0.encode(this.outputDeviceId, 16, false);
        }
    }



}
