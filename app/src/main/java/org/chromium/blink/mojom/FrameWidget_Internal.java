// FrameWidget_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/page/widget.mojom
//

package org.chromium.blink.mojom;


class FrameWidget_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<FrameWidget, FrameWidget.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<FrameWidget, FrameWidget.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.FrameWidget";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, FrameWidget impl) {
            return new Stub(core, impl);
        }

        @Override
        public FrameWidget[] buildArray(int size) {
          return new FrameWidget[size];
        }
    };


    private static final int DRAG_TARGET_DRAG_ENTER_ORDINAL = 0;

    private static final int DRAG_TARGET_DRAG_OVER_ORDINAL = 1;

    private static final int DRAG_TARGET_DRAG_LEAVE_ORDINAL = 2;

    private static final int DRAG_TARGET_DROP_ORDINAL = 3;

    private static final int DRAG_SOURCE_ENDED_AT_ORDINAL = 4;

    private static final int DRAG_SOURCE_SYSTEM_DRAG_ENDED_ORDINAL = 5;

    private static final int SET_BACKGROUND_OPAQUE_ORDINAL = 6;

    private static final int SET_TEXT_DIRECTION_ORDINAL = 7;

    private static final int SET_ACTIVE_ORDINAL = 8;

    private static final int SET_INHERITED_EFFECTIVE_TOUCH_ACTION_FOR_SUB_FRAME_ORDINAL = 9;

    private static final int UPDATE_RENDER_THROTTLING_STATUS_FOR_SUB_FRAME_ORDINAL = 10;

    private static final int SET_IS_INERT_FOR_SUB_FRAME_ORDINAL = 11;

    private static final int SHOW_CONTEXT_MENU_ORDINAL = 12;

    private static final int ENABLE_DEVICE_EMULATION_ORDINAL = 13;

    private static final int DISABLE_DEVICE_EMULATION_ORDINAL = 14;

    private static final int BIND_WIDGET_COMPOSITOR_ORDINAL = 15;

    private static final int BIND_INPUT_TARGET_CLIENT_ORDINAL = 16;

    private static final int SET_VIEWPORT_INTERSECTION_ORDINAL = 17;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements FrameWidget.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void dragTargetDragEnter(
DragData dragData, org.chromium.gfx.mojom.PointF pointInViewport, org.chromium.gfx.mojom.PointF screenPoint, AllowedDragOperations operationsAllowed, int keyModifiers, 
DragTargetDragEnterResponse callback) {

            FrameWidgetDragTargetDragEnterParams _message = new FrameWidgetDragTargetDragEnterParams();

            _message.dragData = dragData;

            _message.pointInViewport = pointInViewport;

            _message.screenPoint = screenPoint;

            _message.operationsAllowed = operationsAllowed;

            _message.keyModifiers = keyModifiers;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    DRAG_TARGET_DRAG_ENTER_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new FrameWidgetDragTargetDragEnterResponseParamsForwardToCallback(callback));

        }


        @Override
        public void dragTargetDragOver(
org.chromium.gfx.mojom.PointF pointInViewport, org.chromium.gfx.mojom.PointF screenPoint, AllowedDragOperations operationsAllowed, int keyModifiers, 
DragTargetDragOverResponse callback) {

            FrameWidgetDragTargetDragOverParams _message = new FrameWidgetDragTargetDragOverParams();

            _message.pointInViewport = pointInViewport;

            _message.screenPoint = screenPoint;

            _message.operationsAllowed = operationsAllowed;

            _message.keyModifiers = keyModifiers;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    DRAG_TARGET_DRAG_OVER_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new FrameWidgetDragTargetDragOverResponseParamsForwardToCallback(callback));

        }


        @Override
        public void dragTargetDragLeave(
org.chromium.gfx.mojom.PointF pointInViewport, org.chromium.gfx.mojom.PointF screenPoint) {

            FrameWidgetDragTargetDragLeaveParams _message = new FrameWidgetDragTargetDragLeaveParams();

            _message.pointInViewport = pointInViewport;

            _message.screenPoint = screenPoint;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DRAG_TARGET_DRAG_LEAVE_ORDINAL)));

        }


        @Override
        public void dragTargetDrop(
DragData dragData, org.chromium.gfx.mojom.PointF pointInViewport, org.chromium.gfx.mojom.PointF screenPoint, int keyModifiers) {

            FrameWidgetDragTargetDropParams _message = new FrameWidgetDragTargetDropParams();

            _message.dragData = dragData;

            _message.pointInViewport = pointInViewport;

            _message.screenPoint = screenPoint;

            _message.keyModifiers = keyModifiers;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DRAG_TARGET_DROP_ORDINAL)));

        }


        @Override
        public void dragSourceEndedAt(
org.chromium.gfx.mojom.PointF pointInViewport, org.chromium.gfx.mojom.PointF screenPoint, int dragOperation) {

            FrameWidgetDragSourceEndedAtParams _message = new FrameWidgetDragSourceEndedAtParams();

            _message.pointInViewport = pointInViewport;

            _message.screenPoint = screenPoint;

            _message.dragOperation = dragOperation;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DRAG_SOURCE_ENDED_AT_ORDINAL)));

        }


        @Override
        public void dragSourceSystemDragEnded(
) {

            FrameWidgetDragSourceSystemDragEndedParams _message = new FrameWidgetDragSourceSystemDragEndedParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DRAG_SOURCE_SYSTEM_DRAG_ENDED_ORDINAL)));

        }


        @Override
        public void setBackgroundOpaque(
boolean opaque) {

            FrameWidgetSetBackgroundOpaqueParams _message = new FrameWidgetSetBackgroundOpaqueParams();

            _message.opaque = opaque;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_BACKGROUND_OPAQUE_ORDINAL)));

        }


        @Override
        public void setTextDirection(
int direction) {

            FrameWidgetSetTextDirectionParams _message = new FrameWidgetSetTextDirectionParams();

            _message.direction = direction;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_TEXT_DIRECTION_ORDINAL)));

        }


        @Override
        public void setActive(
boolean active) {

            FrameWidgetSetActiveParams _message = new FrameWidgetSetActiveParams();

            _message.active = active;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_ACTIVE_ORDINAL)));

        }


        @Override
        public void setInheritedEffectiveTouchActionForSubFrame(
int touchAction) {

            FrameWidgetSetInheritedEffectiveTouchActionForSubFrameParams _message = new FrameWidgetSetInheritedEffectiveTouchActionForSubFrameParams();

            _message.touchAction = touchAction;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_INHERITED_EFFECTIVE_TOUCH_ACTION_FOR_SUB_FRAME_ORDINAL)));

        }


        @Override
        public void updateRenderThrottlingStatusForSubFrame(
boolean isThrottled, boolean subtreeThrottled, boolean displayLocked) {

            FrameWidgetUpdateRenderThrottlingStatusForSubFrameParams _message = new FrameWidgetUpdateRenderThrottlingStatusForSubFrameParams();

            _message.isThrottled = isThrottled;

            _message.subtreeThrottled = subtreeThrottled;

            _message.displayLocked = displayLocked;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_RENDER_THROTTLING_STATUS_FOR_SUB_FRAME_ORDINAL)));

        }


        @Override
        public void setIsInertForSubFrame(
boolean inert) {

            FrameWidgetSetIsInertForSubFrameParams _message = new FrameWidgetSetIsInertForSubFrameParams();

            _message.inert = inert;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_IS_INERT_FOR_SUB_FRAME_ORDINAL)));

        }


        @Override
        public void showContextMenu(
int sourceType, org.chromium.gfx.mojom.Point location) {

            FrameWidgetShowContextMenuParams _message = new FrameWidgetShowContextMenuParams();

            _message.sourceType = sourceType;

            _message.location = location;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SHOW_CONTEXT_MENU_ORDINAL)));

        }


        @Override
        public void enableDeviceEmulation(
DeviceEmulationParams parameters) {

            FrameWidgetEnableDeviceEmulationParams _message = new FrameWidgetEnableDeviceEmulationParams();

            _message.parameters = parameters;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENABLE_DEVICE_EMULATION_ORDINAL)));

        }


        @Override
        public void disableDeviceEmulation(
) {

            FrameWidgetDisableDeviceEmulationParams _message = new FrameWidgetDisableDeviceEmulationParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DISABLE_DEVICE_EMULATION_ORDINAL)));

        }


        @Override
        public void bindWidgetCompositor(
org.chromium.mojo.bindings.InterfaceRequest<WidgetCompositor> host) {

            FrameWidgetBindWidgetCompositorParams _message = new FrameWidgetBindWidgetCompositorParams();

            _message.host = host;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(BIND_WIDGET_COMPOSITOR_ORDINAL)));

        }


        @Override
        public void bindInputTargetClient(
org.chromium.mojo.bindings.InterfaceRequest<org.chromium.viz.mojom.InputTargetClient> host) {

            FrameWidgetBindInputTargetClientParams _message = new FrameWidgetBindInputTargetClientParams();

            _message.host = host;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(BIND_INPUT_TARGET_CLIENT_ORDINAL)));

        }


        @Override
        public void setViewportIntersection(
ViewportIntersectionState intersectionState, VisualProperties visualProperties) {

            FrameWidgetSetViewportIntersectionParams _message = new FrameWidgetSetViewportIntersectionParams();

            _message.intersectionState = intersectionState;

            _message.visualProperties = visualProperties;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_VIEWPORT_INTERSECTION_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<FrameWidget> {

        Stub(org.chromium.mojo.system.Core core, FrameWidget impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                FrameWidget_Internal.MANAGER, messageWithHeader);









                    case DRAG_TARGET_DRAG_LEAVE_ORDINAL: {

                        FrameWidgetDragTargetDragLeaveParams data =
                                FrameWidgetDragTargetDragLeaveParams.deserialize(messageWithHeader.getPayload());

                        getImpl().dragTargetDragLeave(data.pointInViewport, data.screenPoint);
                        return true;
                    }





                    case DRAG_TARGET_DROP_ORDINAL: {

                        FrameWidgetDragTargetDropParams data =
                                FrameWidgetDragTargetDropParams.deserialize(messageWithHeader.getPayload());

                        getImpl().dragTargetDrop(data.dragData, data.pointInViewport, data.screenPoint, data.keyModifiers);
                        return true;
                    }





                    case DRAG_SOURCE_ENDED_AT_ORDINAL: {

                        FrameWidgetDragSourceEndedAtParams data =
                                FrameWidgetDragSourceEndedAtParams.deserialize(messageWithHeader.getPayload());

                        getImpl().dragSourceEndedAt(data.pointInViewport, data.screenPoint, data.dragOperation);
                        return true;
                    }





                    case DRAG_SOURCE_SYSTEM_DRAG_ENDED_ORDINAL: {

                        FrameWidgetDragSourceSystemDragEndedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().dragSourceSystemDragEnded();
                        return true;
                    }





                    case SET_BACKGROUND_OPAQUE_ORDINAL: {

                        FrameWidgetSetBackgroundOpaqueParams data =
                                FrameWidgetSetBackgroundOpaqueParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setBackgroundOpaque(data.opaque);
                        return true;
                    }





                    case SET_TEXT_DIRECTION_ORDINAL: {

                        FrameWidgetSetTextDirectionParams data =
                                FrameWidgetSetTextDirectionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setTextDirection(data.direction);
                        return true;
                    }





                    case SET_ACTIVE_ORDINAL: {

                        FrameWidgetSetActiveParams data =
                                FrameWidgetSetActiveParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setActive(data.active);
                        return true;
                    }





                    case SET_INHERITED_EFFECTIVE_TOUCH_ACTION_FOR_SUB_FRAME_ORDINAL: {

                        FrameWidgetSetInheritedEffectiveTouchActionForSubFrameParams data =
                                FrameWidgetSetInheritedEffectiveTouchActionForSubFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setInheritedEffectiveTouchActionForSubFrame(data.touchAction);
                        return true;
                    }





                    case UPDATE_RENDER_THROTTLING_STATUS_FOR_SUB_FRAME_ORDINAL: {

                        FrameWidgetUpdateRenderThrottlingStatusForSubFrameParams data =
                                FrameWidgetUpdateRenderThrottlingStatusForSubFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateRenderThrottlingStatusForSubFrame(data.isThrottled, data.subtreeThrottled, data.displayLocked);
                        return true;
                    }





                    case SET_IS_INERT_FOR_SUB_FRAME_ORDINAL: {

                        FrameWidgetSetIsInertForSubFrameParams data =
                                FrameWidgetSetIsInertForSubFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setIsInertForSubFrame(data.inert);
                        return true;
                    }





                    case SHOW_CONTEXT_MENU_ORDINAL: {

                        FrameWidgetShowContextMenuParams data =
                                FrameWidgetShowContextMenuParams.deserialize(messageWithHeader.getPayload());

                        getImpl().showContextMenu(data.sourceType, data.location);
                        return true;
                    }





                    case ENABLE_DEVICE_EMULATION_ORDINAL: {

                        FrameWidgetEnableDeviceEmulationParams data =
                                FrameWidgetEnableDeviceEmulationParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enableDeviceEmulation(data.parameters);
                        return true;
                    }





                    case DISABLE_DEVICE_EMULATION_ORDINAL: {

                        FrameWidgetDisableDeviceEmulationParams.deserialize(messageWithHeader.getPayload());

                        getImpl().disableDeviceEmulation();
                        return true;
                    }





                    case BIND_WIDGET_COMPOSITOR_ORDINAL: {

                        FrameWidgetBindWidgetCompositorParams data =
                                FrameWidgetBindWidgetCompositorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().bindWidgetCompositor(data.host);
                        return true;
                    }





                    case BIND_INPUT_TARGET_CLIENT_ORDINAL: {

                        FrameWidgetBindInputTargetClientParams data =
                                FrameWidgetBindInputTargetClientParams.deserialize(messageWithHeader.getPayload());

                        getImpl().bindInputTargetClient(data.host);
                        return true;
                    }





                    case SET_VIEWPORT_INTERSECTION_ORDINAL: {

                        FrameWidgetSetViewportIntersectionParams data =
                                FrameWidgetSetViewportIntersectionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setViewportIntersection(data.intersectionState, data.visualProperties);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), FrameWidget_Internal.MANAGER, messageWithHeader, receiver);







                    case DRAG_TARGET_DRAG_ENTER_ORDINAL: {

                        FrameWidgetDragTargetDragEnterParams data =
                                FrameWidgetDragTargetDragEnterParams.deserialize(messageWithHeader.getPayload());

                        getImpl().dragTargetDragEnter(data.dragData, data.pointInViewport, data.screenPoint, data.operationsAllowed, data.keyModifiers, new FrameWidgetDragTargetDragEnterResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case DRAG_TARGET_DRAG_OVER_ORDINAL: {

                        FrameWidgetDragTargetDragOverParams data =
                                FrameWidgetDragTargetDragOverParams.deserialize(messageWithHeader.getPayload());

                        getImpl().dragTargetDragOver(data.pointInViewport, data.screenPoint, data.operationsAllowed, data.keyModifiers, new FrameWidgetDragTargetDragOverResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


































                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class FrameWidgetDragTargetDragEnterParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 48;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(48, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public DragData dragData;
        public org.chromium.gfx.mojom.PointF pointInViewport;
        public org.chromium.gfx.mojom.PointF screenPoint;
        public AllowedDragOperations operationsAllowed;
        public int keyModifiers;

        private FrameWidgetDragTargetDragEnterParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetDragTargetDragEnterParams() {
            this(0);
        }

        public static FrameWidgetDragTargetDragEnterParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetDragTargetDragEnterParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetDragTargetDragEnterParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetDragTargetDragEnterParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetDragTargetDragEnterParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.dragData = DragData.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.pointInViewport = org.chromium.gfx.mojom.PointF.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.screenPoint = org.chromium.gfx.mojom.PointF.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.operationsAllowed = AllowedDragOperations.decode(decoder1);
                    }
                    {
                        
                    result.keyModifiers = decoder0.readInt(40);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.dragData, 8, false);
            
            encoder0.encode(this.pointInViewport, 16, false);
            
            encoder0.encode(this.screenPoint, 24, false);
            
            encoder0.encode(this.operationsAllowed, 32, false);
            
            encoder0.encode(this.keyModifiers, 40);
        }
    }



    
    static final class FrameWidgetDragTargetDragEnterResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int operation;

        private FrameWidgetDragTargetDragEnterResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetDragTargetDragEnterResponseParams() {
            this(0);
        }

        public static FrameWidgetDragTargetDragEnterResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetDragTargetDragEnterResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetDragTargetDragEnterResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetDragTargetDragEnterResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetDragTargetDragEnterResponseParams(elementsOrVersion);
                    {
                        
                    result.operation = decoder0.readInt(8);
                        org.chromium.ui.mojom.DragOperation.validate(result.operation);
                        result.operation = org.chromium.ui.mojom.DragOperation.toKnownValue(result.operation);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.operation, 8);
        }
    }

    static class FrameWidgetDragTargetDragEnterResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final FrameWidget.DragTargetDragEnterResponse mCallback;

        FrameWidgetDragTargetDragEnterResponseParamsForwardToCallback(FrameWidget.DragTargetDragEnterResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(DRAG_TARGET_DRAG_ENTER_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                FrameWidgetDragTargetDragEnterResponseParams response = FrameWidgetDragTargetDragEnterResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.operation);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class FrameWidgetDragTargetDragEnterResponseParamsProxyToResponder implements FrameWidget.DragTargetDragEnterResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        FrameWidgetDragTargetDragEnterResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer operation) {
            FrameWidgetDragTargetDragEnterResponseParams _response = new FrameWidgetDragTargetDragEnterResponseParams();

            _response.operation = operation;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    DRAG_TARGET_DRAG_ENTER_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class FrameWidgetDragTargetDragOverParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.PointF pointInViewport;
        public org.chromium.gfx.mojom.PointF screenPoint;
        public AllowedDragOperations operationsAllowed;
        public int keyModifiers;

        private FrameWidgetDragTargetDragOverParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetDragTargetDragOverParams() {
            this(0);
        }

        public static FrameWidgetDragTargetDragOverParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetDragTargetDragOverParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetDragTargetDragOverParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetDragTargetDragOverParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetDragTargetDragOverParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.pointInViewport = org.chromium.gfx.mojom.PointF.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.screenPoint = org.chromium.gfx.mojom.PointF.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.operationsAllowed = AllowedDragOperations.decode(decoder1);
                    }
                    {
                        
                    result.keyModifiers = decoder0.readInt(32);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.pointInViewport, 8, false);
            
            encoder0.encode(this.screenPoint, 16, false);
            
            encoder0.encode(this.operationsAllowed, 24, false);
            
            encoder0.encode(this.keyModifiers, 32);
        }
    }



    
    static final class FrameWidgetDragTargetDragOverResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int operation;

        private FrameWidgetDragTargetDragOverResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetDragTargetDragOverResponseParams() {
            this(0);
        }

        public static FrameWidgetDragTargetDragOverResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetDragTargetDragOverResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetDragTargetDragOverResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetDragTargetDragOverResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetDragTargetDragOverResponseParams(elementsOrVersion);
                    {
                        
                    result.operation = decoder0.readInt(8);
                        org.chromium.ui.mojom.DragOperation.validate(result.operation);
                        result.operation = org.chromium.ui.mojom.DragOperation.toKnownValue(result.operation);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.operation, 8);
        }
    }

    static class FrameWidgetDragTargetDragOverResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final FrameWidget.DragTargetDragOverResponse mCallback;

        FrameWidgetDragTargetDragOverResponseParamsForwardToCallback(FrameWidget.DragTargetDragOverResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(DRAG_TARGET_DRAG_OVER_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                FrameWidgetDragTargetDragOverResponseParams response = FrameWidgetDragTargetDragOverResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.operation);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class FrameWidgetDragTargetDragOverResponseParamsProxyToResponder implements FrameWidget.DragTargetDragOverResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        FrameWidgetDragTargetDragOverResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer operation) {
            FrameWidgetDragTargetDragOverResponseParams _response = new FrameWidgetDragTargetDragOverResponseParams();

            _response.operation = operation;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    DRAG_TARGET_DRAG_OVER_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class FrameWidgetDragTargetDragLeaveParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.PointF pointInViewport;
        public org.chromium.gfx.mojom.PointF screenPoint;

        private FrameWidgetDragTargetDragLeaveParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetDragTargetDragLeaveParams() {
            this(0);
        }

        public static FrameWidgetDragTargetDragLeaveParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetDragTargetDragLeaveParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetDragTargetDragLeaveParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetDragTargetDragLeaveParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetDragTargetDragLeaveParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.pointInViewport = org.chromium.gfx.mojom.PointF.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.screenPoint = org.chromium.gfx.mojom.PointF.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.pointInViewport, 8, false);
            
            encoder0.encode(this.screenPoint, 16, false);
        }
    }



    
    static final class FrameWidgetDragTargetDropParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public DragData dragData;
        public org.chromium.gfx.mojom.PointF pointInViewport;
        public org.chromium.gfx.mojom.PointF screenPoint;
        public int keyModifiers;

        private FrameWidgetDragTargetDropParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetDragTargetDropParams() {
            this(0);
        }

        public static FrameWidgetDragTargetDropParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetDragTargetDropParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetDragTargetDropParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetDragTargetDropParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetDragTargetDropParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.dragData = DragData.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.pointInViewport = org.chromium.gfx.mojom.PointF.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.screenPoint = org.chromium.gfx.mojom.PointF.decode(decoder1);
                    }
                    {
                        
                    result.keyModifiers = decoder0.readInt(32);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.dragData, 8, false);
            
            encoder0.encode(this.pointInViewport, 16, false);
            
            encoder0.encode(this.screenPoint, 24, false);
            
            encoder0.encode(this.keyModifiers, 32);
        }
    }



    
    static final class FrameWidgetDragSourceEndedAtParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.PointF pointInViewport;
        public org.chromium.gfx.mojom.PointF screenPoint;
        public int dragOperation;

        private FrameWidgetDragSourceEndedAtParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetDragSourceEndedAtParams() {
            this(0);
        }

        public static FrameWidgetDragSourceEndedAtParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetDragSourceEndedAtParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetDragSourceEndedAtParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetDragSourceEndedAtParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetDragSourceEndedAtParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.pointInViewport = org.chromium.gfx.mojom.PointF.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.screenPoint = org.chromium.gfx.mojom.PointF.decode(decoder1);
                    }
                    {
                        
                    result.dragOperation = decoder0.readInt(24);
                        org.chromium.ui.mojom.DragOperation.validate(result.dragOperation);
                        result.dragOperation = org.chromium.ui.mojom.DragOperation.toKnownValue(result.dragOperation);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.pointInViewport, 8, false);
            
            encoder0.encode(this.screenPoint, 16, false);
            
            encoder0.encode(this.dragOperation, 24);
        }
    }



    
    static final class FrameWidgetDragSourceSystemDragEndedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private FrameWidgetDragSourceSystemDragEndedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetDragSourceSystemDragEndedParams() {
            this(0);
        }

        public static FrameWidgetDragSourceSystemDragEndedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetDragSourceSystemDragEndedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetDragSourceSystemDragEndedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetDragSourceSystemDragEndedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetDragSourceSystemDragEndedParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class FrameWidgetSetBackgroundOpaqueParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean opaque;

        private FrameWidgetSetBackgroundOpaqueParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetSetBackgroundOpaqueParams() {
            this(0);
        }

        public static FrameWidgetSetBackgroundOpaqueParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetSetBackgroundOpaqueParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetSetBackgroundOpaqueParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetSetBackgroundOpaqueParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetSetBackgroundOpaqueParams(elementsOrVersion);
                    {
                        
                    result.opaque = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.opaque, 8, 0);
        }
    }



    
    static final class FrameWidgetSetTextDirectionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int direction;

        private FrameWidgetSetTextDirectionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetSetTextDirectionParams() {
            this(0);
        }

        public static FrameWidgetSetTextDirectionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetSetTextDirectionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetSetTextDirectionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetSetTextDirectionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetSetTextDirectionParams(elementsOrVersion);
                    {
                        
                    result.direction = decoder0.readInt(8);
                        org.chromium.mojo_base.mojom.TextDirection.validate(result.direction);
                        result.direction = org.chromium.mojo_base.mojom.TextDirection.toKnownValue(result.direction);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.direction, 8);
        }
    }



    
    static final class FrameWidgetSetActiveParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean active;

        private FrameWidgetSetActiveParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetSetActiveParams() {
            this(0);
        }

        public static FrameWidgetSetActiveParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetSetActiveParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetSetActiveParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetSetActiveParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetSetActiveParams(elementsOrVersion);
                    {
                        
                    result.active = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.active, 8, 0);
        }
    }



    
    static final class FrameWidgetSetInheritedEffectiveTouchActionForSubFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int touchAction;

        private FrameWidgetSetInheritedEffectiveTouchActionForSubFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetSetInheritedEffectiveTouchActionForSubFrameParams() {
            this(0);
        }

        public static FrameWidgetSetInheritedEffectiveTouchActionForSubFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetSetInheritedEffectiveTouchActionForSubFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetSetInheritedEffectiveTouchActionForSubFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetSetInheritedEffectiveTouchActionForSubFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetSetInheritedEffectiveTouchActionForSubFrameParams(elementsOrVersion);
                    {
                        
                    result.touchAction = decoder0.readInt(8);
                        org.chromium.cc.mojom.TouchAction.validate(result.touchAction);
                        result.touchAction = org.chromium.cc.mojom.TouchAction.toKnownValue(result.touchAction);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.touchAction, 8);
        }
    }



    
    static final class FrameWidgetUpdateRenderThrottlingStatusForSubFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean isThrottled;
        public boolean subtreeThrottled;
        public boolean displayLocked;

        private FrameWidgetUpdateRenderThrottlingStatusForSubFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetUpdateRenderThrottlingStatusForSubFrameParams() {
            this(0);
        }

        public static FrameWidgetUpdateRenderThrottlingStatusForSubFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetUpdateRenderThrottlingStatusForSubFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetUpdateRenderThrottlingStatusForSubFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetUpdateRenderThrottlingStatusForSubFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetUpdateRenderThrottlingStatusForSubFrameParams(elementsOrVersion);
                    {
                        
                    result.isThrottled = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.subtreeThrottled = decoder0.readBoolean(8, 1);
                    }
                    {
                        
                    result.displayLocked = decoder0.readBoolean(8, 2);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.isThrottled, 8, 0);
            
            encoder0.encode(this.subtreeThrottled, 8, 1);
            
            encoder0.encode(this.displayLocked, 8, 2);
        }
    }



    
    static final class FrameWidgetSetIsInertForSubFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean inert;

        private FrameWidgetSetIsInertForSubFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetSetIsInertForSubFrameParams() {
            this(0);
        }

        public static FrameWidgetSetIsInertForSubFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetSetIsInertForSubFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetSetIsInertForSubFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetSetIsInertForSubFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetSetIsInertForSubFrameParams(elementsOrVersion);
                    {
                        
                    result.inert = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.inert, 8, 0);
        }
    }



    
    static final class FrameWidgetShowContextMenuParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int sourceType;
        public org.chromium.gfx.mojom.Point location;

        private FrameWidgetShowContextMenuParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetShowContextMenuParams() {
            this(0);
        }

        public static FrameWidgetShowContextMenuParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetShowContextMenuParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetShowContextMenuParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetShowContextMenuParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetShowContextMenuParams(elementsOrVersion);
                    {
                        
                    result.sourceType = decoder0.readInt(8);
                        org.chromium.ui.mojom.MenuSourceType.validate(result.sourceType);
                        result.sourceType = org.chromium.ui.mojom.MenuSourceType.toKnownValue(result.sourceType);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.location = org.chromium.gfx.mojom.Point.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.sourceType, 8);
            
            encoder0.encode(this.location, 16, false);
        }
    }



    
    static final class FrameWidgetEnableDeviceEmulationParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public DeviceEmulationParams parameters;

        private FrameWidgetEnableDeviceEmulationParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetEnableDeviceEmulationParams() {
            this(0);
        }

        public static FrameWidgetEnableDeviceEmulationParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetEnableDeviceEmulationParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetEnableDeviceEmulationParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetEnableDeviceEmulationParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetEnableDeviceEmulationParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.parameters = DeviceEmulationParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.parameters, 8, false);
        }
    }



    
    static final class FrameWidgetDisableDeviceEmulationParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private FrameWidgetDisableDeviceEmulationParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetDisableDeviceEmulationParams() {
            this(0);
        }

        public static FrameWidgetDisableDeviceEmulationParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetDisableDeviceEmulationParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetDisableDeviceEmulationParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetDisableDeviceEmulationParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetDisableDeviceEmulationParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class FrameWidgetBindWidgetCompositorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<WidgetCompositor> host;

        private FrameWidgetBindWidgetCompositorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetBindWidgetCompositorParams() {
            this(0);
        }

        public static FrameWidgetBindWidgetCompositorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetBindWidgetCompositorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetBindWidgetCompositorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetBindWidgetCompositorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetBindWidgetCompositorParams(elementsOrVersion);
                    {
                        
                    result.host = decoder0.readInterfaceRequest(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.host, 8, false);
        }
    }



    
    static final class FrameWidgetBindInputTargetClientParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<org.chromium.viz.mojom.InputTargetClient> host;

        private FrameWidgetBindInputTargetClientParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetBindInputTargetClientParams() {
            this(0);
        }

        public static FrameWidgetBindInputTargetClientParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetBindInputTargetClientParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetBindInputTargetClientParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetBindInputTargetClientParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetBindInputTargetClientParams(elementsOrVersion);
                    {
                        
                    result.host = decoder0.readInterfaceRequest(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.host, 8, false);
        }
    }



    
    static final class FrameWidgetSetViewportIntersectionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ViewportIntersectionState intersectionState;
        public VisualProperties visualProperties;

        private FrameWidgetSetViewportIntersectionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetSetViewportIntersectionParams() {
            this(0);
        }

        public static FrameWidgetSetViewportIntersectionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetSetViewportIntersectionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetSetViewportIntersectionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetSetViewportIntersectionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetSetViewportIntersectionParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.intersectionState = ViewportIntersectionState.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.visualProperties = VisualProperties.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.intersectionState, 8, false);
            
            encoder0.encode(this.visualProperties, 16, true);
        }
    }



}
