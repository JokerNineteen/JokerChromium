// SynchronousCompositor_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/input/synchronous_compositor.mojom
//

package org.chromium.blink.mojom;


class SynchronousCompositor_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<SynchronousCompositor, SynchronousCompositor.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<SynchronousCompositor, SynchronousCompositor.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.SynchronousCompositor";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, SynchronousCompositor impl) {
            return new Stub(core, impl);
        }

        @Override
        public SynchronousCompositor[] buildArray(int size) {
          return new SynchronousCompositor[size];
        }
    };


    private static final int DEMAND_DRAW_HW_ASYNC_ORDINAL = 0;

    private static final int DEMAND_DRAW_HW_ORDINAL = 1;

    private static final int SET_SHARED_MEMORY_ORDINAL = 2;

    private static final int DEMAND_DRAW_SW_ORDINAL = 3;

    private static final int WILL_SKIP_DRAW_ORDINAL = 4;

    private static final int ZERO_SHARED_MEMORY_ORDINAL = 5;

    private static final int ZOOM_BY_ORDINAL = 6;

    private static final int SET_MEMORY_POLICY_ORDINAL = 7;

    private static final int RECLAIM_RESOURCES_ORDINAL = 8;

    private static final int SET_SCROLL_ORDINAL = 9;

    private static final int BEGIN_FRAME_ORDINAL = 10;

    private static final int SET_BEGIN_FRAME_SOURCE_PAUSED_ORDINAL = 11;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements SynchronousCompositor.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void demandDrawHwAsync(
SyncCompositorDemandDrawHwParams drawParams) {

            SynchronousCompositorDemandDrawHwAsyncParams _message = new SynchronousCompositorDemandDrawHwAsyncParams();

            _message.drawParams = drawParams;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DEMAND_DRAW_HW_ASYNC_ORDINAL)));

        }


        @Override
        public void demandDrawHw(
SyncCompositorDemandDrawHwParams drawParams, 
DemandDrawHwResponse callback) {

            SynchronousCompositorDemandDrawHwParams _message = new SynchronousCompositorDemandDrawHwParams();

            _message.drawParams = drawParams;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    DEMAND_DRAW_HW_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new SynchronousCompositorDemandDrawHwResponseParamsForwardToCallback(callback));

        }


        @Override
        public void setSharedMemory(
org.chromium.mojo_base.mojom.WritableSharedMemoryRegion shmRegion, 
SetSharedMemoryResponse callback) {

            SynchronousCompositorSetSharedMemoryParams _message = new SynchronousCompositorSetSharedMemoryParams();

            _message.shmRegion = shmRegion;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SET_SHARED_MEMORY_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new SynchronousCompositorSetSharedMemoryResponseParamsForwardToCallback(callback));

        }


        @Override
        public void demandDrawSw(
SyncCompositorDemandDrawSwParams drawParams, 
DemandDrawSwResponse callback) {

            SynchronousCompositorDemandDrawSwParams _message = new SynchronousCompositorDemandDrawSwParams();

            _message.drawParams = drawParams;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    DEMAND_DRAW_SW_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new SynchronousCompositorDemandDrawSwResponseParamsForwardToCallback(callback));

        }


        @Override
        public void willSkipDraw(
) {

            SynchronousCompositorWillSkipDrawParams _message = new SynchronousCompositorWillSkipDrawParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(WILL_SKIP_DRAW_ORDINAL)));

        }


        @Override
        public void zeroSharedMemory(
) {

            SynchronousCompositorZeroSharedMemoryParams _message = new SynchronousCompositorZeroSharedMemoryParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ZERO_SHARED_MEMORY_ORDINAL)));

        }


        @Override
        public void zoomBy(
float delta, org.chromium.gfx.mojom.Point anchor, 
ZoomByResponse callback) {

            SynchronousCompositorZoomByParams _message = new SynchronousCompositorZoomByParams();

            _message.delta = delta;

            _message.anchor = anchor;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ZOOM_BY_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new SynchronousCompositorZoomByResponseParamsForwardToCallback(callback));

        }


        @Override
        public void setMemoryPolicy(
int bytesLimit) {

            SynchronousCompositorSetMemoryPolicyParams _message = new SynchronousCompositorSetMemoryPolicyParams();

            _message.bytesLimit = bytesLimit;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_MEMORY_POLICY_ORDINAL)));

        }


        @Override
        public void reclaimResources(
int layerTreeFrameSinkId, org.chromium.viz.mojom.ReturnedResource[] resources) {

            SynchronousCompositorReclaimResourcesParams _message = new SynchronousCompositorReclaimResourcesParams();

            _message.layerTreeFrameSinkId = layerTreeFrameSinkId;

            _message.resources = resources;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(RECLAIM_RESOURCES_ORDINAL)));

        }


        @Override
        public void setScroll(
org.chromium.gfx.mojom.ScrollOffset offset) {

            SynchronousCompositorSetScrollParams _message = new SynchronousCompositorSetScrollParams();

            _message.offset = offset;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_SCROLL_ORDINAL)));

        }


        @Override
        public void beginFrame(
org.chromium.viz.mojom.BeginFrameArgs args, java.util.Map<Integer, org.chromium.viz.mojom.FrameTimingDetails> timingDetails) {

            SynchronousCompositorBeginFrameParams _message = new SynchronousCompositorBeginFrameParams();

            _message.args = args;

            _message.timingDetails = timingDetails;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(BEGIN_FRAME_ORDINAL)));

        }


        @Override
        public void setBeginFrameSourcePaused(
boolean paused) {

            SynchronousCompositorSetBeginFrameSourcePausedParams _message = new SynchronousCompositorSetBeginFrameSourcePausedParams();

            _message.paused = paused;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_BEGIN_FRAME_SOURCE_PAUSED_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<SynchronousCompositor> {

        Stub(org.chromium.mojo.system.Core core, SynchronousCompositor impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                SynchronousCompositor_Internal.MANAGER, messageWithHeader);





                    case DEMAND_DRAW_HW_ASYNC_ORDINAL: {

                        SynchronousCompositorDemandDrawHwAsyncParams data =
                                SynchronousCompositorDemandDrawHwAsyncParams.deserialize(messageWithHeader.getPayload());

                        getImpl().demandDrawHwAsync(data.drawParams);
                        return true;
                    }











                    case WILL_SKIP_DRAW_ORDINAL: {

                        SynchronousCompositorWillSkipDrawParams.deserialize(messageWithHeader.getPayload());

                        getImpl().willSkipDraw();
                        return true;
                    }





                    case ZERO_SHARED_MEMORY_ORDINAL: {

                        SynchronousCompositorZeroSharedMemoryParams.deserialize(messageWithHeader.getPayload());

                        getImpl().zeroSharedMemory();
                        return true;
                    }







                    case SET_MEMORY_POLICY_ORDINAL: {

                        SynchronousCompositorSetMemoryPolicyParams data =
                                SynchronousCompositorSetMemoryPolicyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setMemoryPolicy(data.bytesLimit);
                        return true;
                    }





                    case RECLAIM_RESOURCES_ORDINAL: {

                        SynchronousCompositorReclaimResourcesParams data =
                                SynchronousCompositorReclaimResourcesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().reclaimResources(data.layerTreeFrameSinkId, data.resources);
                        return true;
                    }





                    case SET_SCROLL_ORDINAL: {

                        SynchronousCompositorSetScrollParams data =
                                SynchronousCompositorSetScrollParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setScroll(data.offset);
                        return true;
                    }





                    case BEGIN_FRAME_ORDINAL: {

                        SynchronousCompositorBeginFrameParams data =
                                SynchronousCompositorBeginFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().beginFrame(data.args, data.timingDetails);
                        return true;
                    }





                    case SET_BEGIN_FRAME_SOURCE_PAUSED_ORDINAL: {

                        SynchronousCompositorSetBeginFrameSourcePausedParams data =
                                SynchronousCompositorSetBeginFrameSourcePausedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setBeginFrameSourcePaused(data.paused);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), SynchronousCompositor_Internal.MANAGER, messageWithHeader, receiver);









                    case DEMAND_DRAW_HW_ORDINAL: {

                        SynchronousCompositorDemandDrawHwParams data =
                                SynchronousCompositorDemandDrawHwParams.deserialize(messageWithHeader.getPayload());

                        getImpl().demandDrawHw(data.drawParams, new SynchronousCompositorDemandDrawHwResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case SET_SHARED_MEMORY_ORDINAL: {

                        SynchronousCompositorSetSharedMemoryParams data =
                                SynchronousCompositorSetSharedMemoryParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setSharedMemory(data.shmRegion, new SynchronousCompositorSetSharedMemoryResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case DEMAND_DRAW_SW_ORDINAL: {

                        SynchronousCompositorDemandDrawSwParams data =
                                SynchronousCompositorDemandDrawSwParams.deserialize(messageWithHeader.getPayload());

                        getImpl().demandDrawSw(data.drawParams, new SynchronousCompositorDemandDrawSwResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }











                    case ZOOM_BY_ORDINAL: {

                        SynchronousCompositorZoomByParams data =
                                SynchronousCompositorZoomByParams.deserialize(messageWithHeader.getPayload());

                        getImpl().zoomBy(data.delta, data.anchor, new SynchronousCompositorZoomByResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }












                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class SynchronousCompositorDemandDrawHwAsyncParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SyncCompositorDemandDrawHwParams drawParams;

        private SynchronousCompositorDemandDrawHwAsyncParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorDemandDrawHwAsyncParams() {
            this(0);
        }

        public static SynchronousCompositorDemandDrawHwAsyncParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorDemandDrawHwAsyncParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorDemandDrawHwAsyncParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorDemandDrawHwAsyncParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorDemandDrawHwAsyncParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.drawParams = SyncCompositorDemandDrawHwParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.drawParams, 8, false);
        }
    }



    
    static final class SynchronousCompositorDemandDrawHwParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SyncCompositorDemandDrawHwParams drawParams;

        private SynchronousCompositorDemandDrawHwParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorDemandDrawHwParams() {
            this(0);
        }

        public static SynchronousCompositorDemandDrawHwParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorDemandDrawHwParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorDemandDrawHwParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorDemandDrawHwParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorDemandDrawHwParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.drawParams = SyncCompositorDemandDrawHwParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.drawParams, 8, false);
        }
    }



    
    static final class SynchronousCompositorDemandDrawHwResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 48;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(48, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SyncCompositorCommonRendererParams result;
        public int layerTreeFrameSinkId;
        public int metadataVersion;
        public org.chromium.viz.mojom.LocalSurfaceId localSurfaceId;
        public org.chromium.viz.mojom.CompositorFrame frame;
        public org.chromium.viz.mojom.HitTestRegionList hitTestRegionList;

        private SynchronousCompositorDemandDrawHwResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorDemandDrawHwResponseParams() {
            this(0);
        }

        public static SynchronousCompositorDemandDrawHwResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorDemandDrawHwResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorDemandDrawHwResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorDemandDrawHwResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorDemandDrawHwResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.result = SyncCompositorCommonRendererParams.decode(decoder1);
                    }
                    {
                        
                    result.layerTreeFrameSinkId = decoder0.readInt(16);
                    }
                    {
                        
                    result.metadataVersion = decoder0.readInt(20);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.localSurfaceId = org.chromium.viz.mojom.LocalSurfaceId.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, true);
                    result.frame = org.chromium.viz.mojom.CompositorFrame.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, true);
                    result.hitTestRegionList = org.chromium.viz.mojom.HitTestRegionList.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8, false);
            
            encoder0.encode(this.layerTreeFrameSinkId, 16);
            
            encoder0.encode(this.metadataVersion, 20);
            
            encoder0.encode(this.localSurfaceId, 24, true);
            
            encoder0.encode(this.frame, 32, true);
            
            encoder0.encode(this.hitTestRegionList, 40, true);
        }
    }

    static class SynchronousCompositorDemandDrawHwResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final SynchronousCompositor.DemandDrawHwResponse mCallback;

        SynchronousCompositorDemandDrawHwResponseParamsForwardToCallback(SynchronousCompositor.DemandDrawHwResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(DEMAND_DRAW_HW_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                SynchronousCompositorDemandDrawHwResponseParams response = SynchronousCompositorDemandDrawHwResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.layerTreeFrameSinkId, response.metadataVersion, response.localSurfaceId, response.frame, response.hitTestRegionList);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class SynchronousCompositorDemandDrawHwResponseParamsProxyToResponder implements SynchronousCompositor.DemandDrawHwResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        SynchronousCompositorDemandDrawHwResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(SyncCompositorCommonRendererParams result, Integer layerTreeFrameSinkId, Integer metadataVersion, org.chromium.viz.mojom.LocalSurfaceId localSurfaceId, org.chromium.viz.mojom.CompositorFrame frame, org.chromium.viz.mojom.HitTestRegionList hitTestRegionList) {
            SynchronousCompositorDemandDrawHwResponseParams _response = new SynchronousCompositorDemandDrawHwResponseParams();

            _response.result = result;

            _response.layerTreeFrameSinkId = layerTreeFrameSinkId;

            _response.metadataVersion = metadataVersion;

            _response.localSurfaceId = localSurfaceId;

            _response.frame = frame;

            _response.hitTestRegionList = hitTestRegionList;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    DEMAND_DRAW_HW_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class SynchronousCompositorSetSharedMemoryParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.WritableSharedMemoryRegion shmRegion;

        private SynchronousCompositorSetSharedMemoryParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorSetSharedMemoryParams() {
            this(0);
        }

        public static SynchronousCompositorSetSharedMemoryParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorSetSharedMemoryParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorSetSharedMemoryParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorSetSharedMemoryParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorSetSharedMemoryParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.shmRegion = org.chromium.mojo_base.mojom.WritableSharedMemoryRegion.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.shmRegion, 8, false);
        }
    }



    
    static final class SynchronousCompositorSetSharedMemoryResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;
        public SyncCompositorCommonRendererParams result;

        private SynchronousCompositorSetSharedMemoryResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorSetSharedMemoryResponseParams() {
            this(0);
        }

        public static SynchronousCompositorSetSharedMemoryResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorSetSharedMemoryResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorSetSharedMemoryResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorSetSharedMemoryResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorSetSharedMemoryResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.result = SyncCompositorCommonRendererParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
            
            encoder0.encode(this.result, 16, false);
        }
    }

    static class SynchronousCompositorSetSharedMemoryResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final SynchronousCompositor.SetSharedMemoryResponse mCallback;

        SynchronousCompositorSetSharedMemoryResponseParamsForwardToCallback(SynchronousCompositor.SetSharedMemoryResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(SET_SHARED_MEMORY_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                SynchronousCompositorSetSharedMemoryResponseParams response = SynchronousCompositorSetSharedMemoryResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success, response.result);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class SynchronousCompositorSetSharedMemoryResponseParamsProxyToResponder implements SynchronousCompositor.SetSharedMemoryResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        SynchronousCompositorSetSharedMemoryResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success, SyncCompositorCommonRendererParams result) {
            SynchronousCompositorSetSharedMemoryResponseParams _response = new SynchronousCompositorSetSharedMemoryResponseParams();

            _response.success = success;

            _response.result = result;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SET_SHARED_MEMORY_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class SynchronousCompositorDemandDrawSwParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SyncCompositorDemandDrawSwParams drawParams;

        private SynchronousCompositorDemandDrawSwParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorDemandDrawSwParams() {
            this(0);
        }

        public static SynchronousCompositorDemandDrawSwParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorDemandDrawSwParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorDemandDrawSwParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorDemandDrawSwParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorDemandDrawSwParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.drawParams = SyncCompositorDemandDrawSwParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.drawParams, 8, false);
        }
    }



    
    static final class SynchronousCompositorDemandDrawSwResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SyncCompositorCommonRendererParams result;
        public int metadataVersion;
        public org.chromium.viz.mojom.CompositorFrameMetadata metaData;

        private SynchronousCompositorDemandDrawSwResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorDemandDrawSwResponseParams() {
            this(0);
        }

        public static SynchronousCompositorDemandDrawSwResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorDemandDrawSwResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorDemandDrawSwResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorDemandDrawSwResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorDemandDrawSwResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.result = SyncCompositorCommonRendererParams.decode(decoder1);
                    }
                    {
                        
                    result.metadataVersion = decoder0.readInt(16);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.metaData = org.chromium.viz.mojom.CompositorFrameMetadata.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8, false);
            
            encoder0.encode(this.metadataVersion, 16);
            
            encoder0.encode(this.metaData, 24, true);
        }
    }

    static class SynchronousCompositorDemandDrawSwResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final SynchronousCompositor.DemandDrawSwResponse mCallback;

        SynchronousCompositorDemandDrawSwResponseParamsForwardToCallback(SynchronousCompositor.DemandDrawSwResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(DEMAND_DRAW_SW_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                SynchronousCompositorDemandDrawSwResponseParams response = SynchronousCompositorDemandDrawSwResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.metadataVersion, response.metaData);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class SynchronousCompositorDemandDrawSwResponseParamsProxyToResponder implements SynchronousCompositor.DemandDrawSwResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        SynchronousCompositorDemandDrawSwResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(SyncCompositorCommonRendererParams result, Integer metadataVersion, org.chromium.viz.mojom.CompositorFrameMetadata metaData) {
            SynchronousCompositorDemandDrawSwResponseParams _response = new SynchronousCompositorDemandDrawSwResponseParams();

            _response.result = result;

            _response.metadataVersion = metadataVersion;

            _response.metaData = metaData;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    DEMAND_DRAW_SW_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class SynchronousCompositorWillSkipDrawParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private SynchronousCompositorWillSkipDrawParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorWillSkipDrawParams() {
            this(0);
        }

        public static SynchronousCompositorWillSkipDrawParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorWillSkipDrawParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorWillSkipDrawParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorWillSkipDrawParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorWillSkipDrawParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class SynchronousCompositorZeroSharedMemoryParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private SynchronousCompositorZeroSharedMemoryParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorZeroSharedMemoryParams() {
            this(0);
        }

        public static SynchronousCompositorZeroSharedMemoryParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorZeroSharedMemoryParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorZeroSharedMemoryParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorZeroSharedMemoryParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorZeroSharedMemoryParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class SynchronousCompositorZoomByParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public float delta;
        public org.chromium.gfx.mojom.Point anchor;

        private SynchronousCompositorZoomByParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorZoomByParams() {
            this(0);
        }

        public static SynchronousCompositorZoomByParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorZoomByParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorZoomByParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorZoomByParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorZoomByParams(elementsOrVersion);
                    {
                        
                    result.delta = decoder0.readFloat(8);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.anchor = org.chromium.gfx.mojom.Point.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.delta, 8);
            
            encoder0.encode(this.anchor, 16, false);
        }
    }



    
    static final class SynchronousCompositorZoomByResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SyncCompositorCommonRendererParams result;

        private SynchronousCompositorZoomByResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorZoomByResponseParams() {
            this(0);
        }

        public static SynchronousCompositorZoomByResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorZoomByResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorZoomByResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorZoomByResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorZoomByResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.result = SyncCompositorCommonRendererParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8, false);
        }
    }

    static class SynchronousCompositorZoomByResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final SynchronousCompositor.ZoomByResponse mCallback;

        SynchronousCompositorZoomByResponseParamsForwardToCallback(SynchronousCompositor.ZoomByResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ZOOM_BY_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    return false;
                }

                SynchronousCompositorZoomByResponseParams response = SynchronousCompositorZoomByResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class SynchronousCompositorZoomByResponseParamsProxyToResponder implements SynchronousCompositor.ZoomByResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        SynchronousCompositorZoomByResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(SyncCompositorCommonRendererParams result) {
            SynchronousCompositorZoomByResponseParams _response = new SynchronousCompositorZoomByResponseParams();

            _response.result = result;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ZOOM_BY_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG| org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class SynchronousCompositorSetMemoryPolicyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int bytesLimit;

        private SynchronousCompositorSetMemoryPolicyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorSetMemoryPolicyParams() {
            this(0);
        }

        public static SynchronousCompositorSetMemoryPolicyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorSetMemoryPolicyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorSetMemoryPolicyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorSetMemoryPolicyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorSetMemoryPolicyParams(elementsOrVersion);
                    {
                        
                    result.bytesLimit = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.bytesLimit, 8);
        }
    }



    
    static final class SynchronousCompositorReclaimResourcesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int layerTreeFrameSinkId;
        public org.chromium.viz.mojom.ReturnedResource[] resources;

        private SynchronousCompositorReclaimResourcesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorReclaimResourcesParams() {
            this(0);
        }

        public static SynchronousCompositorReclaimResourcesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorReclaimResourcesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorReclaimResourcesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorReclaimResourcesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorReclaimResourcesParams(elementsOrVersion);
                    {
                        
                    result.layerTreeFrameSinkId = decoder0.readInt(8);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.resources = new org.chromium.viz.mojom.ReturnedResource[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.resources[i1] = org.chromium.viz.mojom.ReturnedResource.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.layerTreeFrameSinkId, 8);
            
            if (this.resources == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.resources.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.resources.length; ++i0) {
                    
                    encoder1.encode(this.resources[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class SynchronousCompositorSetScrollParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.ScrollOffset offset;

        private SynchronousCompositorSetScrollParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorSetScrollParams() {
            this(0);
        }

        public static SynchronousCompositorSetScrollParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorSetScrollParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorSetScrollParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorSetScrollParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorSetScrollParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.offset = org.chromium.gfx.mojom.ScrollOffset.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.offset, 8, false);
        }
    }



    
    static final class SynchronousCompositorBeginFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.viz.mojom.BeginFrameArgs args;
        public java.util.Map<Integer, org.chromium.viz.mojom.FrameTimingDetails> timingDetails;

        private SynchronousCompositorBeginFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorBeginFrameParams() {
            this(0);
        }

        public static SynchronousCompositorBeginFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorBeginFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorBeginFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorBeginFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorBeginFrameParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.args = org.chromium.viz.mojom.BeginFrameArgs.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        decoder1.readDataHeaderForMap();
                        int[] keys0;
                        org.chromium.viz.mojom.FrameTimingDetails[] values0;
                        {
                            
                            keys0 = decoder1.readInts(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        }
                        {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, false);
                            {
                                org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(keys0.length);
                                values0 = new org.chromium.viz.mojom.FrameTimingDetails[si2.elementsOrVersion];
                                for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                    
                                    org.chromium.mojo.bindings.Decoder decoder3 = decoder2.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                                    values0[i2] = org.chromium.viz.mojom.FrameTimingDetails.decode(decoder3);
                                }
                            }
                        }
                        result.timingDetails = new java.util.HashMap<Integer, org.chromium.viz.mojom.FrameTimingDetails>();
                        for (int index0 = 0; index0 < keys0.length; ++index0) {
                            result.timingDetails.put(keys0[index0],  values0[index0]);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.args, 8, false);
            
            if (this.timingDetails == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(16);
                int size0 = this.timingDetails.size();
                int[] keys0 = new int[size0];
                org.chromium.viz.mojom.FrameTimingDetails[] values0 = new org.chromium.viz.mojom.FrameTimingDetails[size0];
                int index0 = 0;
                for (java.util.Map.Entry<Integer, org.chromium.viz.mojom.FrameTimingDetails> entry0 : this.timingDetails.entrySet()) {
                    keys0[index0] = entry0.getKey();
                    values0[index0] = entry0.getValue();
                    ++index0;
                }
                
                encoder1.encode(keys0, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                
                {
                    org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(values0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    for (int i1 = 0; i1 < values0.length; ++i1) {
                        
                        encoder2.encode(values0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                    }
                }
            }
        }
    }



    
    static final class SynchronousCompositorSetBeginFrameSourcePausedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean paused;

        private SynchronousCompositorSetBeginFrameSourcePausedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorSetBeginFrameSourcePausedParams() {
            this(0);
        }

        public static SynchronousCompositorSetBeginFrameSourcePausedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorSetBeginFrameSourcePausedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorSetBeginFrameSourcePausedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorSetBeginFrameSourcePausedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorSetBeginFrameSourcePausedParams(elementsOrVersion);
                    {
                        
                    result.paused = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.paused, 8, 0);
        }
    }



}
