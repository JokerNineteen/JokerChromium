// SharedWorkerHost_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/worker/shared_worker_host.mojom
//

package org.chromium.blink.mojom;


class SharedWorkerHost_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<SharedWorkerHost, SharedWorkerHost.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<SharedWorkerHost, SharedWorkerHost.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.SharedWorkerHost";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, SharedWorkerHost impl) {
            return new Stub(core, impl);
        }

        @Override
        public SharedWorkerHost[] buildArray(int size) {
          return new SharedWorkerHost[size];
        }
    };


    private static final int ON_CONNECTED_ORDINAL = 0;

    private static final int ON_CONTEXT_CLOSED_ORDINAL = 1;

    private static final int ON_READY_FOR_INSPECTION_ORDINAL = 2;

    private static final int ON_SCRIPT_LOAD_FAILED_ORDINAL = 3;

    private static final int ON_FEATURE_USED_ORDINAL = 4;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements SharedWorkerHost.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void onConnected(
int connectionId) {

            SharedWorkerHostOnConnectedParams _message = new SharedWorkerHostOnConnectedParams();

            _message.connectionId = connectionId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_CONNECTED_ORDINAL)));

        }


        @Override
        public void onContextClosed(
) {

            SharedWorkerHostOnContextClosedParams _message = new SharedWorkerHostOnContextClosedParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_CONTEXT_CLOSED_ORDINAL)));

        }


        @Override
        public void onReadyForInspection(
DevToolsAgent agent, org.chromium.mojo.bindings.InterfaceRequest<DevToolsAgentHost> agentHost) {

            SharedWorkerHostOnReadyForInspectionParams _message = new SharedWorkerHostOnReadyForInspectionParams();

            _message.agent = agent;

            _message.agentHost = agentHost;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_READY_FOR_INSPECTION_ORDINAL)));

        }


        @Override
        public void onScriptLoadFailed(
String errorMessage) {

            SharedWorkerHostOnScriptLoadFailedParams _message = new SharedWorkerHostOnScriptLoadFailedParams();

            _message.errorMessage = errorMessage;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_SCRIPT_LOAD_FAILED_ORDINAL)));

        }


        @Override
        public void onFeatureUsed(
int feature) {

            SharedWorkerHostOnFeatureUsedParams _message = new SharedWorkerHostOnFeatureUsedParams();

            _message.feature = feature;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_FEATURE_USED_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<SharedWorkerHost> {

        Stub(org.chromium.mojo.system.Core core, SharedWorkerHost impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                SharedWorkerHost_Internal.MANAGER, messageWithHeader);





                    case ON_CONNECTED_ORDINAL: {

                        SharedWorkerHostOnConnectedParams data =
                                SharedWorkerHostOnConnectedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onConnected(data.connectionId);
                        return true;
                    }





                    case ON_CONTEXT_CLOSED_ORDINAL: {

                        SharedWorkerHostOnContextClosedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onContextClosed();
                        return true;
                    }





                    case ON_READY_FOR_INSPECTION_ORDINAL: {

                        SharedWorkerHostOnReadyForInspectionParams data =
                                SharedWorkerHostOnReadyForInspectionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onReadyForInspection(data.agent, data.agentHost);
                        return true;
                    }





                    case ON_SCRIPT_LOAD_FAILED_ORDINAL: {

                        SharedWorkerHostOnScriptLoadFailedParams data =
                                SharedWorkerHostOnScriptLoadFailedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onScriptLoadFailed(data.errorMessage);
                        return true;
                    }





                    case ON_FEATURE_USED_ORDINAL: {

                        SharedWorkerHostOnFeatureUsedParams data =
                                SharedWorkerHostOnFeatureUsedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onFeatureUsed(data.feature);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), SharedWorkerHost_Internal.MANAGER, messageWithHeader, receiver);












                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class SharedWorkerHostOnConnectedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int connectionId;

        private SharedWorkerHostOnConnectedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedWorkerHostOnConnectedParams() {
            this(0);
        }

        public static SharedWorkerHostOnConnectedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedWorkerHostOnConnectedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedWorkerHostOnConnectedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedWorkerHostOnConnectedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedWorkerHostOnConnectedParams(elementsOrVersion);
                    {
                        
                    result.connectionId = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.connectionId, 8);
        }
    }



    
    static final class SharedWorkerHostOnContextClosedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private SharedWorkerHostOnContextClosedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedWorkerHostOnContextClosedParams() {
            this(0);
        }

        public static SharedWorkerHostOnContextClosedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedWorkerHostOnContextClosedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedWorkerHostOnContextClosedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedWorkerHostOnContextClosedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedWorkerHostOnContextClosedParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class SharedWorkerHostOnReadyForInspectionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public DevToolsAgent agent;
        public org.chromium.mojo.bindings.InterfaceRequest<DevToolsAgentHost> agentHost;

        private SharedWorkerHostOnReadyForInspectionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedWorkerHostOnReadyForInspectionParams() {
            this(0);
        }

        public static SharedWorkerHostOnReadyForInspectionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedWorkerHostOnReadyForInspectionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedWorkerHostOnReadyForInspectionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedWorkerHostOnReadyForInspectionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedWorkerHostOnReadyForInspectionParams(elementsOrVersion);
                    {
                        
                    result.agent = decoder0.readServiceInterface(8, false, DevToolsAgent.MANAGER);
                    }
                    {
                        
                    result.agentHost = decoder0.readInterfaceRequest(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.agent, 8, false, DevToolsAgent.MANAGER);
            
            encoder0.encode(this.agentHost, 16, false);
        }
    }



    
    static final class SharedWorkerHostOnScriptLoadFailedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String errorMessage;

        private SharedWorkerHostOnScriptLoadFailedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedWorkerHostOnScriptLoadFailedParams() {
            this(0);
        }

        public static SharedWorkerHostOnScriptLoadFailedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedWorkerHostOnScriptLoadFailedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedWorkerHostOnScriptLoadFailedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedWorkerHostOnScriptLoadFailedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedWorkerHostOnScriptLoadFailedParams(elementsOrVersion);
                    {
                        
                    result.errorMessage = decoder0.readString(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.errorMessage, 8, false);
        }
    }



    
    static final class SharedWorkerHostOnFeatureUsedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int feature;

        private SharedWorkerHostOnFeatureUsedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedWorkerHostOnFeatureUsedParams() {
            this(0);
        }

        public static SharedWorkerHostOnFeatureUsedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedWorkerHostOnFeatureUsedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedWorkerHostOnFeatureUsedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedWorkerHostOnFeatureUsedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedWorkerHostOnFeatureUsedParams(elementsOrVersion);
                    {
                        
                    result.feature = decoder0.readInt(8);
                        WebFeature.validate(result.feature);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.feature, 8);
        }
    }



}
