// PerformanceMarkOrMeasure.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/timing/performance_mark_or_measure.mojom
//

package org.chromium.blink.mojom;


public final class PerformanceMarkOrMeasure extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 56;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(56, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

    public static final class EntryType {
        private static final boolean IS_EXTENSIBLE = false;

        public static final int MARK = 0;
        public static final int MEASURE = 1;
        public static final int MIN_VALUE = 0;
        public static final int MAX_VALUE = 1;

        public static boolean isKnownValue(int value) {
            return value >= 0 && value <= 1;
        }

        public static void validate(int value) {
            if (IS_EXTENSIBLE || isKnownValue(value)) return;
            throw new org.chromium.mojo.bindings.DeserializationException("Invalid enum value.");
        }

        private EntryType() {}
    }
    public String name;
    public int entryType;
    public double startTime;
    public double duration;
    public org.chromium.mojo_base.mojom.BigBuffer detail;

    private PerformanceMarkOrMeasure(int version) {
        super(STRUCT_SIZE, version);
    }

    public PerformanceMarkOrMeasure() {
        this(0);
    }

    public static PerformanceMarkOrMeasure deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static PerformanceMarkOrMeasure deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static PerformanceMarkOrMeasure decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        PerformanceMarkOrMeasure result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new PerformanceMarkOrMeasure(elementsOrVersion);
                {
                    
                result.name = decoder0.readString(8, false);
                }
                {
                    
                result.entryType = decoder0.readInt(16);
                    PerformanceMarkOrMeasure.EntryType.validate(result.entryType);
                }
                {
                    
                result.startTime = decoder0.readDouble(24);
                }
                {
                    
                result.duration = decoder0.readDouble(32);
                }
                {
                    
                result.detail = org.chromium.mojo_base.mojom.BigBuffer.decode(decoder0, 40);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.name, 8, false);
        
        encoder0.encode(this.entryType, 16);
        
        encoder0.encode(this.startTime, 24);
        
        encoder0.encode(this.duration, 32);
        
        encoder0.encode(this.detail, 40, true);
    }
}