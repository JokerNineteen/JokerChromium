// ServiceWorkerRegistrationObject_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/service_worker/service_worker_registration.mojom
//

package org.chromium.blink.mojom;


class ServiceWorkerRegistrationObject_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<ServiceWorkerRegistrationObject, ServiceWorkerRegistrationObject.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<ServiceWorkerRegistrationObject, ServiceWorkerRegistrationObject.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.ServiceWorkerRegistrationObject";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, ServiceWorkerRegistrationObject impl) {
            return new Stub(core, impl);
        }

        @Override
        public ServiceWorkerRegistrationObject[] buildArray(int size) {
          return new ServiceWorkerRegistrationObject[size];
        }
    };


    private static final int SET_SERVICE_WORKER_OBJECTS_ORDINAL = 0;

    private static final int SET_UPDATE_VIA_CACHE_ORDINAL = 1;

    private static final int UPDATE_FOUND_ORDINAL = 2;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements ServiceWorkerRegistrationObject.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void setServiceWorkerObjects(
ChangedServiceWorkerObjectsMask changedMask, ServiceWorkerObjectInfo installing, ServiceWorkerObjectInfo waiting, ServiceWorkerObjectInfo active) {

            ServiceWorkerRegistrationObjectSetServiceWorkerObjectsParams _message = new ServiceWorkerRegistrationObjectSetServiceWorkerObjectsParams();

            _message.changedMask = changedMask;

            _message.installing = installing;

            _message.waiting = waiting;

            _message.active = active;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_SERVICE_WORKER_OBJECTS_ORDINAL)));

        }


        @Override
        public void setUpdateViaCache(
int updateViaCache) {

            ServiceWorkerRegistrationObjectSetUpdateViaCacheParams _message = new ServiceWorkerRegistrationObjectSetUpdateViaCacheParams();

            _message.updateViaCache = updateViaCache;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_UPDATE_VIA_CACHE_ORDINAL)));

        }


        @Override
        public void updateFound(
) {

            ServiceWorkerRegistrationObjectUpdateFoundParams _message = new ServiceWorkerRegistrationObjectUpdateFoundParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_FOUND_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<ServiceWorkerRegistrationObject> {

        Stub(org.chromium.mojo.system.Core core, ServiceWorkerRegistrationObject impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                ServiceWorkerRegistrationObject_Internal.MANAGER, messageWithHeader);





                    case SET_SERVICE_WORKER_OBJECTS_ORDINAL: {

                        ServiceWorkerRegistrationObjectSetServiceWorkerObjectsParams data =
                                ServiceWorkerRegistrationObjectSetServiceWorkerObjectsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setServiceWorkerObjects(data.changedMask, data.installing, data.waiting, data.active);
                        return true;
                    }





                    case SET_UPDATE_VIA_CACHE_ORDINAL: {

                        ServiceWorkerRegistrationObjectSetUpdateViaCacheParams data =
                                ServiceWorkerRegistrationObjectSetUpdateViaCacheParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setUpdateViaCache(data.updateViaCache);
                        return true;
                    }





                    case UPDATE_FOUND_ORDINAL: {

                        ServiceWorkerRegistrationObjectUpdateFoundParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateFound();
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), ServiceWorkerRegistrationObject_Internal.MANAGER, messageWithHeader, receiver);








                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class ServiceWorkerRegistrationObjectSetServiceWorkerObjectsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ChangedServiceWorkerObjectsMask changedMask;
        public ServiceWorkerObjectInfo installing;
        public ServiceWorkerObjectInfo waiting;
        public ServiceWorkerObjectInfo active;

        private ServiceWorkerRegistrationObjectSetServiceWorkerObjectsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public ServiceWorkerRegistrationObjectSetServiceWorkerObjectsParams() {
            this(0);
        }

        public static ServiceWorkerRegistrationObjectSetServiceWorkerObjectsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static ServiceWorkerRegistrationObjectSetServiceWorkerObjectsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static ServiceWorkerRegistrationObjectSetServiceWorkerObjectsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            ServiceWorkerRegistrationObjectSetServiceWorkerObjectsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new ServiceWorkerRegistrationObjectSetServiceWorkerObjectsParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.changedMask = ChangedServiceWorkerObjectsMask.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.installing = ServiceWorkerObjectInfo.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.waiting = ServiceWorkerObjectInfo.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, true);
                    result.active = ServiceWorkerObjectInfo.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.changedMask, 8, false);
            
            encoder0.encode(this.installing, 16, true);
            
            encoder0.encode(this.waiting, 24, true);
            
            encoder0.encode(this.active, 32, true);
        }
    }



    
    static final class ServiceWorkerRegistrationObjectSetUpdateViaCacheParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int updateViaCache;

        private ServiceWorkerRegistrationObjectSetUpdateViaCacheParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public ServiceWorkerRegistrationObjectSetUpdateViaCacheParams() {
            this(0);
        }

        public static ServiceWorkerRegistrationObjectSetUpdateViaCacheParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static ServiceWorkerRegistrationObjectSetUpdateViaCacheParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static ServiceWorkerRegistrationObjectSetUpdateViaCacheParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            ServiceWorkerRegistrationObjectSetUpdateViaCacheParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new ServiceWorkerRegistrationObjectSetUpdateViaCacheParams(elementsOrVersion);
                    {
                        
                    result.updateViaCache = decoder0.readInt(8);
                        ServiceWorkerUpdateViaCache.validate(result.updateViaCache);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.updateViaCache, 8);
        }
    }



    
    static final class ServiceWorkerRegistrationObjectUpdateFoundParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private ServiceWorkerRegistrationObjectUpdateFoundParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public ServiceWorkerRegistrationObjectUpdateFoundParams() {
            this(0);
        }

        public static ServiceWorkerRegistrationObjectUpdateFoundParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static ServiceWorkerRegistrationObjectUpdateFoundParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static ServiceWorkerRegistrationObjectUpdateFoundParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            ServiceWorkerRegistrationObjectUpdateFoundParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new ServiceWorkerRegistrationObjectUpdateFoundParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



}
