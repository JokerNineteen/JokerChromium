// FetchApiResponse.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/fetch/fetch_api_response.mojom
//

package org.chromium.blink.mojom;


public final class FetchApiResponse extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 152;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(152, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public org.chromium.url.mojom.Url[] urlList;
    public short statusCode;
    public String statusText;
    public int responseType;
    public long padding;
    public int responseSource;
    public java.util.Map<String, String> headers;
    public String mimeType;
    public String requestMethod;
    public SerializedBlob blob;
    public int error;
    public org.chromium.mojo_base.mojom.Time responseTime;
    public String cacheStorageCacheName;
    public String[] corsExposedHeaderNames;
    public SerializedBlob sideDataBlob;
    public SerializedBlob sideDataBlobForCachePut;
    public org.chromium.network.mojom.ParsedHeaders parsedHeaders;
    public int connectionInfo;
    public String alpnNegotiatedProtocol;
    public boolean wasFetchedViaSpdy;
    public boolean hasRangeRequested;
    public org.chromium.network.mojom.AuthChallengeInfo authChallengeInfo;

    private FetchApiResponse(int version) {
        super(STRUCT_SIZE, version);
        this.statusCode = (short) 0;
        this.responseType = (int) org.chromium.network.mojom.FetchResponseType.DEFAULT;
        this.padding = (long) 0;
        this.responseSource = (int) org.chromium.network.mojom.FetchResponseSource.UNSPECIFIED;
        this.error = (int) ServiceWorkerResponseError.UNKNOWN;
        this.alpnNegotiatedProtocol = (String) "unknown";
        this.wasFetchedViaSpdy = (boolean) false;
        this.hasRangeRequested = (boolean) false;
    }

    public FetchApiResponse() {
        this(0);
    }

    public static FetchApiResponse deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static FetchApiResponse deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static FetchApiResponse decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        FetchApiResponse result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new FetchApiResponse(elementsOrVersion);
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.urlList = new org.chromium.url.mojom.Url[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.urlList[i1] = org.chromium.url.mojom.Url.decode(decoder2);
                    }
                }
                }
                {
                    
                result.statusCode = decoder0.readShort(16);
                }
                {
                    
                result.wasFetchedViaSpdy = decoder0.readBoolean(18, 0);
                }
                {
                    
                result.hasRangeRequested = decoder0.readBoolean(18, 1);
                }
                {
                    
                result.responseType = decoder0.readInt(20);
                    org.chromium.network.mojom.FetchResponseType.validate(result.responseType);
                    result.responseType = org.chromium.network.mojom.FetchResponseType.toKnownValue(result.responseType);
                }
                {
                    
                result.statusText = decoder0.readString(24, false);
                }
                {
                    
                result.padding = decoder0.readLong(32);
                }
                {
                    
                result.responseSource = decoder0.readInt(40);
                    org.chromium.network.mojom.FetchResponseSource.validate(result.responseSource);
                    result.responseSource = org.chromium.network.mojom.FetchResponseSource.toKnownValue(result.responseSource);
                }
                {
                    
                result.error = decoder0.readInt(44);
                    ServiceWorkerResponseError.validate(result.error);
                    result.error = ServiceWorkerResponseError.toKnownValue(result.error);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
                {
                    decoder1.readDataHeaderForMap();
                    String[] keys0;
                    String[] values0;
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                            keys0 = new String[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                keys0[i2] = decoder2.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                            }
                        }
                    }
                    {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, false);
                        {
                            org.chromium.mojo.bindings.DataHeader si2 = decoder2.readDataHeaderForPointerArray(keys0.length);
                            values0 = new String[si2.elementsOrVersion];
                            for (int i2 = 0; i2 < si2.elementsOrVersion; ++i2) {
                                
                                values0[i2] = decoder2.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i2, false);
                            }
                        }
                    }
                    result.headers = new java.util.HashMap<String, String>();
                    for (int index0 = 0; index0 < keys0.length; ++index0) {
                        result.headers.put(keys0[index0],  values0[index0]);
                    }
                }
                }
                {
                    
                result.mimeType = decoder0.readString(56, true);
                }
                {
                    
                result.requestMethod = decoder0.readString(64, true);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(72, true);
                result.blob = SerializedBlob.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(80, false);
                result.responseTime = org.chromium.mojo_base.mojom.Time.decode(decoder1);
                }
                {
                    
                result.cacheStorageCacheName = decoder0.readString(88, true);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(96, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.corsExposedHeaderNames = new String[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        result.corsExposedHeaderNames[i1] = decoder1.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(104, true);
                result.sideDataBlob = SerializedBlob.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(112, true);
                result.sideDataBlobForCachePut = SerializedBlob.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(120, true);
                result.parsedHeaders = org.chromium.network.mojom.ParsedHeaders.decode(decoder1);
                }
                {
                    
                result.connectionInfo = decoder0.readInt(128);
                    org.chromium.network.mojom.ConnectionInfo.validate(result.connectionInfo);
                    result.connectionInfo = org.chromium.network.mojom.ConnectionInfo.toKnownValue(result.connectionInfo);
                }
                {
                    
                result.alpnNegotiatedProtocol = decoder0.readString(136, false);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(144, true);
                result.authChallengeInfo = org.chromium.network.mojom.AuthChallengeInfo.decode(decoder1);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        if (this.urlList == null) {
            encoder0.encodeNullPointer(8, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.urlList.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.urlList.length; ++i0) {
                
                encoder1.encode(this.urlList[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.statusCode, 16);
        
        encoder0.encode(this.wasFetchedViaSpdy, 18, 0);
        
        encoder0.encode(this.hasRangeRequested, 18, 1);
        
        encoder0.encode(this.responseType, 20);
        
        encoder0.encode(this.statusText, 24, false);
        
        encoder0.encode(this.padding, 32);
        
        encoder0.encode(this.responseSource, 40);
        
        encoder0.encode(this.error, 44);
        
        if (this.headers == null) {
            encoder0.encodeNullPointer(48, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encoderForMap(48);
            int size0 = this.headers.size();
            String[] keys0 = new String[size0];
            String[] values0 = new String[size0];
            int index0 = 0;
            for (java.util.Map.Entry<String, String> entry0 : this.headers.entrySet()) {
                keys0[index0] = entry0.getKey();
                values0[index0] = entry0.getValue();
                ++index0;
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(keys0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < keys0.length; ++i1) {
                    
                    encoder2.encode(keys0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
            
            {
                org.chromium.mojo.bindings.Encoder encoder2 = encoder1.encodePointerArray(values0.length, org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i1 = 0; i1 < values0.length; ++i1) {
                    
                    encoder2.encode(values0[i1], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                }
            }
        }
        
        encoder0.encode(this.mimeType, 56, true);
        
        encoder0.encode(this.requestMethod, 64, true);
        
        encoder0.encode(this.blob, 72, true);
        
        encoder0.encode(this.responseTime, 80, false);
        
        encoder0.encode(this.cacheStorageCacheName, 88, true);
        
        if (this.corsExposedHeaderNames == null) {
            encoder0.encodeNullPointer(96, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.corsExposedHeaderNames.length, 96, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.corsExposedHeaderNames.length; ++i0) {
                
                encoder1.encode(this.corsExposedHeaderNames[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.sideDataBlob, 104, true);
        
        encoder0.encode(this.sideDataBlobForCachePut, 112, true);
        
        encoder0.encode(this.parsedHeaders, 120, true);
        
        encoder0.encode(this.connectionInfo, 128);
        
        encoder0.encode(this.alpnNegotiatedProtocol, 136, false);
        
        encoder0.encode(this.authChallengeInfo, 144, true);
    }
}