// NativeFileSystemManager_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/file_system_access/native_file_system_manager.mojom
//

package org.chromium.blink.mojom;


class NativeFileSystemManager_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<NativeFileSystemManager, NativeFileSystemManager.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<NativeFileSystemManager, NativeFileSystemManager.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.NativeFileSystemManager";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, NativeFileSystemManager impl) {
            return new Stub(core, impl);
        }

        @Override
        public NativeFileSystemManager[] buildArray(int size) {
          return new NativeFileSystemManager[size];
        }
    };


    private static final int GET_SANDBOXED_FILE_SYSTEM_ORDINAL = 0;

    private static final int CHOOSE_ENTRIES_ORDINAL = 1;

    private static final int GET_FILE_HANDLE_FROM_TOKEN_ORDINAL = 2;

    private static final int GET_DIRECTORY_HANDLE_FROM_TOKEN_ORDINAL = 3;

    private static final int GET_ENTRY_FROM_DRAG_DROP_TOKEN_ORDINAL = 4;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements NativeFileSystemManager.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void getSandboxedFileSystem(

GetSandboxedFileSystemResponse callback) {

            NativeFileSystemManagerGetSandboxedFileSystemParams _message = new NativeFileSystemManagerGetSandboxedFileSystemParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_SANDBOXED_FILE_SYSTEM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NativeFileSystemManagerGetSandboxedFileSystemResponseParamsForwardToCallback(callback));

        }


        @Override
        public void chooseEntries(
int type, ChooseFileSystemEntryAcceptsOption[] accepts, boolean includeAcceptsAll, 
ChooseEntriesResponse callback) {

            NativeFileSystemManagerChooseEntriesParams _message = new NativeFileSystemManagerChooseEntriesParams();

            _message.type = type;

            _message.accepts = accepts;

            _message.includeAcceptsAll = includeAcceptsAll;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CHOOSE_ENTRIES_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NativeFileSystemManagerChooseEntriesResponseParamsForwardToCallback(callback));

        }


        @Override
        public void getFileHandleFromToken(
NativeFileSystemTransferToken token, org.chromium.mojo.bindings.InterfaceRequest<NativeFileSystemFileHandle> fileHandle) {

            NativeFileSystemManagerGetFileHandleFromTokenParams _message = new NativeFileSystemManagerGetFileHandleFromTokenParams();

            _message.token = token;

            _message.fileHandle = fileHandle;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GET_FILE_HANDLE_FROM_TOKEN_ORDINAL)));

        }


        @Override
        public void getDirectoryHandleFromToken(
NativeFileSystemTransferToken token, org.chromium.mojo.bindings.InterfaceRequest<NativeFileSystemDirectoryHandle> directoryHandle) {

            NativeFileSystemManagerGetDirectoryHandleFromTokenParams _message = new NativeFileSystemManagerGetDirectoryHandleFromTokenParams();

            _message.token = token;

            _message.directoryHandle = directoryHandle;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GET_DIRECTORY_HANDLE_FROM_TOKEN_ORDINAL)));

        }


        @Override
        public void getEntryFromDragDropToken(
NativeFileSystemDragDropToken token, 
GetEntryFromDragDropTokenResponse callback) {

            NativeFileSystemManagerGetEntryFromDragDropTokenParams _message = new NativeFileSystemManagerGetEntryFromDragDropTokenParams();

            _message.token = token;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_ENTRY_FROM_DRAG_DROP_TOKEN_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NativeFileSystemManagerGetEntryFromDragDropTokenResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<NativeFileSystemManager> {

        Stub(org.chromium.mojo.system.Core core, NativeFileSystemManager impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                NativeFileSystemManager_Internal.MANAGER, messageWithHeader);









                    case GET_FILE_HANDLE_FROM_TOKEN_ORDINAL: {

                        NativeFileSystemManagerGetFileHandleFromTokenParams data =
                                NativeFileSystemManagerGetFileHandleFromTokenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getFileHandleFromToken(data.token, data.fileHandle);
                        return true;
                    }





                    case GET_DIRECTORY_HANDLE_FROM_TOKEN_ORDINAL: {

                        NativeFileSystemManagerGetDirectoryHandleFromTokenParams data =
                                NativeFileSystemManagerGetDirectoryHandleFromTokenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getDirectoryHandleFromToken(data.token, data.directoryHandle);
                        return true;
                    }




                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), NativeFileSystemManager_Internal.MANAGER, messageWithHeader, receiver);







                    case GET_SANDBOXED_FILE_SYSTEM_ORDINAL: {

                        NativeFileSystemManagerGetSandboxedFileSystemParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getSandboxedFileSystem(new NativeFileSystemManagerGetSandboxedFileSystemResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case CHOOSE_ENTRIES_ORDINAL: {

                        NativeFileSystemManagerChooseEntriesParams data =
                                NativeFileSystemManagerChooseEntriesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().chooseEntries(data.type, data.accepts, data.includeAcceptsAll, new NativeFileSystemManagerChooseEntriesResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }











                    case GET_ENTRY_FROM_DRAG_DROP_TOKEN_ORDINAL: {

                        NativeFileSystemManagerGetEntryFromDragDropTokenParams data =
                                NativeFileSystemManagerGetEntryFromDragDropTokenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getEntryFromDragDropToken(data.token, new NativeFileSystemManagerGetEntryFromDragDropTokenResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class NativeFileSystemManagerGetSandboxedFileSystemParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NativeFileSystemManagerGetSandboxedFileSystemParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemManagerGetSandboxedFileSystemParams() {
            this(0);
        }

        public static NativeFileSystemManagerGetSandboxedFileSystemParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemManagerGetSandboxedFileSystemParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemManagerGetSandboxedFileSystemParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemManagerGetSandboxedFileSystemParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemManagerGetSandboxedFileSystemParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class NativeFileSystemManagerGetSandboxedFileSystemResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemError result;
        public NativeFileSystemDirectoryHandle directory;

        private NativeFileSystemManagerGetSandboxedFileSystemResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemManagerGetSandboxedFileSystemResponseParams() {
            this(0);
        }

        public static NativeFileSystemManagerGetSandboxedFileSystemResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemManagerGetSandboxedFileSystemResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemManagerGetSandboxedFileSystemResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemManagerGetSandboxedFileSystemResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemManagerGetSandboxedFileSystemResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.result = NativeFileSystemError.decode(decoder1);
                    }
                    {
                        
                    result.directory = decoder0.readServiceInterface(16, true, NativeFileSystemDirectoryHandle.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8, false);
            
            encoder0.encode(this.directory, 16, true, NativeFileSystemDirectoryHandle.MANAGER);
        }
    }

    static class NativeFileSystemManagerGetSandboxedFileSystemResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NativeFileSystemManager.GetSandboxedFileSystemResponse mCallback;

        NativeFileSystemManagerGetSandboxedFileSystemResponseParamsForwardToCallback(NativeFileSystemManager.GetSandboxedFileSystemResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_SANDBOXED_FILE_SYSTEM_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NativeFileSystemManagerGetSandboxedFileSystemResponseParams response = NativeFileSystemManagerGetSandboxedFileSystemResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.directory);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NativeFileSystemManagerGetSandboxedFileSystemResponseParamsProxyToResponder implements NativeFileSystemManager.GetSandboxedFileSystemResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NativeFileSystemManagerGetSandboxedFileSystemResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(NativeFileSystemError result, NativeFileSystemDirectoryHandle directory) {
            NativeFileSystemManagerGetSandboxedFileSystemResponseParams _response = new NativeFileSystemManagerGetSandboxedFileSystemResponseParams();

            _response.result = result;

            _response.directory = directory;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_SANDBOXED_FILE_SYSTEM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NativeFileSystemManagerChooseEntriesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int type;
        public ChooseFileSystemEntryAcceptsOption[] accepts;
        public boolean includeAcceptsAll;

        private NativeFileSystemManagerChooseEntriesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemManagerChooseEntriesParams() {
            this(0);
        }

        public static NativeFileSystemManagerChooseEntriesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemManagerChooseEntriesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemManagerChooseEntriesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemManagerChooseEntriesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemManagerChooseEntriesParams(elementsOrVersion);
                    {
                        
                    result.type = decoder0.readInt(8);
                        ChooseFileSystemEntryType.validate(result.type);
                    }
                    {
                        
                    result.includeAcceptsAll = decoder0.readBoolean(12, 0);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.accepts = new ChooseFileSystemEntryAcceptsOption[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.accepts[i1] = ChooseFileSystemEntryAcceptsOption.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.type, 8);
            
            encoder0.encode(this.includeAcceptsAll, 12, 0);
            
            if (this.accepts == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.accepts.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.accepts.length; ++i0) {
                    
                    encoder1.encode(this.accepts[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class NativeFileSystemManagerChooseEntriesResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemError result;
        public NativeFileSystemEntry[] entries;

        private NativeFileSystemManagerChooseEntriesResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemManagerChooseEntriesResponseParams() {
            this(0);
        }

        public static NativeFileSystemManagerChooseEntriesResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemManagerChooseEntriesResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemManagerChooseEntriesResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemManagerChooseEntriesResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemManagerChooseEntriesResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.result = NativeFileSystemError.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.entries = new NativeFileSystemEntry[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.entries[i1] = NativeFileSystemEntry.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8, false);
            
            if (this.entries == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.entries.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.entries.length; ++i0) {
                    
                    encoder1.encode(this.entries[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }

    static class NativeFileSystemManagerChooseEntriesResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NativeFileSystemManager.ChooseEntriesResponse mCallback;

        NativeFileSystemManagerChooseEntriesResponseParamsForwardToCallback(NativeFileSystemManager.ChooseEntriesResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CHOOSE_ENTRIES_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NativeFileSystemManagerChooseEntriesResponseParams response = NativeFileSystemManagerChooseEntriesResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.entries);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NativeFileSystemManagerChooseEntriesResponseParamsProxyToResponder implements NativeFileSystemManager.ChooseEntriesResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NativeFileSystemManagerChooseEntriesResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(NativeFileSystemError result, NativeFileSystemEntry[] entries) {
            NativeFileSystemManagerChooseEntriesResponseParams _response = new NativeFileSystemManagerChooseEntriesResponseParams();

            _response.result = result;

            _response.entries = entries;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CHOOSE_ENTRIES_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NativeFileSystemManagerGetFileHandleFromTokenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemTransferToken token;
        public org.chromium.mojo.bindings.InterfaceRequest<NativeFileSystemFileHandle> fileHandle;

        private NativeFileSystemManagerGetFileHandleFromTokenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemManagerGetFileHandleFromTokenParams() {
            this(0);
        }

        public static NativeFileSystemManagerGetFileHandleFromTokenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemManagerGetFileHandleFromTokenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemManagerGetFileHandleFromTokenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemManagerGetFileHandleFromTokenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemManagerGetFileHandleFromTokenParams(elementsOrVersion);
                    {
                        
                    result.token = decoder0.readServiceInterface(8, false, NativeFileSystemTransferToken.MANAGER);
                    }
                    {
                        
                    result.fileHandle = decoder0.readInterfaceRequest(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.token, 8, false, NativeFileSystemTransferToken.MANAGER);
            
            encoder0.encode(this.fileHandle, 16, false);
        }
    }



    
    static final class NativeFileSystemManagerGetDirectoryHandleFromTokenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemTransferToken token;
        public org.chromium.mojo.bindings.InterfaceRequest<NativeFileSystemDirectoryHandle> directoryHandle;

        private NativeFileSystemManagerGetDirectoryHandleFromTokenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemManagerGetDirectoryHandleFromTokenParams() {
            this(0);
        }

        public static NativeFileSystemManagerGetDirectoryHandleFromTokenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemManagerGetDirectoryHandleFromTokenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemManagerGetDirectoryHandleFromTokenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemManagerGetDirectoryHandleFromTokenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemManagerGetDirectoryHandleFromTokenParams(elementsOrVersion);
                    {
                        
                    result.token = decoder0.readServiceInterface(8, false, NativeFileSystemTransferToken.MANAGER);
                    }
                    {
                        
                    result.directoryHandle = decoder0.readInterfaceRequest(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.token, 8, false, NativeFileSystemTransferToken.MANAGER);
            
            encoder0.encode(this.directoryHandle, 16, false);
        }
    }



    
    static final class NativeFileSystemManagerGetEntryFromDragDropTokenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemDragDropToken token;

        private NativeFileSystemManagerGetEntryFromDragDropTokenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemManagerGetEntryFromDragDropTokenParams() {
            this(0);
        }

        public static NativeFileSystemManagerGetEntryFromDragDropTokenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemManagerGetEntryFromDragDropTokenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemManagerGetEntryFromDragDropTokenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemManagerGetEntryFromDragDropTokenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemManagerGetEntryFromDragDropTokenParams(elementsOrVersion);
                    {
                        
                    result.token = decoder0.readServiceInterface(8, false, NativeFileSystemDragDropToken.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.token, 8, false, NativeFileSystemDragDropToken.MANAGER);
        }
    }



    
    static final class NativeFileSystemManagerGetEntryFromDragDropTokenResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemEntry entry;

        private NativeFileSystemManagerGetEntryFromDragDropTokenResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemManagerGetEntryFromDragDropTokenResponseParams() {
            this(0);
        }

        public static NativeFileSystemManagerGetEntryFromDragDropTokenResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemManagerGetEntryFromDragDropTokenResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemManagerGetEntryFromDragDropTokenResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemManagerGetEntryFromDragDropTokenResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemManagerGetEntryFromDragDropTokenResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.entry = NativeFileSystemEntry.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.entry, 8, false);
        }
    }

    static class NativeFileSystemManagerGetEntryFromDragDropTokenResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NativeFileSystemManager.GetEntryFromDragDropTokenResponse mCallback;

        NativeFileSystemManagerGetEntryFromDragDropTokenResponseParamsForwardToCallback(NativeFileSystemManager.GetEntryFromDragDropTokenResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_ENTRY_FROM_DRAG_DROP_TOKEN_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NativeFileSystemManagerGetEntryFromDragDropTokenResponseParams response = NativeFileSystemManagerGetEntryFromDragDropTokenResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.entry);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NativeFileSystemManagerGetEntryFromDragDropTokenResponseParamsProxyToResponder implements NativeFileSystemManager.GetEntryFromDragDropTokenResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NativeFileSystemManagerGetEntryFromDragDropTokenResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(NativeFileSystemEntry entry) {
            NativeFileSystemManagerGetEntryFromDragDropTokenResponseParams _response = new NativeFileSystemManagerGetEntryFromDragDropTokenResponseParams();

            _response.entry = entry;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_ENTRY_FROM_DRAG_DROP_TOKEN_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



}
