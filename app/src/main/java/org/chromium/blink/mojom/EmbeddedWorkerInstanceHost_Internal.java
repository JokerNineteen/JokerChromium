// EmbeddedWorkerInstanceHost_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/service_worker/embedded_worker.mojom
//

package org.chromium.blink.mojom;


class EmbeddedWorkerInstanceHost_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<EmbeddedWorkerInstanceHost, EmbeddedWorkerInstanceHost.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<EmbeddedWorkerInstanceHost, EmbeddedWorkerInstanceHost.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.EmbeddedWorkerInstanceHost";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, EmbeddedWorkerInstanceHost impl) {
            return new Stub(core, impl);
        }

        @Override
        public EmbeddedWorkerInstanceHost[] buildArray(int size) {
          return new EmbeddedWorkerInstanceHost[size];
        }
    };


    private static final int REQUEST_TERMINATION_ORDINAL = 0;

    private static final int COUNT_FEATURE_ORDINAL = 1;

    private static final int ON_READY_FOR_INSPECTION_ORDINAL = 2;

    private static final int ON_SCRIPT_LOADED_ORDINAL = 3;

    private static final int ON_SCRIPT_EVALUATION_START_ORDINAL = 4;

    private static final int ON_STARTED_ORDINAL = 5;

    private static final int ON_REPORT_EXCEPTION_ORDINAL = 6;

    private static final int ON_REPORT_CONSOLE_MESSAGE_ORDINAL = 7;

    private static final int ON_STOPPED_ORDINAL = 8;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements EmbeddedWorkerInstanceHost.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void requestTermination(

RequestTerminationResponse callback) {

            EmbeddedWorkerInstanceHostRequestTerminationParams _message = new EmbeddedWorkerInstanceHostRequestTerminationParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    REQUEST_TERMINATION_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new EmbeddedWorkerInstanceHostRequestTerminationResponseParamsForwardToCallback(callback));

        }


        @Override
        public void countFeature(
int feature) {

            EmbeddedWorkerInstanceHostCountFeatureParams _message = new EmbeddedWorkerInstanceHostCountFeatureParams();

            _message.feature = feature;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(COUNT_FEATURE_ORDINAL)));

        }


        @Override
        public void onReadyForInspection(
DevToolsAgent agent, org.chromium.mojo.bindings.InterfaceRequest<DevToolsAgentHost> agentHost) {

            EmbeddedWorkerInstanceHostOnReadyForInspectionParams _message = new EmbeddedWorkerInstanceHostOnReadyForInspectionParams();

            _message.agent = agent;

            _message.agentHost = agentHost;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_READY_FOR_INSPECTION_ORDINAL)));

        }


        @Override
        public void onScriptLoaded(
) {

            EmbeddedWorkerInstanceHostOnScriptLoadedParams _message = new EmbeddedWorkerInstanceHostOnScriptLoadedParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_SCRIPT_LOADED_ORDINAL)));

        }


        @Override
        public void onScriptEvaluationStart(
) {

            EmbeddedWorkerInstanceHostOnScriptEvaluationStartParams _message = new EmbeddedWorkerInstanceHostOnScriptEvaluationStartParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_SCRIPT_EVALUATION_START_ORDINAL)));

        }


        @Override
        public void onStarted(
int status, boolean hasFetchHandler, int threadId, EmbeddedWorkerStartTiming startTiming) {

            EmbeddedWorkerInstanceHostOnStartedParams _message = new EmbeddedWorkerInstanceHostOnStartedParams();

            _message.status = status;

            _message.hasFetchHandler = hasFetchHandler;

            _message.threadId = threadId;

            _message.startTiming = startTiming;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_STARTED_ORDINAL)));

        }


        @Override
        public void onReportException(
org.chromium.mojo_base.mojom.String16 errorMessage, int lineNumber, int columnNumber, org.chromium.url.mojom.Url sourceUrl) {

            EmbeddedWorkerInstanceHostOnReportExceptionParams _message = new EmbeddedWorkerInstanceHostOnReportExceptionParams();

            _message.errorMessage = errorMessage;

            _message.lineNumber = lineNumber;

            _message.columnNumber = columnNumber;

            _message.sourceUrl = sourceUrl;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_REPORT_EXCEPTION_ORDINAL)));

        }


        @Override
        public void onReportConsoleMessage(
int source, int messageLevel, org.chromium.mojo_base.mojom.String16 message, int lineNumber, org.chromium.url.mojom.Url sourceUrl) {

            EmbeddedWorkerInstanceHostOnReportConsoleMessageParams _message = new EmbeddedWorkerInstanceHostOnReportConsoleMessageParams();

            _message.source = source;

            _message.messageLevel = messageLevel;

            _message.message = message;

            _message.lineNumber = lineNumber;

            _message.sourceUrl = sourceUrl;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_REPORT_CONSOLE_MESSAGE_ORDINAL)));

        }


        @Override
        public void onStopped(
) {

            EmbeddedWorkerInstanceHostOnStoppedParams _message = new EmbeddedWorkerInstanceHostOnStoppedParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_STOPPED_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<EmbeddedWorkerInstanceHost> {

        Stub(org.chromium.mojo.system.Core core, EmbeddedWorkerInstanceHost impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                EmbeddedWorkerInstanceHost_Internal.MANAGER, messageWithHeader);







                    case COUNT_FEATURE_ORDINAL: {

                        EmbeddedWorkerInstanceHostCountFeatureParams data =
                                EmbeddedWorkerInstanceHostCountFeatureParams.deserialize(messageWithHeader.getPayload());

                        getImpl().countFeature(data.feature);
                        return true;
                    }





                    case ON_READY_FOR_INSPECTION_ORDINAL: {

                        EmbeddedWorkerInstanceHostOnReadyForInspectionParams data =
                                EmbeddedWorkerInstanceHostOnReadyForInspectionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onReadyForInspection(data.agent, data.agentHost);
                        return true;
                    }





                    case ON_SCRIPT_LOADED_ORDINAL: {

                        EmbeddedWorkerInstanceHostOnScriptLoadedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onScriptLoaded();
                        return true;
                    }





                    case ON_SCRIPT_EVALUATION_START_ORDINAL: {

                        EmbeddedWorkerInstanceHostOnScriptEvaluationStartParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onScriptEvaluationStart();
                        return true;
                    }





                    case ON_STARTED_ORDINAL: {

                        EmbeddedWorkerInstanceHostOnStartedParams data =
                                EmbeddedWorkerInstanceHostOnStartedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onStarted(data.status, data.hasFetchHandler, data.threadId, data.startTiming);
                        return true;
                    }





                    case ON_REPORT_EXCEPTION_ORDINAL: {

                        EmbeddedWorkerInstanceHostOnReportExceptionParams data =
                                EmbeddedWorkerInstanceHostOnReportExceptionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onReportException(data.errorMessage, data.lineNumber, data.columnNumber, data.sourceUrl);
                        return true;
                    }





                    case ON_REPORT_CONSOLE_MESSAGE_ORDINAL: {

                        EmbeddedWorkerInstanceHostOnReportConsoleMessageParams data =
                                EmbeddedWorkerInstanceHostOnReportConsoleMessageParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onReportConsoleMessage(data.source, data.messageLevel, data.message, data.lineNumber, data.sourceUrl);
                        return true;
                    }





                    case ON_STOPPED_ORDINAL: {

                        EmbeddedWorkerInstanceHostOnStoppedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onStopped();
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), EmbeddedWorkerInstanceHost_Internal.MANAGER, messageWithHeader, receiver);







                    case REQUEST_TERMINATION_ORDINAL: {

                        EmbeddedWorkerInstanceHostRequestTerminationParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestTermination(new EmbeddedWorkerInstanceHostRequestTerminationResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


















                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class EmbeddedWorkerInstanceHostRequestTerminationParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private EmbeddedWorkerInstanceHostRequestTerminationParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public EmbeddedWorkerInstanceHostRequestTerminationParams() {
            this(0);
        }

        public static EmbeddedWorkerInstanceHostRequestTerminationParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static EmbeddedWorkerInstanceHostRequestTerminationParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static EmbeddedWorkerInstanceHostRequestTerminationParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            EmbeddedWorkerInstanceHostRequestTerminationParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new EmbeddedWorkerInstanceHostRequestTerminationParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class EmbeddedWorkerInstanceHostRequestTerminationResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean willBeTerminated;

        private EmbeddedWorkerInstanceHostRequestTerminationResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public EmbeddedWorkerInstanceHostRequestTerminationResponseParams() {
            this(0);
        }

        public static EmbeddedWorkerInstanceHostRequestTerminationResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static EmbeddedWorkerInstanceHostRequestTerminationResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static EmbeddedWorkerInstanceHostRequestTerminationResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            EmbeddedWorkerInstanceHostRequestTerminationResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new EmbeddedWorkerInstanceHostRequestTerminationResponseParams(elementsOrVersion);
                    {
                        
                    result.willBeTerminated = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.willBeTerminated, 8, 0);
        }
    }

    static class EmbeddedWorkerInstanceHostRequestTerminationResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final EmbeddedWorkerInstanceHost.RequestTerminationResponse mCallback;

        EmbeddedWorkerInstanceHostRequestTerminationResponseParamsForwardToCallback(EmbeddedWorkerInstanceHost.RequestTerminationResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(REQUEST_TERMINATION_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                EmbeddedWorkerInstanceHostRequestTerminationResponseParams response = EmbeddedWorkerInstanceHostRequestTerminationResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.willBeTerminated);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class EmbeddedWorkerInstanceHostRequestTerminationResponseParamsProxyToResponder implements EmbeddedWorkerInstanceHost.RequestTerminationResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        EmbeddedWorkerInstanceHostRequestTerminationResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean willBeTerminated) {
            EmbeddedWorkerInstanceHostRequestTerminationResponseParams _response = new EmbeddedWorkerInstanceHostRequestTerminationResponseParams();

            _response.willBeTerminated = willBeTerminated;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    REQUEST_TERMINATION_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class EmbeddedWorkerInstanceHostCountFeatureParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int feature;

        private EmbeddedWorkerInstanceHostCountFeatureParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public EmbeddedWorkerInstanceHostCountFeatureParams() {
            this(0);
        }

        public static EmbeddedWorkerInstanceHostCountFeatureParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static EmbeddedWorkerInstanceHostCountFeatureParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static EmbeddedWorkerInstanceHostCountFeatureParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            EmbeddedWorkerInstanceHostCountFeatureParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new EmbeddedWorkerInstanceHostCountFeatureParams(elementsOrVersion);
                    {
                        
                    result.feature = decoder0.readInt(8);
                        WebFeature.validate(result.feature);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.feature, 8);
        }
    }



    
    static final class EmbeddedWorkerInstanceHostOnReadyForInspectionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public DevToolsAgent agent;
        public org.chromium.mojo.bindings.InterfaceRequest<DevToolsAgentHost> agentHost;

        private EmbeddedWorkerInstanceHostOnReadyForInspectionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public EmbeddedWorkerInstanceHostOnReadyForInspectionParams() {
            this(0);
        }

        public static EmbeddedWorkerInstanceHostOnReadyForInspectionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static EmbeddedWorkerInstanceHostOnReadyForInspectionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static EmbeddedWorkerInstanceHostOnReadyForInspectionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            EmbeddedWorkerInstanceHostOnReadyForInspectionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new EmbeddedWorkerInstanceHostOnReadyForInspectionParams(elementsOrVersion);
                    {
                        
                    result.agent = decoder0.readServiceInterface(8, false, DevToolsAgent.MANAGER);
                    }
                    {
                        
                    result.agentHost = decoder0.readInterfaceRequest(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.agent, 8, false, DevToolsAgent.MANAGER);
            
            encoder0.encode(this.agentHost, 16, false);
        }
    }



    
    static final class EmbeddedWorkerInstanceHostOnScriptLoadedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private EmbeddedWorkerInstanceHostOnScriptLoadedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public EmbeddedWorkerInstanceHostOnScriptLoadedParams() {
            this(0);
        }

        public static EmbeddedWorkerInstanceHostOnScriptLoadedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static EmbeddedWorkerInstanceHostOnScriptLoadedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static EmbeddedWorkerInstanceHostOnScriptLoadedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            EmbeddedWorkerInstanceHostOnScriptLoadedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new EmbeddedWorkerInstanceHostOnScriptLoadedParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class EmbeddedWorkerInstanceHostOnScriptEvaluationStartParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private EmbeddedWorkerInstanceHostOnScriptEvaluationStartParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public EmbeddedWorkerInstanceHostOnScriptEvaluationStartParams() {
            this(0);
        }

        public static EmbeddedWorkerInstanceHostOnScriptEvaluationStartParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static EmbeddedWorkerInstanceHostOnScriptEvaluationStartParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static EmbeddedWorkerInstanceHostOnScriptEvaluationStartParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            EmbeddedWorkerInstanceHostOnScriptEvaluationStartParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new EmbeddedWorkerInstanceHostOnScriptEvaluationStartParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class EmbeddedWorkerInstanceHostOnStartedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int status;
        public boolean hasFetchHandler;
        public int threadId;
        public EmbeddedWorkerStartTiming startTiming;

        private EmbeddedWorkerInstanceHostOnStartedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public EmbeddedWorkerInstanceHostOnStartedParams() {
            this(0);
        }

        public static EmbeddedWorkerInstanceHostOnStartedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static EmbeddedWorkerInstanceHostOnStartedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static EmbeddedWorkerInstanceHostOnStartedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            EmbeddedWorkerInstanceHostOnStartedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new EmbeddedWorkerInstanceHostOnStartedParams(elementsOrVersion);
                    {
                        
                    result.status = decoder0.readInt(8);
                        ServiceWorkerStartStatus.validate(result.status);
                    }
                    {
                        
                    result.hasFetchHandler = decoder0.readBoolean(12, 0);
                    }
                    {
                        
                    result.threadId = decoder0.readInt(16);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.startTiming = EmbeddedWorkerStartTiming.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.status, 8);
            
            encoder0.encode(this.hasFetchHandler, 12, 0);
            
            encoder0.encode(this.threadId, 16);
            
            encoder0.encode(this.startTiming, 24, false);
        }
    }



    
    static final class EmbeddedWorkerInstanceHostOnReportExceptionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16 errorMessage;
        public int lineNumber;
        public int columnNumber;
        public org.chromium.url.mojom.Url sourceUrl;

        private EmbeddedWorkerInstanceHostOnReportExceptionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public EmbeddedWorkerInstanceHostOnReportExceptionParams() {
            this(0);
        }

        public static EmbeddedWorkerInstanceHostOnReportExceptionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static EmbeddedWorkerInstanceHostOnReportExceptionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static EmbeddedWorkerInstanceHostOnReportExceptionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            EmbeddedWorkerInstanceHostOnReportExceptionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new EmbeddedWorkerInstanceHostOnReportExceptionParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.errorMessage = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    result.lineNumber = decoder0.readInt(16);
                    }
                    {
                        
                    result.columnNumber = decoder0.readInt(20);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.sourceUrl = org.chromium.url.mojom.Url.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.errorMessage, 8, false);
            
            encoder0.encode(this.lineNumber, 16);
            
            encoder0.encode(this.columnNumber, 20);
            
            encoder0.encode(this.sourceUrl, 24, false);
        }
    }



    
    static final class EmbeddedWorkerInstanceHostOnReportConsoleMessageParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int source;
        public int messageLevel;
        public org.chromium.mojo_base.mojom.String16 message;
        public int lineNumber;
        public org.chromium.url.mojom.Url sourceUrl;

        private EmbeddedWorkerInstanceHostOnReportConsoleMessageParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public EmbeddedWorkerInstanceHostOnReportConsoleMessageParams() {
            this(0);
        }

        public static EmbeddedWorkerInstanceHostOnReportConsoleMessageParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static EmbeddedWorkerInstanceHostOnReportConsoleMessageParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static EmbeddedWorkerInstanceHostOnReportConsoleMessageParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            EmbeddedWorkerInstanceHostOnReportConsoleMessageParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new EmbeddedWorkerInstanceHostOnReportConsoleMessageParams(elementsOrVersion);
                    {
                        
                    result.source = decoder0.readInt(8);
                        ConsoleMessageSource.validate(result.source);
                    }
                    {
                        
                    result.messageLevel = decoder0.readInt(12);
                        ConsoleMessageLevel.validate(result.messageLevel);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.message = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    result.lineNumber = decoder0.readInt(24);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.sourceUrl = org.chromium.url.mojom.Url.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.source, 8);
            
            encoder0.encode(this.messageLevel, 12);
            
            encoder0.encode(this.message, 16, false);
            
            encoder0.encode(this.lineNumber, 24);
            
            encoder0.encode(this.sourceUrl, 32, false);
        }
    }



    
    static final class EmbeddedWorkerInstanceHostOnStoppedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private EmbeddedWorkerInstanceHostOnStoppedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public EmbeddedWorkerInstanceHostOnStoppedParams() {
            this(0);
        }

        public static EmbeddedWorkerInstanceHostOnStoppedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static EmbeddedWorkerInstanceHostOnStoppedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static EmbeddedWorkerInstanceHostOnStoppedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            EmbeddedWorkerInstanceHostOnStoppedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new EmbeddedWorkerInstanceHostOnStoppedParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



}
