// MediaStreamDeviceObserver_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/mediastream/media_stream.mojom
//

package org.chromium.blink.mojom;


class MediaStreamDeviceObserver_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<MediaStreamDeviceObserver, MediaStreamDeviceObserver.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<MediaStreamDeviceObserver, MediaStreamDeviceObserver.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.MediaStreamDeviceObserver";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, MediaStreamDeviceObserver impl) {
            return new Stub(core, impl);
        }

        @Override
        public MediaStreamDeviceObserver[] buildArray(int size) {
          return new MediaStreamDeviceObserver[size];
        }
    };


    private static final int ON_DEVICE_STOPPED_ORDINAL = 0;

    private static final int ON_DEVICE_CHANGED_ORDINAL = 1;

    private static final int ON_DEVICE_REQUEST_STATE_CHANGE_ORDINAL = 2;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements MediaStreamDeviceObserver.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void onDeviceStopped(
String label, MediaStreamDevice device) {

            MediaStreamDeviceObserverOnDeviceStoppedParams _message = new MediaStreamDeviceObserverOnDeviceStoppedParams();

            _message.label = label;

            _message.device = device;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_DEVICE_STOPPED_ORDINAL)));

        }


        @Override
        public void onDeviceChanged(
String label, MediaStreamDevice oldDevice, MediaStreamDevice newDevice) {

            MediaStreamDeviceObserverOnDeviceChangedParams _message = new MediaStreamDeviceObserverOnDeviceChangedParams();

            _message.label = label;

            _message.oldDevice = oldDevice;

            _message.newDevice = newDevice;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_DEVICE_CHANGED_ORDINAL)));

        }


        @Override
        public void onDeviceRequestStateChange(
String label, MediaStreamDevice device, int newState) {

            MediaStreamDeviceObserverOnDeviceRequestStateChangeParams _message = new MediaStreamDeviceObserverOnDeviceRequestStateChangeParams();

            _message.label = label;

            _message.device = device;

            _message.newState = newState;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_DEVICE_REQUEST_STATE_CHANGE_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<MediaStreamDeviceObserver> {

        Stub(org.chromium.mojo.system.Core core, MediaStreamDeviceObserver impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                MediaStreamDeviceObserver_Internal.MANAGER, messageWithHeader);





                    case ON_DEVICE_STOPPED_ORDINAL: {

                        MediaStreamDeviceObserverOnDeviceStoppedParams data =
                                MediaStreamDeviceObserverOnDeviceStoppedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onDeviceStopped(data.label, data.device);
                        return true;
                    }





                    case ON_DEVICE_CHANGED_ORDINAL: {

                        MediaStreamDeviceObserverOnDeviceChangedParams data =
                                MediaStreamDeviceObserverOnDeviceChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onDeviceChanged(data.label, data.oldDevice, data.newDevice);
                        return true;
                    }





                    case ON_DEVICE_REQUEST_STATE_CHANGE_ORDINAL: {

                        MediaStreamDeviceObserverOnDeviceRequestStateChangeParams data =
                                MediaStreamDeviceObserverOnDeviceRequestStateChangeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onDeviceRequestStateChange(data.label, data.device, data.newState);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), MediaStreamDeviceObserver_Internal.MANAGER, messageWithHeader, receiver);








                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class MediaStreamDeviceObserverOnDeviceStoppedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String label;
        public MediaStreamDevice device;

        private MediaStreamDeviceObserverOnDeviceStoppedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaStreamDeviceObserverOnDeviceStoppedParams() {
            this(0);
        }

        public static MediaStreamDeviceObserverOnDeviceStoppedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaStreamDeviceObserverOnDeviceStoppedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaStreamDeviceObserverOnDeviceStoppedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaStreamDeviceObserverOnDeviceStoppedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaStreamDeviceObserverOnDeviceStoppedParams(elementsOrVersion);
                    {
                        
                    result.label = decoder0.readString(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.device = MediaStreamDevice.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.label, 8, false);
            
            encoder0.encode(this.device, 16, false);
        }
    }



    
    static final class MediaStreamDeviceObserverOnDeviceChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String label;
        public MediaStreamDevice oldDevice;
        public MediaStreamDevice newDevice;

        private MediaStreamDeviceObserverOnDeviceChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaStreamDeviceObserverOnDeviceChangedParams() {
            this(0);
        }

        public static MediaStreamDeviceObserverOnDeviceChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaStreamDeviceObserverOnDeviceChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaStreamDeviceObserverOnDeviceChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaStreamDeviceObserverOnDeviceChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaStreamDeviceObserverOnDeviceChangedParams(elementsOrVersion);
                    {
                        
                    result.label = decoder0.readString(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.oldDevice = MediaStreamDevice.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.newDevice = MediaStreamDevice.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.label, 8, false);
            
            encoder0.encode(this.oldDevice, 16, false);
            
            encoder0.encode(this.newDevice, 24, false);
        }
    }



    
    static final class MediaStreamDeviceObserverOnDeviceRequestStateChangeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String label;
        public MediaStreamDevice device;
        public int newState;

        private MediaStreamDeviceObserverOnDeviceRequestStateChangeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaStreamDeviceObserverOnDeviceRequestStateChangeParams() {
            this(0);
        }

        public static MediaStreamDeviceObserverOnDeviceRequestStateChangeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaStreamDeviceObserverOnDeviceRequestStateChangeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaStreamDeviceObserverOnDeviceRequestStateChangeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaStreamDeviceObserverOnDeviceRequestStateChangeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaStreamDeviceObserverOnDeviceRequestStateChangeParams(elementsOrVersion);
                    {
                        
                    result.label = decoder0.readString(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.device = MediaStreamDevice.decode(decoder1);
                    }
                    {
                        
                    result.newState = decoder0.readInt(24);
                        MediaStreamStateChange.validate(result.newState);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.label, 8, false);
            
            encoder0.encode(this.device, 16, false);
            
            encoder0.encode(this.newState, 24);
        }
    }



}
