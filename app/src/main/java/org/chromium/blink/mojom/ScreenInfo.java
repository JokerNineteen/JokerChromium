// ScreenInfo.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/widget/screen_info.mojom
//

package org.chromium.blink.mojom;


public final class ScreenInfo extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 56;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(56, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public float deviceScaleFactor;
    public org.chromium.gfx.mojom.DisplayColorSpaces displayColorSpaces;
    public int depth;
    public int depthPerComponent;
    public boolean isMonochrome;
    public int displayFrequency;
    public org.chromium.gfx.mojom.Rect rect;
    public org.chromium.gfx.mojom.Rect availableRect;
    public int orientationType;
    public short orientationAngle;

    private ScreenInfo(int version) {
        super(STRUCT_SIZE, version);
        this.deviceScaleFactor = (float) 1;
        this.isMonochrome = (boolean) false;
        this.orientationType = (int) ScreenOrientation.UNDEFINED;
    }

    public ScreenInfo() {
        this(0);
    }

    public static ScreenInfo deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static ScreenInfo deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static ScreenInfo decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        ScreenInfo result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new ScreenInfo(elementsOrVersion);
                {
                    
                result.deviceScaleFactor = decoder0.readFloat(8);
                }
                {
                    
                result.depth = decoder0.readInt(12);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                result.displayColorSpaces = org.chromium.gfx.mojom.DisplayColorSpaces.decode(decoder1);
                }
                {
                    
                result.depthPerComponent = decoder0.readInt(24);
                }
                {
                    
                result.isMonochrome = decoder0.readBoolean(28, 0);
                }
                {
                    
                result.orientationAngle = decoder0.readShort(30);
                }
                {
                    
                result.displayFrequency = decoder0.readInt(32);
                }
                {
                    
                result.orientationType = decoder0.readInt(36);
                    ScreenOrientation.validate(result.orientationType);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                result.rect = org.chromium.gfx.mojom.Rect.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
                result.availableRect = org.chromium.gfx.mojom.Rect.decode(decoder1);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.deviceScaleFactor, 8);
        
        encoder0.encode(this.depth, 12);
        
        encoder0.encode(this.displayColorSpaces, 16, false);
        
        encoder0.encode(this.depthPerComponent, 24);
        
        encoder0.encode(this.isMonochrome, 28, 0);
        
        encoder0.encode(this.orientationAngle, 30);
        
        encoder0.encode(this.displayFrequency, 32);
        
        encoder0.encode(this.orientationType, 36);
        
        encoder0.encode(this.rect, 40, false);
        
        encoder0.encode(this.availableRect, 48, false);
    }
}