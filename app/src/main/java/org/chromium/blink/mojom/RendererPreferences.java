// RendererPreferences.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/renderer_preferences.mojom
//

package org.chromium.blink.mojom;


public final class RendererPreferences extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 88;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(88, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public boolean canAcceptLoadDrops;
    public boolean shouldAntialiasText;
    public int hinting;
    public boolean useAutohinter;
    public boolean useBitmaps;
    public int subpixelRendering;
    public boolean useSubpixelPositioning;
    public int focusRingColor;
    public int activeSelectionBgColor;
    public int activeSelectionFgColor;
    public int inactiveSelectionBgColor;
    public int inactiveSelectionFgColor;
    public boolean browserHandlesAllTopLevelRequests;
    public org.chromium.mojo_base.mojom.TimeDelta caretBlinkInterval;
    public boolean useCustomColors;
    public boolean enableReferrers;
    public boolean allowCrossOriginAuthPrompt;
    public boolean enableDoNotTrack;
    public boolean enableEncryptedMedia;
    public String webrtcIpHandlingPolicy;
    public short webrtcUdpMinPort;
    public short webrtcUdpMaxPort;
    public String[] webrtcLocalIpsAllowedUrls;
    public boolean webrtcAllowLegacyTlsProtocols;
    public UserAgentOverride userAgentOverride;
    public String acceptLanguages;
    public boolean pluginFullscreenAllowed;
    public boolean caretBrowsingEnabled;

    private RendererPreferences(int version) {
        super(STRUCT_SIZE, version);
        this.canAcceptLoadDrops = (boolean) true;
        this.shouldAntialiasText = (boolean) true;
        this.hinting = (int) org.chromium.gfx.mojom.Hinting.MEDIUM;
        this.useAutohinter = (boolean) false;
        this.useBitmaps = (boolean) false;
        this.subpixelRendering = (int) org.chromium.gfx.mojom.SubpixelRendering.NONE;
        this.useSubpixelPositioning = (boolean) false;
        this.focusRingColor = (int) 4293236480L;
        this.activeSelectionBgColor = (int) 4280193279L;
        this.activeSelectionFgColor = (int) 4294967295L;
        this.inactiveSelectionBgColor = (int) 4291348680L;
        this.inactiveSelectionFgColor = (int) 4281479730L;
        this.browserHandlesAllTopLevelRequests = (boolean) false;
        this.useCustomColors = (boolean) true;
        this.enableReferrers = (boolean) true;
        this.allowCrossOriginAuthPrompt = (boolean) false;
        this.enableDoNotTrack = (boolean) false;
        this.enableEncryptedMedia = (boolean) true;
        this.webrtcUdpMinPort = (short) 0;
        this.webrtcUdpMaxPort = (short) 0;
        this.webrtcAllowLegacyTlsProtocols = (boolean) false;
        this.pluginFullscreenAllowed = (boolean) true;
        this.caretBrowsingEnabled = (boolean) false;
    }

    public RendererPreferences() {
        this(0);
    }

    public static RendererPreferences deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static RendererPreferences deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static RendererPreferences decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        RendererPreferences result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new RendererPreferences(elementsOrVersion);
                {
                    
                result.canAcceptLoadDrops = decoder0.readBoolean(8, 0);
                }
                {
                    
                result.shouldAntialiasText = decoder0.readBoolean(8, 1);
                }
                {
                    
                result.useAutohinter = decoder0.readBoolean(8, 2);
                }
                {
                    
                result.useBitmaps = decoder0.readBoolean(8, 3);
                }
                {
                    
                result.useSubpixelPositioning = decoder0.readBoolean(8, 4);
                }
                {
                    
                result.browserHandlesAllTopLevelRequests = decoder0.readBoolean(8, 5);
                }
                {
                    
                result.useCustomColors = decoder0.readBoolean(8, 6);
                }
                {
                    
                result.enableReferrers = decoder0.readBoolean(8, 7);
                }
                {
                    
                result.allowCrossOriginAuthPrompt = decoder0.readBoolean(9, 0);
                }
                {
                    
                result.enableDoNotTrack = decoder0.readBoolean(9, 1);
                }
                {
                    
                result.enableEncryptedMedia = decoder0.readBoolean(9, 2);
                }
                {
                    
                result.webrtcAllowLegacyTlsProtocols = decoder0.readBoolean(9, 3);
                }
                {
                    
                result.pluginFullscreenAllowed = decoder0.readBoolean(9, 4);
                }
                {
                    
                result.caretBrowsingEnabled = decoder0.readBoolean(9, 5);
                }
                {
                    
                result.webrtcUdpMinPort = decoder0.readShort(10);
                }
                {
                    
                result.hinting = decoder0.readInt(12);
                    org.chromium.gfx.mojom.Hinting.validate(result.hinting);
                }
                {
                    
                result.subpixelRendering = decoder0.readInt(16);
                    org.chromium.gfx.mojom.SubpixelRendering.validate(result.subpixelRendering);
                }
                {
                    
                result.focusRingColor = decoder0.readInt(20);
                }
                {
                    
                result.activeSelectionBgColor = decoder0.readInt(24);
                }
                {
                    
                result.activeSelectionFgColor = decoder0.readInt(28);
                }
                {
                    
                result.inactiveSelectionBgColor = decoder0.readInt(32);
                }
                {
                    
                result.inactiveSelectionFgColor = decoder0.readInt(36);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, true);
                result.caretBlinkInterval = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
                }
                {
                    
                result.webrtcIpHandlingPolicy = decoder0.readString(48, false);
                }
                {
                    
                result.webrtcUdpMaxPort = decoder0.readShort(56);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.webrtcLocalIpsAllowedUrls = new String[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        result.webrtcLocalIpsAllowedUrls[i1] = decoder1.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                    }
                }
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(72, false);
                result.userAgentOverride = UserAgentOverride.decode(decoder1);
                }
                {
                    
                result.acceptLanguages = decoder0.readString(80, false);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.canAcceptLoadDrops, 8, 0);
        
        encoder0.encode(this.shouldAntialiasText, 8, 1);
        
        encoder0.encode(this.useAutohinter, 8, 2);
        
        encoder0.encode(this.useBitmaps, 8, 3);
        
        encoder0.encode(this.useSubpixelPositioning, 8, 4);
        
        encoder0.encode(this.browserHandlesAllTopLevelRequests, 8, 5);
        
        encoder0.encode(this.useCustomColors, 8, 6);
        
        encoder0.encode(this.enableReferrers, 8, 7);
        
        encoder0.encode(this.allowCrossOriginAuthPrompt, 9, 0);
        
        encoder0.encode(this.enableDoNotTrack, 9, 1);
        
        encoder0.encode(this.enableEncryptedMedia, 9, 2);
        
        encoder0.encode(this.webrtcAllowLegacyTlsProtocols, 9, 3);
        
        encoder0.encode(this.pluginFullscreenAllowed, 9, 4);
        
        encoder0.encode(this.caretBrowsingEnabled, 9, 5);
        
        encoder0.encode(this.webrtcUdpMinPort, 10);
        
        encoder0.encode(this.hinting, 12);
        
        encoder0.encode(this.subpixelRendering, 16);
        
        encoder0.encode(this.focusRingColor, 20);
        
        encoder0.encode(this.activeSelectionBgColor, 24);
        
        encoder0.encode(this.activeSelectionFgColor, 28);
        
        encoder0.encode(this.inactiveSelectionBgColor, 32);
        
        encoder0.encode(this.inactiveSelectionFgColor, 36);
        
        encoder0.encode(this.caretBlinkInterval, 40, true);
        
        encoder0.encode(this.webrtcIpHandlingPolicy, 48, false);
        
        encoder0.encode(this.webrtcUdpMaxPort, 56);
        
        if (this.webrtcLocalIpsAllowedUrls == null) {
            encoder0.encodeNullPointer(64, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.webrtcLocalIpsAllowedUrls.length, 64, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.webrtcLocalIpsAllowedUrls.length; ++i0) {
                
                encoder1.encode(this.webrtcLocalIpsAllowedUrls[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
        
        encoder0.encode(this.userAgentOverride, 72, false);
        
        encoder0.encode(this.acceptLanguages, 80, false);
    }
}