// NativeFileSystemFileHandle_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/file_system_access/native_file_system_file_handle.mojom
//

package org.chromium.blink.mojom;


class NativeFileSystemFileHandle_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<NativeFileSystemFileHandle, NativeFileSystemFileHandle.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<NativeFileSystemFileHandle, NativeFileSystemFileHandle.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.NativeFileSystemFileHandle";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, NativeFileSystemFileHandle impl) {
            return new Stub(core, impl);
        }

        @Override
        public NativeFileSystemFileHandle[] buildArray(int size) {
          return new NativeFileSystemFileHandle[size];
        }
    };


    private static final int GET_PERMISSION_STATUS_ORDINAL = 0;

    private static final int REQUEST_PERMISSION_ORDINAL = 1;

    private static final int AS_BLOB_ORDINAL = 2;

    private static final int CREATE_FILE_WRITER_ORDINAL = 3;

    private static final int IS_SAME_ENTRY_ORDINAL = 4;

    private static final int TRANSFER_ORDINAL = 5;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements NativeFileSystemFileHandle.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void getPermissionStatus(
boolean writable, 
GetPermissionStatusResponse callback) {

            NativeFileSystemFileHandleGetPermissionStatusParams _message = new NativeFileSystemFileHandleGetPermissionStatusParams();

            _message.writable = writable;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_PERMISSION_STATUS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NativeFileSystemFileHandleGetPermissionStatusResponseParamsForwardToCallback(callback));

        }


        @Override
        public void requestPermission(
boolean writable, 
RequestPermissionResponse callback) {

            NativeFileSystemFileHandleRequestPermissionParams _message = new NativeFileSystemFileHandleRequestPermissionParams();

            _message.writable = writable;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    REQUEST_PERMISSION_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NativeFileSystemFileHandleRequestPermissionResponseParamsForwardToCallback(callback));

        }


        @Override
        public void asBlob(

AsBlobResponse callback) {

            NativeFileSystemFileHandleAsBlobParams _message = new NativeFileSystemFileHandleAsBlobParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    AS_BLOB_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NativeFileSystemFileHandleAsBlobResponseParamsForwardToCallback(callback));

        }


        @Override
        public void createFileWriter(
boolean keepExistingData, 
CreateFileWriterResponse callback) {

            NativeFileSystemFileHandleCreateFileWriterParams _message = new NativeFileSystemFileHandleCreateFileWriterParams();

            _message.keepExistingData = keepExistingData;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CREATE_FILE_WRITER_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NativeFileSystemFileHandleCreateFileWriterResponseParamsForwardToCallback(callback));

        }


        @Override
        public void isSameEntry(
NativeFileSystemTransferToken other, 
IsSameEntryResponse callback) {

            NativeFileSystemFileHandleIsSameEntryParams _message = new NativeFileSystemFileHandleIsSameEntryParams();

            _message.other = other;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    IS_SAME_ENTRY_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NativeFileSystemFileHandleIsSameEntryResponseParamsForwardToCallback(callback));

        }


        @Override
        public void transfer(
org.chromium.mojo.bindings.InterfaceRequest<NativeFileSystemTransferToken> token) {

            NativeFileSystemFileHandleTransferParams _message = new NativeFileSystemFileHandleTransferParams();

            _message.token = token;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(TRANSFER_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<NativeFileSystemFileHandle> {

        Stub(org.chromium.mojo.system.Core core, NativeFileSystemFileHandle impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                NativeFileSystemFileHandle_Internal.MANAGER, messageWithHeader);















                    case TRANSFER_ORDINAL: {

                        NativeFileSystemFileHandleTransferParams data =
                                NativeFileSystemFileHandleTransferParams.deserialize(messageWithHeader.getPayload());

                        getImpl().transfer(data.token);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), NativeFileSystemFileHandle_Internal.MANAGER, messageWithHeader, receiver);







                    case GET_PERMISSION_STATUS_ORDINAL: {

                        NativeFileSystemFileHandleGetPermissionStatusParams data =
                                NativeFileSystemFileHandleGetPermissionStatusParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getPermissionStatus(data.writable, new NativeFileSystemFileHandleGetPermissionStatusResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case REQUEST_PERMISSION_ORDINAL: {

                        NativeFileSystemFileHandleRequestPermissionParams data =
                                NativeFileSystemFileHandleRequestPermissionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestPermission(data.writable, new NativeFileSystemFileHandleRequestPermissionResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case AS_BLOB_ORDINAL: {

                        NativeFileSystemFileHandleAsBlobParams.deserialize(messageWithHeader.getPayload());

                        getImpl().asBlob(new NativeFileSystemFileHandleAsBlobResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case CREATE_FILE_WRITER_ORDINAL: {

                        NativeFileSystemFileHandleCreateFileWriterParams data =
                                NativeFileSystemFileHandleCreateFileWriterParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createFileWriter(data.keepExistingData, new NativeFileSystemFileHandleCreateFileWriterResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case IS_SAME_ENTRY_ORDINAL: {

                        NativeFileSystemFileHandleIsSameEntryParams data =
                                NativeFileSystemFileHandleIsSameEntryParams.deserialize(messageWithHeader.getPayload());

                        getImpl().isSameEntry(data.other, new NativeFileSystemFileHandleIsSameEntryResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }




                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class NativeFileSystemFileHandleGetPermissionStatusParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean writable;

        private NativeFileSystemFileHandleGetPermissionStatusParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemFileHandleGetPermissionStatusParams() {
            this(0);
        }

        public static NativeFileSystemFileHandleGetPermissionStatusParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemFileHandleGetPermissionStatusParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemFileHandleGetPermissionStatusParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemFileHandleGetPermissionStatusParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemFileHandleGetPermissionStatusParams(elementsOrVersion);
                    {
                        
                    result.writable = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.writable, 8, 0);
        }
    }



    
    static final class NativeFileSystemFileHandleGetPermissionStatusResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int status;

        private NativeFileSystemFileHandleGetPermissionStatusResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemFileHandleGetPermissionStatusResponseParams() {
            this(0);
        }

        public static NativeFileSystemFileHandleGetPermissionStatusResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemFileHandleGetPermissionStatusResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemFileHandleGetPermissionStatusResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemFileHandleGetPermissionStatusResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemFileHandleGetPermissionStatusResponseParams(elementsOrVersion);
                    {
                        
                    result.status = decoder0.readInt(8);
                        PermissionStatus.validate(result.status);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.status, 8);
        }
    }

    static class NativeFileSystemFileHandleGetPermissionStatusResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NativeFileSystemFileHandle.GetPermissionStatusResponse mCallback;

        NativeFileSystemFileHandleGetPermissionStatusResponseParamsForwardToCallback(NativeFileSystemFileHandle.GetPermissionStatusResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_PERMISSION_STATUS_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NativeFileSystemFileHandleGetPermissionStatusResponseParams response = NativeFileSystemFileHandleGetPermissionStatusResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.status);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NativeFileSystemFileHandleGetPermissionStatusResponseParamsProxyToResponder implements NativeFileSystemFileHandle.GetPermissionStatusResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NativeFileSystemFileHandleGetPermissionStatusResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer status) {
            NativeFileSystemFileHandleGetPermissionStatusResponseParams _response = new NativeFileSystemFileHandleGetPermissionStatusResponseParams();

            _response.status = status;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_PERMISSION_STATUS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NativeFileSystemFileHandleRequestPermissionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean writable;

        private NativeFileSystemFileHandleRequestPermissionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemFileHandleRequestPermissionParams() {
            this(0);
        }

        public static NativeFileSystemFileHandleRequestPermissionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemFileHandleRequestPermissionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemFileHandleRequestPermissionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemFileHandleRequestPermissionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemFileHandleRequestPermissionParams(elementsOrVersion);
                    {
                        
                    result.writable = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.writable, 8, 0);
        }
    }



    
    static final class NativeFileSystemFileHandleRequestPermissionResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemError result;
        public int status;

        private NativeFileSystemFileHandleRequestPermissionResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemFileHandleRequestPermissionResponseParams() {
            this(0);
        }

        public static NativeFileSystemFileHandleRequestPermissionResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemFileHandleRequestPermissionResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemFileHandleRequestPermissionResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemFileHandleRequestPermissionResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemFileHandleRequestPermissionResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.result = NativeFileSystemError.decode(decoder1);
                    }
                    {
                        
                    result.status = decoder0.readInt(16);
                        PermissionStatus.validate(result.status);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8, false);
            
            encoder0.encode(this.status, 16);
        }
    }

    static class NativeFileSystemFileHandleRequestPermissionResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NativeFileSystemFileHandle.RequestPermissionResponse mCallback;

        NativeFileSystemFileHandleRequestPermissionResponseParamsForwardToCallback(NativeFileSystemFileHandle.RequestPermissionResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(REQUEST_PERMISSION_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NativeFileSystemFileHandleRequestPermissionResponseParams response = NativeFileSystemFileHandleRequestPermissionResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.status);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NativeFileSystemFileHandleRequestPermissionResponseParamsProxyToResponder implements NativeFileSystemFileHandle.RequestPermissionResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NativeFileSystemFileHandleRequestPermissionResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(NativeFileSystemError result, Integer status) {
            NativeFileSystemFileHandleRequestPermissionResponseParams _response = new NativeFileSystemFileHandleRequestPermissionResponseParams();

            _response.result = result;

            _response.status = status;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    REQUEST_PERMISSION_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NativeFileSystemFileHandleAsBlobParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private NativeFileSystemFileHandleAsBlobParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemFileHandleAsBlobParams() {
            this(0);
        }

        public static NativeFileSystemFileHandleAsBlobParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemFileHandleAsBlobParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemFileHandleAsBlobParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemFileHandleAsBlobParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemFileHandleAsBlobParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class NativeFileSystemFileHandleAsBlobResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemError result;
        public org.chromium.mojo_base.mojom.FileInfo info;
        public SerializedBlob blob;

        private NativeFileSystemFileHandleAsBlobResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemFileHandleAsBlobResponseParams() {
            this(0);
        }

        public static NativeFileSystemFileHandleAsBlobResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemFileHandleAsBlobResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemFileHandleAsBlobResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemFileHandleAsBlobResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemFileHandleAsBlobResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.result = NativeFileSystemError.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.info = org.chromium.mojo_base.mojom.FileInfo.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.blob = SerializedBlob.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8, false);
            
            encoder0.encode(this.info, 16, false);
            
            encoder0.encode(this.blob, 24, true);
        }
    }

    static class NativeFileSystemFileHandleAsBlobResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NativeFileSystemFileHandle.AsBlobResponse mCallback;

        NativeFileSystemFileHandleAsBlobResponseParamsForwardToCallback(NativeFileSystemFileHandle.AsBlobResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(AS_BLOB_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NativeFileSystemFileHandleAsBlobResponseParams response = NativeFileSystemFileHandleAsBlobResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.info, response.blob);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NativeFileSystemFileHandleAsBlobResponseParamsProxyToResponder implements NativeFileSystemFileHandle.AsBlobResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NativeFileSystemFileHandleAsBlobResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(NativeFileSystemError result, org.chromium.mojo_base.mojom.FileInfo info, SerializedBlob blob) {
            NativeFileSystemFileHandleAsBlobResponseParams _response = new NativeFileSystemFileHandleAsBlobResponseParams();

            _response.result = result;

            _response.info = info;

            _response.blob = blob;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    AS_BLOB_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NativeFileSystemFileHandleCreateFileWriterParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean keepExistingData;

        private NativeFileSystemFileHandleCreateFileWriterParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemFileHandleCreateFileWriterParams() {
            this(0);
        }

        public static NativeFileSystemFileHandleCreateFileWriterParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemFileHandleCreateFileWriterParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemFileHandleCreateFileWriterParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemFileHandleCreateFileWriterParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemFileHandleCreateFileWriterParams(elementsOrVersion);
                    {
                        
                    result.keepExistingData = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.keepExistingData, 8, 0);
        }
    }



    
    static final class NativeFileSystemFileHandleCreateFileWriterResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemError result;
        public NativeFileSystemFileWriter writer;

        private NativeFileSystemFileHandleCreateFileWriterResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemFileHandleCreateFileWriterResponseParams() {
            this(0);
        }

        public static NativeFileSystemFileHandleCreateFileWriterResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemFileHandleCreateFileWriterResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemFileHandleCreateFileWriterResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemFileHandleCreateFileWriterResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemFileHandleCreateFileWriterResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.result = NativeFileSystemError.decode(decoder1);
                    }
                    {
                        
                    result.writer = decoder0.readServiceInterface(16, true, NativeFileSystemFileWriter.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8, false);
            
            encoder0.encode(this.writer, 16, true, NativeFileSystemFileWriter.MANAGER);
        }
    }

    static class NativeFileSystemFileHandleCreateFileWriterResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NativeFileSystemFileHandle.CreateFileWriterResponse mCallback;

        NativeFileSystemFileHandleCreateFileWriterResponseParamsForwardToCallback(NativeFileSystemFileHandle.CreateFileWriterResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CREATE_FILE_WRITER_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NativeFileSystemFileHandleCreateFileWriterResponseParams response = NativeFileSystemFileHandleCreateFileWriterResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.writer);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NativeFileSystemFileHandleCreateFileWriterResponseParamsProxyToResponder implements NativeFileSystemFileHandle.CreateFileWriterResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NativeFileSystemFileHandleCreateFileWriterResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(NativeFileSystemError result, NativeFileSystemFileWriter writer) {
            NativeFileSystemFileHandleCreateFileWriterResponseParams _response = new NativeFileSystemFileHandleCreateFileWriterResponseParams();

            _response.result = result;

            _response.writer = writer;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CREATE_FILE_WRITER_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NativeFileSystemFileHandleIsSameEntryParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemTransferToken other;

        private NativeFileSystemFileHandleIsSameEntryParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemFileHandleIsSameEntryParams() {
            this(0);
        }

        public static NativeFileSystemFileHandleIsSameEntryParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemFileHandleIsSameEntryParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemFileHandleIsSameEntryParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemFileHandleIsSameEntryParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemFileHandleIsSameEntryParams(elementsOrVersion);
                    {
                        
                    result.other = decoder0.readServiceInterface(8, false, NativeFileSystemTransferToken.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.other, 8, false, NativeFileSystemTransferToken.MANAGER);
        }
    }



    
    static final class NativeFileSystemFileHandleIsSameEntryResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemError result;
        public boolean isSame;

        private NativeFileSystemFileHandleIsSameEntryResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemFileHandleIsSameEntryResponseParams() {
            this(0);
        }

        public static NativeFileSystemFileHandleIsSameEntryResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemFileHandleIsSameEntryResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemFileHandleIsSameEntryResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemFileHandleIsSameEntryResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemFileHandleIsSameEntryResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.result = NativeFileSystemError.decode(decoder1);
                    }
                    {
                        
                    result.isSame = decoder0.readBoolean(16, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8, false);
            
            encoder0.encode(this.isSame, 16, 0);
        }
    }

    static class NativeFileSystemFileHandleIsSameEntryResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NativeFileSystemFileHandle.IsSameEntryResponse mCallback;

        NativeFileSystemFileHandleIsSameEntryResponseParamsForwardToCallback(NativeFileSystemFileHandle.IsSameEntryResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(IS_SAME_ENTRY_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NativeFileSystemFileHandleIsSameEntryResponseParams response = NativeFileSystemFileHandleIsSameEntryResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.isSame);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NativeFileSystemFileHandleIsSameEntryResponseParamsProxyToResponder implements NativeFileSystemFileHandle.IsSameEntryResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NativeFileSystemFileHandleIsSameEntryResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(NativeFileSystemError result, Boolean isSame) {
            NativeFileSystemFileHandleIsSameEntryResponseParams _response = new NativeFileSystemFileHandleIsSameEntryResponseParams();

            _response.result = result;

            _response.isSame = isSame;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    IS_SAME_ENTRY_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NativeFileSystemFileHandleTransferParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<NativeFileSystemTransferToken> token;

        private NativeFileSystemFileHandleTransferParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemFileHandleTransferParams() {
            this(0);
        }

        public static NativeFileSystemFileHandleTransferParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemFileHandleTransferParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemFileHandleTransferParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemFileHandleTransferParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemFileHandleTransferParams(elementsOrVersion);
                    {
                        
                    result.token = decoder0.readInterfaceRequest(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.token, 8, false);
        }
    }



}
