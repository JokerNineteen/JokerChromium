// WidgetInputHandler_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/input/input_handler.mojom
//

package org.chromium.blink.mojom;


class WidgetInputHandler_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<WidgetInputHandler, WidgetInputHandler.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<WidgetInputHandler, WidgetInputHandler.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.WidgetInputHandler";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, WidgetInputHandler impl) {
            return new Stub(core, impl);
        }

        @Override
        public WidgetInputHandler[] buildArray(int size) {
          return new WidgetInputHandler[size];
        }
    };


    private static final int SET_FOCUS_ORDINAL = 0;

    private static final int MOUSE_CAPTURE_LOST_ORDINAL = 1;

    private static final int SET_EDIT_COMMANDS_FOR_NEXT_KEY_EVENT_ORDINAL = 2;

    private static final int CURSOR_VISIBILITY_CHANGED_ORDINAL = 3;

    private static final int IME_SET_COMPOSITION_ORDINAL = 4;

    private static final int IME_COMMIT_TEXT_ORDINAL = 5;

    private static final int IME_FINISH_COMPOSING_TEXT_ORDINAL = 6;

    private static final int REQUEST_TEXT_INPUT_STATE_UPDATE_ORDINAL = 7;

    private static final int REQUEST_COMPOSITION_UPDATES_ORDINAL = 8;

    private static final int DISPATCH_EVENT_ORDINAL = 9;

    private static final int DISPATCH_NON_BLOCKING_EVENT_ORDINAL = 10;

    private static final int WAIT_FOR_INPUT_PROCESSED_ORDINAL = 11;

    private static final int ATTACH_SYNCHRONOUS_COMPOSITOR_ORDINAL = 12;

    private static final int GET_FRAME_WIDGET_INPUT_HANDLER_ORDINAL = 13;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements WidgetInputHandler.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void setFocus(
boolean focused) {

            WidgetInputHandlerSetFocusParams _message = new WidgetInputHandlerSetFocusParams();

            _message.focused = focused;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_FOCUS_ORDINAL)));

        }


        @Override
        public void mouseCaptureLost(
) {

            WidgetInputHandlerMouseCaptureLostParams _message = new WidgetInputHandlerMouseCaptureLostParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(MOUSE_CAPTURE_LOST_ORDINAL)));

        }


        @Override
        public void setEditCommandsForNextKeyEvent(
EditCommand[] commands) {

            WidgetInputHandlerSetEditCommandsForNextKeyEventParams _message = new WidgetInputHandlerSetEditCommandsForNextKeyEventParams();

            _message.commands = commands;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_EDIT_COMMANDS_FOR_NEXT_KEY_EVENT_ORDINAL)));

        }


        @Override
        public void cursorVisibilityChanged(
boolean visible) {

            WidgetInputHandlerCursorVisibilityChangedParams _message = new WidgetInputHandlerCursorVisibilityChangedParams();

            _message.visible = visible;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CURSOR_VISIBILITY_CHANGED_ORDINAL)));

        }


        @Override
        public void imeSetComposition(
org.chromium.mojo_base.mojom.String16 text, org.chromium.ui.mojom.ImeTextSpan[] imeTextSpans, org.chromium.gfx.mojom.Range range, int start, int end) {

            WidgetInputHandlerImeSetCompositionParams _message = new WidgetInputHandlerImeSetCompositionParams();

            _message.text = text;

            _message.imeTextSpans = imeTextSpans;

            _message.range = range;

            _message.start = start;

            _message.end = end;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(IME_SET_COMPOSITION_ORDINAL)));

        }


        @Override
        public void imeCommitText(
org.chromium.mojo_base.mojom.String16 text, org.chromium.ui.mojom.ImeTextSpan[] imeTextSpans, org.chromium.gfx.mojom.Range range, int relativeCursorPosition, 
ImeCommitTextResponse callback) {

            WidgetInputHandlerImeCommitTextParams _message = new WidgetInputHandlerImeCommitTextParams();

            _message.text = text;

            _message.imeTextSpans = imeTextSpans;

            _message.range = range;

            _message.relativeCursorPosition = relativeCursorPosition;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    IME_COMMIT_TEXT_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new WidgetInputHandlerImeCommitTextResponseParamsForwardToCallback(callback));

        }


        @Override
        public void imeFinishComposingText(
boolean keepSelection) {

            WidgetInputHandlerImeFinishComposingTextParams _message = new WidgetInputHandlerImeFinishComposingTextParams();

            _message.keepSelection = keepSelection;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(IME_FINISH_COMPOSING_TEXT_ORDINAL)));

        }


        @Override
        public void requestTextInputStateUpdate(
) {

            WidgetInputHandlerRequestTextInputStateUpdateParams _message = new WidgetInputHandlerRequestTextInputStateUpdateParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REQUEST_TEXT_INPUT_STATE_UPDATE_ORDINAL)));

        }


        @Override
        public void requestCompositionUpdates(
boolean immediateRequest, boolean monitorRequest) {

            WidgetInputHandlerRequestCompositionUpdatesParams _message = new WidgetInputHandlerRequestCompositionUpdatesParams();

            _message.immediateRequest = immediateRequest;

            _message.monitorRequest = monitorRequest;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REQUEST_COMPOSITION_UPDATES_ORDINAL)));

        }


        @Override
        public void dispatchEvent(
Event event, 
DispatchEventResponse callback) {

            WidgetInputHandlerDispatchEventParams _message = new WidgetInputHandlerDispatchEventParams();

            _message.event = event;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    DISPATCH_EVENT_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new WidgetInputHandlerDispatchEventResponseParamsForwardToCallback(callback));

        }


        @Override
        public void dispatchNonBlockingEvent(
Event event) {

            WidgetInputHandlerDispatchNonBlockingEventParams _message = new WidgetInputHandlerDispatchNonBlockingEventParams();

            _message.event = event;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DISPATCH_NON_BLOCKING_EVENT_ORDINAL)));

        }


        @Override
        public void waitForInputProcessed(

WaitForInputProcessedResponse callback) {

            WidgetInputHandlerWaitForInputProcessedParams _message = new WidgetInputHandlerWaitForInputProcessedParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    WAIT_FOR_INPUT_PROCESSED_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new WidgetInputHandlerWaitForInputProcessedResponseParamsForwardToCallback(callback));

        }


        @Override
        public void attachSynchronousCompositor(
SynchronousCompositorControlHost controlHost, org.chromium.mojo.bindings.AssociatedInterfaceNotSupported host, org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported compositorRequest) {

            WidgetInputHandlerAttachSynchronousCompositorParams _message = new WidgetInputHandlerAttachSynchronousCompositorParams();

            _message.controlHost = controlHost;

            _message.host = host;

            _message.compositorRequest = compositorRequest;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ATTACH_SYNCHRONOUS_COMPOSITOR_ORDINAL)));

        }


        @Override
        public void getFrameWidgetInputHandler(
org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported interfaceRequest) {

            WidgetInputHandlerGetFrameWidgetInputHandlerParams _message = new WidgetInputHandlerGetFrameWidgetInputHandlerParams();

            _message.interfaceRequest = interfaceRequest;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GET_FRAME_WIDGET_INPUT_HANDLER_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<WidgetInputHandler> {

        Stub(org.chromium.mojo.system.Core core, WidgetInputHandler impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                WidgetInputHandler_Internal.MANAGER, messageWithHeader);





                    case SET_FOCUS_ORDINAL: {

                        WidgetInputHandlerSetFocusParams data =
                                WidgetInputHandlerSetFocusParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setFocus(data.focused);
                        return true;
                    }





                    case MOUSE_CAPTURE_LOST_ORDINAL: {

                        WidgetInputHandlerMouseCaptureLostParams.deserialize(messageWithHeader.getPayload());

                        getImpl().mouseCaptureLost();
                        return true;
                    }





                    case SET_EDIT_COMMANDS_FOR_NEXT_KEY_EVENT_ORDINAL: {

                        WidgetInputHandlerSetEditCommandsForNextKeyEventParams data =
                                WidgetInputHandlerSetEditCommandsForNextKeyEventParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setEditCommandsForNextKeyEvent(data.commands);
                        return true;
                    }





                    case CURSOR_VISIBILITY_CHANGED_ORDINAL: {

                        WidgetInputHandlerCursorVisibilityChangedParams data =
                                WidgetInputHandlerCursorVisibilityChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().cursorVisibilityChanged(data.visible);
                        return true;
                    }





                    case IME_SET_COMPOSITION_ORDINAL: {

                        WidgetInputHandlerImeSetCompositionParams data =
                                WidgetInputHandlerImeSetCompositionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().imeSetComposition(data.text, data.imeTextSpans, data.range, data.start, data.end);
                        return true;
                    }







                    case IME_FINISH_COMPOSING_TEXT_ORDINAL: {

                        WidgetInputHandlerImeFinishComposingTextParams data =
                                WidgetInputHandlerImeFinishComposingTextParams.deserialize(messageWithHeader.getPayload());

                        getImpl().imeFinishComposingText(data.keepSelection);
                        return true;
                    }





                    case REQUEST_TEXT_INPUT_STATE_UPDATE_ORDINAL: {

                        WidgetInputHandlerRequestTextInputStateUpdateParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestTextInputStateUpdate();
                        return true;
                    }





                    case REQUEST_COMPOSITION_UPDATES_ORDINAL: {

                        WidgetInputHandlerRequestCompositionUpdatesParams data =
                                WidgetInputHandlerRequestCompositionUpdatesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestCompositionUpdates(data.immediateRequest, data.monitorRequest);
                        return true;
                    }







                    case DISPATCH_NON_BLOCKING_EVENT_ORDINAL: {

                        WidgetInputHandlerDispatchNonBlockingEventParams data =
                                WidgetInputHandlerDispatchNonBlockingEventParams.deserialize(messageWithHeader.getPayload());

                        getImpl().dispatchNonBlockingEvent(data.event);
                        return true;
                    }







                    case ATTACH_SYNCHRONOUS_COMPOSITOR_ORDINAL: {

                        WidgetInputHandlerAttachSynchronousCompositorParams data =
                                WidgetInputHandlerAttachSynchronousCompositorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().attachSynchronousCompositor(data.controlHost, data.host, data.compositorRequest);
                        return true;
                    }





                    case GET_FRAME_WIDGET_INPUT_HANDLER_ORDINAL: {

                        WidgetInputHandlerGetFrameWidgetInputHandlerParams data =
                                WidgetInputHandlerGetFrameWidgetInputHandlerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getFrameWidgetInputHandler(data.interfaceRequest);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), WidgetInputHandler_Internal.MANAGER, messageWithHeader, receiver);

















                    case IME_COMMIT_TEXT_ORDINAL: {

                        WidgetInputHandlerImeCommitTextParams data =
                                WidgetInputHandlerImeCommitTextParams.deserialize(messageWithHeader.getPayload());

                        getImpl().imeCommitText(data.text, data.imeTextSpans, data.range, data.relativeCursorPosition, new WidgetInputHandlerImeCommitTextResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }













                    case DISPATCH_EVENT_ORDINAL: {

                        WidgetInputHandlerDispatchEventParams data =
                                WidgetInputHandlerDispatchEventParams.deserialize(messageWithHeader.getPayload());

                        getImpl().dispatchEvent(data.event, new WidgetInputHandlerDispatchEventResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }









                    case WAIT_FOR_INPUT_PROCESSED_ORDINAL: {

                        WidgetInputHandlerWaitForInputProcessedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().waitForInputProcessed(new WidgetInputHandlerWaitForInputProcessedResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }






                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class WidgetInputHandlerSetFocusParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean focused;

        private WidgetInputHandlerSetFocusParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerSetFocusParams() {
            this(0);
        }

        public static WidgetInputHandlerSetFocusParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerSetFocusParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerSetFocusParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerSetFocusParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerSetFocusParams(elementsOrVersion);
                    {
                        
                    result.focused = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.focused, 8, 0);
        }
    }



    
    static final class WidgetInputHandlerMouseCaptureLostParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private WidgetInputHandlerMouseCaptureLostParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerMouseCaptureLostParams() {
            this(0);
        }

        public static WidgetInputHandlerMouseCaptureLostParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerMouseCaptureLostParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerMouseCaptureLostParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerMouseCaptureLostParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerMouseCaptureLostParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class WidgetInputHandlerSetEditCommandsForNextKeyEventParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public EditCommand[] commands;

        private WidgetInputHandlerSetEditCommandsForNextKeyEventParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerSetEditCommandsForNextKeyEventParams() {
            this(0);
        }

        public static WidgetInputHandlerSetEditCommandsForNextKeyEventParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerSetEditCommandsForNextKeyEventParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerSetEditCommandsForNextKeyEventParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerSetEditCommandsForNextKeyEventParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerSetEditCommandsForNextKeyEventParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.commands = new EditCommand[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.commands[i1] = EditCommand.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (this.commands == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.commands.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.commands.length; ++i0) {
                    
                    encoder1.encode(this.commands[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class WidgetInputHandlerCursorVisibilityChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean visible;

        private WidgetInputHandlerCursorVisibilityChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerCursorVisibilityChangedParams() {
            this(0);
        }

        public static WidgetInputHandlerCursorVisibilityChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerCursorVisibilityChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerCursorVisibilityChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerCursorVisibilityChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerCursorVisibilityChangedParams(elementsOrVersion);
                    {
                        
                    result.visible = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.visible, 8, 0);
        }
    }



    
    static final class WidgetInputHandlerImeSetCompositionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16 text;
        public org.chromium.ui.mojom.ImeTextSpan[] imeTextSpans;
        public org.chromium.gfx.mojom.Range range;
        public int start;
        public int end;

        private WidgetInputHandlerImeSetCompositionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerImeSetCompositionParams() {
            this(0);
        }

        public static WidgetInputHandlerImeSetCompositionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerImeSetCompositionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerImeSetCompositionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerImeSetCompositionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerImeSetCompositionParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.text = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.imeTextSpans = new org.chromium.ui.mojom.ImeTextSpan[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.imeTextSpans[i1] = org.chromium.ui.mojom.ImeTextSpan.decode(decoder2);
                        }
                    }
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.range = org.chromium.gfx.mojom.Range.decode(decoder1);
                    }
                    {
                        
                    result.start = decoder0.readInt(32);
                    }
                    {
                        
                    result.end = decoder0.readInt(36);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.text, 8, false);
            
            if (this.imeTextSpans == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.imeTextSpans.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.imeTextSpans.length; ++i0) {
                    
                    encoder1.encode(this.imeTextSpans[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
            
            encoder0.encode(this.range, 24, false);
            
            encoder0.encode(this.start, 32);
            
            encoder0.encode(this.end, 36);
        }
    }



    
    static final class WidgetInputHandlerImeCommitTextParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16 text;
        public org.chromium.ui.mojom.ImeTextSpan[] imeTextSpans;
        public org.chromium.gfx.mojom.Range range;
        public int relativeCursorPosition;

        private WidgetInputHandlerImeCommitTextParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerImeCommitTextParams() {
            this(0);
        }

        public static WidgetInputHandlerImeCommitTextParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerImeCommitTextParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerImeCommitTextParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerImeCommitTextParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerImeCommitTextParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.text = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.imeTextSpans = new org.chromium.ui.mojom.ImeTextSpan[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.imeTextSpans[i1] = org.chromium.ui.mojom.ImeTextSpan.decode(decoder2);
                        }
                    }
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.range = org.chromium.gfx.mojom.Range.decode(decoder1);
                    }
                    {
                        
                    result.relativeCursorPosition = decoder0.readInt(32);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.text, 8, false);
            
            if (this.imeTextSpans == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.imeTextSpans.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.imeTextSpans.length; ++i0) {
                    
                    encoder1.encode(this.imeTextSpans[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
            
            encoder0.encode(this.range, 24, false);
            
            encoder0.encode(this.relativeCursorPosition, 32);
        }
    }



    
    static final class WidgetInputHandlerImeCommitTextResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private WidgetInputHandlerImeCommitTextResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerImeCommitTextResponseParams() {
            this(0);
        }

        public static WidgetInputHandlerImeCommitTextResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerImeCommitTextResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerImeCommitTextResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerImeCommitTextResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerImeCommitTextResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class WidgetInputHandlerImeCommitTextResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final WidgetInputHandler.ImeCommitTextResponse mCallback;

        WidgetInputHandlerImeCommitTextResponseParamsForwardToCallback(WidgetInputHandler.ImeCommitTextResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(IME_COMMIT_TEXT_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class WidgetInputHandlerImeCommitTextResponseParamsProxyToResponder implements WidgetInputHandler.ImeCommitTextResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        WidgetInputHandlerImeCommitTextResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            WidgetInputHandlerImeCommitTextResponseParams _response = new WidgetInputHandlerImeCommitTextResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    IME_COMMIT_TEXT_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class WidgetInputHandlerImeFinishComposingTextParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean keepSelection;

        private WidgetInputHandlerImeFinishComposingTextParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerImeFinishComposingTextParams() {
            this(0);
        }

        public static WidgetInputHandlerImeFinishComposingTextParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerImeFinishComposingTextParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerImeFinishComposingTextParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerImeFinishComposingTextParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerImeFinishComposingTextParams(elementsOrVersion);
                    {
                        
                    result.keepSelection = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.keepSelection, 8, 0);
        }
    }



    
    static final class WidgetInputHandlerRequestTextInputStateUpdateParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private WidgetInputHandlerRequestTextInputStateUpdateParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerRequestTextInputStateUpdateParams() {
            this(0);
        }

        public static WidgetInputHandlerRequestTextInputStateUpdateParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerRequestTextInputStateUpdateParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerRequestTextInputStateUpdateParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerRequestTextInputStateUpdateParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerRequestTextInputStateUpdateParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class WidgetInputHandlerRequestCompositionUpdatesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean immediateRequest;
        public boolean monitorRequest;

        private WidgetInputHandlerRequestCompositionUpdatesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerRequestCompositionUpdatesParams() {
            this(0);
        }

        public static WidgetInputHandlerRequestCompositionUpdatesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerRequestCompositionUpdatesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerRequestCompositionUpdatesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerRequestCompositionUpdatesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerRequestCompositionUpdatesParams(elementsOrVersion);
                    {
                        
                    result.immediateRequest = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.monitorRequest = decoder0.readBoolean(8, 1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.immediateRequest, 8, 0);
            
            encoder0.encode(this.monitorRequest, 8, 1);
        }
    }



    
    static final class WidgetInputHandlerDispatchEventParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public Event event;

        private WidgetInputHandlerDispatchEventParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerDispatchEventParams() {
            this(0);
        }

        public static WidgetInputHandlerDispatchEventParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerDispatchEventParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerDispatchEventParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerDispatchEventParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerDispatchEventParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.event = Event.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.event, 8, false);
        }
    }



    
    static final class WidgetInputHandlerDispatchEventResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int source;
        public org.chromium.ui.mojom.LatencyInfo updatedLatency;
        public int state;
        public DidOverscrollParams overscroll;
        public TouchActionOptional touchAction;

        private WidgetInputHandlerDispatchEventResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerDispatchEventResponseParams() {
            this(0);
        }

        public static WidgetInputHandlerDispatchEventResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerDispatchEventResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerDispatchEventResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerDispatchEventResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerDispatchEventResponseParams(elementsOrVersion);
                    {
                        
                    result.source = decoder0.readInt(8);
                        InputEventResultSource.validate(result.source);
                    }
                    {
                        
                    result.state = decoder0.readInt(12);
                        InputEventResultState.validate(result.state);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.updatedLatency = org.chromium.ui.mojom.LatencyInfo.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.overscroll = DidOverscrollParams.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, true);
                    result.touchAction = TouchActionOptional.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.source, 8);
            
            encoder0.encode(this.state, 12);
            
            encoder0.encode(this.updatedLatency, 16, false);
            
            encoder0.encode(this.overscroll, 24, true);
            
            encoder0.encode(this.touchAction, 32, true);
        }
    }

    static class WidgetInputHandlerDispatchEventResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final WidgetInputHandler.DispatchEventResponse mCallback;

        WidgetInputHandlerDispatchEventResponseParamsForwardToCallback(WidgetInputHandler.DispatchEventResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(DISPATCH_EVENT_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                WidgetInputHandlerDispatchEventResponseParams response = WidgetInputHandlerDispatchEventResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.source, response.updatedLatency, response.state, response.overscroll, response.touchAction);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class WidgetInputHandlerDispatchEventResponseParamsProxyToResponder implements WidgetInputHandler.DispatchEventResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        WidgetInputHandlerDispatchEventResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer source, org.chromium.ui.mojom.LatencyInfo updatedLatency, Integer state, DidOverscrollParams overscroll, TouchActionOptional touchAction) {
            WidgetInputHandlerDispatchEventResponseParams _response = new WidgetInputHandlerDispatchEventResponseParams();

            _response.source = source;

            _response.updatedLatency = updatedLatency;

            _response.state = state;

            _response.overscroll = overscroll;

            _response.touchAction = touchAction;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    DISPATCH_EVENT_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class WidgetInputHandlerDispatchNonBlockingEventParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public Event event;

        private WidgetInputHandlerDispatchNonBlockingEventParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerDispatchNonBlockingEventParams() {
            this(0);
        }

        public static WidgetInputHandlerDispatchNonBlockingEventParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerDispatchNonBlockingEventParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerDispatchNonBlockingEventParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerDispatchNonBlockingEventParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerDispatchNonBlockingEventParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.event = Event.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.event, 8, false);
        }
    }



    
    static final class WidgetInputHandlerWaitForInputProcessedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private WidgetInputHandlerWaitForInputProcessedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerWaitForInputProcessedParams() {
            this(0);
        }

        public static WidgetInputHandlerWaitForInputProcessedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerWaitForInputProcessedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerWaitForInputProcessedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerWaitForInputProcessedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerWaitForInputProcessedParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class WidgetInputHandlerWaitForInputProcessedResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private WidgetInputHandlerWaitForInputProcessedResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerWaitForInputProcessedResponseParams() {
            this(0);
        }

        public static WidgetInputHandlerWaitForInputProcessedResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerWaitForInputProcessedResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerWaitForInputProcessedResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerWaitForInputProcessedResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerWaitForInputProcessedResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class WidgetInputHandlerWaitForInputProcessedResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final WidgetInputHandler.WaitForInputProcessedResponse mCallback;

        WidgetInputHandlerWaitForInputProcessedResponseParamsForwardToCallback(WidgetInputHandler.WaitForInputProcessedResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(WAIT_FOR_INPUT_PROCESSED_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class WidgetInputHandlerWaitForInputProcessedResponseParamsProxyToResponder implements WidgetInputHandler.WaitForInputProcessedResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        WidgetInputHandlerWaitForInputProcessedResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            WidgetInputHandlerWaitForInputProcessedResponseParams _response = new WidgetInputHandlerWaitForInputProcessedResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    WAIT_FOR_INPUT_PROCESSED_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class WidgetInputHandlerAttachSynchronousCompositorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SynchronousCompositorControlHost controlHost;
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported host;
        public org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported compositorRequest;

        private WidgetInputHandlerAttachSynchronousCompositorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerAttachSynchronousCompositorParams() {
            this(0);
        }

        public static WidgetInputHandlerAttachSynchronousCompositorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerAttachSynchronousCompositorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerAttachSynchronousCompositorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerAttachSynchronousCompositorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerAttachSynchronousCompositorParams(elementsOrVersion);
                    {
                        
                    result.controlHost = decoder0.readServiceInterface(8, false, SynchronousCompositorControlHost.MANAGER);
                    }
                    {
                        
                    result.host = decoder0.readAssociatedServiceInterfaceNotSupported(16, false);
                    }
                    {
                        
                    result.compositorRequest = decoder0.readAssociatedInterfaceRequestNotSupported(24, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.controlHost, 8, false, SynchronousCompositorControlHost.MANAGER);
            
            encoder0.encode(this.host, 16, false);
            
            encoder0.encode(this.compositorRequest, 24, false);
        }
    }



    
    static final class WidgetInputHandlerGetFrameWidgetInputHandlerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported interfaceRequest;

        private WidgetInputHandlerGetFrameWidgetInputHandlerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WidgetInputHandlerGetFrameWidgetInputHandlerParams() {
            this(0);
        }

        public static WidgetInputHandlerGetFrameWidgetInputHandlerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WidgetInputHandlerGetFrameWidgetInputHandlerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WidgetInputHandlerGetFrameWidgetInputHandlerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WidgetInputHandlerGetFrameWidgetInputHandlerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WidgetInputHandlerGetFrameWidgetInputHandlerParams(elementsOrVersion);
                    {
                        
                    result.interfaceRequest = decoder0.readAssociatedInterfaceRequestNotSupported(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.interfaceRequest, 8, false);
        }
    }



}
