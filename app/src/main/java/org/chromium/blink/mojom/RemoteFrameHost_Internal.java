// RemoteFrameHost_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/frame/frame.mojom
//

package org.chromium.blink.mojom;


class RemoteFrameHost_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<RemoteFrameHost, RemoteFrameHost.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<RemoteFrameHost, RemoteFrameHost.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.RemoteFrameHost";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, RemoteFrameHost impl) {
            return new Stub(core, impl);
        }

        @Override
        public RemoteFrameHost[] buildArray(int size) {
          return new RemoteFrameHost[size];
        }
    };


    private static final int SET_INHERITED_EFFECTIVE_TOUCH_ACTION_ORDINAL = 0;

    private static final int UPDATE_RENDER_THROTTLING_STATUS_ORDINAL = 1;

    private static final int VISIBILITY_CHANGED_ORDINAL = 2;

    private static final int DID_FOCUS_FRAME_ORDINAL = 3;

    private static final int CHECK_COMPLETED_ORDINAL = 4;

    private static final int CAPTURE_PAINT_PREVIEW_OF_CROSS_PROCESS_SUBFRAME_ORDINAL = 5;

    private static final int SET_IS_INERT_ORDINAL = 6;

    private static final int DID_CHANGE_OPENER_ORDINAL = 7;

    private static final int ADVANCE_FOCUS_ORDINAL = 8;

    private static final int ROUTE_MESSAGE_EVENT_ORDINAL = 9;

    private static final int PRINT_CROSS_PROCESS_SUBFRAME_ORDINAL = 10;

    private static final int DETACH_ORDINAL = 11;

    private static final int UPDATE_VIEWPORT_INTERSECTION_ORDINAL = 12;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements RemoteFrameHost.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void setInheritedEffectiveTouchAction(
int touchAction) {

            RemoteFrameHostSetInheritedEffectiveTouchActionParams _message = new RemoteFrameHostSetInheritedEffectiveTouchActionParams();

            _message.touchAction = touchAction;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_INHERITED_EFFECTIVE_TOUCH_ACTION_ORDINAL)));

        }


        @Override
        public void updateRenderThrottlingStatus(
boolean isThrottled, boolean subtreeThrottled) {

            RemoteFrameHostUpdateRenderThrottlingStatusParams _message = new RemoteFrameHostUpdateRenderThrottlingStatusParams();

            _message.isThrottled = isThrottled;

            _message.subtreeThrottled = subtreeThrottled;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_RENDER_THROTTLING_STATUS_ORDINAL)));

        }


        @Override
        public void visibilityChanged(
int visibility) {

            RemoteFrameHostVisibilityChangedParams _message = new RemoteFrameHostVisibilityChangedParams();

            _message.visibility = visibility;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(VISIBILITY_CHANGED_ORDINAL)));

        }


        @Override
        public void didFocusFrame(
) {

            RemoteFrameHostDidFocusFrameParams _message = new RemoteFrameHostDidFocusFrameParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_FOCUS_FRAME_ORDINAL)));

        }


        @Override
        public void checkCompleted(
) {

            RemoteFrameHostCheckCompletedParams _message = new RemoteFrameHostCheckCompletedParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CHECK_COMPLETED_ORDINAL)));

        }


        @Override
        public void capturePaintPreviewOfCrossProcessSubframe(
org.chromium.gfx.mojom.Rect clipRect, org.chromium.mojo_base.mojom.UnguessableToken guid) {

            RemoteFrameHostCapturePaintPreviewOfCrossProcessSubframeParams _message = new RemoteFrameHostCapturePaintPreviewOfCrossProcessSubframeParams();

            _message.clipRect = clipRect;

            _message.guid = guid;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CAPTURE_PAINT_PREVIEW_OF_CROSS_PROCESS_SUBFRAME_ORDINAL)));

        }


        @Override
        public void setIsInert(
boolean inert) {

            RemoteFrameHostSetIsInertParams _message = new RemoteFrameHostSetIsInertParams();

            _message.inert = inert;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_IS_INERT_ORDINAL)));

        }


        @Override
        public void didChangeOpener(
org.chromium.mojo_base.mojom.UnguessableToken openerFrame) {

            RemoteFrameHostDidChangeOpenerParams _message = new RemoteFrameHostDidChangeOpenerParams();

            _message.openerFrame = openerFrame;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_OPENER_ORDINAL)));

        }


        @Override
        public void advanceFocus(
int focusType, org.chromium.mojo_base.mojom.UnguessableToken sourceFrameToken) {

            RemoteFrameHostAdvanceFocusParams _message = new RemoteFrameHostAdvanceFocusParams();

            _message.focusType = focusType;

            _message.sourceFrameToken = sourceFrameToken;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADVANCE_FOCUS_ORDINAL)));

        }


        @Override
        public void routeMessageEvent(
org.chromium.mojo_base.mojom.UnguessableToken sourceFrameToken, org.chromium.mojo_base.mojom.String16 sourceOrigin, org.chromium.mojo_base.mojom.String16 targetOrigin, TransferableMessage message) {

            RemoteFrameHostRouteMessageEventParams _message = new RemoteFrameHostRouteMessageEventParams();

            _message.sourceFrameToken = sourceFrameToken;

            _message.sourceOrigin = sourceOrigin;

            _message.targetOrigin = targetOrigin;

            _message.message = message;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ROUTE_MESSAGE_EVENT_ORDINAL)));

        }


        @Override
        public void printCrossProcessSubframe(
org.chromium.gfx.mojom.Rect frameContentRect, int documentCookie) {

            RemoteFrameHostPrintCrossProcessSubframeParams _message = new RemoteFrameHostPrintCrossProcessSubframeParams();

            _message.frameContentRect = frameContentRect;

            _message.documentCookie = documentCookie;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(PRINT_CROSS_PROCESS_SUBFRAME_ORDINAL)));

        }


        @Override
        public void detach(
) {

            RemoteFrameHostDetachParams _message = new RemoteFrameHostDetachParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DETACH_ORDINAL)));

        }


        @Override
        public void updateViewportIntersection(
ViewportIntersectionState intersectionState) {

            RemoteFrameHostUpdateViewportIntersectionParams _message = new RemoteFrameHostUpdateViewportIntersectionParams();

            _message.intersectionState = intersectionState;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_VIEWPORT_INTERSECTION_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<RemoteFrameHost> {

        Stub(org.chromium.mojo.system.Core core, RemoteFrameHost impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                RemoteFrameHost_Internal.MANAGER, messageWithHeader);





                    case SET_INHERITED_EFFECTIVE_TOUCH_ACTION_ORDINAL: {

                        RemoteFrameHostSetInheritedEffectiveTouchActionParams data =
                                RemoteFrameHostSetInheritedEffectiveTouchActionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setInheritedEffectiveTouchAction(data.touchAction);
                        return true;
                    }





                    case UPDATE_RENDER_THROTTLING_STATUS_ORDINAL: {

                        RemoteFrameHostUpdateRenderThrottlingStatusParams data =
                                RemoteFrameHostUpdateRenderThrottlingStatusParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateRenderThrottlingStatus(data.isThrottled, data.subtreeThrottled);
                        return true;
                    }





                    case VISIBILITY_CHANGED_ORDINAL: {

                        RemoteFrameHostVisibilityChangedParams data =
                                RemoteFrameHostVisibilityChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().visibilityChanged(data.visibility);
                        return true;
                    }





                    case DID_FOCUS_FRAME_ORDINAL: {

                        RemoteFrameHostDidFocusFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didFocusFrame();
                        return true;
                    }





                    case CHECK_COMPLETED_ORDINAL: {

                        RemoteFrameHostCheckCompletedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().checkCompleted();
                        return true;
                    }





                    case CAPTURE_PAINT_PREVIEW_OF_CROSS_PROCESS_SUBFRAME_ORDINAL: {

                        RemoteFrameHostCapturePaintPreviewOfCrossProcessSubframeParams data =
                                RemoteFrameHostCapturePaintPreviewOfCrossProcessSubframeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().capturePaintPreviewOfCrossProcessSubframe(data.clipRect, data.guid);
                        return true;
                    }





                    case SET_IS_INERT_ORDINAL: {

                        RemoteFrameHostSetIsInertParams data =
                                RemoteFrameHostSetIsInertParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setIsInert(data.inert);
                        return true;
                    }





                    case DID_CHANGE_OPENER_ORDINAL: {

                        RemoteFrameHostDidChangeOpenerParams data =
                                RemoteFrameHostDidChangeOpenerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeOpener(data.openerFrame);
                        return true;
                    }





                    case ADVANCE_FOCUS_ORDINAL: {

                        RemoteFrameHostAdvanceFocusParams data =
                                RemoteFrameHostAdvanceFocusParams.deserialize(messageWithHeader.getPayload());

                        getImpl().advanceFocus(data.focusType, data.sourceFrameToken);
                        return true;
                    }





                    case ROUTE_MESSAGE_EVENT_ORDINAL: {

                        RemoteFrameHostRouteMessageEventParams data =
                                RemoteFrameHostRouteMessageEventParams.deserialize(messageWithHeader.getPayload());

                        getImpl().routeMessageEvent(data.sourceFrameToken, data.sourceOrigin, data.targetOrigin, data.message);
                        return true;
                    }





                    case PRINT_CROSS_PROCESS_SUBFRAME_ORDINAL: {

                        RemoteFrameHostPrintCrossProcessSubframeParams data =
                                RemoteFrameHostPrintCrossProcessSubframeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().printCrossProcessSubframe(data.frameContentRect, data.documentCookie);
                        return true;
                    }





                    case DETACH_ORDINAL: {

                        RemoteFrameHostDetachParams.deserialize(messageWithHeader.getPayload());

                        getImpl().detach();
                        return true;
                    }





                    case UPDATE_VIEWPORT_INTERSECTION_ORDINAL: {

                        RemoteFrameHostUpdateViewportIntersectionParams data =
                                RemoteFrameHostUpdateViewportIntersectionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateViewportIntersection(data.intersectionState);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), RemoteFrameHost_Internal.MANAGER, messageWithHeader, receiver);




























                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class RemoteFrameHostSetInheritedEffectiveTouchActionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int touchAction;

        private RemoteFrameHostSetInheritedEffectiveTouchActionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameHostSetInheritedEffectiveTouchActionParams() {
            this(0);
        }

        public static RemoteFrameHostSetInheritedEffectiveTouchActionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameHostSetInheritedEffectiveTouchActionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameHostSetInheritedEffectiveTouchActionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameHostSetInheritedEffectiveTouchActionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameHostSetInheritedEffectiveTouchActionParams(elementsOrVersion);
                    {
                        
                    result.touchAction = decoder0.readInt(8);
                        org.chromium.cc.mojom.TouchAction.validate(result.touchAction);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.touchAction, 8);
        }
    }



    
    static final class RemoteFrameHostUpdateRenderThrottlingStatusParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean isThrottled;
        public boolean subtreeThrottled;

        private RemoteFrameHostUpdateRenderThrottlingStatusParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameHostUpdateRenderThrottlingStatusParams() {
            this(0);
        }

        public static RemoteFrameHostUpdateRenderThrottlingStatusParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameHostUpdateRenderThrottlingStatusParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameHostUpdateRenderThrottlingStatusParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameHostUpdateRenderThrottlingStatusParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameHostUpdateRenderThrottlingStatusParams(elementsOrVersion);
                    {
                        
                    result.isThrottled = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.subtreeThrottled = decoder0.readBoolean(8, 1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.isThrottled, 8, 0);
            
            encoder0.encode(this.subtreeThrottled, 8, 1);
        }
    }



    
    static final class RemoteFrameHostVisibilityChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int visibility;

        private RemoteFrameHostVisibilityChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameHostVisibilityChangedParams() {
            this(0);
        }

        public static RemoteFrameHostVisibilityChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameHostVisibilityChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameHostVisibilityChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameHostVisibilityChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameHostVisibilityChangedParams(elementsOrVersion);
                    {
                        
                    result.visibility = decoder0.readInt(8);
                        FrameVisibility.validate(result.visibility);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.visibility, 8);
        }
    }



    
    static final class RemoteFrameHostDidFocusFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private RemoteFrameHostDidFocusFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameHostDidFocusFrameParams() {
            this(0);
        }

        public static RemoteFrameHostDidFocusFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameHostDidFocusFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameHostDidFocusFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameHostDidFocusFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameHostDidFocusFrameParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class RemoteFrameHostCheckCompletedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private RemoteFrameHostCheckCompletedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameHostCheckCompletedParams() {
            this(0);
        }

        public static RemoteFrameHostCheckCompletedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameHostCheckCompletedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameHostCheckCompletedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameHostCheckCompletedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameHostCheckCompletedParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class RemoteFrameHostCapturePaintPreviewOfCrossProcessSubframeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Rect clipRect;
        public org.chromium.mojo_base.mojom.UnguessableToken guid;

        private RemoteFrameHostCapturePaintPreviewOfCrossProcessSubframeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameHostCapturePaintPreviewOfCrossProcessSubframeParams() {
            this(0);
        }

        public static RemoteFrameHostCapturePaintPreviewOfCrossProcessSubframeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameHostCapturePaintPreviewOfCrossProcessSubframeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameHostCapturePaintPreviewOfCrossProcessSubframeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameHostCapturePaintPreviewOfCrossProcessSubframeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameHostCapturePaintPreviewOfCrossProcessSubframeParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.clipRect = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.guid = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.clipRect, 8, false);
            
            encoder0.encode(this.guid, 16, false);
        }
    }



    
    static final class RemoteFrameHostSetIsInertParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean inert;

        private RemoteFrameHostSetIsInertParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameHostSetIsInertParams() {
            this(0);
        }

        public static RemoteFrameHostSetIsInertParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameHostSetIsInertParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameHostSetIsInertParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameHostSetIsInertParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameHostSetIsInertParams(elementsOrVersion);
                    {
                        
                    result.inert = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.inert, 8, 0);
        }
    }



    
    static final class RemoteFrameHostDidChangeOpenerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken openerFrame;

        private RemoteFrameHostDidChangeOpenerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameHostDidChangeOpenerParams() {
            this(0);
        }

        public static RemoteFrameHostDidChangeOpenerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameHostDidChangeOpenerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameHostDidChangeOpenerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameHostDidChangeOpenerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameHostDidChangeOpenerParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.openerFrame = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.openerFrame, 8, true);
        }
    }



    
    static final class RemoteFrameHostAdvanceFocusParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int focusType;
        public org.chromium.mojo_base.mojom.UnguessableToken sourceFrameToken;

        private RemoteFrameHostAdvanceFocusParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameHostAdvanceFocusParams() {
            this(0);
        }

        public static RemoteFrameHostAdvanceFocusParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameHostAdvanceFocusParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameHostAdvanceFocusParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameHostAdvanceFocusParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameHostAdvanceFocusParams(elementsOrVersion);
                    {
                        
                    result.focusType = decoder0.readInt(8);
                        FocusType.validate(result.focusType);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.sourceFrameToken = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.focusType, 8);
            
            encoder0.encode(this.sourceFrameToken, 16, false);
        }
    }



    
    static final class RemoteFrameHostRouteMessageEventParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken sourceFrameToken;
        public org.chromium.mojo_base.mojom.String16 sourceOrigin;
        public org.chromium.mojo_base.mojom.String16 targetOrigin;
        public TransferableMessage message;

        private RemoteFrameHostRouteMessageEventParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameHostRouteMessageEventParams() {
            this(0);
        }

        public static RemoteFrameHostRouteMessageEventParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameHostRouteMessageEventParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameHostRouteMessageEventParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameHostRouteMessageEventParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameHostRouteMessageEventParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.sourceFrameToken = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.sourceOrigin = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.targetOrigin = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.message = TransferableMessage.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.sourceFrameToken, 8, true);
            
            encoder0.encode(this.sourceOrigin, 16, false);
            
            encoder0.encode(this.targetOrigin, 24, false);
            
            encoder0.encode(this.message, 32, false);
        }
    }



    
    static final class RemoteFrameHostPrintCrossProcessSubframeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Rect frameContentRect;
        public int documentCookie;

        private RemoteFrameHostPrintCrossProcessSubframeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameHostPrintCrossProcessSubframeParams() {
            this(0);
        }

        public static RemoteFrameHostPrintCrossProcessSubframeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameHostPrintCrossProcessSubframeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameHostPrintCrossProcessSubframeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameHostPrintCrossProcessSubframeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameHostPrintCrossProcessSubframeParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.frameContentRect = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }
                    {
                        
                    result.documentCookie = decoder0.readInt(16);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.frameContentRect, 8, false);
            
            encoder0.encode(this.documentCookie, 16);
        }
    }



    
    static final class RemoteFrameHostDetachParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private RemoteFrameHostDetachParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameHostDetachParams() {
            this(0);
        }

        public static RemoteFrameHostDetachParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameHostDetachParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameHostDetachParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameHostDetachParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameHostDetachParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class RemoteFrameHostUpdateViewportIntersectionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ViewportIntersectionState intersectionState;

        private RemoteFrameHostUpdateViewportIntersectionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameHostUpdateViewportIntersectionParams() {
            this(0);
        }

        public static RemoteFrameHostUpdateViewportIntersectionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameHostUpdateViewportIntersectionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameHostUpdateViewportIntersectionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameHostUpdateViewportIntersectionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameHostUpdateViewportIntersectionParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.intersectionState = ViewportIntersectionState.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.intersectionState, 8, false);
        }
    }



}
