// LocalFrameHost.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/frame/frame.mojom
//

package org.chromium.blink.mojom;


public interface LocalFrameHost extends org.chromium.mojo.bindings.Interface {



    public interface Proxy extends LocalFrameHost, org.chromium.mojo.bindings.Interface.Proxy {
    }

    Manager<LocalFrameHost, LocalFrameHost.Proxy> MANAGER = LocalFrameHost_Internal.MANAGER;


    void enterFullscreen(
FullscreenOptions options, 
EnterFullscreenResponse callback);

    interface EnterFullscreenResponse extends org.chromium.mojo.bindings.Callbacks.Callback1<Boolean> { }



    void exitFullscreen(
);



    void fullscreenStateChanged(
boolean isFullscreen);



    void registerProtocolHandler(
String scheme, org.chromium.url.mojom.Url url, boolean userGesture);



    void unregisterProtocolHandler(
String scheme, org.chromium.url.mojom.Url url, boolean userGesture);



    void didDisplayInsecureContent(
);



    void didContainInsecureFormAction(
);



    void documentAvailableInMainFrame(
boolean usesTemporaryZoomLevel);



    void setNeedsOcclusionTracking(
boolean needsTracking);



    void setVirtualKeyboardOverlayPolicy(
boolean vkOverlaysContent);



    void visibilityChanged(
int visibility);



    void didChangeThemeColor(
org.chromium.skia.mojom.SkColor themeColor);



    void didChangeBackgroundColor(
org.chromium.skia.mojom.SkColor backgroundColor, boolean colorAdjust);



    void didFailLoadWithError(
org.chromium.url.mojom.Url url, int errorCode);



    void didFocusFrame(
);



    void didCallFocus(
);



    void didAddContentSecurityPolicies(
org.chromium.network.mojom.ContentSecurityPolicy[] policies);



    void enforceInsecureRequestPolicy(
int policyBitmap);



    void enforceInsecureNavigationsSet(
int[] set);



    void didChangeActiveSchedulerTrackedFeatures(
long featuresMask);



    void suddenTerminationDisablerChanged(
boolean present, int disablerType);



    void hadStickyUserActivationBeforeNavigationChanged(
boolean hasGesture);



    void scrollRectToVisibleInParentFrame(
org.chromium.gfx.mojom.Rect rectToScroll, ScrollIntoViewParams params);



    void bubbleLogicalScrollInParentFrame(
int direction, int granularity);



    void didAccessInitialDocument(
);



    void didBlockNavigation(
org.chromium.url.mojom.Url blockedUrl, org.chromium.url.mojom.Url initiatorUrl, int reason);



    void didChangeLoadProgress(
double loadProgress);



    void didFinishLoad(
org.chromium.url.mojom.Url validatedUrl);



    void dispatchLoad(
);



    void goToEntryAtOffset(
int offset, boolean hasUserGesture);



    void renderFallbackContentInParentProcess(
);



    void updateTitle(
org.chromium.mojo_base.mojom.String16 title, int titleDirection);



    void updateUserActivationState(
int updateType, int notificationType);



    void handleAccessibilityFindInPageResult(
FindInPageResultAxParams params);



    void handleAccessibilityFindInPageTermination(
);



    void documentOnLoadCompleted(
);



    void forwardResourceTimingToParent(
ResourceTimingInfo timing);



    void didFinishDocumentLoad(
);



    void runModalAlertDialog(
org.chromium.mojo_base.mojom.String16 alertMessage, 
RunModalAlertDialogResponse callback);

    interface RunModalAlertDialogResponse extends org.chromium.mojo.bindings.Callbacks.Callback0 { }



    void runModalConfirmDialog(
org.chromium.mojo_base.mojom.String16 alertMessage, 
RunModalConfirmDialogResponse callback);

    interface RunModalConfirmDialogResponse extends org.chromium.mojo.bindings.Callbacks.Callback1<Boolean> { }



    void runModalPromptDialog(
org.chromium.mojo_base.mojom.String16 alertMessage, org.chromium.mojo_base.mojom.String16 defaultValue, 
RunModalPromptDialogResponse callback);

    interface RunModalPromptDialogResponse extends org.chromium.mojo.bindings.Callbacks.Callback2<Boolean, org.chromium.mojo_base.mojom.String16> { }



    void runBeforeUnloadConfirm(
boolean isReload, 
RunBeforeUnloadConfirmResponse callback);

    interface RunBeforeUnloadConfirmResponse extends org.chromium.mojo.bindings.Callbacks.Callback1<Boolean> { }



    void updateFaviconUrl(
FaviconUrl[] faviconUrls);



    void downloadUrl(
DownloadUrlParams params);



    void focusedElementChanged(
boolean isEditableElement, org.chromium.gfx.mojom.Rect boundsInFrameWidget, int focusType);



    void textSelectionChanged(
org.chromium.mojo_base.mojom.BigString16 text, int offset, org.chromium.gfx.mojom.Range range);



    void showPopupMenu(
PopupMenuClient popupClient, org.chromium.gfx.mojom.Rect bounds, int itemHeight, double fontSize, int selectedItem, MenuItem[] menuItems, boolean rightAligned, boolean allowMultipleSelection);



    void didLoadResourceFromMemoryCache(
org.chromium.url.mojom.Url url, String httpMethod, String mimeType, int requestDestination);



    void didChangeFrameOwnerProperties(
org.chromium.mojo_base.mojom.UnguessableToken childFrameToken, FrameOwnerProperties frameOwnerProperties);



    void didChangeOpener(
org.chromium.mojo_base.mojom.UnguessableToken openerFrame);



    void didChangeFramePolicy(
org.chromium.mojo_base.mojom.UnguessableToken childFrameToken, FramePolicy framePolicy);



    void didChangeCspAttribute(
org.chromium.mojo_base.mojom.UnguessableToken childFrameToken, org.chromium.network.mojom.ContentSecurityPolicy parsedCspAttribute);



    void bindPolicyContainer(
org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported receiver);



    void capturePaintPreviewOfSubframe(
org.chromium.gfx.mojom.Rect clipRect, org.chromium.mojo_base.mojom.UnguessableToken guid);



    void detach(
);


}
