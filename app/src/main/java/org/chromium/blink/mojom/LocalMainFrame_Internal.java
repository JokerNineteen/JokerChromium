// LocalMainFrame_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/frame/frame.mojom
//

package org.chromium.blink.mojom;


class LocalMainFrame_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<LocalMainFrame, LocalMainFrame.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<LocalMainFrame, LocalMainFrame.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.LocalMainFrame";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, LocalMainFrame impl) {
            return new Stub(core, impl);
        }

        @Override
        public LocalMainFrame[] buildArray(int size) {
          return new LocalMainFrame[size];
        }
    };


    private static final int ANIMATE_DOUBLE_TAP_ZOOM_ORDINAL = 0;

    private static final int SET_SCALE_FACTOR_ORDINAL = 1;

    private static final int CLOSE_PAGE_ORDINAL = 2;

    private static final int PLUGIN_ACTION_AT_ORDINAL = 3;

    private static final int SET_INITIAL_FOCUS_ORDINAL = 4;

    private static final int ENABLE_PREFERRED_SIZE_CHANGED_MODE_ORDINAL = 5;

    private static final int ZOOM_TO_FIND_IN_PAGE_RECT_ORDINAL = 6;

    private static final int INSTALL_COOP_ACCESS_MONITOR_ORDINAL = 7;

    private static final int ON_PORTAL_ACTIVATED_ORDINAL = 8;

    private static final int FORWARD_MESSAGE_FROM_HOST_ORDINAL = 9;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements LocalMainFrame.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void animateDoubleTapZoom(
org.chromium.gfx.mojom.Point point, org.chromium.gfx.mojom.Rect rect) {

            LocalMainFrameAnimateDoubleTapZoomParams _message = new LocalMainFrameAnimateDoubleTapZoomParams();

            _message.point = point;

            _message.rect = rect;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ANIMATE_DOUBLE_TAP_ZOOM_ORDINAL)));

        }


        @Override
        public void setScaleFactor(
float scale) {

            LocalMainFrameSetScaleFactorParams _message = new LocalMainFrameSetScaleFactorParams();

            _message.scale = scale;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_SCALE_FACTOR_ORDINAL)));

        }


        @Override
        public void closePage(

ClosePageResponse callback) {

            LocalMainFrameClosePageParams _message = new LocalMainFrameClosePageParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CLOSE_PAGE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalMainFrameClosePageResponseParamsForwardToCallback(callback));

        }


        @Override
        public void pluginActionAt(
org.chromium.gfx.mojom.Point location, int action) {

            LocalMainFramePluginActionAtParams _message = new LocalMainFramePluginActionAtParams();

            _message.location = location;

            _message.action = action;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(PLUGIN_ACTION_AT_ORDINAL)));

        }


        @Override
        public void setInitialFocus(
boolean reverse) {

            LocalMainFrameSetInitialFocusParams _message = new LocalMainFrameSetInitialFocusParams();

            _message.reverse = reverse;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_INITIAL_FOCUS_ORDINAL)));

        }


        @Override
        public void enablePreferredSizeChangedMode(
) {

            LocalMainFrameEnablePreferredSizeChangedModeParams _message = new LocalMainFrameEnablePreferredSizeChangedModeParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENABLE_PREFERRED_SIZE_CHANGED_MODE_ORDINAL)));

        }


        @Override
        public void zoomToFindInPageRect(
org.chromium.gfx.mojom.Rect rectInRootFrame) {

            LocalMainFrameZoomToFindInPageRectParams _message = new LocalMainFrameZoomToFindInPageRectParams();

            _message.rectInRootFrame = rectInRootFrame;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ZOOM_TO_FIND_IN_PAGE_RECT_ORDINAL)));

        }


        @Override
        public void installCoopAccessMonitor(
int reportType, org.chromium.mojo_base.mojom.UnguessableToken accessedWindow, org.chromium.network.mojom.CrossOriginOpenerPolicyReporter reporter, boolean endpointDefined, String reportedWindowUrl) {

            LocalMainFrameInstallCoopAccessMonitorParams _message = new LocalMainFrameInstallCoopAccessMonitorParams();

            _message.reportType = reportType;

            _message.accessedWindow = accessedWindow;

            _message.reporter = reporter;

            _message.endpointDefined = endpointDefined;

            _message.reportedWindowUrl = reportedWindowUrl;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(INSTALL_COOP_ACCESS_MONITOR_ORDINAL)));

        }


        @Override
        public void onPortalActivated(
PortalToken portalToken, org.chromium.mojo.bindings.AssociatedInterfaceNotSupported portal, org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported portalClient, TransferableMessage data, long traceId, 
OnPortalActivatedResponse callback) {

            LocalMainFrameOnPortalActivatedParams _message = new LocalMainFrameOnPortalActivatedParams();

            _message.portalToken = portalToken;

            _message.portal = portal;

            _message.portalClient = portalClient;

            _message.data = data;

            _message.traceId = traceId;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_PORTAL_ACTIVATED_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalMainFrameOnPortalActivatedResponseParamsForwardToCallback(callback));

        }


        @Override
        public void forwardMessageFromHost(
TransferableMessage message, org.chromium.url.internal.mojom.Origin sourceOrigin) {

            LocalMainFrameForwardMessageFromHostParams _message = new LocalMainFrameForwardMessageFromHostParams();

            _message.message = message;

            _message.sourceOrigin = sourceOrigin;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(FORWARD_MESSAGE_FROM_HOST_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<LocalMainFrame> {

        Stub(org.chromium.mojo.system.Core core, LocalMainFrame impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                LocalMainFrame_Internal.MANAGER, messageWithHeader);





                    case ANIMATE_DOUBLE_TAP_ZOOM_ORDINAL: {

                        LocalMainFrameAnimateDoubleTapZoomParams data =
                                LocalMainFrameAnimateDoubleTapZoomParams.deserialize(messageWithHeader.getPayload());

                        getImpl().animateDoubleTapZoom(data.point, data.rect);
                        return true;
                    }





                    case SET_SCALE_FACTOR_ORDINAL: {

                        LocalMainFrameSetScaleFactorParams data =
                                LocalMainFrameSetScaleFactorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setScaleFactor(data.scale);
                        return true;
                    }







                    case PLUGIN_ACTION_AT_ORDINAL: {

                        LocalMainFramePluginActionAtParams data =
                                LocalMainFramePluginActionAtParams.deserialize(messageWithHeader.getPayload());

                        getImpl().pluginActionAt(data.location, data.action);
                        return true;
                    }





                    case SET_INITIAL_FOCUS_ORDINAL: {

                        LocalMainFrameSetInitialFocusParams data =
                                LocalMainFrameSetInitialFocusParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setInitialFocus(data.reverse);
                        return true;
                    }





                    case ENABLE_PREFERRED_SIZE_CHANGED_MODE_ORDINAL: {

                        LocalMainFrameEnablePreferredSizeChangedModeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enablePreferredSizeChangedMode();
                        return true;
                    }





                    case ZOOM_TO_FIND_IN_PAGE_RECT_ORDINAL: {

                        LocalMainFrameZoomToFindInPageRectParams data =
                                LocalMainFrameZoomToFindInPageRectParams.deserialize(messageWithHeader.getPayload());

                        getImpl().zoomToFindInPageRect(data.rectInRootFrame);
                        return true;
                    }





                    case INSTALL_COOP_ACCESS_MONITOR_ORDINAL: {

                        LocalMainFrameInstallCoopAccessMonitorParams data =
                                LocalMainFrameInstallCoopAccessMonitorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().installCoopAccessMonitor(data.reportType, data.accessedWindow, data.reporter, data.endpointDefined, data.reportedWindowUrl);
                        return true;
                    }







                    case FORWARD_MESSAGE_FROM_HOST_ORDINAL: {

                        LocalMainFrameForwardMessageFromHostParams data =
                                LocalMainFrameForwardMessageFromHostParams.deserialize(messageWithHeader.getPayload());

                        getImpl().forwardMessageFromHost(data.message, data.sourceOrigin);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), LocalMainFrame_Internal.MANAGER, messageWithHeader, receiver);











                    case CLOSE_PAGE_ORDINAL: {

                        LocalMainFrameClosePageParams.deserialize(messageWithHeader.getPayload());

                        getImpl().closePage(new LocalMainFrameClosePageResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }

















                    case ON_PORTAL_ACTIVATED_ORDINAL: {

                        LocalMainFrameOnPortalActivatedParams data =
                                LocalMainFrameOnPortalActivatedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onPortalActivated(data.portalToken, data.portal, data.portalClient, data.data, data.traceId, new LocalMainFrameOnPortalActivatedResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }




                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class LocalMainFrameAnimateDoubleTapZoomParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Point point;
        public org.chromium.gfx.mojom.Rect rect;

        private LocalMainFrameAnimateDoubleTapZoomParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameAnimateDoubleTapZoomParams() {
            this(0);
        }

        public static LocalMainFrameAnimateDoubleTapZoomParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameAnimateDoubleTapZoomParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameAnimateDoubleTapZoomParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameAnimateDoubleTapZoomParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameAnimateDoubleTapZoomParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.point = org.chromium.gfx.mojom.Point.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.rect = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.point, 8, false);
            
            encoder0.encode(this.rect, 16, false);
        }
    }



    
    static final class LocalMainFrameSetScaleFactorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public float scale;

        private LocalMainFrameSetScaleFactorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameSetScaleFactorParams() {
            this(0);
        }

        public static LocalMainFrameSetScaleFactorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameSetScaleFactorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameSetScaleFactorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameSetScaleFactorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameSetScaleFactorParams(elementsOrVersion);
                    {
                        
                    result.scale = decoder0.readFloat(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.scale, 8);
        }
    }



    
    static final class LocalMainFrameClosePageParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalMainFrameClosePageParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameClosePageParams() {
            this(0);
        }

        public static LocalMainFrameClosePageParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameClosePageParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameClosePageParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameClosePageParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameClosePageParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalMainFrameClosePageResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalMainFrameClosePageResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameClosePageResponseParams() {
            this(0);
        }

        public static LocalMainFrameClosePageResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameClosePageResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameClosePageResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameClosePageResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameClosePageResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class LocalMainFrameClosePageResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalMainFrame.ClosePageResponse mCallback;

        LocalMainFrameClosePageResponseParamsForwardToCallback(LocalMainFrame.ClosePageResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CLOSE_PAGE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalMainFrameClosePageResponseParamsProxyToResponder implements LocalMainFrame.ClosePageResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalMainFrameClosePageResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            LocalMainFrameClosePageResponseParams _response = new LocalMainFrameClosePageResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CLOSE_PAGE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalMainFramePluginActionAtParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Point location;
        public int action;

        private LocalMainFramePluginActionAtParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFramePluginActionAtParams() {
            this(0);
        }

        public static LocalMainFramePluginActionAtParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFramePluginActionAtParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFramePluginActionAtParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFramePluginActionAtParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFramePluginActionAtParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.location = org.chromium.gfx.mojom.Point.decode(decoder1);
                    }
                    {
                        
                    result.action = decoder0.readInt(16);
                        PluginActionType.validate(result.action);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.location, 8, false);
            
            encoder0.encode(this.action, 16);
        }
    }



    
    static final class LocalMainFrameSetInitialFocusParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean reverse;

        private LocalMainFrameSetInitialFocusParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameSetInitialFocusParams() {
            this(0);
        }

        public static LocalMainFrameSetInitialFocusParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameSetInitialFocusParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameSetInitialFocusParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameSetInitialFocusParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameSetInitialFocusParams(elementsOrVersion);
                    {
                        
                    result.reverse = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.reverse, 8, 0);
        }
    }



    
    static final class LocalMainFrameEnablePreferredSizeChangedModeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalMainFrameEnablePreferredSizeChangedModeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameEnablePreferredSizeChangedModeParams() {
            this(0);
        }

        public static LocalMainFrameEnablePreferredSizeChangedModeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameEnablePreferredSizeChangedModeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameEnablePreferredSizeChangedModeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameEnablePreferredSizeChangedModeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameEnablePreferredSizeChangedModeParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalMainFrameZoomToFindInPageRectParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Rect rectInRootFrame;

        private LocalMainFrameZoomToFindInPageRectParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameZoomToFindInPageRectParams() {
            this(0);
        }

        public static LocalMainFrameZoomToFindInPageRectParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameZoomToFindInPageRectParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameZoomToFindInPageRectParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameZoomToFindInPageRectParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameZoomToFindInPageRectParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.rectInRootFrame = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.rectInRootFrame, 8, false);
        }
    }



    
    static final class LocalMainFrameInstallCoopAccessMonitorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int reportType;
        public org.chromium.mojo_base.mojom.UnguessableToken accessedWindow;
        public org.chromium.network.mojom.CrossOriginOpenerPolicyReporter reporter;
        public boolean endpointDefined;
        public String reportedWindowUrl;

        private LocalMainFrameInstallCoopAccessMonitorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameInstallCoopAccessMonitorParams() {
            this(0);
        }

        public static LocalMainFrameInstallCoopAccessMonitorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameInstallCoopAccessMonitorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameInstallCoopAccessMonitorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameInstallCoopAccessMonitorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameInstallCoopAccessMonitorParams(elementsOrVersion);
                    {
                        
                    result.reportType = decoder0.readInt(8);
                        org.chromium.network.mojom.CoopAccessReportType.validate(result.reportType);
                    }
                    {
                        
                    result.endpointDefined = decoder0.readBoolean(12, 0);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.accessedWindow = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    result.reporter = decoder0.readServiceInterface(24, false, org.chromium.network.mojom.CrossOriginOpenerPolicyReporter.MANAGER);
                    }
                    {
                        
                    result.reportedWindowUrl = decoder0.readString(32, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.reportType, 8);
            
            encoder0.encode(this.endpointDefined, 12, 0);
            
            encoder0.encode(this.accessedWindow, 16, false);
            
            encoder0.encode(this.reporter, 24, false, org.chromium.network.mojom.CrossOriginOpenerPolicyReporter.MANAGER);
            
            encoder0.encode(this.reportedWindowUrl, 32, false);
        }
    }



    
    static final class LocalMainFrameOnPortalActivatedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 48;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(48, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PortalToken portalToken;
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported portal;
        public org.chromium.mojo.bindings.AssociatedInterfaceRequestNotSupported portalClient;
        public TransferableMessage data;
        public long traceId;

        private LocalMainFrameOnPortalActivatedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameOnPortalActivatedParams() {
            this(0);
        }

        public static LocalMainFrameOnPortalActivatedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameOnPortalActivatedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameOnPortalActivatedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameOnPortalActivatedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameOnPortalActivatedParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.portalToken = PortalToken.decode(decoder1);
                    }
                    {
                        
                    result.portal = decoder0.readAssociatedServiceInterfaceNotSupported(16, false);
                    }
                    {
                        
                    result.portalClient = decoder0.readAssociatedInterfaceRequestNotSupported(24, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.data = TransferableMessage.decode(decoder1);
                    }
                    {
                        
                    result.traceId = decoder0.readLong(40);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.portalToken, 8, false);
            
            encoder0.encode(this.portal, 16, false);
            
            encoder0.encode(this.portalClient, 24, false);
            
            encoder0.encode(this.data, 32, false);
            
            encoder0.encode(this.traceId, 40);
        }
    }



    
    static final class LocalMainFrameOnPortalActivatedResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int result;

        private LocalMainFrameOnPortalActivatedResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameOnPortalActivatedResponseParams() {
            this(0);
        }

        public static LocalMainFrameOnPortalActivatedResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameOnPortalActivatedResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameOnPortalActivatedResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameOnPortalActivatedResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameOnPortalActivatedResponseParams(elementsOrVersion);
                    {
                        
                    result.result = decoder0.readInt(8);
                        PortalActivateResult.validate(result.result);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8);
        }
    }

    static class LocalMainFrameOnPortalActivatedResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalMainFrame.OnPortalActivatedResponse mCallback;

        LocalMainFrameOnPortalActivatedResponseParamsForwardToCallback(LocalMainFrame.OnPortalActivatedResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ON_PORTAL_ACTIVATED_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                LocalMainFrameOnPortalActivatedResponseParams response = LocalMainFrameOnPortalActivatedResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalMainFrameOnPortalActivatedResponseParamsProxyToResponder implements LocalMainFrame.OnPortalActivatedResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalMainFrameOnPortalActivatedResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer result) {
            LocalMainFrameOnPortalActivatedResponseParams _response = new LocalMainFrameOnPortalActivatedResponseParams();

            _response.result = result;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_PORTAL_ACTIVATED_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalMainFrameForwardMessageFromHostParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public TransferableMessage message;
        public org.chromium.url.internal.mojom.Origin sourceOrigin;

        private LocalMainFrameForwardMessageFromHostParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameForwardMessageFromHostParams() {
            this(0);
        }

        public static LocalMainFrameForwardMessageFromHostParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameForwardMessageFromHostParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameForwardMessageFromHostParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameForwardMessageFromHostParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameForwardMessageFromHostParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.message = TransferableMessage.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.sourceOrigin = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.message, 8, false);
            
            encoder0.encode(this.sourceOrigin, 16, false);
        }
    }



}
