// RemoteFrame_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/frame/frame.mojom
//

package org.chromium.blink.mojom;


class RemoteFrame_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<RemoteFrame, RemoteFrame.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<RemoteFrame, RemoteFrame.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.RemoteFrame";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, RemoteFrame impl) {
            return new Stub(core, impl);
        }

        @Override
        public RemoteFrame[] buildArray(int size) {
          return new RemoteFrame[size];
        }
    };


    private static final int WILL_ENTER_FULLSCREEN_ORDINAL = 0;

    private static final int ADD_REPLICATED_CONTENT_SECURITY_POLICIES_ORDINAL = 1;

    private static final int RESET_REPLICATED_CONTENT_SECURITY_POLICY_ORDINAL = 2;

    private static final int ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL = 3;

    private static final int SET_FRAME_OWNER_PROPERTIES_ORDINAL = 4;

    private static final int ENFORCE_INSECURE_REQUEST_POLICY_ORDINAL = 5;

    private static final int SET_REPLICATED_ORIGIN_ORDINAL = 6;

    private static final int SET_REPLICATED_AD_FRAME_TYPE_ORDINAL = 7;

    private static final int SET_REPLICATED_NAME_ORDINAL = 8;

    private static final int DISPATCH_LOAD_EVENT_FOR_FRAME_OWNER_ORDINAL = 9;

    private static final int SET_NEEDS_OCCLUSION_TRACKING_ORDINAL = 10;

    private static final int COLLAPSE_ORDINAL = 11;

    private static final int FOCUS_ORDINAL = 12;

    private static final int SET_HAD_STICKY_USER_ACTIVATION_BEFORE_NAVIGATION_ORDINAL = 13;

    private static final int BUBBLE_LOGICAL_SCROLL_ORDINAL = 14;

    private static final int UPDATE_USER_ACTIVATION_STATE_ORDINAL = 15;

    private static final int SET_EMBEDDING_TOKEN_ORDINAL = 16;

    private static final int SET_PAGE_FOCUS_ORDINAL = 17;

    private static final int RENDER_FALLBACK_CONTENT_ORDINAL = 18;

    private static final int ADD_RESOURCE_TIMING_FROM_CHILD_ORDINAL = 19;

    private static final int SCROLL_RECT_TO_VISIBLE_ORDINAL = 20;

    private static final int DID_START_LOADING_ORDINAL = 21;

    private static final int DID_STOP_LOADING_ORDINAL = 22;

    private static final int INTRINSIC_SIZING_INFO_OF_CHILD_CHANGED_ORDINAL = 23;

    private static final int DID_SET_FRAME_POLICY_HEADERS_ORDINAL = 24;

    private static final int DID_UPDATE_FRAME_POLICY_ORDINAL = 25;

    private static final int UPDATE_OPENER_ORDINAL = 26;

    private static final int DETACH_AND_DISPOSE_ORDINAL = 27;

    private static final int ENABLE_AUTO_RESIZE_ORDINAL = 28;

    private static final int DISABLE_AUTO_RESIZE_ORDINAL = 29;

    private static final int DID_UPDATE_VISUAL_PROPERTIES_ORDINAL = 30;

    private static final int SET_FRAME_SINK_ID_ORDINAL = 31;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements RemoteFrame.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void willEnterFullscreen(
FullscreenOptions options) {

            RemoteFrameWillEnterFullscreenParams _message = new RemoteFrameWillEnterFullscreenParams();

            _message.options = options;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(WILL_ENTER_FULLSCREEN_ORDINAL)));

        }


        @Override
        public void addReplicatedContentSecurityPolicies(
org.chromium.network.mojom.ContentSecurityPolicy[] csps) {

            RemoteFrameAddReplicatedContentSecurityPoliciesParams _message = new RemoteFrameAddReplicatedContentSecurityPoliciesParams();

            _message.csps = csps;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADD_REPLICATED_CONTENT_SECURITY_POLICIES_ORDINAL)));

        }


        @Override
        public void resetReplicatedContentSecurityPolicy(
) {

            RemoteFrameResetReplicatedContentSecurityPolicyParams _message = new RemoteFrameResetReplicatedContentSecurityPolicyParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(RESET_REPLICATED_CONTENT_SECURITY_POLICY_ORDINAL)));

        }


        @Override
        public void enforceInsecureNavigationsSet(
int[] set) {

            RemoteFrameEnforceInsecureNavigationsSetParams _message = new RemoteFrameEnforceInsecureNavigationsSetParams();

            _message.set = set;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL)));

        }


        @Override
        public void setFrameOwnerProperties(
FrameOwnerProperties properties) {

            RemoteFrameSetFrameOwnerPropertiesParams _message = new RemoteFrameSetFrameOwnerPropertiesParams();

            _message.properties = properties;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_FRAME_OWNER_PROPERTIES_ORDINAL)));

        }


        @Override
        public void enforceInsecureRequestPolicy(
int policy) {

            RemoteFrameEnforceInsecureRequestPolicyParams _message = new RemoteFrameEnforceInsecureRequestPolicyParams();

            _message.policy = policy;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENFORCE_INSECURE_REQUEST_POLICY_ORDINAL)));

        }


        @Override
        public void setReplicatedOrigin(
org.chromium.url.internal.mojom.Origin origin, boolean isPotentiallyTrustworthyUniqueOrigin) {

            RemoteFrameSetReplicatedOriginParams _message = new RemoteFrameSetReplicatedOriginParams();

            _message.origin = origin;

            _message.isPotentiallyTrustworthyUniqueOrigin = isPotentiallyTrustworthyUniqueOrigin;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_REPLICATED_ORIGIN_ORDINAL)));

        }


        @Override
        public void setReplicatedAdFrameType(
int adFrameType) {

            RemoteFrameSetReplicatedAdFrameTypeParams _message = new RemoteFrameSetReplicatedAdFrameTypeParams();

            _message.adFrameType = adFrameType;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_REPLICATED_AD_FRAME_TYPE_ORDINAL)));

        }


        @Override
        public void setReplicatedName(
String name, String uniqueName) {

            RemoteFrameSetReplicatedNameParams _message = new RemoteFrameSetReplicatedNameParams();

            _message.name = name;

            _message.uniqueName = uniqueName;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_REPLICATED_NAME_ORDINAL)));

        }


        @Override
        public void dispatchLoadEventForFrameOwner(
) {

            RemoteFrameDispatchLoadEventForFrameOwnerParams _message = new RemoteFrameDispatchLoadEventForFrameOwnerParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DISPATCH_LOAD_EVENT_FOR_FRAME_OWNER_ORDINAL)));

        }


        @Override
        public void setNeedsOcclusionTracking(
boolean needsTracking) {

            RemoteFrameSetNeedsOcclusionTrackingParams _message = new RemoteFrameSetNeedsOcclusionTrackingParams();

            _message.needsTracking = needsTracking;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_NEEDS_OCCLUSION_TRACKING_ORDINAL)));

        }


        @Override
        public void collapse(
boolean collapsed) {

            RemoteFrameCollapseParams _message = new RemoteFrameCollapseParams();

            _message.collapsed = collapsed;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(COLLAPSE_ORDINAL)));

        }


        @Override
        public void focus(
) {

            RemoteFrameFocusParams _message = new RemoteFrameFocusParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(FOCUS_ORDINAL)));

        }


        @Override
        public void setHadStickyUserActivationBeforeNavigation(
boolean hasGesture) {

            RemoteFrameSetHadStickyUserActivationBeforeNavigationParams _message = new RemoteFrameSetHadStickyUserActivationBeforeNavigationParams();

            _message.hasGesture = hasGesture;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_HAD_STICKY_USER_ACTIVATION_BEFORE_NAVIGATION_ORDINAL)));

        }


        @Override
        public void bubbleLogicalScroll(
int direction, int granularity) {

            RemoteFrameBubbleLogicalScrollParams _message = new RemoteFrameBubbleLogicalScrollParams();

            _message.direction = direction;

            _message.granularity = granularity;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(BUBBLE_LOGICAL_SCROLL_ORDINAL)));

        }


        @Override
        public void updateUserActivationState(
int stateUpdateType, int notificationType) {

            RemoteFrameUpdateUserActivationStateParams _message = new RemoteFrameUpdateUserActivationStateParams();

            _message.stateUpdateType = stateUpdateType;

            _message.notificationType = notificationType;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_USER_ACTIVATION_STATE_ORDINAL)));

        }


        @Override
        public void setEmbeddingToken(
org.chromium.mojo_base.mojom.UnguessableToken embeddingToken) {

            RemoteFrameSetEmbeddingTokenParams _message = new RemoteFrameSetEmbeddingTokenParams();

            _message.embeddingToken = embeddingToken;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_EMBEDDING_TOKEN_ORDINAL)));

        }


        @Override
        public void setPageFocus(
boolean isFocused) {

            RemoteFrameSetPageFocusParams _message = new RemoteFrameSetPageFocusParams();

            _message.isFocused = isFocused;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_PAGE_FOCUS_ORDINAL)));

        }


        @Override
        public void renderFallbackContent(
) {

            RemoteFrameRenderFallbackContentParams _message = new RemoteFrameRenderFallbackContentParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(RENDER_FALLBACK_CONTENT_ORDINAL)));

        }


        @Override
        public void addResourceTimingFromChild(
ResourceTimingInfo timing) {

            RemoteFrameAddResourceTimingFromChildParams _message = new RemoteFrameAddResourceTimingFromChildParams();

            _message.timing = timing;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADD_RESOURCE_TIMING_FROM_CHILD_ORDINAL)));

        }


        @Override
        public void scrollRectToVisible(
org.chromium.gfx.mojom.Rect rect, ScrollIntoViewParams params) {

            RemoteFrameScrollRectToVisibleParams _message = new RemoteFrameScrollRectToVisibleParams();

            _message.rect = rect;

            _message.params = params;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SCROLL_RECT_TO_VISIBLE_ORDINAL)));

        }


        @Override
        public void didStartLoading(
) {

            RemoteFrameDidStartLoadingParams _message = new RemoteFrameDidStartLoadingParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_START_LOADING_ORDINAL)));

        }


        @Override
        public void didStopLoading(
) {

            RemoteFrameDidStopLoadingParams _message = new RemoteFrameDidStopLoadingParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_STOP_LOADING_ORDINAL)));

        }


        @Override
        public void intrinsicSizingInfoOfChildChanged(
IntrinsicSizingInfo sizingInfo) {

            RemoteFrameIntrinsicSizingInfoOfChildChangedParams _message = new RemoteFrameIntrinsicSizingInfoOfChildChangedParams();

            _message.sizingInfo = sizingInfo;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(INTRINSIC_SIZING_INFO_OF_CHILD_CHANGED_ORDINAL)));

        }


        @Override
        public void didSetFramePolicyHeaders(
int sandboxFlags, ParsedFeaturePolicyDeclaration[] parsedFeaturePolicy) {

            RemoteFrameDidSetFramePolicyHeadersParams _message = new RemoteFrameDidSetFramePolicyHeadersParams();

            _message.sandboxFlags = sandboxFlags;

            _message.parsedFeaturePolicy = parsedFeaturePolicy;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_SET_FRAME_POLICY_HEADERS_ORDINAL)));

        }


        @Override
        public void didUpdateFramePolicy(
FramePolicy framePolicy) {

            RemoteFrameDidUpdateFramePolicyParams _message = new RemoteFrameDidUpdateFramePolicyParams();

            _message.framePolicy = framePolicy;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_UPDATE_FRAME_POLICY_ORDINAL)));

        }


        @Override
        public void updateOpener(
FrameToken openerFrameToken) {

            RemoteFrameUpdateOpenerParams _message = new RemoteFrameUpdateOpenerParams();

            _message.openerFrameToken = openerFrameToken;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_OPENER_ORDINAL)));

        }


        @Override
        public void detachAndDispose(
) {

            RemoteFrameDetachAndDisposeParams _message = new RemoteFrameDetachAndDisposeParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DETACH_AND_DISPOSE_ORDINAL)));

        }


        @Override
        public void enableAutoResize(
org.chromium.gfx.mojom.Size minSize, org.chromium.gfx.mojom.Size maxSize) {

            RemoteFrameEnableAutoResizeParams _message = new RemoteFrameEnableAutoResizeParams();

            _message.minSize = minSize;

            _message.maxSize = maxSize;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENABLE_AUTO_RESIZE_ORDINAL)));

        }


        @Override
        public void disableAutoResize(
) {

            RemoteFrameDisableAutoResizeParams _message = new RemoteFrameDisableAutoResizeParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DISABLE_AUTO_RESIZE_ORDINAL)));

        }


        @Override
        public void didUpdateVisualProperties(
org.chromium.cc.mojom.RenderFrameMetadata metadata) {

            RemoteFrameDidUpdateVisualPropertiesParams _message = new RemoteFrameDidUpdateVisualPropertiesParams();

            _message.metadata = metadata;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_UPDATE_VISUAL_PROPERTIES_ORDINAL)));

        }


        @Override
        public void setFrameSinkId(
org.chromium.viz.mojom.FrameSinkId frameSinkId) {

            RemoteFrameSetFrameSinkIdParams _message = new RemoteFrameSetFrameSinkIdParams();

            _message.frameSinkId = frameSinkId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_FRAME_SINK_ID_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<RemoteFrame> {

        Stub(org.chromium.mojo.system.Core core, RemoteFrame impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                RemoteFrame_Internal.MANAGER, messageWithHeader);





                    case WILL_ENTER_FULLSCREEN_ORDINAL: {

                        RemoteFrameWillEnterFullscreenParams data =
                                RemoteFrameWillEnterFullscreenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().willEnterFullscreen(data.options);
                        return true;
                    }





                    case ADD_REPLICATED_CONTENT_SECURITY_POLICIES_ORDINAL: {

                        RemoteFrameAddReplicatedContentSecurityPoliciesParams data =
                                RemoteFrameAddReplicatedContentSecurityPoliciesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addReplicatedContentSecurityPolicies(data.csps);
                        return true;
                    }





                    case RESET_REPLICATED_CONTENT_SECURITY_POLICY_ORDINAL: {

                        RemoteFrameResetReplicatedContentSecurityPolicyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().resetReplicatedContentSecurityPolicy();
                        return true;
                    }





                    case ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL: {

                        RemoteFrameEnforceInsecureNavigationsSetParams data =
                                RemoteFrameEnforceInsecureNavigationsSetParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enforceInsecureNavigationsSet(data.set);
                        return true;
                    }





                    case SET_FRAME_OWNER_PROPERTIES_ORDINAL: {

                        RemoteFrameSetFrameOwnerPropertiesParams data =
                                RemoteFrameSetFrameOwnerPropertiesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setFrameOwnerProperties(data.properties);
                        return true;
                    }





                    case ENFORCE_INSECURE_REQUEST_POLICY_ORDINAL: {

                        RemoteFrameEnforceInsecureRequestPolicyParams data =
                                RemoteFrameEnforceInsecureRequestPolicyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enforceInsecureRequestPolicy(data.policy);
                        return true;
                    }





                    case SET_REPLICATED_ORIGIN_ORDINAL: {

                        RemoteFrameSetReplicatedOriginParams data =
                                RemoteFrameSetReplicatedOriginParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setReplicatedOrigin(data.origin, data.isPotentiallyTrustworthyUniqueOrigin);
                        return true;
                    }





                    case SET_REPLICATED_AD_FRAME_TYPE_ORDINAL: {

                        RemoteFrameSetReplicatedAdFrameTypeParams data =
                                RemoteFrameSetReplicatedAdFrameTypeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setReplicatedAdFrameType(data.adFrameType);
                        return true;
                    }





                    case SET_REPLICATED_NAME_ORDINAL: {

                        RemoteFrameSetReplicatedNameParams data =
                                RemoteFrameSetReplicatedNameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setReplicatedName(data.name, data.uniqueName);
                        return true;
                    }





                    case DISPATCH_LOAD_EVENT_FOR_FRAME_OWNER_ORDINAL: {

                        RemoteFrameDispatchLoadEventForFrameOwnerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().dispatchLoadEventForFrameOwner();
                        return true;
                    }





                    case SET_NEEDS_OCCLUSION_TRACKING_ORDINAL: {

                        RemoteFrameSetNeedsOcclusionTrackingParams data =
                                RemoteFrameSetNeedsOcclusionTrackingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setNeedsOcclusionTracking(data.needsTracking);
                        return true;
                    }





                    case COLLAPSE_ORDINAL: {

                        RemoteFrameCollapseParams data =
                                RemoteFrameCollapseParams.deserialize(messageWithHeader.getPayload());

                        getImpl().collapse(data.collapsed);
                        return true;
                    }





                    case FOCUS_ORDINAL: {

                        RemoteFrameFocusParams.deserialize(messageWithHeader.getPayload());

                        getImpl().focus();
                        return true;
                    }





                    case SET_HAD_STICKY_USER_ACTIVATION_BEFORE_NAVIGATION_ORDINAL: {

                        RemoteFrameSetHadStickyUserActivationBeforeNavigationParams data =
                                RemoteFrameSetHadStickyUserActivationBeforeNavigationParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setHadStickyUserActivationBeforeNavigation(data.hasGesture);
                        return true;
                    }





                    case BUBBLE_LOGICAL_SCROLL_ORDINAL: {

                        RemoteFrameBubbleLogicalScrollParams data =
                                RemoteFrameBubbleLogicalScrollParams.deserialize(messageWithHeader.getPayload());

                        getImpl().bubbleLogicalScroll(data.direction, data.granularity);
                        return true;
                    }





                    case UPDATE_USER_ACTIVATION_STATE_ORDINAL: {

                        RemoteFrameUpdateUserActivationStateParams data =
                                RemoteFrameUpdateUserActivationStateParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateUserActivationState(data.stateUpdateType, data.notificationType);
                        return true;
                    }





                    case SET_EMBEDDING_TOKEN_ORDINAL: {

                        RemoteFrameSetEmbeddingTokenParams data =
                                RemoteFrameSetEmbeddingTokenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setEmbeddingToken(data.embeddingToken);
                        return true;
                    }





                    case SET_PAGE_FOCUS_ORDINAL: {

                        RemoteFrameSetPageFocusParams data =
                                RemoteFrameSetPageFocusParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setPageFocus(data.isFocused);
                        return true;
                    }





                    case RENDER_FALLBACK_CONTENT_ORDINAL: {

                        RemoteFrameRenderFallbackContentParams.deserialize(messageWithHeader.getPayload());

                        getImpl().renderFallbackContent();
                        return true;
                    }





                    case ADD_RESOURCE_TIMING_FROM_CHILD_ORDINAL: {

                        RemoteFrameAddResourceTimingFromChildParams data =
                                RemoteFrameAddResourceTimingFromChildParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addResourceTimingFromChild(data.timing);
                        return true;
                    }





                    case SCROLL_RECT_TO_VISIBLE_ORDINAL: {

                        RemoteFrameScrollRectToVisibleParams data =
                                RemoteFrameScrollRectToVisibleParams.deserialize(messageWithHeader.getPayload());

                        getImpl().scrollRectToVisible(data.rect, data.params);
                        return true;
                    }





                    case DID_START_LOADING_ORDINAL: {

                        RemoteFrameDidStartLoadingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didStartLoading();
                        return true;
                    }





                    case DID_STOP_LOADING_ORDINAL: {

                        RemoteFrameDidStopLoadingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didStopLoading();
                        return true;
                    }





                    case INTRINSIC_SIZING_INFO_OF_CHILD_CHANGED_ORDINAL: {

                        RemoteFrameIntrinsicSizingInfoOfChildChangedParams data =
                                RemoteFrameIntrinsicSizingInfoOfChildChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().intrinsicSizingInfoOfChildChanged(data.sizingInfo);
                        return true;
                    }





                    case DID_SET_FRAME_POLICY_HEADERS_ORDINAL: {

                        RemoteFrameDidSetFramePolicyHeadersParams data =
                                RemoteFrameDidSetFramePolicyHeadersParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didSetFramePolicyHeaders(data.sandboxFlags, data.parsedFeaturePolicy);
                        return true;
                    }





                    case DID_UPDATE_FRAME_POLICY_ORDINAL: {

                        RemoteFrameDidUpdateFramePolicyParams data =
                                RemoteFrameDidUpdateFramePolicyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didUpdateFramePolicy(data.framePolicy);
                        return true;
                    }





                    case UPDATE_OPENER_ORDINAL: {

                        RemoteFrameUpdateOpenerParams data =
                                RemoteFrameUpdateOpenerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateOpener(data.openerFrameToken);
                        return true;
                    }





                    case DETACH_AND_DISPOSE_ORDINAL: {

                        RemoteFrameDetachAndDisposeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().detachAndDispose();
                        return true;
                    }





                    case ENABLE_AUTO_RESIZE_ORDINAL: {

                        RemoteFrameEnableAutoResizeParams data =
                                RemoteFrameEnableAutoResizeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enableAutoResize(data.minSize, data.maxSize);
                        return true;
                    }





                    case DISABLE_AUTO_RESIZE_ORDINAL: {

                        RemoteFrameDisableAutoResizeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().disableAutoResize();
                        return true;
                    }





                    case DID_UPDATE_VISUAL_PROPERTIES_ORDINAL: {

                        RemoteFrameDidUpdateVisualPropertiesParams data =
                                RemoteFrameDidUpdateVisualPropertiesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didUpdateVisualProperties(data.metadata);
                        return true;
                    }





                    case SET_FRAME_SINK_ID_ORDINAL: {

                        RemoteFrameSetFrameSinkIdParams data =
                                RemoteFrameSetFrameSinkIdParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setFrameSinkId(data.frameSinkId);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), RemoteFrame_Internal.MANAGER, messageWithHeader, receiver);


































































                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class RemoteFrameWillEnterFullscreenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FullscreenOptions options;

        private RemoteFrameWillEnterFullscreenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameWillEnterFullscreenParams() {
            this(0);
        }

        public static RemoteFrameWillEnterFullscreenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameWillEnterFullscreenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameWillEnterFullscreenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameWillEnterFullscreenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameWillEnterFullscreenParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.options = FullscreenOptions.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.options, 8, false);
        }
    }



    
    static final class RemoteFrameAddReplicatedContentSecurityPoliciesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.network.mojom.ContentSecurityPolicy[] csps;

        private RemoteFrameAddReplicatedContentSecurityPoliciesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameAddReplicatedContentSecurityPoliciesParams() {
            this(0);
        }

        public static RemoteFrameAddReplicatedContentSecurityPoliciesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameAddReplicatedContentSecurityPoliciesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameAddReplicatedContentSecurityPoliciesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameAddReplicatedContentSecurityPoliciesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameAddReplicatedContentSecurityPoliciesParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.csps = new org.chromium.network.mojom.ContentSecurityPolicy[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.csps[i1] = org.chromium.network.mojom.ContentSecurityPolicy.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            if (this.csps == null) {
                encoder0.encodeNullPointer(8, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.csps.length, 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.csps.length; ++i0) {
                    
                    encoder1.encode(this.csps[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class RemoteFrameResetReplicatedContentSecurityPolicyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private RemoteFrameResetReplicatedContentSecurityPolicyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameResetReplicatedContentSecurityPolicyParams() {
            this(0);
        }

        public static RemoteFrameResetReplicatedContentSecurityPolicyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameResetReplicatedContentSecurityPolicyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameResetReplicatedContentSecurityPolicyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameResetReplicatedContentSecurityPolicyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameResetReplicatedContentSecurityPolicyParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class RemoteFrameEnforceInsecureNavigationsSetParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int[] set;

        private RemoteFrameEnforceInsecureNavigationsSetParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameEnforceInsecureNavigationsSetParams() {
            this(0);
        }

        public static RemoteFrameEnforceInsecureNavigationsSetParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameEnforceInsecureNavigationsSetParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameEnforceInsecureNavigationsSetParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameEnforceInsecureNavigationsSetParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameEnforceInsecureNavigationsSetParams(elementsOrVersion);
                    {
                        
                    result.set = decoder0.readInts(8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.set, 8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
    }



    
    static final class RemoteFrameSetFrameOwnerPropertiesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FrameOwnerProperties properties;

        private RemoteFrameSetFrameOwnerPropertiesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameSetFrameOwnerPropertiesParams() {
            this(0);
        }

        public static RemoteFrameSetFrameOwnerPropertiesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameSetFrameOwnerPropertiesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameSetFrameOwnerPropertiesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameSetFrameOwnerPropertiesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameSetFrameOwnerPropertiesParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.properties = FrameOwnerProperties.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.properties, 8, false);
        }
    }



    
    static final class RemoteFrameEnforceInsecureRequestPolicyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int policy;

        private RemoteFrameEnforceInsecureRequestPolicyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameEnforceInsecureRequestPolicyParams() {
            this(0);
        }

        public static RemoteFrameEnforceInsecureRequestPolicyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameEnforceInsecureRequestPolicyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameEnforceInsecureRequestPolicyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameEnforceInsecureRequestPolicyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameEnforceInsecureRequestPolicyParams(elementsOrVersion);
                    {
                        
                    result.policy = decoder0.readInt(8);
                        InsecureRequestPolicy.validate(result.policy);
                        result.policy = InsecureRequestPolicy.toKnownValue(result.policy);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.policy, 8);
        }
    }



    
    static final class RemoteFrameSetReplicatedOriginParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.internal.mojom.Origin origin;
        public boolean isPotentiallyTrustworthyUniqueOrigin;

        private RemoteFrameSetReplicatedOriginParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameSetReplicatedOriginParams() {
            this(0);
        }

        public static RemoteFrameSetReplicatedOriginParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameSetReplicatedOriginParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameSetReplicatedOriginParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameSetReplicatedOriginParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameSetReplicatedOriginParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.origin = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                    }
                    {
                        
                    result.isPotentiallyTrustworthyUniqueOrigin = decoder0.readBoolean(16, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.origin, 8, false);
            
            encoder0.encode(this.isPotentiallyTrustworthyUniqueOrigin, 16, 0);
        }
    }



    
    static final class RemoteFrameSetReplicatedAdFrameTypeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int adFrameType;

        private RemoteFrameSetReplicatedAdFrameTypeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameSetReplicatedAdFrameTypeParams() {
            this(0);
        }

        public static RemoteFrameSetReplicatedAdFrameTypeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameSetReplicatedAdFrameTypeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameSetReplicatedAdFrameTypeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameSetReplicatedAdFrameTypeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameSetReplicatedAdFrameTypeParams(elementsOrVersion);
                    {
                        
                    result.adFrameType = decoder0.readInt(8);
                        AdFrameType.validate(result.adFrameType);
                        result.adFrameType = AdFrameType.toKnownValue(result.adFrameType);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.adFrameType, 8);
        }
    }



    
    static final class RemoteFrameSetReplicatedNameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String name;
        public String uniqueName;

        private RemoteFrameSetReplicatedNameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameSetReplicatedNameParams() {
            this(0);
        }

        public static RemoteFrameSetReplicatedNameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameSetReplicatedNameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameSetReplicatedNameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameSetReplicatedNameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameSetReplicatedNameParams(elementsOrVersion);
                    {
                        
                    result.name = decoder0.readString(8, false);
                    }
                    {
                        
                    result.uniqueName = decoder0.readString(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.name, 8, false);
            
            encoder0.encode(this.uniqueName, 16, false);
        }
    }



    
    static final class RemoteFrameDispatchLoadEventForFrameOwnerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private RemoteFrameDispatchLoadEventForFrameOwnerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameDispatchLoadEventForFrameOwnerParams() {
            this(0);
        }

        public static RemoteFrameDispatchLoadEventForFrameOwnerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameDispatchLoadEventForFrameOwnerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameDispatchLoadEventForFrameOwnerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameDispatchLoadEventForFrameOwnerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameDispatchLoadEventForFrameOwnerParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class RemoteFrameSetNeedsOcclusionTrackingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean needsTracking;

        private RemoteFrameSetNeedsOcclusionTrackingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameSetNeedsOcclusionTrackingParams() {
            this(0);
        }

        public static RemoteFrameSetNeedsOcclusionTrackingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameSetNeedsOcclusionTrackingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameSetNeedsOcclusionTrackingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameSetNeedsOcclusionTrackingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameSetNeedsOcclusionTrackingParams(elementsOrVersion);
                    {
                        
                    result.needsTracking = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.needsTracking, 8, 0);
        }
    }



    
    static final class RemoteFrameCollapseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean collapsed;

        private RemoteFrameCollapseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameCollapseParams() {
            this(0);
        }

        public static RemoteFrameCollapseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameCollapseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameCollapseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameCollapseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameCollapseParams(elementsOrVersion);
                    {
                        
                    result.collapsed = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.collapsed, 8, 0);
        }
    }



    
    static final class RemoteFrameFocusParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private RemoteFrameFocusParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameFocusParams() {
            this(0);
        }

        public static RemoteFrameFocusParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameFocusParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameFocusParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameFocusParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameFocusParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class RemoteFrameSetHadStickyUserActivationBeforeNavigationParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean hasGesture;

        private RemoteFrameSetHadStickyUserActivationBeforeNavigationParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameSetHadStickyUserActivationBeforeNavigationParams() {
            this(0);
        }

        public static RemoteFrameSetHadStickyUserActivationBeforeNavigationParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameSetHadStickyUserActivationBeforeNavigationParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameSetHadStickyUserActivationBeforeNavigationParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameSetHadStickyUserActivationBeforeNavigationParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameSetHadStickyUserActivationBeforeNavigationParams(elementsOrVersion);
                    {
                        
                    result.hasGesture = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.hasGesture, 8, 0);
        }
    }



    
    static final class RemoteFrameBubbleLogicalScrollParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int direction;
        public int granularity;

        private RemoteFrameBubbleLogicalScrollParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameBubbleLogicalScrollParams() {
            this(0);
        }

        public static RemoteFrameBubbleLogicalScrollParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameBubbleLogicalScrollParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameBubbleLogicalScrollParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameBubbleLogicalScrollParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameBubbleLogicalScrollParams(elementsOrVersion);
                    {
                        
                    result.direction = decoder0.readInt(8);
                        ScrollDirection.validate(result.direction);
                        result.direction = ScrollDirection.toKnownValue(result.direction);
                    }
                    {
                        
                    result.granularity = decoder0.readInt(12);
                        org.chromium.ui.mojom.ScrollGranularity.validate(result.granularity);
                        result.granularity = org.chromium.ui.mojom.ScrollGranularity.toKnownValue(result.granularity);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.direction, 8);
            
            encoder0.encode(this.granularity, 12);
        }
    }



    
    static final class RemoteFrameUpdateUserActivationStateParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int stateUpdateType;
        public int notificationType;

        private RemoteFrameUpdateUserActivationStateParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameUpdateUserActivationStateParams() {
            this(0);
        }

        public static RemoteFrameUpdateUserActivationStateParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameUpdateUserActivationStateParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameUpdateUserActivationStateParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameUpdateUserActivationStateParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameUpdateUserActivationStateParams(elementsOrVersion);
                    {
                        
                    result.stateUpdateType = decoder0.readInt(8);
                        UserActivationUpdateType.validate(result.stateUpdateType);
                        result.stateUpdateType = UserActivationUpdateType.toKnownValue(result.stateUpdateType);
                    }
                    {
                        
                    result.notificationType = decoder0.readInt(12);
                        UserActivationNotificationType.validate(result.notificationType);
                        result.notificationType = UserActivationNotificationType.toKnownValue(result.notificationType);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.stateUpdateType, 8);
            
            encoder0.encode(this.notificationType, 12);
        }
    }



    
    static final class RemoteFrameSetEmbeddingTokenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken embeddingToken;

        private RemoteFrameSetEmbeddingTokenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameSetEmbeddingTokenParams() {
            this(0);
        }

        public static RemoteFrameSetEmbeddingTokenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameSetEmbeddingTokenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameSetEmbeddingTokenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameSetEmbeddingTokenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameSetEmbeddingTokenParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.embeddingToken = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.embeddingToken, 8, false);
        }
    }



    
    static final class RemoteFrameSetPageFocusParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean isFocused;

        private RemoteFrameSetPageFocusParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameSetPageFocusParams() {
            this(0);
        }

        public static RemoteFrameSetPageFocusParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameSetPageFocusParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameSetPageFocusParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameSetPageFocusParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameSetPageFocusParams(elementsOrVersion);
                    {
                        
                    result.isFocused = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.isFocused, 8, 0);
        }
    }



    
    static final class RemoteFrameRenderFallbackContentParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private RemoteFrameRenderFallbackContentParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameRenderFallbackContentParams() {
            this(0);
        }

        public static RemoteFrameRenderFallbackContentParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameRenderFallbackContentParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameRenderFallbackContentParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameRenderFallbackContentParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameRenderFallbackContentParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class RemoteFrameAddResourceTimingFromChildParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ResourceTimingInfo timing;

        private RemoteFrameAddResourceTimingFromChildParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameAddResourceTimingFromChildParams() {
            this(0);
        }

        public static RemoteFrameAddResourceTimingFromChildParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameAddResourceTimingFromChildParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameAddResourceTimingFromChildParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameAddResourceTimingFromChildParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameAddResourceTimingFromChildParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.timing = ResourceTimingInfo.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.timing, 8, false);
        }
    }



    
    static final class RemoteFrameScrollRectToVisibleParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Rect rect;
        public ScrollIntoViewParams params;

        private RemoteFrameScrollRectToVisibleParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameScrollRectToVisibleParams() {
            this(0);
        }

        public static RemoteFrameScrollRectToVisibleParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameScrollRectToVisibleParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameScrollRectToVisibleParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameScrollRectToVisibleParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameScrollRectToVisibleParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.rect = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.params = ScrollIntoViewParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.rect, 8, false);
            
            encoder0.encode(this.params, 16, false);
        }
    }



    
    static final class RemoteFrameDidStartLoadingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private RemoteFrameDidStartLoadingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameDidStartLoadingParams() {
            this(0);
        }

        public static RemoteFrameDidStartLoadingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameDidStartLoadingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameDidStartLoadingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameDidStartLoadingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameDidStartLoadingParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class RemoteFrameDidStopLoadingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private RemoteFrameDidStopLoadingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameDidStopLoadingParams() {
            this(0);
        }

        public static RemoteFrameDidStopLoadingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameDidStopLoadingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameDidStopLoadingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameDidStopLoadingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameDidStopLoadingParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class RemoteFrameIntrinsicSizingInfoOfChildChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public IntrinsicSizingInfo sizingInfo;

        private RemoteFrameIntrinsicSizingInfoOfChildChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameIntrinsicSizingInfoOfChildChangedParams() {
            this(0);
        }

        public static RemoteFrameIntrinsicSizingInfoOfChildChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameIntrinsicSizingInfoOfChildChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameIntrinsicSizingInfoOfChildChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameIntrinsicSizingInfoOfChildChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameIntrinsicSizingInfoOfChildChangedParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.sizingInfo = IntrinsicSizingInfo.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.sizingInfo, 8, false);
        }
    }



    
    static final class RemoteFrameDidSetFramePolicyHeadersParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int sandboxFlags;
        public ParsedFeaturePolicyDeclaration[] parsedFeaturePolicy;

        private RemoteFrameDidSetFramePolicyHeadersParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameDidSetFramePolicyHeadersParams() {
            this(0);
        }

        public static RemoteFrameDidSetFramePolicyHeadersParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameDidSetFramePolicyHeadersParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameDidSetFramePolicyHeadersParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameDidSetFramePolicyHeadersParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameDidSetFramePolicyHeadersParams(elementsOrVersion);
                    {
                        
                    result.sandboxFlags = decoder0.readInt(8);
                        org.chromium.network.mojom.WebSandboxFlags.validate(result.sandboxFlags);
                        result.sandboxFlags = org.chromium.network.mojom.WebSandboxFlags.toKnownValue(result.sandboxFlags);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.parsedFeaturePolicy = new ParsedFeaturePolicyDeclaration[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.parsedFeaturePolicy[i1] = ParsedFeaturePolicyDeclaration.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.sandboxFlags, 8);
            
            if (this.parsedFeaturePolicy == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.parsedFeaturePolicy.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.parsedFeaturePolicy.length; ++i0) {
                    
                    encoder1.encode(this.parsedFeaturePolicy[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class RemoteFrameDidUpdateFramePolicyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FramePolicy framePolicy;

        private RemoteFrameDidUpdateFramePolicyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameDidUpdateFramePolicyParams() {
            this(0);
        }

        public static RemoteFrameDidUpdateFramePolicyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameDidUpdateFramePolicyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameDidUpdateFramePolicyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameDidUpdateFramePolicyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameDidUpdateFramePolicyParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.framePolicy = FramePolicy.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.framePolicy, 8, false);
        }
    }



    
    static final class RemoteFrameUpdateOpenerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FrameToken openerFrameToken;

        private RemoteFrameUpdateOpenerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameUpdateOpenerParams() {
            this(0);
        }

        public static RemoteFrameUpdateOpenerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameUpdateOpenerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameUpdateOpenerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameUpdateOpenerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameUpdateOpenerParams(elementsOrVersion);
                    {
                        
                    result.openerFrameToken = FrameToken.decode(decoder0, 8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.openerFrameToken, 8, true);
        }
    }



    
    static final class RemoteFrameDetachAndDisposeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private RemoteFrameDetachAndDisposeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameDetachAndDisposeParams() {
            this(0);
        }

        public static RemoteFrameDetachAndDisposeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameDetachAndDisposeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameDetachAndDisposeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameDetachAndDisposeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameDetachAndDisposeParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class RemoteFrameEnableAutoResizeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Size minSize;
        public org.chromium.gfx.mojom.Size maxSize;

        private RemoteFrameEnableAutoResizeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameEnableAutoResizeParams() {
            this(0);
        }

        public static RemoteFrameEnableAutoResizeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameEnableAutoResizeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameEnableAutoResizeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameEnableAutoResizeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameEnableAutoResizeParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.minSize = org.chromium.gfx.mojom.Size.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.maxSize = org.chromium.gfx.mojom.Size.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.minSize, 8, false);
            
            encoder0.encode(this.maxSize, 16, false);
        }
    }



    
    static final class RemoteFrameDisableAutoResizeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private RemoteFrameDisableAutoResizeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameDisableAutoResizeParams() {
            this(0);
        }

        public static RemoteFrameDisableAutoResizeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameDisableAutoResizeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameDisableAutoResizeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameDisableAutoResizeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameDisableAutoResizeParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class RemoteFrameDidUpdateVisualPropertiesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.cc.mojom.RenderFrameMetadata metadata;

        private RemoteFrameDidUpdateVisualPropertiesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameDidUpdateVisualPropertiesParams() {
            this(0);
        }

        public static RemoteFrameDidUpdateVisualPropertiesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameDidUpdateVisualPropertiesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameDidUpdateVisualPropertiesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameDidUpdateVisualPropertiesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameDidUpdateVisualPropertiesParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.metadata = org.chromium.cc.mojom.RenderFrameMetadata.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.metadata, 8, false);
        }
    }



    
    static final class RemoteFrameSetFrameSinkIdParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.viz.mojom.FrameSinkId frameSinkId;

        private RemoteFrameSetFrameSinkIdParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameSetFrameSinkIdParams() {
            this(0);
        }

        public static RemoteFrameSetFrameSinkIdParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameSetFrameSinkIdParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameSetFrameSinkIdParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameSetFrameSinkIdParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameSetFrameSinkIdParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.frameSinkId = org.chromium.viz.mojom.FrameSinkId.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.frameSinkId, 8, false);
        }
    }



}
