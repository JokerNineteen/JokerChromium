// LocalMainFrameHost_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/frame/frame.mojom
//

package org.chromium.blink.mojom;


class LocalMainFrameHost_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<LocalMainFrameHost, LocalMainFrameHost.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<LocalMainFrameHost, LocalMainFrameHost.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.LocalMainFrameHost";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, LocalMainFrameHost impl) {
            return new Stub(core, impl);
        }

        @Override
        public LocalMainFrameHost[] buildArray(int size) {
          return new LocalMainFrameHost[size];
        }
    };


    private static final int SCALE_FACTOR_CHANGED_ORDINAL = 0;

    private static final int CONTENTS_PREFERRED_SIZE_CHANGED_ORDINAL = 1;

    private static final int TEXT_AUTOSIZER_PAGE_INFO_CHANGED_ORDINAL = 2;

    private static final int FOCUS_PAGE_ORDINAL = 3;

    private static final int TAKE_FOCUS_ORDINAL = 4;

    private static final int UPDATE_TARGET_URL_ORDINAL = 5;

    private static final int REQUEST_CLOSE_ORDINAL = 6;

    private static final int SHOW_CREATED_WINDOW_ORDINAL = 7;

    private static final int SET_WINDOW_RECT_ORDINAL = 8;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements LocalMainFrameHost.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void scaleFactorChanged(
float scale) {

            LocalMainFrameHostScaleFactorChangedParams _message = new LocalMainFrameHostScaleFactorChangedParams();

            _message.scale = scale;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SCALE_FACTOR_CHANGED_ORDINAL)));

        }


        @Override
        public void contentsPreferredSizeChanged(
org.chromium.gfx.mojom.Size prefSize) {

            LocalMainFrameHostContentsPreferredSizeChangedParams _message = new LocalMainFrameHostContentsPreferredSizeChangedParams();

            _message.prefSize = prefSize;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CONTENTS_PREFERRED_SIZE_CHANGED_ORDINAL)));

        }


        @Override
        public void textAutosizerPageInfoChanged(
TextAutosizerPageInfo pageInfo) {

            LocalMainFrameHostTextAutosizerPageInfoChangedParams _message = new LocalMainFrameHostTextAutosizerPageInfoChangedParams();

            _message.pageInfo = pageInfo;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(TEXT_AUTOSIZER_PAGE_INFO_CHANGED_ORDINAL)));

        }


        @Override
        public void focusPage(
) {

            LocalMainFrameHostFocusPageParams _message = new LocalMainFrameHostFocusPageParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(FOCUS_PAGE_ORDINAL)));

        }


        @Override
        public void takeFocus(
boolean reverse) {

            LocalMainFrameHostTakeFocusParams _message = new LocalMainFrameHostTakeFocusParams();

            _message.reverse = reverse;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(TAKE_FOCUS_ORDINAL)));

        }


        @Override
        public void updateTargetUrl(
org.chromium.url.mojom.Url url, 
UpdateTargetUrlResponse callback) {

            LocalMainFrameHostUpdateTargetUrlParams _message = new LocalMainFrameHostUpdateTargetUrlParams();

            _message.url = url;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    UPDATE_TARGET_URL_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalMainFrameHostUpdateTargetUrlResponseParamsForwardToCallback(callback));

        }


        @Override
        public void requestClose(
) {

            LocalMainFrameHostRequestCloseParams _message = new LocalMainFrameHostRequestCloseParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REQUEST_CLOSE_ORDINAL)));

        }


        @Override
        public void showCreatedWindow(
org.chromium.mojo_base.mojom.UnguessableToken openerFrameToken, int disposition, org.chromium.gfx.mojom.Rect rect, boolean openedByUserGesture, 
ShowCreatedWindowResponse callback) {

            LocalMainFrameHostShowCreatedWindowParams _message = new LocalMainFrameHostShowCreatedWindowParams();

            _message.openerFrameToken = openerFrameToken;

            _message.disposition = disposition;

            _message.rect = rect;

            _message.openedByUserGesture = openedByUserGesture;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SHOW_CREATED_WINDOW_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalMainFrameHostShowCreatedWindowResponseParamsForwardToCallback(callback));

        }


        @Override
        public void setWindowRect(
org.chromium.gfx.mojom.Rect bounds, 
SetWindowRectResponse callback) {

            LocalMainFrameHostSetWindowRectParams _message = new LocalMainFrameHostSetWindowRectParams();

            _message.bounds = bounds;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SET_WINDOW_RECT_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalMainFrameHostSetWindowRectResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<LocalMainFrameHost> {

        Stub(org.chromium.mojo.system.Core core, LocalMainFrameHost impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                LocalMainFrameHost_Internal.MANAGER, messageWithHeader);





                    case SCALE_FACTOR_CHANGED_ORDINAL: {

                        LocalMainFrameHostScaleFactorChangedParams data =
                                LocalMainFrameHostScaleFactorChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().scaleFactorChanged(data.scale);
                        return true;
                    }





                    case CONTENTS_PREFERRED_SIZE_CHANGED_ORDINAL: {

                        LocalMainFrameHostContentsPreferredSizeChangedParams data =
                                LocalMainFrameHostContentsPreferredSizeChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().contentsPreferredSizeChanged(data.prefSize);
                        return true;
                    }





                    case TEXT_AUTOSIZER_PAGE_INFO_CHANGED_ORDINAL: {

                        LocalMainFrameHostTextAutosizerPageInfoChangedParams data =
                                LocalMainFrameHostTextAutosizerPageInfoChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().textAutosizerPageInfoChanged(data.pageInfo);
                        return true;
                    }





                    case FOCUS_PAGE_ORDINAL: {

                        LocalMainFrameHostFocusPageParams.deserialize(messageWithHeader.getPayload());

                        getImpl().focusPage();
                        return true;
                    }





                    case TAKE_FOCUS_ORDINAL: {

                        LocalMainFrameHostTakeFocusParams data =
                                LocalMainFrameHostTakeFocusParams.deserialize(messageWithHeader.getPayload());

                        getImpl().takeFocus(data.reverse);
                        return true;
                    }







                    case REQUEST_CLOSE_ORDINAL: {

                        LocalMainFrameHostRequestCloseParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestClose();
                        return true;
                    }






                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), LocalMainFrameHost_Internal.MANAGER, messageWithHeader, receiver);

















                    case UPDATE_TARGET_URL_ORDINAL: {

                        LocalMainFrameHostUpdateTargetUrlParams data =
                                LocalMainFrameHostUpdateTargetUrlParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateTargetUrl(data.url, new LocalMainFrameHostUpdateTargetUrlResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }









                    case SHOW_CREATED_WINDOW_ORDINAL: {

                        LocalMainFrameHostShowCreatedWindowParams data =
                                LocalMainFrameHostShowCreatedWindowParams.deserialize(messageWithHeader.getPayload());

                        getImpl().showCreatedWindow(data.openerFrameToken, data.disposition, data.rect, data.openedByUserGesture, new LocalMainFrameHostShowCreatedWindowResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case SET_WINDOW_RECT_ORDINAL: {

                        LocalMainFrameHostSetWindowRectParams data =
                                LocalMainFrameHostSetWindowRectParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setWindowRect(data.bounds, new LocalMainFrameHostSetWindowRectResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class LocalMainFrameHostScaleFactorChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public float scale;

        private LocalMainFrameHostScaleFactorChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameHostScaleFactorChangedParams() {
            this(0);
        }

        public static LocalMainFrameHostScaleFactorChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameHostScaleFactorChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameHostScaleFactorChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameHostScaleFactorChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameHostScaleFactorChangedParams(elementsOrVersion);
                    {
                        
                    result.scale = decoder0.readFloat(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.scale, 8);
        }
    }



    
    static final class LocalMainFrameHostContentsPreferredSizeChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Size prefSize;

        private LocalMainFrameHostContentsPreferredSizeChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameHostContentsPreferredSizeChangedParams() {
            this(0);
        }

        public static LocalMainFrameHostContentsPreferredSizeChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameHostContentsPreferredSizeChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameHostContentsPreferredSizeChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameHostContentsPreferredSizeChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameHostContentsPreferredSizeChangedParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.prefSize = org.chromium.gfx.mojom.Size.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.prefSize, 8, false);
        }
    }



    
    static final class LocalMainFrameHostTextAutosizerPageInfoChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public TextAutosizerPageInfo pageInfo;

        private LocalMainFrameHostTextAutosizerPageInfoChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameHostTextAutosizerPageInfoChangedParams() {
            this(0);
        }

        public static LocalMainFrameHostTextAutosizerPageInfoChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameHostTextAutosizerPageInfoChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameHostTextAutosizerPageInfoChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameHostTextAutosizerPageInfoChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameHostTextAutosizerPageInfoChangedParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.pageInfo = TextAutosizerPageInfo.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.pageInfo, 8, false);
        }
    }



    
    static final class LocalMainFrameHostFocusPageParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalMainFrameHostFocusPageParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameHostFocusPageParams() {
            this(0);
        }

        public static LocalMainFrameHostFocusPageParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameHostFocusPageParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameHostFocusPageParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameHostFocusPageParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameHostFocusPageParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalMainFrameHostTakeFocusParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean reverse;

        private LocalMainFrameHostTakeFocusParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameHostTakeFocusParams() {
            this(0);
        }

        public static LocalMainFrameHostTakeFocusParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameHostTakeFocusParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameHostTakeFocusParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameHostTakeFocusParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameHostTakeFocusParams(elementsOrVersion);
                    {
                        
                    result.reverse = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.reverse, 8, 0);
        }
    }



    
    static final class LocalMainFrameHostUpdateTargetUrlParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url url;

        private LocalMainFrameHostUpdateTargetUrlParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameHostUpdateTargetUrlParams() {
            this(0);
        }

        public static LocalMainFrameHostUpdateTargetUrlParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameHostUpdateTargetUrlParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameHostUpdateTargetUrlParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameHostUpdateTargetUrlParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameHostUpdateTargetUrlParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.url, 8, false);
        }
    }



    
    static final class LocalMainFrameHostUpdateTargetUrlResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalMainFrameHostUpdateTargetUrlResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameHostUpdateTargetUrlResponseParams() {
            this(0);
        }

        public static LocalMainFrameHostUpdateTargetUrlResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameHostUpdateTargetUrlResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameHostUpdateTargetUrlResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameHostUpdateTargetUrlResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameHostUpdateTargetUrlResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class LocalMainFrameHostUpdateTargetUrlResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalMainFrameHost.UpdateTargetUrlResponse mCallback;

        LocalMainFrameHostUpdateTargetUrlResponseParamsForwardToCallback(LocalMainFrameHost.UpdateTargetUrlResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(UPDATE_TARGET_URL_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalMainFrameHostUpdateTargetUrlResponseParamsProxyToResponder implements LocalMainFrameHost.UpdateTargetUrlResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalMainFrameHostUpdateTargetUrlResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            LocalMainFrameHostUpdateTargetUrlResponseParams _response = new LocalMainFrameHostUpdateTargetUrlResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    UPDATE_TARGET_URL_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalMainFrameHostRequestCloseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalMainFrameHostRequestCloseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameHostRequestCloseParams() {
            this(0);
        }

        public static LocalMainFrameHostRequestCloseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameHostRequestCloseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameHostRequestCloseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameHostRequestCloseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameHostRequestCloseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalMainFrameHostShowCreatedWindowParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.UnguessableToken openerFrameToken;
        public int disposition;
        public org.chromium.gfx.mojom.Rect rect;
        public boolean openedByUserGesture;

        private LocalMainFrameHostShowCreatedWindowParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameHostShowCreatedWindowParams() {
            this(0);
        }

        public static LocalMainFrameHostShowCreatedWindowParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameHostShowCreatedWindowParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameHostShowCreatedWindowParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameHostShowCreatedWindowParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameHostShowCreatedWindowParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.openerFrameToken = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    result.disposition = decoder0.readInt(16);
                        org.chromium.ui.mojom.WindowOpenDisposition.validate(result.disposition);
                    }
                    {
                        
                    result.openedByUserGesture = decoder0.readBoolean(20, 0);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.rect = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.openerFrameToken, 8, false);
            
            encoder0.encode(this.disposition, 16);
            
            encoder0.encode(this.openedByUserGesture, 20, 0);
            
            encoder0.encode(this.rect, 24, false);
        }
    }



    
    static final class LocalMainFrameHostShowCreatedWindowResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalMainFrameHostShowCreatedWindowResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameHostShowCreatedWindowResponseParams() {
            this(0);
        }

        public static LocalMainFrameHostShowCreatedWindowResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameHostShowCreatedWindowResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameHostShowCreatedWindowResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameHostShowCreatedWindowResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameHostShowCreatedWindowResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class LocalMainFrameHostShowCreatedWindowResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalMainFrameHost.ShowCreatedWindowResponse mCallback;

        LocalMainFrameHostShowCreatedWindowResponseParamsForwardToCallback(LocalMainFrameHost.ShowCreatedWindowResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(SHOW_CREATED_WINDOW_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalMainFrameHostShowCreatedWindowResponseParamsProxyToResponder implements LocalMainFrameHost.ShowCreatedWindowResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalMainFrameHostShowCreatedWindowResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            LocalMainFrameHostShowCreatedWindowResponseParams _response = new LocalMainFrameHostShowCreatedWindowResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SHOW_CREATED_WINDOW_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalMainFrameHostSetWindowRectParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Rect bounds;

        private LocalMainFrameHostSetWindowRectParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameHostSetWindowRectParams() {
            this(0);
        }

        public static LocalMainFrameHostSetWindowRectParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameHostSetWindowRectParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameHostSetWindowRectParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameHostSetWindowRectParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameHostSetWindowRectParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.bounds = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.bounds, 8, false);
        }
    }



    
    static final class LocalMainFrameHostSetWindowRectResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalMainFrameHostSetWindowRectResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalMainFrameHostSetWindowRectResponseParams() {
            this(0);
        }

        public static LocalMainFrameHostSetWindowRectResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalMainFrameHostSetWindowRectResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalMainFrameHostSetWindowRectResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalMainFrameHostSetWindowRectResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalMainFrameHostSetWindowRectResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class LocalMainFrameHostSetWindowRectResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalMainFrameHost.SetWindowRectResponse mCallback;

        LocalMainFrameHostSetWindowRectResponseParamsForwardToCallback(LocalMainFrameHost.SetWindowRectResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(SET_WINDOW_RECT_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalMainFrameHostSetWindowRectResponseParamsProxyToResponder implements LocalMainFrameHost.SetWindowRectResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalMainFrameHostSetWindowRectResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            LocalMainFrameHostSetWindowRectResponseParams _response = new LocalMainFrameHostSetWindowRectResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SET_WINDOW_RECT_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



}
