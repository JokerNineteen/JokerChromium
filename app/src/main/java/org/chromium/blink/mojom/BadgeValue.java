// BadgeValue.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/badging/badging.mojom
//

package org.chromium.blink.mojom;


public final class BadgeValue extends org.chromium.mojo.bindings.Union {

    public static final class Tag {
        public static final int Flag = 0;
        public static final int Number = 1;
    };
    private byte mFlag;
    private long mNumber;

    public void setFlag(byte flag) {
        this.mTag = Tag.Flag;
        this.mFlag = flag;
    }

    public byte getFlag() {
        assert this.mTag == Tag.Flag;
        return this.mFlag;
    }

    public void setNumber(long number) {
        this.mTag = Tag.Number;
        this.mNumber = number;
    }

    public long getNumber() {
        assert this.mTag == Tag.Number;
        return this.mNumber;
    }


    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder0, int offset) {
        encoder0.encode(org.chromium.mojo.bindings.BindingsHelper.UNION_SIZE, offset);
        encoder0.encode(this.mTag, offset + 4);
        switch (mTag) {
            case Tag.Flag: {
                
                encoder0.encode(this.mFlag, offset + 8);
                break;
            }
            case Tag.Number: {
                
                encoder0.encode(this.mNumber, offset + 8);
                break;
            }
            default: {
                break;
            }
        }
    }

    public static BadgeValue deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message).decoderForSerializedUnion(), 0);
    }

    public static final BadgeValue decode(org.chromium.mojo.bindings.Decoder decoder0, int offset) {
        org.chromium.mojo.bindings.DataHeader dataHeader = decoder0.readDataHeaderForUnion(offset);
        if (dataHeader.size == 0) {
            return null;
        }
        BadgeValue result = new BadgeValue();
        switch (dataHeader.elementsOrVersion) {
            case Tag.Flag: {
                
                result.mFlag = decoder0.readByte(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE);
                result.mTag = Tag.Flag;
                break;
            }
            case Tag.Number: {
                
                result.mNumber = decoder0.readLong(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE);
                result.mTag = Tag.Number;
                break;
            }
            default: {
                break;
            }
        }
        return result;
    }
}