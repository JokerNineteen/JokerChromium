// MenuItem.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/choosers/popup_menu.mojom
//

package org.chromium.blink.mojom;


public final class MenuItem extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 40;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

    public static final class Type {
        private static final boolean IS_EXTENSIBLE = false;

        public static final int OPTION = 0;
        public static final int CHECKABLE_OPTION = 1;
        public static final int GROUP = 2;
        public static final int SEPARATOR = 3;
        public static final int SUB_MENU = 4;
        public static final int MIN_VALUE = 0;
        public static final int MAX_VALUE = 4;

        public static boolean isKnownValue(int value) {
            return value >= 0 && value <= 4;
        }

        public static void validate(int value) {
            if (IS_EXTENSIBLE || isKnownValue(value)) return;
            throw new org.chromium.mojo.bindings.DeserializationException("Invalid enum value.");
        }

        private Type() {}
    }
    public String label;
    public String toolTip;
    public int type;
    public int action;
    public int textDirection;
    public boolean hasTextDirectionOverride;
    public boolean enabled;
    public boolean checked;

    private MenuItem(int version) {
        super(STRUCT_SIZE, version);
        this.type = (int) MenuItem.Type.OPTION;
        this.action = (int) 0;
        this.textDirection = (int) org.chromium.mojo_base.mojom.TextDirection.LEFT_TO_RIGHT;
        this.hasTextDirectionOverride = (boolean) false;
        this.enabled = (boolean) false;
        this.checked = (boolean) false;
    }

    public MenuItem() {
        this(0);
    }

    public static MenuItem deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static MenuItem deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static MenuItem decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        MenuItem result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new MenuItem(elementsOrVersion);
                {
                    
                result.label = decoder0.readString(8, true);
                }
                {
                    
                result.toolTip = decoder0.readString(16, true);
                }
                {
                    
                result.type = decoder0.readInt(24);
                    MenuItem.Type.validate(result.type);
                }
                {
                    
                result.action = decoder0.readInt(28);
                }
                {
                    
                result.textDirection = decoder0.readInt(32);
                    org.chromium.mojo_base.mojom.TextDirection.validate(result.textDirection);
                }
                {
                    
                result.hasTextDirectionOverride = decoder0.readBoolean(36, 0);
                }
                {
                    
                result.enabled = decoder0.readBoolean(36, 1);
                }
                {
                    
                result.checked = decoder0.readBoolean(36, 2);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.label, 8, true);
        
        encoder0.encode(this.toolTip, 16, true);
        
        encoder0.encode(this.type, 24);
        
        encoder0.encode(this.action, 28);
        
        encoder0.encode(this.textDirection, 32);
        
        encoder0.encode(this.hasTextDirectionOverride, 36, 0);
        
        encoder0.encode(this.enabled, 36, 1);
        
        encoder0.encode(this.checked, 36, 2);
    }
}