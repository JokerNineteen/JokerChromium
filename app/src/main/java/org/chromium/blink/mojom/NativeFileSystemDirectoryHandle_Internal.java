// NativeFileSystemDirectoryHandle_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/file_system_access/native_file_system_directory_handle.mojom
//

package org.chromium.blink.mojom;


class NativeFileSystemDirectoryHandle_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<NativeFileSystemDirectoryHandle, NativeFileSystemDirectoryHandle.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<NativeFileSystemDirectoryHandle, NativeFileSystemDirectoryHandle.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.NativeFileSystemDirectoryHandle";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, NativeFileSystemDirectoryHandle impl) {
            return new Stub(core, impl);
        }

        @Override
        public NativeFileSystemDirectoryHandle[] buildArray(int size) {
          return new NativeFileSystemDirectoryHandle[size];
        }
    };


    private static final int GET_PERMISSION_STATUS_ORDINAL = 0;

    private static final int REQUEST_PERMISSION_ORDINAL = 1;

    private static final int GET_FILE_ORDINAL = 2;

    private static final int GET_DIRECTORY_ORDINAL = 3;

    private static final int GET_ENTRIES_ORDINAL = 4;

    private static final int REMOVE_ENTRY_ORDINAL = 5;

    private static final int RESOLVE_ORDINAL = 6;

    private static final int TRANSFER_ORDINAL = 7;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements NativeFileSystemDirectoryHandle.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void getPermissionStatus(
boolean writable, 
GetPermissionStatusResponse callback) {

            NativeFileSystemDirectoryHandleGetPermissionStatusParams _message = new NativeFileSystemDirectoryHandleGetPermissionStatusParams();

            _message.writable = writable;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_PERMISSION_STATUS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NativeFileSystemDirectoryHandleGetPermissionStatusResponseParamsForwardToCallback(callback));

        }


        @Override
        public void requestPermission(
boolean writable, 
RequestPermissionResponse callback) {

            NativeFileSystemDirectoryHandleRequestPermissionParams _message = new NativeFileSystemDirectoryHandleRequestPermissionParams();

            _message.writable = writable;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    REQUEST_PERMISSION_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NativeFileSystemDirectoryHandleRequestPermissionResponseParamsForwardToCallback(callback));

        }


        @Override
        public void getFile(
String basename, boolean create, 
GetFileResponse callback) {

            NativeFileSystemDirectoryHandleGetFileParams _message = new NativeFileSystemDirectoryHandleGetFileParams();

            _message.basename = basename;

            _message.create = create;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_FILE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NativeFileSystemDirectoryHandleGetFileResponseParamsForwardToCallback(callback));

        }


        @Override
        public void getDirectory(
String basename, boolean create, 
GetDirectoryResponse callback) {

            NativeFileSystemDirectoryHandleGetDirectoryParams _message = new NativeFileSystemDirectoryHandleGetDirectoryParams();

            _message.basename = basename;

            _message.create = create;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_DIRECTORY_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NativeFileSystemDirectoryHandleGetDirectoryResponseParamsForwardToCallback(callback));

        }


        @Override
        public void getEntries(
NativeFileSystemDirectoryEntriesListener listener) {

            NativeFileSystemDirectoryHandleGetEntriesParams _message = new NativeFileSystemDirectoryHandleGetEntriesParams();

            _message.listener = listener;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GET_ENTRIES_ORDINAL)));

        }


        @Override
        public void removeEntry(
String basename, boolean recurse, 
RemoveEntryResponse callback) {

            NativeFileSystemDirectoryHandleRemoveEntryParams _message = new NativeFileSystemDirectoryHandleRemoveEntryParams();

            _message.basename = basename;

            _message.recurse = recurse;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    REMOVE_ENTRY_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NativeFileSystemDirectoryHandleRemoveEntryResponseParamsForwardToCallback(callback));

        }


        @Override
        public void resolve(
NativeFileSystemTransferToken possibleChild, 
ResolveResponse callback) {

            NativeFileSystemDirectoryHandleResolveParams _message = new NativeFileSystemDirectoryHandleResolveParams();

            _message.possibleChild = possibleChild;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RESOLVE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NativeFileSystemDirectoryHandleResolveResponseParamsForwardToCallback(callback));

        }


        @Override
        public void transfer(
org.chromium.mojo.bindings.InterfaceRequest<NativeFileSystemTransferToken> token) {

            NativeFileSystemDirectoryHandleTransferParams _message = new NativeFileSystemDirectoryHandleTransferParams();

            _message.token = token;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(TRANSFER_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<NativeFileSystemDirectoryHandle> {

        Stub(org.chromium.mojo.system.Core core, NativeFileSystemDirectoryHandle impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                NativeFileSystemDirectoryHandle_Internal.MANAGER, messageWithHeader);













                    case GET_ENTRIES_ORDINAL: {

                        NativeFileSystemDirectoryHandleGetEntriesParams data =
                                NativeFileSystemDirectoryHandleGetEntriesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getEntries(data.listener);
                        return true;
                    }









                    case TRANSFER_ORDINAL: {

                        NativeFileSystemDirectoryHandleTransferParams data =
                                NativeFileSystemDirectoryHandleTransferParams.deserialize(messageWithHeader.getPayload());

                        getImpl().transfer(data.token);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), NativeFileSystemDirectoryHandle_Internal.MANAGER, messageWithHeader, receiver);







                    case GET_PERMISSION_STATUS_ORDINAL: {

                        NativeFileSystemDirectoryHandleGetPermissionStatusParams data =
                                NativeFileSystemDirectoryHandleGetPermissionStatusParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getPermissionStatus(data.writable, new NativeFileSystemDirectoryHandleGetPermissionStatusResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case REQUEST_PERMISSION_ORDINAL: {

                        NativeFileSystemDirectoryHandleRequestPermissionParams data =
                                NativeFileSystemDirectoryHandleRequestPermissionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestPermission(data.writable, new NativeFileSystemDirectoryHandleRequestPermissionResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case GET_FILE_ORDINAL: {

                        NativeFileSystemDirectoryHandleGetFileParams data =
                                NativeFileSystemDirectoryHandleGetFileParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getFile(data.basename, data.create, new NativeFileSystemDirectoryHandleGetFileResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case GET_DIRECTORY_ORDINAL: {

                        NativeFileSystemDirectoryHandleGetDirectoryParams data =
                                NativeFileSystemDirectoryHandleGetDirectoryParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getDirectory(data.basename, data.create, new NativeFileSystemDirectoryHandleGetDirectoryResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }









                    case REMOVE_ENTRY_ORDINAL: {

                        NativeFileSystemDirectoryHandleRemoveEntryParams data =
                                NativeFileSystemDirectoryHandleRemoveEntryParams.deserialize(messageWithHeader.getPayload());

                        getImpl().removeEntry(data.basename, data.recurse, new NativeFileSystemDirectoryHandleRemoveEntryResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case RESOLVE_ORDINAL: {

                        NativeFileSystemDirectoryHandleResolveParams data =
                                NativeFileSystemDirectoryHandleResolveParams.deserialize(messageWithHeader.getPayload());

                        getImpl().resolve(data.possibleChild, new NativeFileSystemDirectoryHandleResolveResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }




                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class NativeFileSystemDirectoryHandleGetPermissionStatusParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean writable;

        private NativeFileSystemDirectoryHandleGetPermissionStatusParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemDirectoryHandleGetPermissionStatusParams() {
            this(0);
        }

        public static NativeFileSystemDirectoryHandleGetPermissionStatusParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemDirectoryHandleGetPermissionStatusParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemDirectoryHandleGetPermissionStatusParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemDirectoryHandleGetPermissionStatusParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemDirectoryHandleGetPermissionStatusParams(elementsOrVersion);
                    {
                        
                    result.writable = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.writable, 8, 0);
        }
    }



    
    static final class NativeFileSystemDirectoryHandleGetPermissionStatusResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int status;

        private NativeFileSystemDirectoryHandleGetPermissionStatusResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemDirectoryHandleGetPermissionStatusResponseParams() {
            this(0);
        }

        public static NativeFileSystemDirectoryHandleGetPermissionStatusResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemDirectoryHandleGetPermissionStatusResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemDirectoryHandleGetPermissionStatusResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemDirectoryHandleGetPermissionStatusResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemDirectoryHandleGetPermissionStatusResponseParams(elementsOrVersion);
                    {
                        
                    result.status = decoder0.readInt(8);
                        PermissionStatus.validate(result.status);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.status, 8);
        }
    }

    static class NativeFileSystemDirectoryHandleGetPermissionStatusResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NativeFileSystemDirectoryHandle.GetPermissionStatusResponse mCallback;

        NativeFileSystemDirectoryHandleGetPermissionStatusResponseParamsForwardToCallback(NativeFileSystemDirectoryHandle.GetPermissionStatusResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_PERMISSION_STATUS_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NativeFileSystemDirectoryHandleGetPermissionStatusResponseParams response = NativeFileSystemDirectoryHandleGetPermissionStatusResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.status);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NativeFileSystemDirectoryHandleGetPermissionStatusResponseParamsProxyToResponder implements NativeFileSystemDirectoryHandle.GetPermissionStatusResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NativeFileSystemDirectoryHandleGetPermissionStatusResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer status) {
            NativeFileSystemDirectoryHandleGetPermissionStatusResponseParams _response = new NativeFileSystemDirectoryHandleGetPermissionStatusResponseParams();

            _response.status = status;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_PERMISSION_STATUS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NativeFileSystemDirectoryHandleRequestPermissionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean writable;

        private NativeFileSystemDirectoryHandleRequestPermissionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemDirectoryHandleRequestPermissionParams() {
            this(0);
        }

        public static NativeFileSystemDirectoryHandleRequestPermissionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemDirectoryHandleRequestPermissionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemDirectoryHandleRequestPermissionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemDirectoryHandleRequestPermissionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemDirectoryHandleRequestPermissionParams(elementsOrVersion);
                    {
                        
                    result.writable = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.writable, 8, 0);
        }
    }



    
    static final class NativeFileSystemDirectoryHandleRequestPermissionResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemError result;
        public int status;

        private NativeFileSystemDirectoryHandleRequestPermissionResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemDirectoryHandleRequestPermissionResponseParams() {
            this(0);
        }

        public static NativeFileSystemDirectoryHandleRequestPermissionResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemDirectoryHandleRequestPermissionResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemDirectoryHandleRequestPermissionResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemDirectoryHandleRequestPermissionResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemDirectoryHandleRequestPermissionResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.result = NativeFileSystemError.decode(decoder1);
                    }
                    {
                        
                    result.status = decoder0.readInt(16);
                        PermissionStatus.validate(result.status);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8, false);
            
            encoder0.encode(this.status, 16);
        }
    }

    static class NativeFileSystemDirectoryHandleRequestPermissionResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NativeFileSystemDirectoryHandle.RequestPermissionResponse mCallback;

        NativeFileSystemDirectoryHandleRequestPermissionResponseParamsForwardToCallback(NativeFileSystemDirectoryHandle.RequestPermissionResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(REQUEST_PERMISSION_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NativeFileSystemDirectoryHandleRequestPermissionResponseParams response = NativeFileSystemDirectoryHandleRequestPermissionResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.status);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NativeFileSystemDirectoryHandleRequestPermissionResponseParamsProxyToResponder implements NativeFileSystemDirectoryHandle.RequestPermissionResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NativeFileSystemDirectoryHandleRequestPermissionResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(NativeFileSystemError result, Integer status) {
            NativeFileSystemDirectoryHandleRequestPermissionResponseParams _response = new NativeFileSystemDirectoryHandleRequestPermissionResponseParams();

            _response.result = result;

            _response.status = status;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    REQUEST_PERMISSION_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NativeFileSystemDirectoryHandleGetFileParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String basename;
        public boolean create;

        private NativeFileSystemDirectoryHandleGetFileParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemDirectoryHandleGetFileParams() {
            this(0);
        }

        public static NativeFileSystemDirectoryHandleGetFileParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemDirectoryHandleGetFileParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemDirectoryHandleGetFileParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemDirectoryHandleGetFileParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemDirectoryHandleGetFileParams(elementsOrVersion);
                    {
                        
                    result.basename = decoder0.readString(8, false);
                    }
                    {
                        
                    result.create = decoder0.readBoolean(16, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.basename, 8, false);
            
            encoder0.encode(this.create, 16, 0);
        }
    }



    
    static final class NativeFileSystemDirectoryHandleGetFileResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemError result;
        public NativeFileSystemFileHandle file;

        private NativeFileSystemDirectoryHandleGetFileResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemDirectoryHandleGetFileResponseParams() {
            this(0);
        }

        public static NativeFileSystemDirectoryHandleGetFileResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemDirectoryHandleGetFileResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemDirectoryHandleGetFileResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemDirectoryHandleGetFileResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemDirectoryHandleGetFileResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.result = NativeFileSystemError.decode(decoder1);
                    }
                    {
                        
                    result.file = decoder0.readServiceInterface(16, true, NativeFileSystemFileHandle.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8, false);
            
            encoder0.encode(this.file, 16, true, NativeFileSystemFileHandle.MANAGER);
        }
    }

    static class NativeFileSystemDirectoryHandleGetFileResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NativeFileSystemDirectoryHandle.GetFileResponse mCallback;

        NativeFileSystemDirectoryHandleGetFileResponseParamsForwardToCallback(NativeFileSystemDirectoryHandle.GetFileResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_FILE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NativeFileSystemDirectoryHandleGetFileResponseParams response = NativeFileSystemDirectoryHandleGetFileResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.file);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NativeFileSystemDirectoryHandleGetFileResponseParamsProxyToResponder implements NativeFileSystemDirectoryHandle.GetFileResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NativeFileSystemDirectoryHandleGetFileResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(NativeFileSystemError result, NativeFileSystemFileHandle file) {
            NativeFileSystemDirectoryHandleGetFileResponseParams _response = new NativeFileSystemDirectoryHandleGetFileResponseParams();

            _response.result = result;

            _response.file = file;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_FILE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NativeFileSystemDirectoryHandleGetDirectoryParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String basename;
        public boolean create;

        private NativeFileSystemDirectoryHandleGetDirectoryParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemDirectoryHandleGetDirectoryParams() {
            this(0);
        }

        public static NativeFileSystemDirectoryHandleGetDirectoryParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemDirectoryHandleGetDirectoryParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemDirectoryHandleGetDirectoryParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemDirectoryHandleGetDirectoryParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemDirectoryHandleGetDirectoryParams(elementsOrVersion);
                    {
                        
                    result.basename = decoder0.readString(8, false);
                    }
                    {
                        
                    result.create = decoder0.readBoolean(16, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.basename, 8, false);
            
            encoder0.encode(this.create, 16, 0);
        }
    }



    
    static final class NativeFileSystemDirectoryHandleGetDirectoryResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemError result;
        public NativeFileSystemDirectoryHandle directory;

        private NativeFileSystemDirectoryHandleGetDirectoryResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemDirectoryHandleGetDirectoryResponseParams() {
            this(0);
        }

        public static NativeFileSystemDirectoryHandleGetDirectoryResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemDirectoryHandleGetDirectoryResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemDirectoryHandleGetDirectoryResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemDirectoryHandleGetDirectoryResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemDirectoryHandleGetDirectoryResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.result = NativeFileSystemError.decode(decoder1);
                    }
                    {
                        
                    result.directory = decoder0.readServiceInterface(16, true, NativeFileSystemDirectoryHandle.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8, false);
            
            encoder0.encode(this.directory, 16, true, NativeFileSystemDirectoryHandle.MANAGER);
        }
    }

    static class NativeFileSystemDirectoryHandleGetDirectoryResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NativeFileSystemDirectoryHandle.GetDirectoryResponse mCallback;

        NativeFileSystemDirectoryHandleGetDirectoryResponseParamsForwardToCallback(NativeFileSystemDirectoryHandle.GetDirectoryResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(GET_DIRECTORY_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NativeFileSystemDirectoryHandleGetDirectoryResponseParams response = NativeFileSystemDirectoryHandleGetDirectoryResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.directory);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NativeFileSystemDirectoryHandleGetDirectoryResponseParamsProxyToResponder implements NativeFileSystemDirectoryHandle.GetDirectoryResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NativeFileSystemDirectoryHandleGetDirectoryResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(NativeFileSystemError result, NativeFileSystemDirectoryHandle directory) {
            NativeFileSystemDirectoryHandleGetDirectoryResponseParams _response = new NativeFileSystemDirectoryHandleGetDirectoryResponseParams();

            _response.result = result;

            _response.directory = directory;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    GET_DIRECTORY_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NativeFileSystemDirectoryHandleGetEntriesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemDirectoryEntriesListener listener;

        private NativeFileSystemDirectoryHandleGetEntriesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemDirectoryHandleGetEntriesParams() {
            this(0);
        }

        public static NativeFileSystemDirectoryHandleGetEntriesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemDirectoryHandleGetEntriesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemDirectoryHandleGetEntriesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemDirectoryHandleGetEntriesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemDirectoryHandleGetEntriesParams(elementsOrVersion);
                    {
                        
                    result.listener = decoder0.readServiceInterface(8, false, NativeFileSystemDirectoryEntriesListener.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.listener, 8, false, NativeFileSystemDirectoryEntriesListener.MANAGER);
        }
    }



    
    static final class NativeFileSystemDirectoryHandleRemoveEntryParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String basename;
        public boolean recurse;

        private NativeFileSystemDirectoryHandleRemoveEntryParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemDirectoryHandleRemoveEntryParams() {
            this(0);
        }

        public static NativeFileSystemDirectoryHandleRemoveEntryParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemDirectoryHandleRemoveEntryParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemDirectoryHandleRemoveEntryParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemDirectoryHandleRemoveEntryParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemDirectoryHandleRemoveEntryParams(elementsOrVersion);
                    {
                        
                    result.basename = decoder0.readString(8, false);
                    }
                    {
                        
                    result.recurse = decoder0.readBoolean(16, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.basename, 8, false);
            
            encoder0.encode(this.recurse, 16, 0);
        }
    }



    
    static final class NativeFileSystemDirectoryHandleRemoveEntryResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemError result;

        private NativeFileSystemDirectoryHandleRemoveEntryResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemDirectoryHandleRemoveEntryResponseParams() {
            this(0);
        }

        public static NativeFileSystemDirectoryHandleRemoveEntryResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemDirectoryHandleRemoveEntryResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemDirectoryHandleRemoveEntryResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemDirectoryHandleRemoveEntryResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemDirectoryHandleRemoveEntryResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.result = NativeFileSystemError.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8, false);
        }
    }

    static class NativeFileSystemDirectoryHandleRemoveEntryResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NativeFileSystemDirectoryHandle.RemoveEntryResponse mCallback;

        NativeFileSystemDirectoryHandleRemoveEntryResponseParamsForwardToCallback(NativeFileSystemDirectoryHandle.RemoveEntryResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(REMOVE_ENTRY_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NativeFileSystemDirectoryHandleRemoveEntryResponseParams response = NativeFileSystemDirectoryHandleRemoveEntryResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NativeFileSystemDirectoryHandleRemoveEntryResponseParamsProxyToResponder implements NativeFileSystemDirectoryHandle.RemoveEntryResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NativeFileSystemDirectoryHandleRemoveEntryResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(NativeFileSystemError result) {
            NativeFileSystemDirectoryHandleRemoveEntryResponseParams _response = new NativeFileSystemDirectoryHandleRemoveEntryResponseParams();

            _response.result = result;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    REMOVE_ENTRY_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NativeFileSystemDirectoryHandleResolveParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemTransferToken possibleChild;

        private NativeFileSystemDirectoryHandleResolveParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemDirectoryHandleResolveParams() {
            this(0);
        }

        public static NativeFileSystemDirectoryHandleResolveParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemDirectoryHandleResolveParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemDirectoryHandleResolveParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemDirectoryHandleResolveParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemDirectoryHandleResolveParams(elementsOrVersion);
                    {
                        
                    result.possibleChild = decoder0.readServiceInterface(8, false, NativeFileSystemTransferToken.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.possibleChild, 8, false, NativeFileSystemTransferToken.MANAGER);
        }
    }



    
    static final class NativeFileSystemDirectoryHandleResolveResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public NativeFileSystemError result;
        public String[] path;

        private NativeFileSystemDirectoryHandleResolveResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemDirectoryHandleResolveResponseParams() {
            this(0);
        }

        public static NativeFileSystemDirectoryHandleResolveResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemDirectoryHandleResolveResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemDirectoryHandleResolveResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemDirectoryHandleResolveResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemDirectoryHandleResolveResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.result = NativeFileSystemError.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    if (decoder1 == null) {
                        result.path = null;
                    } else {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.path = new String[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            result.path[i1] = decoder1.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8, false);
            
            if (this.path == null) {
                encoder0.encodeNullPointer(16, true);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.path.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.path.length; ++i0) {
                    
                    encoder1.encode(this.path[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }

    static class NativeFileSystemDirectoryHandleResolveResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NativeFileSystemDirectoryHandle.ResolveResponse mCallback;

        NativeFileSystemDirectoryHandleResolveResponseParamsForwardToCallback(NativeFileSystemDirectoryHandle.ResolveResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(RESOLVE_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NativeFileSystemDirectoryHandleResolveResponseParams response = NativeFileSystemDirectoryHandleResolveResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.path);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NativeFileSystemDirectoryHandleResolveResponseParamsProxyToResponder implements NativeFileSystemDirectoryHandle.ResolveResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NativeFileSystemDirectoryHandleResolveResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(NativeFileSystemError result, String[] path) {
            NativeFileSystemDirectoryHandleResolveResponseParams _response = new NativeFileSystemDirectoryHandleResolveResponseParams();

            _response.result = result;

            _response.path = path;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RESOLVE_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NativeFileSystemDirectoryHandleTransferParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<NativeFileSystemTransferToken> token;

        private NativeFileSystemDirectoryHandleTransferParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public NativeFileSystemDirectoryHandleTransferParams() {
            this(0);
        }

        public static NativeFileSystemDirectoryHandleTransferParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NativeFileSystemDirectoryHandleTransferParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static NativeFileSystemDirectoryHandleTransferParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NativeFileSystemDirectoryHandleTransferParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new NativeFileSystemDirectoryHandleTransferParams(elementsOrVersion);
                    {
                        
                    result.token = decoder0.readInterfaceRequest(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.token, 8, false);
        }
    }



}
