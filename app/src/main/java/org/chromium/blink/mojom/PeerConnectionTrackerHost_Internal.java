// PeerConnectionTrackerHost_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/peerconnection/peer_connection_tracker.mojom
//

package org.chromium.blink.mojom;


class PeerConnectionTrackerHost_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<PeerConnectionTrackerHost, PeerConnectionTrackerHost.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<PeerConnectionTrackerHost, PeerConnectionTrackerHost.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.PeerConnectionTrackerHost";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, PeerConnectionTrackerHost impl) {
            return new Stub(core, impl);
        }

        @Override
        public PeerConnectionTrackerHost[] buildArray(int size) {
          return new PeerConnectionTrackerHost[size];
        }
    };


    private static final int ADD_PEER_CONNECTION_ORDINAL = 0;

    private static final int REMOVE_PEER_CONNECTION_ORDINAL = 1;

    private static final int UPDATE_PEER_CONNECTION_ORDINAL = 2;

    private static final int ON_PEER_CONNECTION_SESSION_ID_SET_ORDINAL = 3;

    private static final int GET_USER_MEDIA_ORDINAL = 4;

    private static final int WEB_RTC_EVENT_LOG_WRITE_ORDINAL = 5;

    private static final int ADD_STANDARD_STATS_ORDINAL = 6;

    private static final int ADD_LEGACY_STATS_ORDINAL = 7;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements PeerConnectionTrackerHost.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void addPeerConnection(
PeerConnectionInfo info) {

            PeerConnectionTrackerHostAddPeerConnectionParams _message = new PeerConnectionTrackerHostAddPeerConnectionParams();

            _message.info = info;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADD_PEER_CONNECTION_ORDINAL)));

        }


        @Override
        public void removePeerConnection(
int lid) {

            PeerConnectionTrackerHostRemovePeerConnectionParams _message = new PeerConnectionTrackerHostRemovePeerConnectionParams();

            _message.lid = lid;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REMOVE_PEER_CONNECTION_ORDINAL)));

        }


        @Override
        public void updatePeerConnection(
int lid, String type, String value) {

            PeerConnectionTrackerHostUpdatePeerConnectionParams _message = new PeerConnectionTrackerHostUpdatePeerConnectionParams();

            _message.lid = lid;

            _message.type = type;

            _message.value = value;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_PEER_CONNECTION_ORDINAL)));

        }


        @Override
        public void onPeerConnectionSessionIdSet(
int lid, String sessionId) {

            PeerConnectionTrackerHostOnPeerConnectionSessionIdSetParams _message = new PeerConnectionTrackerHostOnPeerConnectionSessionIdSetParams();

            _message.lid = lid;

            _message.sessionId = sessionId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_PEER_CONNECTION_SESSION_ID_SET_ORDINAL)));

        }


        @Override
        public void getUserMedia(
String origin, boolean audio, boolean video, String audioConstraints, String videoConstraints) {

            PeerConnectionTrackerHostGetUserMediaParams _message = new PeerConnectionTrackerHostGetUserMediaParams();

            _message.origin = origin;

            _message.audio = audio;

            _message.video = video;

            _message.audioConstraints = audioConstraints;

            _message.videoConstraints = videoConstraints;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GET_USER_MEDIA_ORDINAL)));

        }


        @Override
        public void webRtcEventLogWrite(
int lid, byte[] output) {

            PeerConnectionTrackerHostWebRtcEventLogWriteParams _message = new PeerConnectionTrackerHostWebRtcEventLogWriteParams();

            _message.lid = lid;

            _message.output = output;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(WEB_RTC_EVENT_LOG_WRITE_ORDINAL)));

        }


        @Override
        public void addStandardStats(
int lid, org.chromium.mojo_base.mojom.ListValue value) {

            PeerConnectionTrackerHostAddStandardStatsParams _message = new PeerConnectionTrackerHostAddStandardStatsParams();

            _message.lid = lid;

            _message.value = value;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADD_STANDARD_STATS_ORDINAL)));

        }


        @Override
        public void addLegacyStats(
int lid, org.chromium.mojo_base.mojom.ListValue value) {

            PeerConnectionTrackerHostAddLegacyStatsParams _message = new PeerConnectionTrackerHostAddLegacyStatsParams();

            _message.lid = lid;

            _message.value = value;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADD_LEGACY_STATS_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<PeerConnectionTrackerHost> {

        Stub(org.chromium.mojo.system.Core core, PeerConnectionTrackerHost impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                PeerConnectionTrackerHost_Internal.MANAGER, messageWithHeader);





                    case ADD_PEER_CONNECTION_ORDINAL: {

                        PeerConnectionTrackerHostAddPeerConnectionParams data =
                                PeerConnectionTrackerHostAddPeerConnectionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addPeerConnection(data.info);
                        return true;
                    }





                    case REMOVE_PEER_CONNECTION_ORDINAL: {

                        PeerConnectionTrackerHostRemovePeerConnectionParams data =
                                PeerConnectionTrackerHostRemovePeerConnectionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().removePeerConnection(data.lid);
                        return true;
                    }





                    case UPDATE_PEER_CONNECTION_ORDINAL: {

                        PeerConnectionTrackerHostUpdatePeerConnectionParams data =
                                PeerConnectionTrackerHostUpdatePeerConnectionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updatePeerConnection(data.lid, data.type, data.value);
                        return true;
                    }





                    case ON_PEER_CONNECTION_SESSION_ID_SET_ORDINAL: {

                        PeerConnectionTrackerHostOnPeerConnectionSessionIdSetParams data =
                                PeerConnectionTrackerHostOnPeerConnectionSessionIdSetParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onPeerConnectionSessionIdSet(data.lid, data.sessionId);
                        return true;
                    }





                    case GET_USER_MEDIA_ORDINAL: {

                        PeerConnectionTrackerHostGetUserMediaParams data =
                                PeerConnectionTrackerHostGetUserMediaParams.deserialize(messageWithHeader.getPayload());

                        getImpl().getUserMedia(data.origin, data.audio, data.video, data.audioConstraints, data.videoConstraints);
                        return true;
                    }





                    case WEB_RTC_EVENT_LOG_WRITE_ORDINAL: {

                        PeerConnectionTrackerHostWebRtcEventLogWriteParams data =
                                PeerConnectionTrackerHostWebRtcEventLogWriteParams.deserialize(messageWithHeader.getPayload());

                        getImpl().webRtcEventLogWrite(data.lid, data.output);
                        return true;
                    }





                    case ADD_STANDARD_STATS_ORDINAL: {

                        PeerConnectionTrackerHostAddStandardStatsParams data =
                                PeerConnectionTrackerHostAddStandardStatsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addStandardStats(data.lid, data.value);
                        return true;
                    }





                    case ADD_LEGACY_STATS_ORDINAL: {

                        PeerConnectionTrackerHostAddLegacyStatsParams data =
                                PeerConnectionTrackerHostAddLegacyStatsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addLegacyStats(data.lid, data.value);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), PeerConnectionTrackerHost_Internal.MANAGER, messageWithHeader, receiver);


















                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class PeerConnectionTrackerHostAddPeerConnectionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PeerConnectionInfo info;

        private PeerConnectionTrackerHostAddPeerConnectionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PeerConnectionTrackerHostAddPeerConnectionParams() {
            this(0);
        }

        public static PeerConnectionTrackerHostAddPeerConnectionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PeerConnectionTrackerHostAddPeerConnectionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PeerConnectionTrackerHostAddPeerConnectionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PeerConnectionTrackerHostAddPeerConnectionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PeerConnectionTrackerHostAddPeerConnectionParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.info = PeerConnectionInfo.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.info, 8, false);
        }
    }



    
    static final class PeerConnectionTrackerHostRemovePeerConnectionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int lid;

        private PeerConnectionTrackerHostRemovePeerConnectionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PeerConnectionTrackerHostRemovePeerConnectionParams() {
            this(0);
        }

        public static PeerConnectionTrackerHostRemovePeerConnectionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PeerConnectionTrackerHostRemovePeerConnectionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PeerConnectionTrackerHostRemovePeerConnectionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PeerConnectionTrackerHostRemovePeerConnectionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PeerConnectionTrackerHostRemovePeerConnectionParams(elementsOrVersion);
                    {
                        
                    result.lid = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.lid, 8);
        }
    }



    
    static final class PeerConnectionTrackerHostUpdatePeerConnectionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int lid;
        public String type;
        public String value;

        private PeerConnectionTrackerHostUpdatePeerConnectionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PeerConnectionTrackerHostUpdatePeerConnectionParams() {
            this(0);
        }

        public static PeerConnectionTrackerHostUpdatePeerConnectionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PeerConnectionTrackerHostUpdatePeerConnectionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PeerConnectionTrackerHostUpdatePeerConnectionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PeerConnectionTrackerHostUpdatePeerConnectionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PeerConnectionTrackerHostUpdatePeerConnectionParams(elementsOrVersion);
                    {
                        
                    result.lid = decoder0.readInt(8);
                    }
                    {
                        
                    result.type = decoder0.readString(16, false);
                    }
                    {
                        
                    result.value = decoder0.readString(24, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.lid, 8);
            
            encoder0.encode(this.type, 16, false);
            
            encoder0.encode(this.value, 24, false);
        }
    }



    
    static final class PeerConnectionTrackerHostOnPeerConnectionSessionIdSetParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int lid;
        public String sessionId;

        private PeerConnectionTrackerHostOnPeerConnectionSessionIdSetParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PeerConnectionTrackerHostOnPeerConnectionSessionIdSetParams() {
            this(0);
        }

        public static PeerConnectionTrackerHostOnPeerConnectionSessionIdSetParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PeerConnectionTrackerHostOnPeerConnectionSessionIdSetParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PeerConnectionTrackerHostOnPeerConnectionSessionIdSetParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PeerConnectionTrackerHostOnPeerConnectionSessionIdSetParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PeerConnectionTrackerHostOnPeerConnectionSessionIdSetParams(elementsOrVersion);
                    {
                        
                    result.lid = decoder0.readInt(8);
                    }
                    {
                        
                    result.sessionId = decoder0.readString(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.lid, 8);
            
            encoder0.encode(this.sessionId, 16, false);
        }
    }



    
    static final class PeerConnectionTrackerHostGetUserMediaParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String origin;
        public boolean audio;
        public boolean video;
        public String audioConstraints;
        public String videoConstraints;

        private PeerConnectionTrackerHostGetUserMediaParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PeerConnectionTrackerHostGetUserMediaParams() {
            this(0);
        }

        public static PeerConnectionTrackerHostGetUserMediaParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PeerConnectionTrackerHostGetUserMediaParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PeerConnectionTrackerHostGetUserMediaParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PeerConnectionTrackerHostGetUserMediaParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PeerConnectionTrackerHostGetUserMediaParams(elementsOrVersion);
                    {
                        
                    result.origin = decoder0.readString(8, false);
                    }
                    {
                        
                    result.audio = decoder0.readBoolean(16, 0);
                    }
                    {
                        
                    result.video = decoder0.readBoolean(16, 1);
                    }
                    {
                        
                    result.audioConstraints = decoder0.readString(24, false);
                    }
                    {
                        
                    result.videoConstraints = decoder0.readString(32, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.origin, 8, false);
            
            encoder0.encode(this.audio, 16, 0);
            
            encoder0.encode(this.video, 16, 1);
            
            encoder0.encode(this.audioConstraints, 24, false);
            
            encoder0.encode(this.videoConstraints, 32, false);
        }
    }



    
    static final class PeerConnectionTrackerHostWebRtcEventLogWriteParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int lid;
        public byte[] output;

        private PeerConnectionTrackerHostWebRtcEventLogWriteParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PeerConnectionTrackerHostWebRtcEventLogWriteParams() {
            this(0);
        }

        public static PeerConnectionTrackerHostWebRtcEventLogWriteParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PeerConnectionTrackerHostWebRtcEventLogWriteParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PeerConnectionTrackerHostWebRtcEventLogWriteParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PeerConnectionTrackerHostWebRtcEventLogWriteParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PeerConnectionTrackerHostWebRtcEventLogWriteParams(elementsOrVersion);
                    {
                        
                    result.lid = decoder0.readInt(8);
                    }
                    {
                        
                    result.output = decoder0.readBytes(16, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.lid, 8);
            
            encoder0.encode(this.output, 16, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
    }



    
    static final class PeerConnectionTrackerHostAddStandardStatsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int lid;
        public org.chromium.mojo_base.mojom.ListValue value;

        private PeerConnectionTrackerHostAddStandardStatsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PeerConnectionTrackerHostAddStandardStatsParams() {
            this(0);
        }

        public static PeerConnectionTrackerHostAddStandardStatsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PeerConnectionTrackerHostAddStandardStatsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PeerConnectionTrackerHostAddStandardStatsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PeerConnectionTrackerHostAddStandardStatsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PeerConnectionTrackerHostAddStandardStatsParams(elementsOrVersion);
                    {
                        
                    result.lid = decoder0.readInt(8);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.value = org.chromium.mojo_base.mojom.ListValue.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.lid, 8);
            
            encoder0.encode(this.value, 16, false);
        }
    }



    
    static final class PeerConnectionTrackerHostAddLegacyStatsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int lid;
        public org.chromium.mojo_base.mojom.ListValue value;

        private PeerConnectionTrackerHostAddLegacyStatsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PeerConnectionTrackerHostAddLegacyStatsParams() {
            this(0);
        }

        public static PeerConnectionTrackerHostAddLegacyStatsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PeerConnectionTrackerHostAddLegacyStatsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PeerConnectionTrackerHostAddLegacyStatsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PeerConnectionTrackerHostAddLegacyStatsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PeerConnectionTrackerHostAddLegacyStatsParams(elementsOrVersion);
                    {
                        
                    result.lid = decoder0.readInt(8);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.value = org.chromium.mojo_base.mojom.ListValue.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.lid, 8);
            
            encoder0.encode(this.value, 16, false);
        }
    }



}
