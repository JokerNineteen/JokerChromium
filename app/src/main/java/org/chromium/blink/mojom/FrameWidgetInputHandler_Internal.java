// FrameWidgetInputHandler_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/input/input_handler.mojom
//

package org.chromium.blink.mojom;


class FrameWidgetInputHandler_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<FrameWidgetInputHandler, FrameWidgetInputHandler.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<FrameWidgetInputHandler, FrameWidgetInputHandler.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.FrameWidgetInputHandler";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, FrameWidgetInputHandler impl) {
            return new Stub(core, impl);
        }

        @Override
        public FrameWidgetInputHandler[] buildArray(int size) {
          return new FrameWidgetInputHandler[size];
        }
    };


    private static final int ADD_IME_TEXT_SPANS_TO_EXISTING_TEXT_ORDINAL = 0;

    private static final int CLEAR_IME_TEXT_SPANS_BY_TYPE_ORDINAL = 1;

    private static final int SET_COMPOSITION_FROM_EXISTING_TEXT_ORDINAL = 2;

    private static final int EXTEND_SELECTION_AND_DELETE_ORDINAL = 3;

    private static final int DELETE_SURROUNDING_TEXT_ORDINAL = 4;

    private static final int DELETE_SURROUNDING_TEXT_IN_CODE_POINTS_ORDINAL = 5;

    private static final int SET_EDITABLE_SELECTION_OFFSETS_ORDINAL = 6;

    private static final int EXECUTE_EDIT_COMMAND_ORDINAL = 7;

    private static final int UNDO_ORDINAL = 8;

    private static final int REDO_ORDINAL = 9;

    private static final int CUT_ORDINAL = 10;

    private static final int COPY_ORDINAL = 11;

    private static final int COPY_TO_FIND_PBOARD_ORDINAL = 12;

    private static final int PASTE_ORDINAL = 13;

    private static final int PASTE_AND_MATCH_STYLE_ORDINAL = 14;

    private static final int DELETE_ORDINAL = 15;

    private static final int SELECT_ALL_ORDINAL = 16;

    private static final int COLLAPSE_SELECTION_ORDINAL = 17;

    private static final int REPLACE_ORDINAL = 18;

    private static final int REPLACE_MISSPELLING_ORDINAL = 19;

    private static final int SELECT_RANGE_ORDINAL = 20;

    private static final int ADJUST_SELECTION_BY_CHARACTER_OFFSET_ORDINAL = 21;

    private static final int SELECT_WORD_AROUND_CARET_ORDINAL = 22;

    private static final int MOVE_RANGE_SELECTION_EXTENT_ORDINAL = 23;

    private static final int SCROLL_FOCUSED_EDITABLE_NODE_INTO_RECT_ORDINAL = 24;

    private static final int MOVE_CARET_ORDINAL = 25;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements FrameWidgetInputHandler.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void addImeTextSpansToExistingText(
int start, int end, org.chromium.ui.mojom.ImeTextSpan[] imeTextSpans) {

            FrameWidgetInputHandlerAddImeTextSpansToExistingTextParams _message = new FrameWidgetInputHandlerAddImeTextSpansToExistingTextParams();

            _message.start = start;

            _message.end = end;

            _message.imeTextSpans = imeTextSpans;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADD_IME_TEXT_SPANS_TO_EXISTING_TEXT_ORDINAL)));

        }


        @Override
        public void clearImeTextSpansByType(
int start, int end, int type) {

            FrameWidgetInputHandlerClearImeTextSpansByTypeParams _message = new FrameWidgetInputHandlerClearImeTextSpansByTypeParams();

            _message.start = start;

            _message.end = end;

            _message.type = type;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CLEAR_IME_TEXT_SPANS_BY_TYPE_ORDINAL)));

        }


        @Override
        public void setCompositionFromExistingText(
int start, int end, org.chromium.ui.mojom.ImeTextSpan[] imeTextSpans) {

            FrameWidgetInputHandlerSetCompositionFromExistingTextParams _message = new FrameWidgetInputHandlerSetCompositionFromExistingTextParams();

            _message.start = start;

            _message.end = end;

            _message.imeTextSpans = imeTextSpans;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_COMPOSITION_FROM_EXISTING_TEXT_ORDINAL)));

        }


        @Override
        public void extendSelectionAndDelete(
int before, int after) {

            FrameWidgetInputHandlerExtendSelectionAndDeleteParams _message = new FrameWidgetInputHandlerExtendSelectionAndDeleteParams();

            _message.before = before;

            _message.after = after;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(EXTEND_SELECTION_AND_DELETE_ORDINAL)));

        }


        @Override
        public void deleteSurroundingText(
int before, int after) {

            FrameWidgetInputHandlerDeleteSurroundingTextParams _message = new FrameWidgetInputHandlerDeleteSurroundingTextParams();

            _message.before = before;

            _message.after = after;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DELETE_SURROUNDING_TEXT_ORDINAL)));

        }


        @Override
        public void deleteSurroundingTextInCodePoints(
int before, int after) {

            FrameWidgetInputHandlerDeleteSurroundingTextInCodePointsParams _message = new FrameWidgetInputHandlerDeleteSurroundingTextInCodePointsParams();

            _message.before = before;

            _message.after = after;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DELETE_SURROUNDING_TEXT_IN_CODE_POINTS_ORDINAL)));

        }


        @Override
        public void setEditableSelectionOffsets(
int start, int end) {

            FrameWidgetInputHandlerSetEditableSelectionOffsetsParams _message = new FrameWidgetInputHandlerSetEditableSelectionOffsetsParams();

            _message.start = start;

            _message.end = end;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_EDITABLE_SELECTION_OFFSETS_ORDINAL)));

        }


        @Override
        public void executeEditCommand(
String command, org.chromium.mojo_base.mojom.String16 value) {

            FrameWidgetInputHandlerExecuteEditCommandParams _message = new FrameWidgetInputHandlerExecuteEditCommandParams();

            _message.command = command;

            _message.value = value;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(EXECUTE_EDIT_COMMAND_ORDINAL)));

        }


        @Override
        public void undo(
) {

            FrameWidgetInputHandlerUndoParams _message = new FrameWidgetInputHandlerUndoParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UNDO_ORDINAL)));

        }


        @Override
        public void redo(
) {

            FrameWidgetInputHandlerRedoParams _message = new FrameWidgetInputHandlerRedoParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REDO_ORDINAL)));

        }


        @Override
        public void cut(
) {

            FrameWidgetInputHandlerCutParams _message = new FrameWidgetInputHandlerCutParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CUT_ORDINAL)));

        }


        @Override
        public void copy(
) {

            FrameWidgetInputHandlerCopyParams _message = new FrameWidgetInputHandlerCopyParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(COPY_ORDINAL)));

        }


        @Override
        public void copyToFindPboard(
) {

            FrameWidgetInputHandlerCopyToFindPboardParams _message = new FrameWidgetInputHandlerCopyToFindPboardParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(COPY_TO_FIND_PBOARD_ORDINAL)));

        }


        @Override
        public void paste(
) {

            FrameWidgetInputHandlerPasteParams _message = new FrameWidgetInputHandlerPasteParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(PASTE_ORDINAL)));

        }


        @Override
        public void pasteAndMatchStyle(
) {

            FrameWidgetInputHandlerPasteAndMatchStyleParams _message = new FrameWidgetInputHandlerPasteAndMatchStyleParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(PASTE_AND_MATCH_STYLE_ORDINAL)));

        }


        @Override
        public void delete(
) {

            FrameWidgetInputHandlerDeleteParams _message = new FrameWidgetInputHandlerDeleteParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DELETE_ORDINAL)));

        }


        @Override
        public void selectAll(
) {

            FrameWidgetInputHandlerSelectAllParams _message = new FrameWidgetInputHandlerSelectAllParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SELECT_ALL_ORDINAL)));

        }


        @Override
        public void collapseSelection(
) {

            FrameWidgetInputHandlerCollapseSelectionParams _message = new FrameWidgetInputHandlerCollapseSelectionParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(COLLAPSE_SELECTION_ORDINAL)));

        }


        @Override
        public void replace(
org.chromium.mojo_base.mojom.String16 word) {

            FrameWidgetInputHandlerReplaceParams _message = new FrameWidgetInputHandlerReplaceParams();

            _message.word = word;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REPLACE_ORDINAL)));

        }


        @Override
        public void replaceMisspelling(
org.chromium.mojo_base.mojom.String16 word) {

            FrameWidgetInputHandlerReplaceMisspellingParams _message = new FrameWidgetInputHandlerReplaceMisspellingParams();

            _message.word = word;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REPLACE_MISSPELLING_ORDINAL)));

        }


        @Override
        public void selectRange(
org.chromium.gfx.mojom.Point base, org.chromium.gfx.mojom.Point extent) {

            FrameWidgetInputHandlerSelectRangeParams _message = new FrameWidgetInputHandlerSelectRangeParams();

            _message.base = base;

            _message.extent = extent;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SELECT_RANGE_ORDINAL)));

        }


        @Override
        public void adjustSelectionByCharacterOffset(
int start, int end, int behavior) {

            FrameWidgetInputHandlerAdjustSelectionByCharacterOffsetParams _message = new FrameWidgetInputHandlerAdjustSelectionByCharacterOffsetParams();

            _message.start = start;

            _message.end = end;

            _message.behavior = behavior;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADJUST_SELECTION_BY_CHARACTER_OFFSET_ORDINAL)));

        }


        @Override
        public void selectWordAroundCaret(

SelectWordAroundCaretResponse callback) {

            FrameWidgetInputHandlerSelectWordAroundCaretParams _message = new FrameWidgetInputHandlerSelectWordAroundCaretParams();


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SELECT_WORD_AROUND_CARET_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new FrameWidgetInputHandlerSelectWordAroundCaretResponseParamsForwardToCallback(callback));

        }


        @Override
        public void moveRangeSelectionExtent(
org.chromium.gfx.mojom.Point extent) {

            FrameWidgetInputHandlerMoveRangeSelectionExtentParams _message = new FrameWidgetInputHandlerMoveRangeSelectionExtentParams();

            _message.extent = extent;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(MOVE_RANGE_SELECTION_EXTENT_ORDINAL)));

        }


        @Override
        public void scrollFocusedEditableNodeIntoRect(
org.chromium.gfx.mojom.Rect rect) {

            FrameWidgetInputHandlerScrollFocusedEditableNodeIntoRectParams _message = new FrameWidgetInputHandlerScrollFocusedEditableNodeIntoRectParams();

            _message.rect = rect;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SCROLL_FOCUSED_EDITABLE_NODE_INTO_RECT_ORDINAL)));

        }


        @Override
        public void moveCaret(
org.chromium.gfx.mojom.Point point) {

            FrameWidgetInputHandlerMoveCaretParams _message = new FrameWidgetInputHandlerMoveCaretParams();

            _message.point = point;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(MOVE_CARET_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<FrameWidgetInputHandler> {

        Stub(org.chromium.mojo.system.Core core, FrameWidgetInputHandler impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                FrameWidgetInputHandler_Internal.MANAGER, messageWithHeader);





                    case ADD_IME_TEXT_SPANS_TO_EXISTING_TEXT_ORDINAL: {

                        FrameWidgetInputHandlerAddImeTextSpansToExistingTextParams data =
                                FrameWidgetInputHandlerAddImeTextSpansToExistingTextParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addImeTextSpansToExistingText(data.start, data.end, data.imeTextSpans);
                        return true;
                    }





                    case CLEAR_IME_TEXT_SPANS_BY_TYPE_ORDINAL: {

                        FrameWidgetInputHandlerClearImeTextSpansByTypeParams data =
                                FrameWidgetInputHandlerClearImeTextSpansByTypeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().clearImeTextSpansByType(data.start, data.end, data.type);
                        return true;
                    }





                    case SET_COMPOSITION_FROM_EXISTING_TEXT_ORDINAL: {

                        FrameWidgetInputHandlerSetCompositionFromExistingTextParams data =
                                FrameWidgetInputHandlerSetCompositionFromExistingTextParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setCompositionFromExistingText(data.start, data.end, data.imeTextSpans);
                        return true;
                    }





                    case EXTEND_SELECTION_AND_DELETE_ORDINAL: {

                        FrameWidgetInputHandlerExtendSelectionAndDeleteParams data =
                                FrameWidgetInputHandlerExtendSelectionAndDeleteParams.deserialize(messageWithHeader.getPayload());

                        getImpl().extendSelectionAndDelete(data.before, data.after);
                        return true;
                    }





                    case DELETE_SURROUNDING_TEXT_ORDINAL: {

                        FrameWidgetInputHandlerDeleteSurroundingTextParams data =
                                FrameWidgetInputHandlerDeleteSurroundingTextParams.deserialize(messageWithHeader.getPayload());

                        getImpl().deleteSurroundingText(data.before, data.after);
                        return true;
                    }





                    case DELETE_SURROUNDING_TEXT_IN_CODE_POINTS_ORDINAL: {

                        FrameWidgetInputHandlerDeleteSurroundingTextInCodePointsParams data =
                                FrameWidgetInputHandlerDeleteSurroundingTextInCodePointsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().deleteSurroundingTextInCodePoints(data.before, data.after);
                        return true;
                    }





                    case SET_EDITABLE_SELECTION_OFFSETS_ORDINAL: {

                        FrameWidgetInputHandlerSetEditableSelectionOffsetsParams data =
                                FrameWidgetInputHandlerSetEditableSelectionOffsetsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setEditableSelectionOffsets(data.start, data.end);
                        return true;
                    }





                    case EXECUTE_EDIT_COMMAND_ORDINAL: {

                        FrameWidgetInputHandlerExecuteEditCommandParams data =
                                FrameWidgetInputHandlerExecuteEditCommandParams.deserialize(messageWithHeader.getPayload());

                        getImpl().executeEditCommand(data.command, data.value);
                        return true;
                    }





                    case UNDO_ORDINAL: {

                        FrameWidgetInputHandlerUndoParams.deserialize(messageWithHeader.getPayload());

                        getImpl().undo();
                        return true;
                    }





                    case REDO_ORDINAL: {

                        FrameWidgetInputHandlerRedoParams.deserialize(messageWithHeader.getPayload());

                        getImpl().redo();
                        return true;
                    }





                    case CUT_ORDINAL: {

                        FrameWidgetInputHandlerCutParams.deserialize(messageWithHeader.getPayload());

                        getImpl().cut();
                        return true;
                    }





                    case COPY_ORDINAL: {

                        FrameWidgetInputHandlerCopyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().copy();
                        return true;
                    }





                    case COPY_TO_FIND_PBOARD_ORDINAL: {

                        FrameWidgetInputHandlerCopyToFindPboardParams.deserialize(messageWithHeader.getPayload());

                        getImpl().copyToFindPboard();
                        return true;
                    }





                    case PASTE_ORDINAL: {

                        FrameWidgetInputHandlerPasteParams.deserialize(messageWithHeader.getPayload());

                        getImpl().paste();
                        return true;
                    }





                    case PASTE_AND_MATCH_STYLE_ORDINAL: {

                        FrameWidgetInputHandlerPasteAndMatchStyleParams.deserialize(messageWithHeader.getPayload());

                        getImpl().pasteAndMatchStyle();
                        return true;
                    }





                    case DELETE_ORDINAL: {

                        FrameWidgetInputHandlerDeleteParams.deserialize(messageWithHeader.getPayload());

                        getImpl().delete();
                        return true;
                    }





                    case SELECT_ALL_ORDINAL: {

                        FrameWidgetInputHandlerSelectAllParams.deserialize(messageWithHeader.getPayload());

                        getImpl().selectAll();
                        return true;
                    }





                    case COLLAPSE_SELECTION_ORDINAL: {

                        FrameWidgetInputHandlerCollapseSelectionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().collapseSelection();
                        return true;
                    }





                    case REPLACE_ORDINAL: {

                        FrameWidgetInputHandlerReplaceParams data =
                                FrameWidgetInputHandlerReplaceParams.deserialize(messageWithHeader.getPayload());

                        getImpl().replace(data.word);
                        return true;
                    }





                    case REPLACE_MISSPELLING_ORDINAL: {

                        FrameWidgetInputHandlerReplaceMisspellingParams data =
                                FrameWidgetInputHandlerReplaceMisspellingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().replaceMisspelling(data.word);
                        return true;
                    }





                    case SELECT_RANGE_ORDINAL: {

                        FrameWidgetInputHandlerSelectRangeParams data =
                                FrameWidgetInputHandlerSelectRangeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().selectRange(data.base, data.extent);
                        return true;
                    }





                    case ADJUST_SELECTION_BY_CHARACTER_OFFSET_ORDINAL: {

                        FrameWidgetInputHandlerAdjustSelectionByCharacterOffsetParams data =
                                FrameWidgetInputHandlerAdjustSelectionByCharacterOffsetParams.deserialize(messageWithHeader.getPayload());

                        getImpl().adjustSelectionByCharacterOffset(data.start, data.end, data.behavior);
                        return true;
                    }







                    case MOVE_RANGE_SELECTION_EXTENT_ORDINAL: {

                        FrameWidgetInputHandlerMoveRangeSelectionExtentParams data =
                                FrameWidgetInputHandlerMoveRangeSelectionExtentParams.deserialize(messageWithHeader.getPayload());

                        getImpl().moveRangeSelectionExtent(data.extent);
                        return true;
                    }





                    case SCROLL_FOCUSED_EDITABLE_NODE_INTO_RECT_ORDINAL: {

                        FrameWidgetInputHandlerScrollFocusedEditableNodeIntoRectParams data =
                                FrameWidgetInputHandlerScrollFocusedEditableNodeIntoRectParams.deserialize(messageWithHeader.getPayload());

                        getImpl().scrollFocusedEditableNodeIntoRect(data.rect);
                        return true;
                    }





                    case MOVE_CARET_ORDINAL: {

                        FrameWidgetInputHandlerMoveCaretParams data =
                                FrameWidgetInputHandlerMoveCaretParams.deserialize(messageWithHeader.getPayload());

                        getImpl().moveCaret(data.point);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), FrameWidgetInputHandler_Internal.MANAGER, messageWithHeader, receiver);



















































                    case SELECT_WORD_AROUND_CARET_ORDINAL: {

                        FrameWidgetInputHandlerSelectWordAroundCaretParams.deserialize(messageWithHeader.getPayload());

                        getImpl().selectWordAroundCaret(new FrameWidgetInputHandlerSelectWordAroundCaretResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }








                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class FrameWidgetInputHandlerAddImeTextSpansToExistingTextParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int start;
        public int end;
        public org.chromium.ui.mojom.ImeTextSpan[] imeTextSpans;

        private FrameWidgetInputHandlerAddImeTextSpansToExistingTextParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerAddImeTextSpansToExistingTextParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerAddImeTextSpansToExistingTextParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerAddImeTextSpansToExistingTextParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerAddImeTextSpansToExistingTextParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerAddImeTextSpansToExistingTextParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerAddImeTextSpansToExistingTextParams(elementsOrVersion);
                    {
                        
                    result.start = decoder0.readInt(8);
                    }
                    {
                        
                    result.end = decoder0.readInt(12);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.imeTextSpans = new org.chromium.ui.mojom.ImeTextSpan[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.imeTextSpans[i1] = org.chromium.ui.mojom.ImeTextSpan.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.start, 8);
            
            encoder0.encode(this.end, 12);
            
            if (this.imeTextSpans == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.imeTextSpans.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.imeTextSpans.length; ++i0) {
                    
                    encoder1.encode(this.imeTextSpans[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class FrameWidgetInputHandlerClearImeTextSpansByTypeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int start;
        public int end;
        public int type;

        private FrameWidgetInputHandlerClearImeTextSpansByTypeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerClearImeTextSpansByTypeParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerClearImeTextSpansByTypeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerClearImeTextSpansByTypeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerClearImeTextSpansByTypeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerClearImeTextSpansByTypeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerClearImeTextSpansByTypeParams(elementsOrVersion);
                    {
                        
                    result.start = decoder0.readInt(8);
                    }
                    {
                        
                    result.end = decoder0.readInt(12);
                    }
                    {
                        
                    result.type = decoder0.readInt(16);
                        org.chromium.ui.mojom.ImeTextSpanType.validate(result.type);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.start, 8);
            
            encoder0.encode(this.end, 12);
            
            encoder0.encode(this.type, 16);
        }
    }



    
    static final class FrameWidgetInputHandlerSetCompositionFromExistingTextParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int start;
        public int end;
        public org.chromium.ui.mojom.ImeTextSpan[] imeTextSpans;

        private FrameWidgetInputHandlerSetCompositionFromExistingTextParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerSetCompositionFromExistingTextParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerSetCompositionFromExistingTextParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerSetCompositionFromExistingTextParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerSetCompositionFromExistingTextParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerSetCompositionFromExistingTextParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerSetCompositionFromExistingTextParams(elementsOrVersion);
                    {
                        
                    result.start = decoder0.readInt(8);
                    }
                    {
                        
                    result.end = decoder0.readInt(12);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    {
                        org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                        result.imeTextSpans = new org.chromium.ui.mojom.ImeTextSpan[si1.elementsOrVersion];
                        for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                            
                            org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                            result.imeTextSpans[i1] = org.chromium.ui.mojom.ImeTextSpan.decode(decoder2);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.start, 8);
            
            encoder0.encode(this.end, 12);
            
            if (this.imeTextSpans == null) {
                encoder0.encodeNullPointer(16, false);
            } else {
                org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.imeTextSpans.length, 16, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                for (int i0 = 0; i0 < this.imeTextSpans.length; ++i0) {
                    
                    encoder1.encode(this.imeTextSpans[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                }
            }
        }
    }



    
    static final class FrameWidgetInputHandlerExtendSelectionAndDeleteParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int before;
        public int after;

        private FrameWidgetInputHandlerExtendSelectionAndDeleteParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerExtendSelectionAndDeleteParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerExtendSelectionAndDeleteParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerExtendSelectionAndDeleteParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerExtendSelectionAndDeleteParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerExtendSelectionAndDeleteParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerExtendSelectionAndDeleteParams(elementsOrVersion);
                    {
                        
                    result.before = decoder0.readInt(8);
                    }
                    {
                        
                    result.after = decoder0.readInt(12);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.before, 8);
            
            encoder0.encode(this.after, 12);
        }
    }



    
    static final class FrameWidgetInputHandlerDeleteSurroundingTextParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int before;
        public int after;

        private FrameWidgetInputHandlerDeleteSurroundingTextParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerDeleteSurroundingTextParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerDeleteSurroundingTextParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerDeleteSurroundingTextParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerDeleteSurroundingTextParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerDeleteSurroundingTextParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerDeleteSurroundingTextParams(elementsOrVersion);
                    {
                        
                    result.before = decoder0.readInt(8);
                    }
                    {
                        
                    result.after = decoder0.readInt(12);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.before, 8);
            
            encoder0.encode(this.after, 12);
        }
    }



    
    static final class FrameWidgetInputHandlerDeleteSurroundingTextInCodePointsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int before;
        public int after;

        private FrameWidgetInputHandlerDeleteSurroundingTextInCodePointsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerDeleteSurroundingTextInCodePointsParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerDeleteSurroundingTextInCodePointsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerDeleteSurroundingTextInCodePointsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerDeleteSurroundingTextInCodePointsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerDeleteSurroundingTextInCodePointsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerDeleteSurroundingTextInCodePointsParams(elementsOrVersion);
                    {
                        
                    result.before = decoder0.readInt(8);
                    }
                    {
                        
                    result.after = decoder0.readInt(12);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.before, 8);
            
            encoder0.encode(this.after, 12);
        }
    }



    
    static final class FrameWidgetInputHandlerSetEditableSelectionOffsetsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int start;
        public int end;

        private FrameWidgetInputHandlerSetEditableSelectionOffsetsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerSetEditableSelectionOffsetsParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerSetEditableSelectionOffsetsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerSetEditableSelectionOffsetsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerSetEditableSelectionOffsetsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerSetEditableSelectionOffsetsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerSetEditableSelectionOffsetsParams(elementsOrVersion);
                    {
                        
                    result.start = decoder0.readInt(8);
                    }
                    {
                        
                    result.end = decoder0.readInt(12);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.start, 8);
            
            encoder0.encode(this.end, 12);
        }
    }



    
    static final class FrameWidgetInputHandlerExecuteEditCommandParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String command;
        public org.chromium.mojo_base.mojom.String16 value;

        private FrameWidgetInputHandlerExecuteEditCommandParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerExecuteEditCommandParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerExecuteEditCommandParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerExecuteEditCommandParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerExecuteEditCommandParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerExecuteEditCommandParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerExecuteEditCommandParams(elementsOrVersion);
                    {
                        
                    result.command = decoder0.readString(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.value = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.command, 8, false);
            
            encoder0.encode(this.value, 16, true);
        }
    }



    
    static final class FrameWidgetInputHandlerUndoParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private FrameWidgetInputHandlerUndoParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerUndoParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerUndoParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerUndoParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerUndoParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerUndoParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerUndoParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class FrameWidgetInputHandlerRedoParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private FrameWidgetInputHandlerRedoParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerRedoParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerRedoParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerRedoParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerRedoParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerRedoParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerRedoParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class FrameWidgetInputHandlerCutParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private FrameWidgetInputHandlerCutParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerCutParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerCutParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerCutParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerCutParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerCutParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerCutParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class FrameWidgetInputHandlerCopyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private FrameWidgetInputHandlerCopyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerCopyParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerCopyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerCopyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerCopyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerCopyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerCopyParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class FrameWidgetInputHandlerCopyToFindPboardParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private FrameWidgetInputHandlerCopyToFindPboardParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerCopyToFindPboardParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerCopyToFindPboardParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerCopyToFindPboardParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerCopyToFindPboardParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerCopyToFindPboardParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerCopyToFindPboardParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class FrameWidgetInputHandlerPasteParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private FrameWidgetInputHandlerPasteParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerPasteParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerPasteParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerPasteParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerPasteParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerPasteParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerPasteParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class FrameWidgetInputHandlerPasteAndMatchStyleParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private FrameWidgetInputHandlerPasteAndMatchStyleParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerPasteAndMatchStyleParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerPasteAndMatchStyleParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerPasteAndMatchStyleParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerPasteAndMatchStyleParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerPasteAndMatchStyleParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerPasteAndMatchStyleParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class FrameWidgetInputHandlerDeleteParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private FrameWidgetInputHandlerDeleteParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerDeleteParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerDeleteParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerDeleteParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerDeleteParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerDeleteParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerDeleteParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class FrameWidgetInputHandlerSelectAllParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private FrameWidgetInputHandlerSelectAllParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerSelectAllParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerSelectAllParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerSelectAllParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerSelectAllParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerSelectAllParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerSelectAllParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class FrameWidgetInputHandlerCollapseSelectionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private FrameWidgetInputHandlerCollapseSelectionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerCollapseSelectionParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerCollapseSelectionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerCollapseSelectionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerCollapseSelectionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerCollapseSelectionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerCollapseSelectionParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class FrameWidgetInputHandlerReplaceParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16 word;

        private FrameWidgetInputHandlerReplaceParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerReplaceParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerReplaceParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerReplaceParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerReplaceParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerReplaceParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerReplaceParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.word = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.word, 8, false);
        }
    }



    
    static final class FrameWidgetInputHandlerReplaceMisspellingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16 word;

        private FrameWidgetInputHandlerReplaceMisspellingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerReplaceMisspellingParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerReplaceMisspellingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerReplaceMisspellingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerReplaceMisspellingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerReplaceMisspellingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerReplaceMisspellingParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.word = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.word, 8, false);
        }
    }



    
    static final class FrameWidgetInputHandlerSelectRangeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Point base;
        public org.chromium.gfx.mojom.Point extent;

        private FrameWidgetInputHandlerSelectRangeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerSelectRangeParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerSelectRangeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerSelectRangeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerSelectRangeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerSelectRangeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerSelectRangeParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.base = org.chromium.gfx.mojom.Point.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.extent = org.chromium.gfx.mojom.Point.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.base, 8, false);
            
            encoder0.encode(this.extent, 16, false);
        }
    }



    
    static final class FrameWidgetInputHandlerAdjustSelectionByCharacterOffsetParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int start;
        public int end;
        public int behavior;

        private FrameWidgetInputHandlerAdjustSelectionByCharacterOffsetParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerAdjustSelectionByCharacterOffsetParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerAdjustSelectionByCharacterOffsetParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerAdjustSelectionByCharacterOffsetParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerAdjustSelectionByCharacterOffsetParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerAdjustSelectionByCharacterOffsetParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerAdjustSelectionByCharacterOffsetParams(elementsOrVersion);
                    {
                        
                    result.start = decoder0.readInt(8);
                    }
                    {
                        
                    result.end = decoder0.readInt(12);
                    }
                    {
                        
                    result.behavior = decoder0.readInt(16);
                        SelectionMenuBehavior.validate(result.behavior);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.start, 8);
            
            encoder0.encode(this.end, 12);
            
            encoder0.encode(this.behavior, 16);
        }
    }



    
    static final class FrameWidgetInputHandlerSelectWordAroundCaretParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private FrameWidgetInputHandlerSelectWordAroundCaretParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerSelectWordAroundCaretParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerSelectWordAroundCaretParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerSelectWordAroundCaretParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerSelectWordAroundCaretParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerSelectWordAroundCaretParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerSelectWordAroundCaretParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class FrameWidgetInputHandlerSelectWordAroundCaretResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean didSelect;
        public int startAdjust;
        public int endAdjust;

        private FrameWidgetInputHandlerSelectWordAroundCaretResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerSelectWordAroundCaretResponseParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerSelectWordAroundCaretResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerSelectWordAroundCaretResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerSelectWordAroundCaretResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerSelectWordAroundCaretResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerSelectWordAroundCaretResponseParams(elementsOrVersion);
                    {
                        
                    result.didSelect = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.startAdjust = decoder0.readInt(12);
                    }
                    {
                        
                    result.endAdjust = decoder0.readInt(16);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.didSelect, 8, 0);
            
            encoder0.encode(this.startAdjust, 12);
            
            encoder0.encode(this.endAdjust, 16);
        }
    }

    static class FrameWidgetInputHandlerSelectWordAroundCaretResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final FrameWidgetInputHandler.SelectWordAroundCaretResponse mCallback;

        FrameWidgetInputHandlerSelectWordAroundCaretResponseParamsForwardToCallback(FrameWidgetInputHandler.SelectWordAroundCaretResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(SELECT_WORD_AROUND_CARET_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                FrameWidgetInputHandlerSelectWordAroundCaretResponseParams response = FrameWidgetInputHandlerSelectWordAroundCaretResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.didSelect, response.startAdjust, response.endAdjust);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class FrameWidgetInputHandlerSelectWordAroundCaretResponseParamsProxyToResponder implements FrameWidgetInputHandler.SelectWordAroundCaretResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        FrameWidgetInputHandlerSelectWordAroundCaretResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean didSelect, Integer startAdjust, Integer endAdjust) {
            FrameWidgetInputHandlerSelectWordAroundCaretResponseParams _response = new FrameWidgetInputHandlerSelectWordAroundCaretResponseParams();

            _response.didSelect = didSelect;

            _response.startAdjust = startAdjust;

            _response.endAdjust = endAdjust;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    SELECT_WORD_AROUND_CARET_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class FrameWidgetInputHandlerMoveRangeSelectionExtentParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Point extent;

        private FrameWidgetInputHandlerMoveRangeSelectionExtentParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerMoveRangeSelectionExtentParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerMoveRangeSelectionExtentParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerMoveRangeSelectionExtentParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerMoveRangeSelectionExtentParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerMoveRangeSelectionExtentParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerMoveRangeSelectionExtentParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.extent = org.chromium.gfx.mojom.Point.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.extent, 8, false);
        }
    }



    
    static final class FrameWidgetInputHandlerScrollFocusedEditableNodeIntoRectParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Rect rect;

        private FrameWidgetInputHandlerScrollFocusedEditableNodeIntoRectParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerScrollFocusedEditableNodeIntoRectParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerScrollFocusedEditableNodeIntoRectParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerScrollFocusedEditableNodeIntoRectParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerScrollFocusedEditableNodeIntoRectParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerScrollFocusedEditableNodeIntoRectParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerScrollFocusedEditableNodeIntoRectParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.rect = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.rect, 8, false);
        }
    }



    
    static final class FrameWidgetInputHandlerMoveCaretParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Point point;

        private FrameWidgetInputHandlerMoveCaretParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public FrameWidgetInputHandlerMoveCaretParams() {
            this(0);
        }

        public static FrameWidgetInputHandlerMoveCaretParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static FrameWidgetInputHandlerMoveCaretParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static FrameWidgetInputHandlerMoveCaretParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            FrameWidgetInputHandlerMoveCaretParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new FrameWidgetInputHandlerMoveCaretParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.point = org.chromium.gfx.mojom.Point.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.point, 8, false);
        }
    }



}
