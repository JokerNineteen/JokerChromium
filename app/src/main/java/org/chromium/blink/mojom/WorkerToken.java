// WorkerToken.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/tokens/tokens.mojom
//

package org.chromium.blink.mojom;


public final class WorkerToken extends org.chromium.mojo.bindings.Union {

    public static final class Tag {
        public static final int DedicatedWorkerToken = 0;
        public static final int ServiceWorkerToken = 1;
        public static final int SharedWorkerToken = 2;
    };
    private DedicatedWorkerToken mDedicatedWorkerToken;
    private ServiceWorkerToken mServiceWorkerToken;
    private SharedWorkerToken mSharedWorkerToken;

    public void setDedicatedWorkerToken(DedicatedWorkerToken dedicatedWorkerToken) {
        this.mTag = Tag.DedicatedWorkerToken;
        this.mDedicatedWorkerToken = dedicatedWorkerToken;
    }

    public DedicatedWorkerToken getDedicatedWorkerToken() {
        assert this.mTag == Tag.DedicatedWorkerToken;
        return this.mDedicatedWorkerToken;
    }

    public void setServiceWorkerToken(ServiceWorkerToken serviceWorkerToken) {
        this.mTag = Tag.ServiceWorkerToken;
        this.mServiceWorkerToken = serviceWorkerToken;
    }

    public ServiceWorkerToken getServiceWorkerToken() {
        assert this.mTag == Tag.ServiceWorkerToken;
        return this.mServiceWorkerToken;
    }

    public void setSharedWorkerToken(SharedWorkerToken sharedWorkerToken) {
        this.mTag = Tag.SharedWorkerToken;
        this.mSharedWorkerToken = sharedWorkerToken;
    }

    public SharedWorkerToken getSharedWorkerToken() {
        assert this.mTag == Tag.SharedWorkerToken;
        return this.mSharedWorkerToken;
    }


    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder0, int offset) {
        encoder0.encode(org.chromium.mojo.bindings.BindingsHelper.UNION_SIZE, offset);
        encoder0.encode(this.mTag, offset + 4);
        switch (mTag) {
            case Tag.DedicatedWorkerToken: {
                
                encoder0.encode(this.mDedicatedWorkerToken, offset + 8, false);
                break;
            }
            case Tag.ServiceWorkerToken: {
                
                encoder0.encode(this.mServiceWorkerToken, offset + 8, false);
                break;
            }
            case Tag.SharedWorkerToken: {
                
                encoder0.encode(this.mSharedWorkerToken, offset + 8, false);
                break;
            }
            default: {
                break;
            }
        }
    }

    public static WorkerToken deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message).decoderForSerializedUnion(), 0);
    }

    public static final WorkerToken decode(org.chromium.mojo.bindings.Decoder decoder0, int offset) {
        org.chromium.mojo.bindings.DataHeader dataHeader = decoder0.readDataHeaderForUnion(offset);
        if (dataHeader.size == 0) {
            return null;
        }
        WorkerToken result = new WorkerToken();
        switch (dataHeader.elementsOrVersion) {
            case Tag.DedicatedWorkerToken: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mDedicatedWorkerToken = DedicatedWorkerToken.decode(decoder1);
                result.mTag = Tag.DedicatedWorkerToken;
                break;
            }
            case Tag.ServiceWorkerToken: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mServiceWorkerToken = ServiceWorkerToken.decode(decoder1);
                result.mTag = Tag.ServiceWorkerToken;
                break;
            }
            case Tag.SharedWorkerToken: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mSharedWorkerToken = SharedWorkerToken.decode(decoder1);
                result.mTag = Tag.SharedWorkerToken;
                break;
            }
            default: {
                break;
            }
        }
        return result;
    }
}