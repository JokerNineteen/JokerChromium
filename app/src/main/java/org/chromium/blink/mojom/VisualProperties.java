// VisualProperties.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/widget/visual_properties.mojom
//

package org.chromium.blink.mojom;


public final class VisualProperties extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 112;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(112, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public ScreenInfo screenInfo;
    public boolean autoResizeEnabled;
    public org.chromium.gfx.mojom.Size minSizeForAutoResize;
    public org.chromium.gfx.mojom.Size maxSizeForAutoResize;
    public org.chromium.gfx.mojom.Size newSize;
    public org.chromium.gfx.mojom.Size visibleViewportSize;
    public org.chromium.gfx.mojom.Rect compositorViewportPixelRect;
    public org.chromium.cc.mojom.BrowserControlsParams browserControlsParams;
    public boolean scrollFocusedNodeIntoView;
    public org.chromium.viz.mojom.LocalSurfaceId localSurfaceId;
    public boolean isFullscreenGranted;
    public int displayMode;
    public int captureSequenceNumber;
    public double zoomLevel;
    public float pageScaleFactor;
    public float compositingScaleFactor;
    public org.chromium.gfx.mojom.Rect[] rootWidgetWindowSegments;
    public boolean isPinchGestureActive;

    private VisualProperties(int version) {
        super(STRUCT_SIZE, version);
        this.autoResizeEnabled = (boolean) false;
        this.displayMode = (int) DisplayMode.UNDEFINED;
        this.pageScaleFactor = (float) 1;
        this.compositingScaleFactor = (float) 1;
    }

    public VisualProperties() {
        this(0);
    }

    public static VisualProperties deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static VisualProperties deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static VisualProperties decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        VisualProperties result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new VisualProperties(elementsOrVersion);
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                result.screenInfo = ScreenInfo.decode(decoder1);
                }
                {
                    
                result.autoResizeEnabled = decoder0.readBoolean(16, 0);
                }
                {
                    
                result.scrollFocusedNodeIntoView = decoder0.readBoolean(16, 1);
                }
                {
                    
                result.isFullscreenGranted = decoder0.readBoolean(16, 2);
                }
                {
                    
                result.isPinchGestureActive = decoder0.readBoolean(16, 3);
                }
                {
                    
                result.displayMode = decoder0.readInt(20);
                    DisplayMode.validate(result.displayMode);
                    result.displayMode = DisplayMode.toKnownValue(result.displayMode);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                result.minSizeForAutoResize = org.chromium.gfx.mojom.Size.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                result.maxSizeForAutoResize = org.chromium.gfx.mojom.Size.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                result.newSize = org.chromium.gfx.mojom.Size.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, false);
                result.visibleViewportSize = org.chromium.gfx.mojom.Size.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(56, false);
                result.compositorViewportPixelRect = org.chromium.gfx.mojom.Rect.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, true);
                result.browserControlsParams = org.chromium.cc.mojom.BrowserControlsParams.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(72, true);
                result.localSurfaceId = org.chromium.viz.mojom.LocalSurfaceId.decode(decoder1);
                }
                {
                    
                result.captureSequenceNumber = decoder0.readInt(80);
                }
                {
                    
                result.pageScaleFactor = decoder0.readFloat(84);
                }
                {
                    
                result.zoomLevel = decoder0.readDouble(88);
                }
                {
                    
                result.compositingScaleFactor = decoder0.readFloat(96);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(104, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.rootWidgetWindowSegments = new org.chromium.gfx.mojom.Rect[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.rootWidgetWindowSegments[i1] = org.chromium.gfx.mojom.Rect.decode(decoder2);
                    }
                }
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.screenInfo, 8, false);
        
        encoder0.encode(this.autoResizeEnabled, 16, 0);
        
        encoder0.encode(this.scrollFocusedNodeIntoView, 16, 1);
        
        encoder0.encode(this.isFullscreenGranted, 16, 2);
        
        encoder0.encode(this.isPinchGestureActive, 16, 3);
        
        encoder0.encode(this.displayMode, 20);
        
        encoder0.encode(this.minSizeForAutoResize, 24, false);
        
        encoder0.encode(this.maxSizeForAutoResize, 32, false);
        
        encoder0.encode(this.newSize, 40, false);
        
        encoder0.encode(this.visibleViewportSize, 48, false);
        
        encoder0.encode(this.compositorViewportPixelRect, 56, false);
        
        encoder0.encode(this.browserControlsParams, 64, true);
        
        encoder0.encode(this.localSurfaceId, 72, true);
        
        encoder0.encode(this.captureSequenceNumber, 80);
        
        encoder0.encode(this.pageScaleFactor, 84);
        
        encoder0.encode(this.zoomLevel, 88);
        
        encoder0.encode(this.compositingScaleFactor, 96);
        
        if (this.rootWidgetWindowSegments == null) {
            encoder0.encodeNullPointer(104, false);
        } else {
            org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(this.rootWidgetWindowSegments.length, 104, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            for (int i0 = 0; i0 < this.rootWidgetWindowSegments.length; ++i0) {
                
                encoder1.encode(this.rootWidgetWindowSegments[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
            }
        }
    }
}