// GestureData.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/input/input_handler.mojom
//

package org.chromium.blink.mojom;


public final class GestureData extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 96;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(96, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public org.chromium.gfx.mojom.PointF screenPosition;
    public org.chromium.gfx.mojom.PointF widgetPosition;
    public int sourceDevice;
    public boolean isSourceTouchEventSetBlocking;
    public int primaryPointerType;
    public int uniqueTouchEventId;
    public org.chromium.gfx.mojom.Size contactSize;
    public ScrollData scrollData;
    public PinchBeginData pinchBeginData;
    public PinchUpdateData pinchUpdateData;
    public PinchEndData pinchEndData;
    public TapData tapData;
    public FlingData flingData;

    private GestureData(int version) {
        super(STRUCT_SIZE, version);
    }

    public GestureData() {
        this(0);
    }

    public static GestureData deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static GestureData deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static GestureData decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        GestureData result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new GestureData(elementsOrVersion);
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                result.screenPosition = org.chromium.gfx.mojom.PointF.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                result.widgetPosition = org.chromium.gfx.mojom.PointF.decode(decoder1);
                }
                {
                    
                result.sourceDevice = decoder0.readInt(24);
                    GestureDevice.validate(result.sourceDevice);
                }
                {
                    
                result.isSourceTouchEventSetBlocking = decoder0.readBoolean(28, 0);
                }
                {
                    
                result.primaryPointerType = decoder0.readInt(32);
                    org.chromium.ui.mojom.EventPointerType.validate(result.primaryPointerType);
                }
                {
                    
                result.uniqueTouchEventId = decoder0.readInt(36);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, true);
                result.contactSize = org.chromium.gfx.mojom.Size.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(48, true);
                result.scrollData = ScrollData.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(56, true);
                result.pinchBeginData = PinchBeginData.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, true);
                result.pinchUpdateData = PinchUpdateData.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(72, true);
                result.pinchEndData = PinchEndData.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(80, true);
                result.tapData = TapData.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(88, true);
                result.flingData = FlingData.decode(decoder1);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.screenPosition, 8, false);
        
        encoder0.encode(this.widgetPosition, 16, false);
        
        encoder0.encode(this.sourceDevice, 24);
        
        encoder0.encode(this.isSourceTouchEventSetBlocking, 28, 0);
        
        encoder0.encode(this.primaryPointerType, 32);
        
        encoder0.encode(this.uniqueTouchEventId, 36);
        
        encoder0.encode(this.contactSize, 40, true);
        
        encoder0.encode(this.scrollData, 48, true);
        
        encoder0.encode(this.pinchBeginData, 56, true);
        
        encoder0.encode(this.pinchUpdateData, 64, true);
        
        encoder0.encode(this.pinchEndData, 72, true);
        
        encoder0.encode(this.tapData, 80, true);
        
        encoder0.encode(this.flingData, 88, true);
    }
}