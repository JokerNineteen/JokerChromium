// SynchronousCompositorControlHost_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/input/synchronous_compositor.mojom
//

package org.chromium.blink.mojom;


class SynchronousCompositorControlHost_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<SynchronousCompositorControlHost, SynchronousCompositorControlHost.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<SynchronousCompositorControlHost, SynchronousCompositorControlHost.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.SynchronousCompositorControlHost";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, SynchronousCompositorControlHost impl) {
            return new Stub(core, impl);
        }

        @Override
        public SynchronousCompositorControlHost[] buildArray(int size) {
          return new SynchronousCompositorControlHost[size];
        }
    };


    private static final int RETURN_FRAME_ORDINAL = 0;

    private static final int BEGIN_FRAME_RESPONSE_ORDINAL = 1;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements SynchronousCompositorControlHost.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void returnFrame(
int layerTreeFrameSinkId, int metadataVersion, org.chromium.viz.mojom.LocalSurfaceId localSurfaceId, org.chromium.viz.mojom.CompositorFrame frame, org.chromium.viz.mojom.HitTestRegionList hitTestRegionList) {

            SynchronousCompositorControlHostReturnFrameParams _message = new SynchronousCompositorControlHostReturnFrameParams();

            _message.layerTreeFrameSinkId = layerTreeFrameSinkId;

            _message.metadataVersion = metadataVersion;

            _message.localSurfaceId = localSurfaceId;

            _message.frame = frame;

            _message.hitTestRegionList = hitTestRegionList;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(RETURN_FRAME_ORDINAL)));

        }


        @Override
        public void beginFrameResponse(
SyncCompositorCommonRendererParams params) {

            SynchronousCompositorControlHostBeginFrameResponseParams _message = new SynchronousCompositorControlHostBeginFrameResponseParams();

            _message.params = params;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(BEGIN_FRAME_RESPONSE_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<SynchronousCompositorControlHost> {

        Stub(org.chromium.mojo.system.Core core, SynchronousCompositorControlHost impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                SynchronousCompositorControlHost_Internal.MANAGER, messageWithHeader);





                    case RETURN_FRAME_ORDINAL: {

                        SynchronousCompositorControlHostReturnFrameParams data =
                                SynchronousCompositorControlHostReturnFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().returnFrame(data.layerTreeFrameSinkId, data.metadataVersion, data.localSurfaceId, data.frame, data.hitTestRegionList);
                        return true;
                    }





                    case BEGIN_FRAME_RESPONSE_ORDINAL: {

                        SynchronousCompositorControlHostBeginFrameResponseParams data =
                                SynchronousCompositorControlHostBeginFrameResponseParams.deserialize(messageWithHeader.getPayload());

                        getImpl().beginFrameResponse(data.params);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), SynchronousCompositorControlHost_Internal.MANAGER, messageWithHeader, receiver);






                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class SynchronousCompositorControlHostReturnFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int layerTreeFrameSinkId;
        public int metadataVersion;
        public org.chromium.viz.mojom.LocalSurfaceId localSurfaceId;
        public org.chromium.viz.mojom.CompositorFrame frame;
        public org.chromium.viz.mojom.HitTestRegionList hitTestRegionList;

        private SynchronousCompositorControlHostReturnFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorControlHostReturnFrameParams() {
            this(0);
        }

        public static SynchronousCompositorControlHostReturnFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorControlHostReturnFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorControlHostReturnFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorControlHostReturnFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorControlHostReturnFrameParams(elementsOrVersion);
                    {
                        
                    result.layerTreeFrameSinkId = decoder0.readInt(8);
                    }
                    {
                        
                    result.metadataVersion = decoder0.readInt(12);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.localSurfaceId = org.chromium.viz.mojom.LocalSurfaceId.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, true);
                    result.frame = org.chromium.viz.mojom.CompositorFrame.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, true);
                    result.hitTestRegionList = org.chromium.viz.mojom.HitTestRegionList.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.layerTreeFrameSinkId, 8);
            
            encoder0.encode(this.metadataVersion, 12);
            
            encoder0.encode(this.localSurfaceId, 16, true);
            
            encoder0.encode(this.frame, 24, true);
            
            encoder0.encode(this.hitTestRegionList, 32, true);
        }
    }



    
    static final class SynchronousCompositorControlHostBeginFrameResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SyncCompositorCommonRendererParams params;

        private SynchronousCompositorControlHostBeginFrameResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SynchronousCompositorControlHostBeginFrameResponseParams() {
            this(0);
        }

        public static SynchronousCompositorControlHostBeginFrameResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SynchronousCompositorControlHostBeginFrameResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SynchronousCompositorControlHostBeginFrameResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SynchronousCompositorControlHostBeginFrameResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SynchronousCompositorControlHostBeginFrameResponseParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.params = SyncCompositorCommonRendererParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.params, 8, false);
        }
    }



}
