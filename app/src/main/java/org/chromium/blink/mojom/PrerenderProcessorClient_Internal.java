// PrerenderProcessorClient_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/prerender/prerender.mojom
//

package org.chromium.blink.mojom;


class PrerenderProcessorClient_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<PrerenderProcessorClient, PrerenderProcessorClient.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<PrerenderProcessorClient, PrerenderProcessorClient.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.PrerenderProcessorClient";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, PrerenderProcessorClient impl) {
            return new Stub(core, impl);
        }

        @Override
        public PrerenderProcessorClient[] buildArray(int size) {
          return new PrerenderProcessorClient[size];
        }
    };


    private static final int ON_PRERENDER_START_ORDINAL = 0;

    private static final int ON_PRERENDER_STOP_LOADING_ORDINAL = 1;

    private static final int ON_PRERENDER_DOM_CONTENT_LOADED_ORDINAL = 2;

    private static final int ON_PRERENDER_STOP_ORDINAL = 3;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements PrerenderProcessorClient.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void onPrerenderStart(
) {

            PrerenderProcessorClientOnPrerenderStartParams _message = new PrerenderProcessorClientOnPrerenderStartParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_PRERENDER_START_ORDINAL)));

        }


        @Override
        public void onPrerenderStopLoading(
) {

            PrerenderProcessorClientOnPrerenderStopLoadingParams _message = new PrerenderProcessorClientOnPrerenderStopLoadingParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_PRERENDER_STOP_LOADING_ORDINAL)));

        }


        @Override
        public void onPrerenderDomContentLoaded(
) {

            PrerenderProcessorClientOnPrerenderDomContentLoadedParams _message = new PrerenderProcessorClientOnPrerenderDomContentLoadedParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_PRERENDER_DOM_CONTENT_LOADED_ORDINAL)));

        }


        @Override
        public void onPrerenderStop(
) {

            PrerenderProcessorClientOnPrerenderStopParams _message = new PrerenderProcessorClientOnPrerenderStopParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_PRERENDER_STOP_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<PrerenderProcessorClient> {

        Stub(org.chromium.mojo.system.Core core, PrerenderProcessorClient impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                PrerenderProcessorClient_Internal.MANAGER, messageWithHeader);





                    case ON_PRERENDER_START_ORDINAL: {

                        PrerenderProcessorClientOnPrerenderStartParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onPrerenderStart();
                        return true;
                    }





                    case ON_PRERENDER_STOP_LOADING_ORDINAL: {

                        PrerenderProcessorClientOnPrerenderStopLoadingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onPrerenderStopLoading();
                        return true;
                    }





                    case ON_PRERENDER_DOM_CONTENT_LOADED_ORDINAL: {

                        PrerenderProcessorClientOnPrerenderDomContentLoadedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onPrerenderDomContentLoaded();
                        return true;
                    }





                    case ON_PRERENDER_STOP_ORDINAL: {

                        PrerenderProcessorClientOnPrerenderStopParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onPrerenderStop();
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), PrerenderProcessorClient_Internal.MANAGER, messageWithHeader, receiver);










                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class PrerenderProcessorClientOnPrerenderStartParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private PrerenderProcessorClientOnPrerenderStartParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PrerenderProcessorClientOnPrerenderStartParams() {
            this(0);
        }

        public static PrerenderProcessorClientOnPrerenderStartParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PrerenderProcessorClientOnPrerenderStartParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PrerenderProcessorClientOnPrerenderStartParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PrerenderProcessorClientOnPrerenderStartParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PrerenderProcessorClientOnPrerenderStartParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class PrerenderProcessorClientOnPrerenderStopLoadingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private PrerenderProcessorClientOnPrerenderStopLoadingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PrerenderProcessorClientOnPrerenderStopLoadingParams() {
            this(0);
        }

        public static PrerenderProcessorClientOnPrerenderStopLoadingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PrerenderProcessorClientOnPrerenderStopLoadingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PrerenderProcessorClientOnPrerenderStopLoadingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PrerenderProcessorClientOnPrerenderStopLoadingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PrerenderProcessorClientOnPrerenderStopLoadingParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class PrerenderProcessorClientOnPrerenderDomContentLoadedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private PrerenderProcessorClientOnPrerenderDomContentLoadedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PrerenderProcessorClientOnPrerenderDomContentLoadedParams() {
            this(0);
        }

        public static PrerenderProcessorClientOnPrerenderDomContentLoadedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PrerenderProcessorClientOnPrerenderDomContentLoadedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PrerenderProcessorClientOnPrerenderDomContentLoadedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PrerenderProcessorClientOnPrerenderDomContentLoadedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PrerenderProcessorClientOnPrerenderDomContentLoadedParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class PrerenderProcessorClientOnPrerenderStopParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private PrerenderProcessorClientOnPrerenderStopParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public PrerenderProcessorClientOnPrerenderStopParams() {
            this(0);
        }

        public static PrerenderProcessorClientOnPrerenderStopParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static PrerenderProcessorClientOnPrerenderStopParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static PrerenderProcessorClientOnPrerenderStopParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            PrerenderProcessorClientOnPrerenderStopParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new PrerenderProcessorClientOnPrerenderStopParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



}
