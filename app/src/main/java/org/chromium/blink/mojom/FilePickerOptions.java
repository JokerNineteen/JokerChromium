// FilePickerOptions.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/file_system_access/file_system_access_manager.mojom
//

package org.chromium.blink.mojom;


public final class FilePickerOptions extends org.chromium.mojo.bindings.Union {

    public static final class Tag {
        public static final int OpenFilePickerOptions = 0;
        public static final int SaveFilePickerOptions = 1;
        public static final int DirectoryPickerOptions = 2;
    };
    private OpenFilePickerOptions mOpenFilePickerOptions;
    private SaveFilePickerOptions mSaveFilePickerOptions;
    private DirectoryPickerOptions mDirectoryPickerOptions;

    public void setOpenFilePickerOptions(OpenFilePickerOptions openFilePickerOptions) {
        this.mTag = Tag.OpenFilePickerOptions;
        this.mOpenFilePickerOptions = openFilePickerOptions;
    }

    public OpenFilePickerOptions getOpenFilePickerOptions() {
        assert this.mTag == Tag.OpenFilePickerOptions;
        return this.mOpenFilePickerOptions;
    }

    public void setSaveFilePickerOptions(SaveFilePickerOptions saveFilePickerOptions) {
        this.mTag = Tag.SaveFilePickerOptions;
        this.mSaveFilePickerOptions = saveFilePickerOptions;
    }

    public SaveFilePickerOptions getSaveFilePickerOptions() {
        assert this.mTag == Tag.SaveFilePickerOptions;
        return this.mSaveFilePickerOptions;
    }

    public void setDirectoryPickerOptions(DirectoryPickerOptions directoryPickerOptions) {
        this.mTag = Tag.DirectoryPickerOptions;
        this.mDirectoryPickerOptions = directoryPickerOptions;
    }

    public DirectoryPickerOptions getDirectoryPickerOptions() {
        assert this.mTag == Tag.DirectoryPickerOptions;
        return this.mDirectoryPickerOptions;
    }


    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder0, int offset) {
        encoder0.encode(org.chromium.mojo.bindings.BindingsHelper.UNION_SIZE, offset);
        encoder0.encode(this.mTag, offset + 4);
        switch (mTag) {
            case Tag.OpenFilePickerOptions: {
                
                encoder0.encode(this.mOpenFilePickerOptions, offset + 8, false);
                break;
            }
            case Tag.SaveFilePickerOptions: {
                
                encoder0.encode(this.mSaveFilePickerOptions, offset + 8, false);
                break;
            }
            case Tag.DirectoryPickerOptions: {
                
                encoder0.encode(this.mDirectoryPickerOptions, offset + 8, false);
                break;
            }
            default: {
                break;
            }
        }
    }

    public static FilePickerOptions deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message).decoderForSerializedUnion(), 0);
    }

    public static final FilePickerOptions decode(org.chromium.mojo.bindings.Decoder decoder0, int offset) {
        org.chromium.mojo.bindings.DataHeader dataHeader = decoder0.readDataHeaderForUnion(offset);
        if (dataHeader.size == 0) {
            return null;
        }
        FilePickerOptions result = new FilePickerOptions();
        switch (dataHeader.elementsOrVersion) {
            case Tag.OpenFilePickerOptions: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mOpenFilePickerOptions = OpenFilePickerOptions.decode(decoder1);
                result.mTag = Tag.OpenFilePickerOptions;
                break;
            }
            case Tag.SaveFilePickerOptions: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mSaveFilePickerOptions = SaveFilePickerOptions.decode(decoder1);
                result.mTag = Tag.SaveFilePickerOptions;
                break;
            }
            case Tag.DirectoryPickerOptions: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                result.mDirectoryPickerOptions = DirectoryPickerOptions.decode(decoder1);
                result.mTag = Tag.DirectoryPickerOptions;
                break;
            }
            default: {
                break;
            }
        }
        return result;
    }
}