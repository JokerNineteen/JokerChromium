// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * An area made up of rectangles whole border are made defined by the position
 * of a given set of elements.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.ElementAreaProto}
 */
public  final class ElementAreaProto extends
    com.google.protobuf.GeneratedMessageLite<
        ElementAreaProto, ElementAreaProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.ElementAreaProto)
    ElementAreaProtoOrBuilder {
  private ElementAreaProto() {
    touchable_ = emptyProtobufList();
    restricted_ = emptyProtobufList();
  }
  public interface RectangleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.ElementAreaProto.Rectangle)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
     */
    java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto> 
        getElementsList();
    /**
     * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
     */
    org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto getElements(int index);
    /**
     * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
     */
    int getElementsCount();

    /**
     * <pre>
     * If true, the width of the rectangle always corresponds to the width of
     * the screen.
     * </pre>
     *
     * <code>optional bool full_width = 2;</code>
     * @return Whether the fullWidth field is set.
     */
    boolean hasFullWidth();
    /**
     * <pre>
     * If true, the width of the rectangle always corresponds to the width of
     * the screen.
     * </pre>
     *
     * <code>optional bool full_width = 2;</code>
     * @return The fullWidth.
     */
    boolean getFullWidth();
  }
  /**
   * <pre>
   * A rectangle, drawn by one or more elements.
   * The rectangle is the smallest rectangle that includes all listed elements.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.ElementAreaProto.Rectangle}
   */
  public  static final class Rectangle extends
      com.google.protobuf.GeneratedMessageLite<
          Rectangle, Rectangle.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.ElementAreaProto.Rectangle)
      RectangleOrBuilder {
    private Rectangle() {
      elements_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int ELEMENTS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto> elements_;
    /**
     * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto> getElementsList() {
      return elements_;
    }
    /**
     * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
     */
    public java.util.List<? extends org.chromium.chrome.browser.autofill_assistant.proto.SelectorProtoOrBuilder> 
        getElementsOrBuilderList() {
      return elements_;
    }
    /**
     * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
     */
    @java.lang.Override
    public int getElementsCount() {
      return elements_.size();
    }
    /**
     * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto getElements(int index) {
      return elements_.get(index);
    }
    /**
     * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.SelectorProtoOrBuilder getElementsOrBuilder(
        int index) {
      return elements_.get(index);
    }
    private void ensureElementsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto> tmp = elements_;
      if (!tmp.isModifiable()) {
        elements_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
     */
    private void setElements(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
      value.getClass();
  ensureElementsIsMutable();
      elements_.set(index, value);
    }
    /**
     * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
     */
    private void addElements(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
      value.getClass();
  ensureElementsIsMutable();
      elements_.add(value);
    }
    /**
     * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
     */
    private void addElements(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
      value.getClass();
  ensureElementsIsMutable();
      elements_.add(index, value);
    }
    /**
     * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
     */
    private void addAllElements(
        java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto> values) {
      ensureElementsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, elements_);
    }
    /**
     * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
     */
    private void clearElements() {
      elements_ = emptyProtobufList();
    }
    /**
     * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
     */
    private void removeElements(int index) {
      ensureElementsIsMutable();
      elements_.remove(index);
    }

    public static final int FULL_WIDTH_FIELD_NUMBER = 2;
    private boolean fullWidth_;
    /**
     * <pre>
     * If true, the width of the rectangle always corresponds to the width of
     * the screen.
     * </pre>
     *
     * <code>optional bool full_width = 2;</code>
     * @return Whether the fullWidth field is set.
     */
    @java.lang.Override
    public boolean hasFullWidth() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * If true, the width of the rectangle always corresponds to the width of
     * the screen.
     * </pre>
     *
     * <code>optional bool full_width = 2;</code>
     * @return The fullWidth.
     */
    @java.lang.Override
    public boolean getFullWidth() {
      return fullWidth_;
    }
    /**
     * <pre>
     * If true, the width of the rectangle always corresponds to the width of
     * the screen.
     * </pre>
     *
     * <code>optional bool full_width = 2;</code>
     * @param value The fullWidth to set.
     */
    private void setFullWidth(boolean value) {
      bitField0_ |= 0x00000001;
      fullWidth_ = value;
    }
    /**
     * <pre>
     * If true, the width of the rectangle always corresponds to the width of
     * the screen.
     * </pre>
     *
     * <code>optional bool full_width = 2;</code>
     */
    private void clearFullWidth() {
      bitField0_ = (bitField0_ & ~0x00000001);
      fullWidth_ = false;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A rectangle, drawn by one or more elements.
     * The rectangle is the smallest rectangle that includes all listed elements.
     * </pre>
     *
     * Protobuf type {@code autofill_assistant.ElementAreaProto.Rectangle}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.ElementAreaProto.Rectangle)
        org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.RectangleOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto> getElementsList() {
        return java.util.Collections.unmodifiableList(
            instance.getElementsList());
      }
      /**
       * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
       */
      @java.lang.Override
      public int getElementsCount() {
        return instance.getElementsCount();
      }/**
       * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
       */
      @java.lang.Override
      public org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto getElements(int index) {
        return instance.getElements(index);
      }
      /**
       * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
       */
      public Builder setElements(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
        copyOnWrite();
        instance.setElements(index, value);
        return this;
      }
      /**
       * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
       */
      public Builder setElements(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.Builder builderForValue) {
        copyOnWrite();
        instance.setElements(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
       */
      public Builder addElements(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
        copyOnWrite();
        instance.addElements(value);
        return this;
      }
      /**
       * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
       */
      public Builder addElements(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
        copyOnWrite();
        instance.addElements(index, value);
        return this;
      }
      /**
       * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
       */
      public Builder addElements(
          org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.Builder builderForValue) {
        copyOnWrite();
        instance.addElements(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
       */
      public Builder addElements(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.Builder builderForValue) {
        copyOnWrite();
        instance.addElements(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
       */
      public Builder addAllElements(
          java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto> values) {
        copyOnWrite();
        instance.addAllElements(values);
        return this;
      }
      /**
       * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
       */
      public Builder clearElements() {
        copyOnWrite();
        instance.clearElements();
        return this;
      }
      /**
       * <code>repeated .autofill_assistant.SelectorProto elements = 1;</code>
       */
      public Builder removeElements(int index) {
        copyOnWrite();
        instance.removeElements(index);
        return this;
      }

      /**
       * <pre>
       * If true, the width of the rectangle always corresponds to the width of
       * the screen.
       * </pre>
       *
       * <code>optional bool full_width = 2;</code>
       * @return Whether the fullWidth field is set.
       */
      @java.lang.Override
      public boolean hasFullWidth() {
        return instance.hasFullWidth();
      }
      /**
       * <pre>
       * If true, the width of the rectangle always corresponds to the width of
       * the screen.
       * </pre>
       *
       * <code>optional bool full_width = 2;</code>
       * @return The fullWidth.
       */
      @java.lang.Override
      public boolean getFullWidth() {
        return instance.getFullWidth();
      }
      /**
       * <pre>
       * If true, the width of the rectangle always corresponds to the width of
       * the screen.
       * </pre>
       *
       * <code>optional bool full_width = 2;</code>
       * @param value The fullWidth to set.
       * @return This builder for chaining.
       */
      public Builder setFullWidth(boolean value) {
        copyOnWrite();
        instance.setFullWidth(value);
        return this;
      }
      /**
       * <pre>
       * If true, the width of the rectangle always corresponds to the width of
       * the screen.
       * </pre>
       *
       * <code>optional bool full_width = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearFullWidth() {
        copyOnWrite();
        instance.clearFullWidth();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.ElementAreaProto.Rectangle)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "elements_",
              org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.class,
              "fullWidth_",
            };
            java.lang.String info =
                "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0001\u0000\u0001\u001b\u0002\u1007" +
                "\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.ElementAreaProto.Rectangle)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle DEFAULT_INSTANCE;
    static {
      Rectangle defaultInstance = new Rectangle();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Rectangle.class, defaultInstance);
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Rectangle> PARSER;

    public static com.google.protobuf.Parser<Rectangle> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public static final int TOUCHABLE_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle> touchable_;
  /**
   * <pre>
   * The rectangles that will be highlighted and touchable.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
   */
  @java.lang.Override
  public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle> getTouchableList() {
    return touchable_;
  }
  /**
   * <pre>
   * The rectangles that will be highlighted and touchable.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
   */
  public java.util.List<? extends org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.RectangleOrBuilder> 
      getTouchableOrBuilderList() {
    return touchable_;
  }
  /**
   * <pre>
   * The rectangles that will be highlighted and touchable.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
   */
  @java.lang.Override
  public int getTouchableCount() {
    return touchable_.size();
  }
  /**
   * <pre>
   * The rectangles that will be highlighted and touchable.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle getTouchable(int index) {
    return touchable_.get(index);
  }
  /**
   * <pre>
   * The rectangles that will be highlighted and touchable.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.RectangleOrBuilder getTouchableOrBuilder(
      int index) {
    return touchable_.get(index);
  }
  private void ensureTouchableIsMutable() {
    com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle> tmp = touchable_;
    if (!tmp.isModifiable()) {
      touchable_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <pre>
   * The rectangles that will be highlighted and touchable.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
   */
  private void setTouchable(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle value) {
    value.getClass();
  ensureTouchableIsMutable();
    touchable_.set(index, value);
  }
  /**
   * <pre>
   * The rectangles that will be highlighted and touchable.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
   */
  private void addTouchable(org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle value) {
    value.getClass();
  ensureTouchableIsMutable();
    touchable_.add(value);
  }
  /**
   * <pre>
   * The rectangles that will be highlighted and touchable.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
   */
  private void addTouchable(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle value) {
    value.getClass();
  ensureTouchableIsMutable();
    touchable_.add(index, value);
  }
  /**
   * <pre>
   * The rectangles that will be highlighted and touchable.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
   */
  private void addAllTouchable(
      java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle> values) {
    ensureTouchableIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, touchable_);
  }
  /**
   * <pre>
   * The rectangles that will be highlighted and touchable.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
   */
  private void clearTouchable() {
    touchable_ = emptyProtobufList();
  }
  /**
   * <pre>
   * The rectangles that will be highlighted and touchable.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
   */
  private void removeTouchable(int index) {
    ensureTouchableIsMutable();
    touchable_.remove(index);
  }

  public static final int RESTRICTED_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle> restricted_;
  /**
   * <pre>
   * The rectangles that should be neither highlighted nor touchable. Those
   * rectangles have precedence over the |touchable| rectangles.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
   */
  @java.lang.Override
  public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle> getRestrictedList() {
    return restricted_;
  }
  /**
   * <pre>
   * The rectangles that should be neither highlighted nor touchable. Those
   * rectangles have precedence over the |touchable| rectangles.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
   */
  public java.util.List<? extends org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.RectangleOrBuilder> 
      getRestrictedOrBuilderList() {
    return restricted_;
  }
  /**
   * <pre>
   * The rectangles that should be neither highlighted nor touchable. Those
   * rectangles have precedence over the |touchable| rectangles.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
   */
  @java.lang.Override
  public int getRestrictedCount() {
    return restricted_.size();
  }
  /**
   * <pre>
   * The rectangles that should be neither highlighted nor touchable. Those
   * rectangles have precedence over the |touchable| rectangles.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle getRestricted(int index) {
    return restricted_.get(index);
  }
  /**
   * <pre>
   * The rectangles that should be neither highlighted nor touchable. Those
   * rectangles have precedence over the |touchable| rectangles.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.RectangleOrBuilder getRestrictedOrBuilder(
      int index) {
    return restricted_.get(index);
  }
  private void ensureRestrictedIsMutable() {
    com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle> tmp = restricted_;
    if (!tmp.isModifiable()) {
      restricted_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <pre>
   * The rectangles that should be neither highlighted nor touchable. Those
   * rectangles have precedence over the |touchable| rectangles.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
   */
  private void setRestricted(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle value) {
    value.getClass();
  ensureRestrictedIsMutable();
    restricted_.set(index, value);
  }
  /**
   * <pre>
   * The rectangles that should be neither highlighted nor touchable. Those
   * rectangles have precedence over the |touchable| rectangles.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
   */
  private void addRestricted(org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle value) {
    value.getClass();
  ensureRestrictedIsMutable();
    restricted_.add(value);
  }
  /**
   * <pre>
   * The rectangles that should be neither highlighted nor touchable. Those
   * rectangles have precedence over the |touchable| rectangles.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
   */
  private void addRestricted(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle value) {
    value.getClass();
  ensureRestrictedIsMutable();
    restricted_.add(index, value);
  }
  /**
   * <pre>
   * The rectangles that should be neither highlighted nor touchable. Those
   * rectangles have precedence over the |touchable| rectangles.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
   */
  private void addAllRestricted(
      java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle> values) {
    ensureRestrictedIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, restricted_);
  }
  /**
   * <pre>
   * The rectangles that should be neither highlighted nor touchable. Those
   * rectangles have precedence over the |touchable| rectangles.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
   */
  private void clearRestricted() {
    restricted_ = emptyProtobufList();
  }
  /**
   * <pre>
   * The rectangles that should be neither highlighted nor touchable. Those
   * rectangles have precedence over the |touchable| rectangles.
   * </pre>
   *
   * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
   */
  private void removeRestricted(int index) {
    ensureRestrictedIsMutable();
    restricted_.remove(index);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * An area made up of rectangles whole border are made defined by the position
   * of a given set of elements.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.ElementAreaProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.ElementAreaProto)
      org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The rectangles that will be highlighted and touchable.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle> getTouchableList() {
      return java.util.Collections.unmodifiableList(
          instance.getTouchableList());
    }
    /**
     * <pre>
     * The rectangles that will be highlighted and touchable.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
     */
    @java.lang.Override
    public int getTouchableCount() {
      return instance.getTouchableCount();
    }/**
     * <pre>
     * The rectangles that will be highlighted and touchable.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle getTouchable(int index) {
      return instance.getTouchable(index);
    }
    /**
     * <pre>
     * The rectangles that will be highlighted and touchable.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
     */
    public Builder setTouchable(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle value) {
      copyOnWrite();
      instance.setTouchable(index, value);
      return this;
    }
    /**
     * <pre>
     * The rectangles that will be highlighted and touchable.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
     */
    public Builder setTouchable(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle.Builder builderForValue) {
      copyOnWrite();
      instance.setTouchable(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The rectangles that will be highlighted and touchable.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
     */
    public Builder addTouchable(org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle value) {
      copyOnWrite();
      instance.addTouchable(value);
      return this;
    }
    /**
     * <pre>
     * The rectangles that will be highlighted and touchable.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
     */
    public Builder addTouchable(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle value) {
      copyOnWrite();
      instance.addTouchable(index, value);
      return this;
    }
    /**
     * <pre>
     * The rectangles that will be highlighted and touchable.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
     */
    public Builder addTouchable(
        org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle.Builder builderForValue) {
      copyOnWrite();
      instance.addTouchable(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The rectangles that will be highlighted and touchable.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
     */
    public Builder addTouchable(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle.Builder builderForValue) {
      copyOnWrite();
      instance.addTouchable(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The rectangles that will be highlighted and touchable.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
     */
    public Builder addAllTouchable(
        java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle> values) {
      copyOnWrite();
      instance.addAllTouchable(values);
      return this;
    }
    /**
     * <pre>
     * The rectangles that will be highlighted and touchable.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
     */
    public Builder clearTouchable() {
      copyOnWrite();
      instance.clearTouchable();
      return this;
    }
    /**
     * <pre>
     * The rectangles that will be highlighted and touchable.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle touchable = 1;</code>
     */
    public Builder removeTouchable(int index) {
      copyOnWrite();
      instance.removeTouchable(index);
      return this;
    }

    /**
     * <pre>
     * The rectangles that should be neither highlighted nor touchable. Those
     * rectangles have precedence over the |touchable| rectangles.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle> getRestrictedList() {
      return java.util.Collections.unmodifiableList(
          instance.getRestrictedList());
    }
    /**
     * <pre>
     * The rectangles that should be neither highlighted nor touchable. Those
     * rectangles have precedence over the |touchable| rectangles.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
     */
    @java.lang.Override
    public int getRestrictedCount() {
      return instance.getRestrictedCount();
    }/**
     * <pre>
     * The rectangles that should be neither highlighted nor touchable. Those
     * rectangles have precedence over the |touchable| rectangles.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle getRestricted(int index) {
      return instance.getRestricted(index);
    }
    /**
     * <pre>
     * The rectangles that should be neither highlighted nor touchable. Those
     * rectangles have precedence over the |touchable| rectangles.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
     */
    public Builder setRestricted(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle value) {
      copyOnWrite();
      instance.setRestricted(index, value);
      return this;
    }
    /**
     * <pre>
     * The rectangles that should be neither highlighted nor touchable. Those
     * rectangles have precedence over the |touchable| rectangles.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
     */
    public Builder setRestricted(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle.Builder builderForValue) {
      copyOnWrite();
      instance.setRestricted(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The rectangles that should be neither highlighted nor touchable. Those
     * rectangles have precedence over the |touchable| rectangles.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
     */
    public Builder addRestricted(org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle value) {
      copyOnWrite();
      instance.addRestricted(value);
      return this;
    }
    /**
     * <pre>
     * The rectangles that should be neither highlighted nor touchable. Those
     * rectangles have precedence over the |touchable| rectangles.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
     */
    public Builder addRestricted(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle value) {
      copyOnWrite();
      instance.addRestricted(index, value);
      return this;
    }
    /**
     * <pre>
     * The rectangles that should be neither highlighted nor touchable. Those
     * rectangles have precedence over the |touchable| rectangles.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
     */
    public Builder addRestricted(
        org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle.Builder builderForValue) {
      copyOnWrite();
      instance.addRestricted(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The rectangles that should be neither highlighted nor touchable. Those
     * rectangles have precedence over the |touchable| rectangles.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
     */
    public Builder addRestricted(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle.Builder builderForValue) {
      copyOnWrite();
      instance.addRestricted(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The rectangles that should be neither highlighted nor touchable. Those
     * rectangles have precedence over the |touchable| rectangles.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
     */
    public Builder addAllRestricted(
        java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle> values) {
      copyOnWrite();
      instance.addAllRestricted(values);
      return this;
    }
    /**
     * <pre>
     * The rectangles that should be neither highlighted nor touchable. Those
     * rectangles have precedence over the |touchable| rectangles.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
     */
    public Builder clearRestricted() {
      copyOnWrite();
      instance.clearRestricted();
      return this;
    }
    /**
     * <pre>
     * The rectangles that should be neither highlighted nor touchable. Those
     * rectangles have precedence over the |touchable| rectangles.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ElementAreaProto.Rectangle restricted = 2;</code>
     */
    public Builder removeRestricted(int index) {
      copyOnWrite();
      instance.removeRestricted(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.ElementAreaProto)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "touchable_",
            org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle.class,
            "restricted_",
            org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Rectangle.class,
          };
          java.lang.String info =
              "\u0001\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0002\u0000\u0001\u001b\u0002\u001b" +
              "";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.ElementAreaProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto DEFAULT_INSTANCE;
  static {
    ElementAreaProto defaultInstance = new ElementAreaProto();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ElementAreaProto.class, defaultInstance);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ElementAreaProto> PARSER;

  public static com.google.protobuf.Parser<ElementAreaProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

