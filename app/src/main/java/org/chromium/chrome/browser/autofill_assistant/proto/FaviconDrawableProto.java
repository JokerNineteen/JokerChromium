// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: view_layout.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * Protobuf type {@code autofill_assistant.FaviconDrawableProto}
 */
public  final class FaviconDrawableProto extends
    com.google.protobuf.GeneratedMessageLite<
        FaviconDrawableProto, FaviconDrawableProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.FaviconDrawableProto)
    FaviconDrawableProtoOrBuilder {
  private FaviconDrawableProto() {
    websiteUrl_ = "";
  }
  private int bitField0_;
  public static final int DIAMETER_SIZE_FIELD_NUMBER = 1;
  private org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto diameterSize_;
  /**
   * <code>optional .autofill_assistant.ClientDimensionProto diameter_size = 1;</code>
   */
  @java.lang.Override
  public boolean hasDiameterSize() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>optional .autofill_assistant.ClientDimensionProto diameter_size = 1;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getDiameterSize() {
    return diameterSize_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance() : diameterSize_;
  }
  /**
   * <code>optional .autofill_assistant.ClientDimensionProto diameter_size = 1;</code>
   */
  private void setDiameterSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    value.getClass();
  diameterSize_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <code>optional .autofill_assistant.ClientDimensionProto diameter_size = 1;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeDiameterSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    value.getClass();
  if (diameterSize_ != null &&
        diameterSize_ != org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance()) {
      diameterSize_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.newBuilder(diameterSize_).mergeFrom(value).buildPartial();
    } else {
      diameterSize_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <code>optional .autofill_assistant.ClientDimensionProto diameter_size = 1;</code>
   */
  private void clearDiameterSize() {  diameterSize_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int FORCE_MONOGRAM_FIELD_NUMBER = 2;
  private boolean forceMonogram_;
  /**
   * <pre>
   * If true, we always use the monogram, even if the favicon is available.
   * </pre>
   *
   * <code>optional bool force_monogram = 2;</code>
   * @return Whether the forceMonogram field is set.
   */
  @java.lang.Override
  public boolean hasForceMonogram() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * If true, we always use the monogram, even if the favicon is available.
   * </pre>
   *
   * <code>optional bool force_monogram = 2;</code>
   * @return The forceMonogram.
   */
  @java.lang.Override
  public boolean getForceMonogram() {
    return forceMonogram_;
  }
  /**
   * <pre>
   * If true, we always use the monogram, even if the favicon is available.
   * </pre>
   *
   * <code>optional bool force_monogram = 2;</code>
   * @param value The forceMonogram to set.
   */
  private void setForceMonogram(boolean value) {
    bitField0_ |= 0x00000002;
    forceMonogram_ = value;
  }
  /**
   * <pre>
   * If true, we always use the monogram, even if the favicon is available.
   * </pre>
   *
   * <code>optional bool force_monogram = 2;</code>
   */
  private void clearForceMonogram() {
    bitField0_ = (bitField0_ & ~0x00000002);
    forceMonogram_ = false;
  }

  public static final int WEBSITE_URL_FIELD_NUMBER = 3;
  private java.lang.String websiteUrl_;
  /**
   * <pre>
   * If set, this url is used to fetch favicon, otherwise current url is used to
   * fetch favicon.
   * </pre>
   *
   * <code>optional string website_url = 3;</code>
   * @return Whether the websiteUrl field is set.
   */
  @java.lang.Override
  public boolean hasWebsiteUrl() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * If set, this url is used to fetch favicon, otherwise current url is used to
   * fetch favicon.
   * </pre>
   *
   * <code>optional string website_url = 3;</code>
   * @return The websiteUrl.
   */
  @java.lang.Override
  public java.lang.String getWebsiteUrl() {
    return websiteUrl_;
  }
  /**
   * <pre>
   * If set, this url is used to fetch favicon, otherwise current url is used to
   * fetch favicon.
   * </pre>
   *
   * <code>optional string website_url = 3;</code>
   * @return The bytes for websiteUrl.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getWebsiteUrlBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(websiteUrl_);
  }
  /**
   * <pre>
   * If set, this url is used to fetch favicon, otherwise current url is used to
   * fetch favicon.
   * </pre>
   *
   * <code>optional string website_url = 3;</code>
   * @param value The websiteUrl to set.
   */
  private void setWebsiteUrl(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000004;
    websiteUrl_ = value;
  }
  /**
   * <pre>
   * If set, this url is used to fetch favicon, otherwise current url is used to
   * fetch favicon.
   * </pre>
   *
   * <code>optional string website_url = 3;</code>
   */
  private void clearWebsiteUrl() {
    bitField0_ = (bitField0_ & ~0x00000004);
    websiteUrl_ = getDefaultInstance().getWebsiteUrl();
  }
  /**
   * <pre>
   * If set, this url is used to fetch favicon, otherwise current url is used to
   * fetch favicon.
   * </pre>
   *
   * <code>optional string website_url = 3;</code>
   * @param value The bytes for websiteUrl to set.
   */
  private void setWebsiteUrlBytes(
      com.google.protobuf.ByteString value) {
    websiteUrl_ = value.toStringUtf8();
    bitField0_ |= 0x00000004;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code autofill_assistant.FaviconDrawableProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.FaviconDrawableProto)
      org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>optional .autofill_assistant.ClientDimensionProto diameter_size = 1;</code>
     */
    @java.lang.Override
    public boolean hasDiameterSize() {
      return instance.hasDiameterSize();
    }
    /**
     * <code>optional .autofill_assistant.ClientDimensionProto diameter_size = 1;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getDiameterSize() {
      return instance.getDiameterSize();
    }
    /**
     * <code>optional .autofill_assistant.ClientDimensionProto diameter_size = 1;</code>
     */
    public Builder setDiameterSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.setDiameterSize(value);
      return this;
      }
    /**
     * <code>optional .autofill_assistant.ClientDimensionProto diameter_size = 1;</code>
     */
    public Builder setDiameterSize(
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.Builder builderForValue) {
      copyOnWrite();
      instance.setDiameterSize(builderForValue.build());
      return this;
    }
    /**
     * <code>optional .autofill_assistant.ClientDimensionProto diameter_size = 1;</code>
     */
    public Builder mergeDiameterSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.mergeDiameterSize(value);
      return this;
    }
    /**
     * <code>optional .autofill_assistant.ClientDimensionProto diameter_size = 1;</code>
     */
    public Builder clearDiameterSize() {  copyOnWrite();
      instance.clearDiameterSize();
      return this;
    }

    /**
     * <pre>
     * If true, we always use the monogram, even if the favicon is available.
     * </pre>
     *
     * <code>optional bool force_monogram = 2;</code>
     * @return Whether the forceMonogram field is set.
     */
    @java.lang.Override
    public boolean hasForceMonogram() {
      return instance.hasForceMonogram();
    }
    /**
     * <pre>
     * If true, we always use the monogram, even if the favicon is available.
     * </pre>
     *
     * <code>optional bool force_monogram = 2;</code>
     * @return The forceMonogram.
     */
    @java.lang.Override
    public boolean getForceMonogram() {
      return instance.getForceMonogram();
    }
    /**
     * <pre>
     * If true, we always use the monogram, even if the favicon is available.
     * </pre>
     *
     * <code>optional bool force_monogram = 2;</code>
     * @param value The forceMonogram to set.
     * @return This builder for chaining.
     */
    public Builder setForceMonogram(boolean value) {
      copyOnWrite();
      instance.setForceMonogram(value);
      return this;
    }
    /**
     * <pre>
     * If true, we always use the monogram, even if the favicon is available.
     * </pre>
     *
     * <code>optional bool force_monogram = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearForceMonogram() {
      copyOnWrite();
      instance.clearForceMonogram();
      return this;
    }

    /**
     * <pre>
     * If set, this url is used to fetch favicon, otherwise current url is used to
     * fetch favicon.
     * </pre>
     *
     * <code>optional string website_url = 3;</code>
     * @return Whether the websiteUrl field is set.
     */
    @java.lang.Override
    public boolean hasWebsiteUrl() {
      return instance.hasWebsiteUrl();
    }
    /**
     * <pre>
     * If set, this url is used to fetch favicon, otherwise current url is used to
     * fetch favicon.
     * </pre>
     *
     * <code>optional string website_url = 3;</code>
     * @return The websiteUrl.
     */
    @java.lang.Override
    public java.lang.String getWebsiteUrl() {
      return instance.getWebsiteUrl();
    }
    /**
     * <pre>
     * If set, this url is used to fetch favicon, otherwise current url is used to
     * fetch favicon.
     * </pre>
     *
     * <code>optional string website_url = 3;</code>
     * @return The bytes for websiteUrl.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getWebsiteUrlBytes() {
      return instance.getWebsiteUrlBytes();
    }
    /**
     * <pre>
     * If set, this url is used to fetch favicon, otherwise current url is used to
     * fetch favicon.
     * </pre>
     *
     * <code>optional string website_url = 3;</code>
     * @param value The websiteUrl to set.
     * @return This builder for chaining.
     */
    public Builder setWebsiteUrl(
        java.lang.String value) {
      copyOnWrite();
      instance.setWebsiteUrl(value);
      return this;
    }
    /**
     * <pre>
     * If set, this url is used to fetch favicon, otherwise current url is used to
     * fetch favicon.
     * </pre>
     *
     * <code>optional string website_url = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearWebsiteUrl() {
      copyOnWrite();
      instance.clearWebsiteUrl();
      return this;
    }
    /**
     * <pre>
     * If set, this url is used to fetch favicon, otherwise current url is used to
     * fetch favicon.
     * </pre>
     *
     * <code>optional string website_url = 3;</code>
     * @param value The bytes for websiteUrl to set.
     * @return This builder for chaining.
     */
    public Builder setWebsiteUrlBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setWebsiteUrlBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.FaviconDrawableProto)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "diameterSize_",
            "forceMonogram_",
            "websiteUrl_",
          };
          java.lang.String info =
              "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
              "\u1007\u0001\u0003\u1008\u0002";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.FaviconDrawableProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto DEFAULT_INSTANCE;
  static {
    FaviconDrawableProto defaultInstance = new FaviconDrawableProto();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      FaviconDrawableProto.class, defaultInstance);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.FaviconDrawableProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<FaviconDrawableProto> PARSER;

  public static com.google.protobuf.Parser<FaviconDrawableProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

