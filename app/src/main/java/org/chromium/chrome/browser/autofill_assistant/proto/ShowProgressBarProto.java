// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Shows the progress bar.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.ShowProgressBarProto}
 */
public  final class ShowProgressBarProto extends
    com.google.protobuf.GeneratedMessageLite<
        ShowProgressBarProto, ShowProgressBarProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.ShowProgressBarProto)
    ShowProgressBarProtoOrBuilder {
  private ShowProgressBarProto() {
    message_ = "";
  }
  public interface StepProgressBarIconOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.ShowProgressBarProto.StepProgressBarIcon)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .autofill_assistant.DrawableProto icon = 1;</code>
     * @return Whether the icon field is set.
     */
    boolean hasIcon();
    /**
     * <code>optional .autofill_assistant.DrawableProto icon = 1;</code>
     * @return The icon.
     */
    org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto getIcon();

    /**
     * <pre>
     * The reference identifier of this step.
     * </pre>
     *
     * <code>optional string identifier = 2;</code>
     * @return Whether the identifier field is set.
     */
    boolean hasIdentifier();
    /**
     * <pre>
     * The reference identifier of this step.
     * </pre>
     *
     * <code>optional string identifier = 2;</code>
     * @return The identifier.
     */
    java.lang.String getIdentifier();
    /**
     * <pre>
     * The reference identifier of this step.
     * </pre>
     *
     * <code>optional string identifier = 2;</code>
     * @return The bytes for identifier.
     */
    com.google.protobuf.ByteString
        getIdentifierBytes();
  }
  /**
   * Protobuf type {@code autofill_assistant.ShowProgressBarProto.StepProgressBarIcon}
   */
  public  static final class StepProgressBarIcon extends
      com.google.protobuf.GeneratedMessageLite<
          StepProgressBarIcon, StepProgressBarIcon.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.ShowProgressBarProto.StepProgressBarIcon)
      StepProgressBarIconOrBuilder {
    private StepProgressBarIcon() {
      identifier_ = "";
    }
    private int bitField0_;
    public static final int ICON_FIELD_NUMBER = 1;
    private org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto icon_;
    /**
     * <code>optional .autofill_assistant.DrawableProto icon = 1;</code>
     */
    @java.lang.Override
    public boolean hasIcon() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .autofill_assistant.DrawableProto icon = 1;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto getIcon() {
      return icon_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto.getDefaultInstance() : icon_;
    }
    /**
     * <code>optional .autofill_assistant.DrawableProto icon = 1;</code>
     */
    private void setIcon(org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto value) {
      value.getClass();
  icon_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>optional .autofill_assistant.DrawableProto icon = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeIcon(org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto value) {
      value.getClass();
  if (icon_ != null &&
          icon_ != org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto.getDefaultInstance()) {
        icon_ =
          org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto.newBuilder(icon_).mergeFrom(value).buildPartial();
      } else {
        icon_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>optional .autofill_assistant.DrawableProto icon = 1;</code>
     */
    private void clearIcon() {  icon_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int IDENTIFIER_FIELD_NUMBER = 2;
    private java.lang.String identifier_;
    /**
     * <pre>
     * The reference identifier of this step.
     * </pre>
     *
     * <code>optional string identifier = 2;</code>
     * @return Whether the identifier field is set.
     */
    @java.lang.Override
    public boolean hasIdentifier() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The reference identifier of this step.
     * </pre>
     *
     * <code>optional string identifier = 2;</code>
     * @return The identifier.
     */
    @java.lang.Override
    public java.lang.String getIdentifier() {
      return identifier_;
    }
    /**
     * <pre>
     * The reference identifier of this step.
     * </pre>
     *
     * <code>optional string identifier = 2;</code>
     * @return The bytes for identifier.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdentifierBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(identifier_);
    }
    /**
     * <pre>
     * The reference identifier of this step.
     * </pre>
     *
     * <code>optional string identifier = 2;</code>
     * @param value The identifier to set.
     */
    private void setIdentifier(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000002;
      identifier_ = value;
    }
    /**
     * <pre>
     * The reference identifier of this step.
     * </pre>
     *
     * <code>optional string identifier = 2;</code>
     */
    private void clearIdentifier() {
      bitField0_ = (bitField0_ & ~0x00000002);
      identifier_ = getDefaultInstance().getIdentifier();
    }
    /**
     * <pre>
     * The reference identifier of this step.
     * </pre>
     *
     * <code>optional string identifier = 2;</code>
     * @param value The bytes for identifier to set.
     */
    private void setIdentifierBytes(
        com.google.protobuf.ByteString value) {
      identifier_ = value.toStringUtf8();
      bitField0_ |= 0x00000002;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code autofill_assistant.ShowProgressBarProto.StepProgressBarIcon}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.ShowProgressBarProto.StepProgressBarIcon)
        org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIconOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .autofill_assistant.DrawableProto icon = 1;</code>
       */
      @java.lang.Override
      public boolean hasIcon() {
        return instance.hasIcon();
      }
      /**
       * <code>optional .autofill_assistant.DrawableProto icon = 1;</code>
       */
      @java.lang.Override
      public org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto getIcon() {
        return instance.getIcon();
      }
      /**
       * <code>optional .autofill_assistant.DrawableProto icon = 1;</code>
       */
      public Builder setIcon(org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto value) {
        copyOnWrite();
        instance.setIcon(value);
        return this;
        }
      /**
       * <code>optional .autofill_assistant.DrawableProto icon = 1;</code>
       */
      public Builder setIcon(
          org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto.Builder builderForValue) {
        copyOnWrite();
        instance.setIcon(builderForValue.build());
        return this;
      }
      /**
       * <code>optional .autofill_assistant.DrawableProto icon = 1;</code>
       */
      public Builder mergeIcon(org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto value) {
        copyOnWrite();
        instance.mergeIcon(value);
        return this;
      }
      /**
       * <code>optional .autofill_assistant.DrawableProto icon = 1;</code>
       */
      public Builder clearIcon() {  copyOnWrite();
        instance.clearIcon();
        return this;
      }

      /**
       * <pre>
       * The reference identifier of this step.
       * </pre>
       *
       * <code>optional string identifier = 2;</code>
       * @return Whether the identifier field is set.
       */
      @java.lang.Override
      public boolean hasIdentifier() {
        return instance.hasIdentifier();
      }
      /**
       * <pre>
       * The reference identifier of this step.
       * </pre>
       *
       * <code>optional string identifier = 2;</code>
       * @return The identifier.
       */
      @java.lang.Override
      public java.lang.String getIdentifier() {
        return instance.getIdentifier();
      }
      /**
       * <pre>
       * The reference identifier of this step.
       * </pre>
       *
       * <code>optional string identifier = 2;</code>
       * @return The bytes for identifier.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getIdentifierBytes() {
        return instance.getIdentifierBytes();
      }
      /**
       * <pre>
       * The reference identifier of this step.
       * </pre>
       *
       * <code>optional string identifier = 2;</code>
       * @param value The identifier to set.
       * @return This builder for chaining.
       */
      public Builder setIdentifier(
          java.lang.String value) {
        copyOnWrite();
        instance.setIdentifier(value);
        return this;
      }
      /**
       * <pre>
       * The reference identifier of this step.
       * </pre>
       *
       * <code>optional string identifier = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearIdentifier() {
        copyOnWrite();
        instance.clearIdentifier();
        return this;
      }
      /**
       * <pre>
       * The reference identifier of this step.
       * </pre>
       *
       * <code>optional string identifier = 2;</code>
       * @param value The bytes for identifier to set.
       * @return This builder for chaining.
       */
      public Builder setIdentifierBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setIdentifierBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.ShowProgressBarProto.StepProgressBarIcon)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "icon_",
              "identifier_",
            };
            java.lang.String info =
                "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
                "\u1008\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.ShowProgressBarProto.StepProgressBarIcon)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon DEFAULT_INSTANCE;
    static {
      StepProgressBarIcon defaultInstance = new StepProgressBarIcon();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        StepProgressBarIcon.class, defaultInstance);
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<StepProgressBarIcon> PARSER;

    public static com.google.protobuf.Parser<StepProgressBarIcon> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface StepProgressBarConfigurationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * This boolean should always be true, unless you wish to switch to the
     * old progress bar during the flow. This is not recommended!
     * </pre>
     *
     * <code>optional bool use_step_progress_bar = 1;</code>
     * @return Whether the useStepProgressBar field is set.
     */
    boolean hasUseStepProgressBar();
    /**
     * <pre>
     * This boolean should always be true, unless you wish to switch to the
     * old progress bar during the flow. This is not recommended!
     * </pre>
     *
     * <code>optional bool use_step_progress_bar = 1;</code>
     * @return The useStepProgressBar.
     */
    boolean getUseStepProgressBar();

    /**
     * <pre>
     * Set the icons for the new progress bar. The size of the |step_icons|
     * gives the length of the progress bar. As such an empty list is not
     * supported. The list needs to be at least 2 items long.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
     */
    java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon> 
        getAnnotatedStepIconsList();
    /**
     * <pre>
     * Set the icons for the new progress bar. The size of the |step_icons|
     * gives the length of the progress bar. As such an empty list is not
     * supported. The list needs to be at least 2 items long.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
     */
    org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon getAnnotatedStepIcons(int index);
    /**
     * <pre>
     * Set the icons for the new progress bar. The size of the |step_icons|
     * gives the length of the progress bar. As such an empty list is not
     * supported. The list needs to be at least 2 items long.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
     */
    int getAnnotatedStepIconsCount();
  }
  /**
   * <pre>
   * The configuration of the step progress bar. Only has an impact if the new
   * progress bar is being used. This configuration should only be sent once in
   * the initial call of the progress bar, as each appearance may cause the
   * progress bar being rerendered. The previous configuration will be carried
   * over in each new progress |ShowProgressBarAction|.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration}
   */
  public  static final class StepProgressBarConfiguration extends
      com.google.protobuf.GeneratedMessageLite<
          StepProgressBarConfiguration, StepProgressBarConfiguration.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration)
      StepProgressBarConfigurationOrBuilder {
    private StepProgressBarConfiguration() {
      annotatedStepIcons_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int USE_STEP_PROGRESS_BAR_FIELD_NUMBER = 1;
    private boolean useStepProgressBar_;
    /**
     * <pre>
     * This boolean should always be true, unless you wish to switch to the
     * old progress bar during the flow. This is not recommended!
     * </pre>
     *
     * <code>optional bool use_step_progress_bar = 1;</code>
     * @return Whether the useStepProgressBar field is set.
     */
    @java.lang.Override
    public boolean hasUseStepProgressBar() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * This boolean should always be true, unless you wish to switch to the
     * old progress bar during the flow. This is not recommended!
     * </pre>
     *
     * <code>optional bool use_step_progress_bar = 1;</code>
     * @return The useStepProgressBar.
     */
    @java.lang.Override
    public boolean getUseStepProgressBar() {
      return useStepProgressBar_;
    }
    /**
     * <pre>
     * This boolean should always be true, unless you wish to switch to the
     * old progress bar during the flow. This is not recommended!
     * </pre>
     *
     * <code>optional bool use_step_progress_bar = 1;</code>
     * @param value The useStepProgressBar to set.
     */
    private void setUseStepProgressBar(boolean value) {
      bitField0_ |= 0x00000001;
      useStepProgressBar_ = value;
    }
    /**
     * <pre>
     * This boolean should always be true, unless you wish to switch to the
     * old progress bar during the flow. This is not recommended!
     * </pre>
     *
     * <code>optional bool use_step_progress_bar = 1;</code>
     */
    private void clearUseStepProgressBar() {
      bitField0_ = (bitField0_ & ~0x00000001);
      useStepProgressBar_ = false;
    }

    public static final int ANNOTATED_STEP_ICONS_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon> annotatedStepIcons_;
    /**
     * <pre>
     * Set the icons for the new progress bar. The size of the |step_icons|
     * gives the length of the progress bar. As such an empty list is not
     * supported. The list needs to be at least 2 items long.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon> getAnnotatedStepIconsList() {
      return annotatedStepIcons_;
    }
    /**
     * <pre>
     * Set the icons for the new progress bar. The size of the |step_icons|
     * gives the length of the progress bar. As such an empty list is not
     * supported. The list needs to be at least 2 items long.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
     */
    public java.util.List<? extends org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIconOrBuilder> 
        getAnnotatedStepIconsOrBuilderList() {
      return annotatedStepIcons_;
    }
    /**
     * <pre>
     * Set the icons for the new progress bar. The size of the |step_icons|
     * gives the length of the progress bar. As such an empty list is not
     * supported. The list needs to be at least 2 items long.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
     */
    @java.lang.Override
    public int getAnnotatedStepIconsCount() {
      return annotatedStepIcons_.size();
    }
    /**
     * <pre>
     * Set the icons for the new progress bar. The size of the |step_icons|
     * gives the length of the progress bar. As such an empty list is not
     * supported. The list needs to be at least 2 items long.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon getAnnotatedStepIcons(int index) {
      return annotatedStepIcons_.get(index);
    }
    /**
     * <pre>
     * Set the icons for the new progress bar. The size of the |step_icons|
     * gives the length of the progress bar. As such an empty list is not
     * supported. The list needs to be at least 2 items long.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIconOrBuilder getAnnotatedStepIconsOrBuilder(
        int index) {
      return annotatedStepIcons_.get(index);
    }
    private void ensureAnnotatedStepIconsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon> tmp = annotatedStepIcons_;
      if (!tmp.isModifiable()) {
        annotatedStepIcons_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * Set the icons for the new progress bar. The size of the |step_icons|
     * gives the length of the progress bar. As such an empty list is not
     * supported. The list needs to be at least 2 items long.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
     */
    private void setAnnotatedStepIcons(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon value) {
      value.getClass();
  ensureAnnotatedStepIconsIsMutable();
      annotatedStepIcons_.set(index, value);
    }
    /**
     * <pre>
     * Set the icons for the new progress bar. The size of the |step_icons|
     * gives the length of the progress bar. As such an empty list is not
     * supported. The list needs to be at least 2 items long.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
     */
    private void addAnnotatedStepIcons(org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon value) {
      value.getClass();
  ensureAnnotatedStepIconsIsMutable();
      annotatedStepIcons_.add(value);
    }
    /**
     * <pre>
     * Set the icons for the new progress bar. The size of the |step_icons|
     * gives the length of the progress bar. As such an empty list is not
     * supported. The list needs to be at least 2 items long.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
     */
    private void addAnnotatedStepIcons(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon value) {
      value.getClass();
  ensureAnnotatedStepIconsIsMutable();
      annotatedStepIcons_.add(index, value);
    }
    /**
     * <pre>
     * Set the icons for the new progress bar. The size of the |step_icons|
     * gives the length of the progress bar. As such an empty list is not
     * supported. The list needs to be at least 2 items long.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
     */
    private void addAllAnnotatedStepIcons(
        java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon> values) {
      ensureAnnotatedStepIconsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, annotatedStepIcons_);
    }
    /**
     * <pre>
     * Set the icons for the new progress bar. The size of the |step_icons|
     * gives the length of the progress bar. As such an empty list is not
     * supported. The list needs to be at least 2 items long.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
     */
    private void clearAnnotatedStepIcons() {
      annotatedStepIcons_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Set the icons for the new progress bar. The size of the |step_icons|
     * gives the length of the progress bar. As such an empty list is not
     * supported. The list needs to be at least 2 items long.
     * </pre>
     *
     * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
     */
    private void removeAnnotatedStepIcons(int index) {
      ensureAnnotatedStepIconsIsMutable();
      annotatedStepIcons_.remove(index);
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * The configuration of the step progress bar. Only has an impact if the new
     * progress bar is being used. This configuration should only be sent once in
     * the initial call of the progress bar, as each appearance may cause the
     * progress bar being rerendered. The previous configuration will be carried
     * over in each new progress |ShowProgressBarAction|.
     * </pre>
     *
     * Protobuf type {@code autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration)
        org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfigurationOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * This boolean should always be true, unless you wish to switch to the
       * old progress bar during the flow. This is not recommended!
       * </pre>
       *
       * <code>optional bool use_step_progress_bar = 1;</code>
       * @return Whether the useStepProgressBar field is set.
       */
      @java.lang.Override
      public boolean hasUseStepProgressBar() {
        return instance.hasUseStepProgressBar();
      }
      /**
       * <pre>
       * This boolean should always be true, unless you wish to switch to the
       * old progress bar during the flow. This is not recommended!
       * </pre>
       *
       * <code>optional bool use_step_progress_bar = 1;</code>
       * @return The useStepProgressBar.
       */
      @java.lang.Override
      public boolean getUseStepProgressBar() {
        return instance.getUseStepProgressBar();
      }
      /**
       * <pre>
       * This boolean should always be true, unless you wish to switch to the
       * old progress bar during the flow. This is not recommended!
       * </pre>
       *
       * <code>optional bool use_step_progress_bar = 1;</code>
       * @param value The useStepProgressBar to set.
       * @return This builder for chaining.
       */
      public Builder setUseStepProgressBar(boolean value) {
        copyOnWrite();
        instance.setUseStepProgressBar(value);
        return this;
      }
      /**
       * <pre>
       * This boolean should always be true, unless you wish to switch to the
       * old progress bar during the flow. This is not recommended!
       * </pre>
       *
       * <code>optional bool use_step_progress_bar = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUseStepProgressBar() {
        copyOnWrite();
        instance.clearUseStepProgressBar();
        return this;
      }

      /**
       * <pre>
       * Set the icons for the new progress bar. The size of the |step_icons|
       * gives the length of the progress bar. As such an empty list is not
       * supported. The list needs to be at least 2 items long.
       * </pre>
       *
       * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
       */
      @java.lang.Override
      public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon> getAnnotatedStepIconsList() {
        return java.util.Collections.unmodifiableList(
            instance.getAnnotatedStepIconsList());
      }
      /**
       * <pre>
       * Set the icons for the new progress bar. The size of the |step_icons|
       * gives the length of the progress bar. As such an empty list is not
       * supported. The list needs to be at least 2 items long.
       * </pre>
       *
       * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
       */
      @java.lang.Override
      public int getAnnotatedStepIconsCount() {
        return instance.getAnnotatedStepIconsCount();
      }/**
       * <pre>
       * Set the icons for the new progress bar. The size of the |step_icons|
       * gives the length of the progress bar. As such an empty list is not
       * supported. The list needs to be at least 2 items long.
       * </pre>
       *
       * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
       */
      @java.lang.Override
      public org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon getAnnotatedStepIcons(int index) {
        return instance.getAnnotatedStepIcons(index);
      }
      /**
       * <pre>
       * Set the icons for the new progress bar. The size of the |step_icons|
       * gives the length of the progress bar. As such an empty list is not
       * supported. The list needs to be at least 2 items long.
       * </pre>
       *
       * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
       */
      public Builder setAnnotatedStepIcons(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon value) {
        copyOnWrite();
        instance.setAnnotatedStepIcons(index, value);
        return this;
      }
      /**
       * <pre>
       * Set the icons for the new progress bar. The size of the |step_icons|
       * gives the length of the progress bar. As such an empty list is not
       * supported. The list needs to be at least 2 items long.
       * </pre>
       *
       * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
       */
      public Builder setAnnotatedStepIcons(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon.Builder builderForValue) {
        copyOnWrite();
        instance.setAnnotatedStepIcons(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Set the icons for the new progress bar. The size of the |step_icons|
       * gives the length of the progress bar. As such an empty list is not
       * supported. The list needs to be at least 2 items long.
       * </pre>
       *
       * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
       */
      public Builder addAnnotatedStepIcons(org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon value) {
        copyOnWrite();
        instance.addAnnotatedStepIcons(value);
        return this;
      }
      /**
       * <pre>
       * Set the icons for the new progress bar. The size of the |step_icons|
       * gives the length of the progress bar. As such an empty list is not
       * supported. The list needs to be at least 2 items long.
       * </pre>
       *
       * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
       */
      public Builder addAnnotatedStepIcons(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon value) {
        copyOnWrite();
        instance.addAnnotatedStepIcons(index, value);
        return this;
      }
      /**
       * <pre>
       * Set the icons for the new progress bar. The size of the |step_icons|
       * gives the length of the progress bar. As such an empty list is not
       * supported. The list needs to be at least 2 items long.
       * </pre>
       *
       * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
       */
      public Builder addAnnotatedStepIcons(
          org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotatedStepIcons(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Set the icons for the new progress bar. The size of the |step_icons|
       * gives the length of the progress bar. As such an empty list is not
       * supported. The list needs to be at least 2 items long.
       * </pre>
       *
       * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
       */
      public Builder addAnnotatedStepIcons(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon.Builder builderForValue) {
        copyOnWrite();
        instance.addAnnotatedStepIcons(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Set the icons for the new progress bar. The size of the |step_icons|
       * gives the length of the progress bar. As such an empty list is not
       * supported. The list needs to be at least 2 items long.
       * </pre>
       *
       * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
       */
      public Builder addAllAnnotatedStepIcons(
          java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon> values) {
        copyOnWrite();
        instance.addAllAnnotatedStepIcons(values);
        return this;
      }
      /**
       * <pre>
       * Set the icons for the new progress bar. The size of the |step_icons|
       * gives the length of the progress bar. As such an empty list is not
       * supported. The list needs to be at least 2 items long.
       * </pre>
       *
       * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
       */
      public Builder clearAnnotatedStepIcons() {
        copyOnWrite();
        instance.clearAnnotatedStepIcons();
        return this;
      }
      /**
       * <pre>
       * Set the icons for the new progress bar. The size of the |step_icons|
       * gives the length of the progress bar. As such an empty list is not
       * supported. The list needs to be at least 2 items long.
       * </pre>
       *
       * <code>repeated .autofill_assistant.ShowProgressBarProto.StepProgressBarIcon annotated_step_icons = 3;</code>
       */
      public Builder removeAnnotatedStepIcons(int index) {
        copyOnWrite();
        instance.removeAnnotatedStepIcons(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "useStepProgressBar_",
              "annotatedStepIcons_",
              org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarIcon.class,
            };
            java.lang.String info =
                "\u0001\u0002\u0000\u0001\u0001\u0003\u0002\u0000\u0001\u0000\u0001\u1007\u0000\u0003" +
                "\u001b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration DEFAULT_INSTANCE;
    static {
      StepProgressBarConfiguration defaultInstance = new StepProgressBarConfiguration();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        StepProgressBarConfiguration.class, defaultInstance);
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<StepProgressBarConfiguration> PARSER;

    public static com.google.protobuf.Parser<StepProgressBarConfiguration> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  private int progressIndicatorCase_ = 0;
  private java.lang.Object progressIndicator_;
  public enum ProgressIndicatorCase {
    PROGRESS(6),
    ACTIVE_STEP(8),
    ACTIVE_STEP_IDENTIFIER(11),
    COMPLETE_PROGRESS(12),
    PROGRESSINDICATOR_NOT_SET(0);
    private final int value;
    private ProgressIndicatorCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ProgressIndicatorCase valueOf(int value) {
      return forNumber(value);
    }

    public static ProgressIndicatorCase forNumber(int value) {
      switch (value) {
        case 6: return PROGRESS;
        case 8: return ACTIVE_STEP;
        case 11: return ACTIVE_STEP_IDENTIFIER;
        case 12: return COMPLETE_PROGRESS;
        case 0: return PROGRESSINDICATOR_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @java.lang.Override
  public ProgressIndicatorCase
  getProgressIndicatorCase() {
    return ProgressIndicatorCase.forNumber(
        progressIndicatorCase_);
  }

  private void clearProgressIndicator() {
    progressIndicatorCase_ = 0;
    progressIndicator_ = null;
  }

  public static final int MESSAGE_FIELD_NUMBER = 3;
  private java.lang.String message_;
  /**
   * <pre>
   * Message to show on the progress bar while loading.
   * </pre>
   *
   * <code>optional string message = 3;</code>
   * @return Whether the message field is set.
   */
  @java.lang.Override
  public boolean hasMessage() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Message to show on the progress bar while loading.
   * </pre>
   *
   * <code>optional string message = 3;</code>
   * @return The message.
   */
  @java.lang.Override
  public java.lang.String getMessage() {
    return message_;
  }
  /**
   * <pre>
   * Message to show on the progress bar while loading.
   * </pre>
   *
   * <code>optional string message = 3;</code>
   * @return The bytes for message.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getMessageBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(message_);
  }
  /**
   * <pre>
   * Message to show on the progress bar while loading.
   * </pre>
   *
   * <code>optional string message = 3;</code>
   * @param value The message to set.
   */
  private void setMessage(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000001;
    message_ = value;
  }
  /**
   * <pre>
   * Message to show on the progress bar while loading.
   * </pre>
   *
   * <code>optional string message = 3;</code>
   */
  private void clearMessage() {
    bitField0_ = (bitField0_ & ~0x00000001);
    message_ = getDefaultInstance().getMessage();
  }
  /**
   * <pre>
   * Message to show on the progress bar while loading.
   * </pre>
   *
   * <code>optional string message = 3;</code>
   * @param value The bytes for message to set.
   */
  private void setMessageBytes(
      com.google.protobuf.ByteString value) {
    message_ = value.toStringUtf8();
    bitField0_ |= 0x00000001;
  }

  public static final int PROGRESS_FIELD_NUMBER = 6;
  /**
   * <pre>
   * Value between 0 and 100 indicating the current progress. Values above 100
   * will be capped to 100, values below 0 will be capped to 0 by the client.
   * </pre>
   *
   * <code>int32 progress = 6;</code>
   * @return Whether the progress field is set.
   */
  @java.lang.Override
  public boolean hasProgress() {
    return progressIndicatorCase_ == 6;
  }
  /**
   * <pre>
   * Value between 0 and 100 indicating the current progress. Values above 100
   * will be capped to 100, values below 0 will be capped to 0 by the client.
   * </pre>
   *
   * <code>int32 progress = 6;</code>
   * @return The progress.
   */
  @java.lang.Override
  public int getProgress() {
    if (progressIndicatorCase_ == 6) {
      return (java.lang.Integer) progressIndicator_;
    }
    return 0;
  }
  /**
   * <pre>
   * Value between 0 and 100 indicating the current progress. Values above 100
   * will be capped to 100, values below 0 will be capped to 0 by the client.
   * </pre>
   *
   * <code>int32 progress = 6;</code>
   * @param value The progress to set.
   */
  private void setProgress(int value) {
    progressIndicatorCase_ = 6;
    progressIndicator_ = value;
  }
  /**
   * <pre>
   * Value between 0 and 100 indicating the current progress. Values above 100
   * will be capped to 100, values below 0 will be capped to 0 by the client.
   * </pre>
   *
   * <code>int32 progress = 6;</code>
   */
  private void clearProgress() {
    if (progressIndicatorCase_ == 6) {
      progressIndicatorCase_ = 0;
      progressIndicator_ = null;
    }
  }

  public static final int ACTIVE_STEP_FIELD_NUMBER = 8;
  /**
   * <pre>
   * Value between 0 and |N| (where N is the size of the initial
   * |step_icons|) indicating the current step the flow is in, marking
   * all previous steps as complete. The active step will not be marked as
   * complete but instead be marked as active with a pulsating animation.
   * Setting the value to |N| or -1 will mark all steps as complete with no
   * step being active anymore.
   * </pre>
   *
   * <code>int32 active_step = 8;</code>
   * @return Whether the activeStep field is set.
   */
  @java.lang.Override
  public boolean hasActiveStep() {
    return progressIndicatorCase_ == 8;
  }
  /**
   * <pre>
   * Value between 0 and |N| (where N is the size of the initial
   * |step_icons|) indicating the current step the flow is in, marking
   * all previous steps as complete. The active step will not be marked as
   * complete but instead be marked as active with a pulsating animation.
   * Setting the value to |N| or -1 will mark all steps as complete with no
   * step being active anymore.
   * </pre>
   *
   * <code>int32 active_step = 8;</code>
   * @return The activeStep.
   */
  @java.lang.Override
  public int getActiveStep() {
    if (progressIndicatorCase_ == 8) {
      return (java.lang.Integer) progressIndicator_;
    }
    return 0;
  }
  /**
   * <pre>
   * Value between 0 and |N| (where N is the size of the initial
   * |step_icons|) indicating the current step the flow is in, marking
   * all previous steps as complete. The active step will not be marked as
   * complete but instead be marked as active with a pulsating animation.
   * Setting the value to |N| or -1 will mark all steps as complete with no
   * step being active anymore.
   * </pre>
   *
   * <code>int32 active_step = 8;</code>
   * @param value The activeStep to set.
   */
  private void setActiveStep(int value) {
    progressIndicatorCase_ = 8;
    progressIndicator_ = value;
  }
  /**
   * <pre>
   * Value between 0 and |N| (where N is the size of the initial
   * |step_icons|) indicating the current step the flow is in, marking
   * all previous steps as complete. The active step will not be marked as
   * complete but instead be marked as active with a pulsating animation.
   * Setting the value to |N| or -1 will mark all steps as complete with no
   * step being active anymore.
   * </pre>
   *
   * <code>int32 active_step = 8;</code>
   */
  private void clearActiveStep() {
    if (progressIndicatorCase_ == 8) {
      progressIndicatorCase_ = 0;
      progressIndicator_ = null;
    }
  }

  public static final int ACTIVE_STEP_IDENTIFIER_FIELD_NUMBER = 11;
  /**
   * <pre>
   * The string reference of an icon defined in the
   * |StepProgressBarConfiguration|. This sets the |active_step| to that icon
   * with the same logic as |active_step| itself.
   * </pre>
   *
   * <code>string active_step_identifier = 11;</code>
   * @return Whether the activeStepIdentifier field is set.
   */
  @java.lang.Override
  public boolean hasActiveStepIdentifier() {
    return progressIndicatorCase_ == 11;
  }
  /**
   * <pre>
   * The string reference of an icon defined in the
   * |StepProgressBarConfiguration|. This sets the |active_step| to that icon
   * with the same logic as |active_step| itself.
   * </pre>
   *
   * <code>string active_step_identifier = 11;</code>
   * @return The activeStepIdentifier.
   */
  @java.lang.Override
  public java.lang.String getActiveStepIdentifier() {
    java.lang.String ref = "";
    if (progressIndicatorCase_ == 11) {
      ref = (java.lang.String) progressIndicator_;
    }
    return ref;
  }
  /**
   * <pre>
   * The string reference of an icon defined in the
   * |StepProgressBarConfiguration|. This sets the |active_step| to that icon
   * with the same logic as |active_step| itself.
   * </pre>
   *
   * <code>string active_step_identifier = 11;</code>
   * @return The bytes for activeStepIdentifier.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getActiveStepIdentifierBytes() {
    java.lang.String ref = "";
    if (progressIndicatorCase_ == 11) {
      ref = (java.lang.String) progressIndicator_;
    }
    return com.google.protobuf.ByteString.copyFromUtf8(ref);
  }
  /**
   * <pre>
   * The string reference of an icon defined in the
   * |StepProgressBarConfiguration|. This sets the |active_step| to that icon
   * with the same logic as |active_step| itself.
   * </pre>
   *
   * <code>string active_step_identifier = 11;</code>
   * @param value The activeStepIdentifier to set.
   */
  private void setActiveStepIdentifier(
      java.lang.String value) {
    value.getClass();
  progressIndicatorCase_ = 11;
    progressIndicator_ = value;
  }
  /**
   * <pre>
   * The string reference of an icon defined in the
   * |StepProgressBarConfiguration|. This sets the |active_step| to that icon
   * with the same logic as |active_step| itself.
   * </pre>
   *
   * <code>string active_step_identifier = 11;</code>
   */
  private void clearActiveStepIdentifier() {
    if (progressIndicatorCase_ == 11) {
      progressIndicatorCase_ = 0;
      progressIndicator_ = null;
    }
  }
  /**
   * <pre>
   * The string reference of an icon defined in the
   * |StepProgressBarConfiguration|. This sets the |active_step| to that icon
   * with the same logic as |active_step| itself.
   * </pre>
   *
   * <code>string active_step_identifier = 11;</code>
   * @param value The bytes for activeStepIdentifier to set.
   */
  private void setActiveStepIdentifierBytes(
      com.google.protobuf.ByteString value) {
    progressIndicator_ = value.toStringUtf8();
    progressIndicatorCase_ = 11;
  }

  public static final int COMPLETE_PROGRESS_FIELD_NUMBER = 12;
  /**
   * <pre>
   * Completes the progress in whichever progress bar is active.
   * </pre>
   *
   * <code>bool complete_progress = 12;</code>
   * @return Whether the completeProgress field is set.
   */
  @java.lang.Override
  public boolean hasCompleteProgress() {
    return progressIndicatorCase_ == 12;
  }
  /**
   * <pre>
   * Completes the progress in whichever progress bar is active.
   * </pre>
   *
   * <code>bool complete_progress = 12;</code>
   * @return The completeProgress.
   */
  @java.lang.Override
  public boolean getCompleteProgress() {
    if (progressIndicatorCase_ == 12) {
      return (java.lang.Boolean) progressIndicator_;
    }
    return false;
  }
  /**
   * <pre>
   * Completes the progress in whichever progress bar is active.
   * </pre>
   *
   * <code>bool complete_progress = 12;</code>
   * @param value The completeProgress to set.
   */
  private void setCompleteProgress(boolean value) {
    progressIndicatorCase_ = 12;
    progressIndicator_ = value;
  }
  /**
   * <pre>
   * Completes the progress in whichever progress bar is active.
   * </pre>
   *
   * <code>bool complete_progress = 12;</code>
   */
  private void clearCompleteProgress() {
    if (progressIndicatorCase_ == 12) {
      progressIndicatorCase_ = 0;
      progressIndicator_ = null;
    }
  }

  public static final int ERROR_STATE_FIELD_NUMBER = 10;
  private boolean errorState_;
  /**
   * <pre>
   * Whether the step progress bar should go into an error state.
   * If the active step is smaller than |N|, this will simply mark the last icon
   * as failed. If the active step is |N|, meaning that all steps have been
   * completed, this will mark the entire progress bar as failed.
   * </pre>
   *
   * <code>optional bool error_state = 10;</code>
   * @return Whether the errorState field is set.
   */
  @java.lang.Override
  public boolean hasErrorState() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * Whether the step progress bar should go into an error state.
   * If the active step is smaller than |N|, this will simply mark the last icon
   * as failed. If the active step is |N|, meaning that all steps have been
   * completed, this will mark the entire progress bar as failed.
   * </pre>
   *
   * <code>optional bool error_state = 10;</code>
   * @return The errorState.
   */
  @java.lang.Override
  public boolean getErrorState() {
    return errorState_;
  }
  /**
   * <pre>
   * Whether the step progress bar should go into an error state.
   * If the active step is smaller than |N|, this will simply mark the last icon
   * as failed. If the active step is |N|, meaning that all steps have been
   * completed, this will mark the entire progress bar as failed.
   * </pre>
   *
   * <code>optional bool error_state = 10;</code>
   * @param value The errorState to set.
   */
  private void setErrorState(boolean value) {
    bitField0_ |= 0x00000020;
    errorState_ = value;
  }
  /**
   * <pre>
   * Whether the step progress bar should go into an error state.
   * If the active step is smaller than |N|, this will simply mark the last icon
   * as failed. If the active step is |N|, meaning that all steps have been
   * completed, this will mark the entire progress bar as failed.
   * </pre>
   *
   * <code>optional bool error_state = 10;</code>
   */
  private void clearErrorState() {
    bitField0_ = (bitField0_ & ~0x00000020);
    errorState_ = false;
  }

  public static final int HIDE_FIELD_NUMBER = 7;
  private boolean hide_;
  /**
   * <pre>
   * Hide the progress bar in the UI.
   * </pre>
   *
   * <code>optional bool hide = 7;</code>
   * @return Whether the hide field is set.
   */
  @java.lang.Override
  public boolean hasHide() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * Hide the progress bar in the UI.
   * </pre>
   *
   * <code>optional bool hide = 7;</code>
   * @return The hide.
   */
  @java.lang.Override
  public boolean getHide() {
    return hide_;
  }
  /**
   * <pre>
   * Hide the progress bar in the UI.
   * </pre>
   *
   * <code>optional bool hide = 7;</code>
   * @param value The hide to set.
   */
  private void setHide(boolean value) {
    bitField0_ |= 0x00000040;
    hide_ = value;
  }
  /**
   * <pre>
   * Hide the progress bar in the UI.
   * </pre>
   *
   * <code>optional bool hide = 7;</code>
   */
  private void clearHide() {
    bitField0_ = (bitField0_ & ~0x00000040);
    hide_ = false;
  }

  public static final int STEP_PROGRESS_BAR_CONFIGURATION_FIELD_NUMBER = 9;
  private org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration stepProgressBarConfiguration_;
  /**
   * <code>optional .autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration step_progress_bar_configuration = 9;</code>
   */
  @java.lang.Override
  public boolean hasStepProgressBarConfiguration() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <code>optional .autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration step_progress_bar_configuration = 9;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration getStepProgressBarConfiguration() {
    return stepProgressBarConfiguration_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration.getDefaultInstance() : stepProgressBarConfiguration_;
  }
  /**
   * <code>optional .autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration step_progress_bar_configuration = 9;</code>
   */
  private void setStepProgressBarConfiguration(org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration value) {
    value.getClass();
  stepProgressBarConfiguration_ = value;
    bitField0_ |= 0x00000080;
    }
  /**
   * <code>optional .autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration step_progress_bar_configuration = 9;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeStepProgressBarConfiguration(org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration value) {
    value.getClass();
  if (stepProgressBarConfiguration_ != null &&
        stepProgressBarConfiguration_ != org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration.getDefaultInstance()) {
      stepProgressBarConfiguration_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration.newBuilder(stepProgressBarConfiguration_).mergeFrom(value).buildPartial();
    } else {
      stepProgressBarConfiguration_ = value;
    }
    bitField0_ |= 0x00000080;
  }
  /**
   * <code>optional .autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration step_progress_bar_configuration = 9;</code>
   */
  private void clearStepProgressBarConfiguration() {  stepProgressBarConfiguration_ = null;
    bitField0_ = (bitField0_ & ~0x00000080);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Shows the progress bar.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.ShowProgressBarProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.ShowProgressBarProto)
      org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @java.lang.Override
    public ProgressIndicatorCase
        getProgressIndicatorCase() {
      return instance.getProgressIndicatorCase();
    }

    public Builder clearProgressIndicator() {
      copyOnWrite();
      instance.clearProgressIndicator();
      return this;
    }


    /**
     * <pre>
     * Message to show on the progress bar while loading.
     * </pre>
     *
     * <code>optional string message = 3;</code>
     * @return Whether the message field is set.
     */
    @java.lang.Override
    public boolean hasMessage() {
      return instance.hasMessage();
    }
    /**
     * <pre>
     * Message to show on the progress bar while loading.
     * </pre>
     *
     * <code>optional string message = 3;</code>
     * @return The message.
     */
    @java.lang.Override
    public java.lang.String getMessage() {
      return instance.getMessage();
    }
    /**
     * <pre>
     * Message to show on the progress bar while loading.
     * </pre>
     *
     * <code>optional string message = 3;</code>
     * @return The bytes for message.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMessageBytes() {
      return instance.getMessageBytes();
    }
    /**
     * <pre>
     * Message to show on the progress bar while loading.
     * </pre>
     *
     * <code>optional string message = 3;</code>
     * @param value The message to set.
     * @return This builder for chaining.
     */
    public Builder setMessage(
        java.lang.String value) {
      copyOnWrite();
      instance.setMessage(value);
      return this;
    }
    /**
     * <pre>
     * Message to show on the progress bar while loading.
     * </pre>
     *
     * <code>optional string message = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearMessage() {
      copyOnWrite();
      instance.clearMessage();
      return this;
    }
    /**
     * <pre>
     * Message to show on the progress bar while loading.
     * </pre>
     *
     * <code>optional string message = 3;</code>
     * @param value The bytes for message to set.
     * @return This builder for chaining.
     */
    public Builder setMessageBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setMessageBytes(value);
      return this;
    }

    /**
     * <pre>
     * Value between 0 and 100 indicating the current progress. Values above 100
     * will be capped to 100, values below 0 will be capped to 0 by the client.
     * </pre>
     *
     * <code>int32 progress = 6;</code>
     * @return Whether the progress field is set.
     */
    @java.lang.Override
    public boolean hasProgress() {
      return instance.hasProgress();
    }
    /**
     * <pre>
     * Value between 0 and 100 indicating the current progress. Values above 100
     * will be capped to 100, values below 0 will be capped to 0 by the client.
     * </pre>
     *
     * <code>int32 progress = 6;</code>
     * @return The progress.
     */
    @java.lang.Override
    public int getProgress() {
      return instance.getProgress();
    }
    /**
     * <pre>
     * Value between 0 and 100 indicating the current progress. Values above 100
     * will be capped to 100, values below 0 will be capped to 0 by the client.
     * </pre>
     *
     * <code>int32 progress = 6;</code>
     * @param value The progress to set.
     * @return This builder for chaining.
     */
    public Builder setProgress(int value) {
      copyOnWrite();
      instance.setProgress(value);
      return this;
    }
    /**
     * <pre>
     * Value between 0 and 100 indicating the current progress. Values above 100
     * will be capped to 100, values below 0 will be capped to 0 by the client.
     * </pre>
     *
     * <code>int32 progress = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearProgress() {
      copyOnWrite();
      instance.clearProgress();
      return this;
    }

    /**
     * <pre>
     * Value between 0 and |N| (where N is the size of the initial
     * |step_icons|) indicating the current step the flow is in, marking
     * all previous steps as complete. The active step will not be marked as
     * complete but instead be marked as active with a pulsating animation.
     * Setting the value to |N| or -1 will mark all steps as complete with no
     * step being active anymore.
     * </pre>
     *
     * <code>int32 active_step = 8;</code>
     * @return Whether the activeStep field is set.
     */
    @java.lang.Override
    public boolean hasActiveStep() {
      return instance.hasActiveStep();
    }
    /**
     * <pre>
     * Value between 0 and |N| (where N is the size of the initial
     * |step_icons|) indicating the current step the flow is in, marking
     * all previous steps as complete. The active step will not be marked as
     * complete but instead be marked as active with a pulsating animation.
     * Setting the value to |N| or -1 will mark all steps as complete with no
     * step being active anymore.
     * </pre>
     *
     * <code>int32 active_step = 8;</code>
     * @return The activeStep.
     */
    @java.lang.Override
    public int getActiveStep() {
      return instance.getActiveStep();
    }
    /**
     * <pre>
     * Value between 0 and |N| (where N is the size of the initial
     * |step_icons|) indicating the current step the flow is in, marking
     * all previous steps as complete. The active step will not be marked as
     * complete but instead be marked as active with a pulsating animation.
     * Setting the value to |N| or -1 will mark all steps as complete with no
     * step being active anymore.
     * </pre>
     *
     * <code>int32 active_step = 8;</code>
     * @param value The activeStep to set.
     * @return This builder for chaining.
     */
    public Builder setActiveStep(int value) {
      copyOnWrite();
      instance.setActiveStep(value);
      return this;
    }
    /**
     * <pre>
     * Value between 0 and |N| (where N is the size of the initial
     * |step_icons|) indicating the current step the flow is in, marking
     * all previous steps as complete. The active step will not be marked as
     * complete but instead be marked as active with a pulsating animation.
     * Setting the value to |N| or -1 will mark all steps as complete with no
     * step being active anymore.
     * </pre>
     *
     * <code>int32 active_step = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearActiveStep() {
      copyOnWrite();
      instance.clearActiveStep();
      return this;
    }

    /**
     * <pre>
     * The string reference of an icon defined in the
     * |StepProgressBarConfiguration|. This sets the |active_step| to that icon
     * with the same logic as |active_step| itself.
     * </pre>
     *
     * <code>string active_step_identifier = 11;</code>
     * @return Whether the activeStepIdentifier field is set.
     */
    @java.lang.Override
    public boolean hasActiveStepIdentifier() {
      return instance.hasActiveStepIdentifier();
    }
    /**
     * <pre>
     * The string reference of an icon defined in the
     * |StepProgressBarConfiguration|. This sets the |active_step| to that icon
     * with the same logic as |active_step| itself.
     * </pre>
     *
     * <code>string active_step_identifier = 11;</code>
     * @return The activeStepIdentifier.
     */
    @java.lang.Override
    public java.lang.String getActiveStepIdentifier() {
      return instance.getActiveStepIdentifier();
    }
    /**
     * <pre>
     * The string reference of an icon defined in the
     * |StepProgressBarConfiguration|. This sets the |active_step| to that icon
     * with the same logic as |active_step| itself.
     * </pre>
     *
     * <code>string active_step_identifier = 11;</code>
     * @return The bytes for activeStepIdentifier.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getActiveStepIdentifierBytes() {
      return instance.getActiveStepIdentifierBytes();
    }
    /**
     * <pre>
     * The string reference of an icon defined in the
     * |StepProgressBarConfiguration|. This sets the |active_step| to that icon
     * with the same logic as |active_step| itself.
     * </pre>
     *
     * <code>string active_step_identifier = 11;</code>
     * @param value The activeStepIdentifier to set.
     * @return This builder for chaining.
     */
    public Builder setActiveStepIdentifier(
        java.lang.String value) {
      copyOnWrite();
      instance.setActiveStepIdentifier(value);
      return this;
    }
    /**
     * <pre>
     * The string reference of an icon defined in the
     * |StepProgressBarConfiguration|. This sets the |active_step| to that icon
     * with the same logic as |active_step| itself.
     * </pre>
     *
     * <code>string active_step_identifier = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearActiveStepIdentifier() {
      copyOnWrite();
      instance.clearActiveStepIdentifier();
      return this;
    }
    /**
     * <pre>
     * The string reference of an icon defined in the
     * |StepProgressBarConfiguration|. This sets the |active_step| to that icon
     * with the same logic as |active_step| itself.
     * </pre>
     *
     * <code>string active_step_identifier = 11;</code>
     * @param value The bytes for activeStepIdentifier to set.
     * @return This builder for chaining.
     */
    public Builder setActiveStepIdentifierBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setActiveStepIdentifierBytes(value);
      return this;
    }

    /**
     * <pre>
     * Completes the progress in whichever progress bar is active.
     * </pre>
     *
     * <code>bool complete_progress = 12;</code>
     * @return Whether the completeProgress field is set.
     */
    @java.lang.Override
    public boolean hasCompleteProgress() {
      return instance.hasCompleteProgress();
    }
    /**
     * <pre>
     * Completes the progress in whichever progress bar is active.
     * </pre>
     *
     * <code>bool complete_progress = 12;</code>
     * @return The completeProgress.
     */
    @java.lang.Override
    public boolean getCompleteProgress() {
      return instance.getCompleteProgress();
    }
    /**
     * <pre>
     * Completes the progress in whichever progress bar is active.
     * </pre>
     *
     * <code>bool complete_progress = 12;</code>
     * @param value The completeProgress to set.
     * @return This builder for chaining.
     */
    public Builder setCompleteProgress(boolean value) {
      copyOnWrite();
      instance.setCompleteProgress(value);
      return this;
    }
    /**
     * <pre>
     * Completes the progress in whichever progress bar is active.
     * </pre>
     *
     * <code>bool complete_progress = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearCompleteProgress() {
      copyOnWrite();
      instance.clearCompleteProgress();
      return this;
    }

    /**
     * <pre>
     * Whether the step progress bar should go into an error state.
     * If the active step is smaller than |N|, this will simply mark the last icon
     * as failed. If the active step is |N|, meaning that all steps have been
     * completed, this will mark the entire progress bar as failed.
     * </pre>
     *
     * <code>optional bool error_state = 10;</code>
     * @return Whether the errorState field is set.
     */
    @java.lang.Override
    public boolean hasErrorState() {
      return instance.hasErrorState();
    }
    /**
     * <pre>
     * Whether the step progress bar should go into an error state.
     * If the active step is smaller than |N|, this will simply mark the last icon
     * as failed. If the active step is |N|, meaning that all steps have been
     * completed, this will mark the entire progress bar as failed.
     * </pre>
     *
     * <code>optional bool error_state = 10;</code>
     * @return The errorState.
     */
    @java.lang.Override
    public boolean getErrorState() {
      return instance.getErrorState();
    }
    /**
     * <pre>
     * Whether the step progress bar should go into an error state.
     * If the active step is smaller than |N|, this will simply mark the last icon
     * as failed. If the active step is |N|, meaning that all steps have been
     * completed, this will mark the entire progress bar as failed.
     * </pre>
     *
     * <code>optional bool error_state = 10;</code>
     * @param value The errorState to set.
     * @return This builder for chaining.
     */
    public Builder setErrorState(boolean value) {
      copyOnWrite();
      instance.setErrorState(value);
      return this;
    }
    /**
     * <pre>
     * Whether the step progress bar should go into an error state.
     * If the active step is smaller than |N|, this will simply mark the last icon
     * as failed. If the active step is |N|, meaning that all steps have been
     * completed, this will mark the entire progress bar as failed.
     * </pre>
     *
     * <code>optional bool error_state = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearErrorState() {
      copyOnWrite();
      instance.clearErrorState();
      return this;
    }

    /**
     * <pre>
     * Hide the progress bar in the UI.
     * </pre>
     *
     * <code>optional bool hide = 7;</code>
     * @return Whether the hide field is set.
     */
    @java.lang.Override
    public boolean hasHide() {
      return instance.hasHide();
    }
    /**
     * <pre>
     * Hide the progress bar in the UI.
     * </pre>
     *
     * <code>optional bool hide = 7;</code>
     * @return The hide.
     */
    @java.lang.Override
    public boolean getHide() {
      return instance.getHide();
    }
    /**
     * <pre>
     * Hide the progress bar in the UI.
     * </pre>
     *
     * <code>optional bool hide = 7;</code>
     * @param value The hide to set.
     * @return This builder for chaining.
     */
    public Builder setHide(boolean value) {
      copyOnWrite();
      instance.setHide(value);
      return this;
    }
    /**
     * <pre>
     * Hide the progress bar in the UI.
     * </pre>
     *
     * <code>optional bool hide = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearHide() {
      copyOnWrite();
      instance.clearHide();
      return this;
    }

    /**
     * <code>optional .autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration step_progress_bar_configuration = 9;</code>
     */
    @java.lang.Override
    public boolean hasStepProgressBarConfiguration() {
      return instance.hasStepProgressBarConfiguration();
    }
    /**
     * <code>optional .autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration step_progress_bar_configuration = 9;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration getStepProgressBarConfiguration() {
      return instance.getStepProgressBarConfiguration();
    }
    /**
     * <code>optional .autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration step_progress_bar_configuration = 9;</code>
     */
    public Builder setStepProgressBarConfiguration(org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration value) {
      copyOnWrite();
      instance.setStepProgressBarConfiguration(value);
      return this;
      }
    /**
     * <code>optional .autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration step_progress_bar_configuration = 9;</code>
     */
    public Builder setStepProgressBarConfiguration(
        org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration.Builder builderForValue) {
      copyOnWrite();
      instance.setStepProgressBarConfiguration(builderForValue.build());
      return this;
    }
    /**
     * <code>optional .autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration step_progress_bar_configuration = 9;</code>
     */
    public Builder mergeStepProgressBarConfiguration(org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.StepProgressBarConfiguration value) {
      copyOnWrite();
      instance.mergeStepProgressBarConfiguration(value);
      return this;
    }
    /**
     * <code>optional .autofill_assistant.ShowProgressBarProto.StepProgressBarConfiguration step_progress_bar_configuration = 9;</code>
     */
    public Builder clearStepProgressBarConfiguration() {  copyOnWrite();
      instance.clearStepProgressBarConfiguration();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.ShowProgressBarProto)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "progressIndicator_",
            "progressIndicatorCase_",
            "bitField0_",
            "message_",
            "hide_",
            "stepProgressBarConfiguration_",
            "errorState_",
          };
          java.lang.String info =
              "\u0001\b\u0001\u0001\u0003\f\b\u0000\u0000\u0000\u0003\u1008\u0000\u0006\u1037\u0000" +
              "\u0007\u1007\u0006\b\u1037\u0000\t\u1009\u0007\n\u1007\u0005\u000b\u103b\u0000\f" +
              "\u103a\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.ShowProgressBarProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto DEFAULT_INSTANCE;
  static {
    ShowProgressBarProto defaultInstance = new ShowProgressBarProto();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ShowProgressBarProto.class, defaultInstance);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowProgressBarProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ShowProgressBarProto> PARSER;

  public static com.google.protobuf.Parser<ShowProgressBarProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

