// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: view_layout.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * Protobuf type {@code autofill_assistant.ViewProto}
 */
public  final class ViewProto extends
    com.google.protobuf.GeneratedMessageLite<
        ViewProto, ViewProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.ViewProto)
    ViewProtoOrBuilder {
  private ViewProto() {
    identifier_ = "";
  }
  private int bitField0_;
  private int viewCase_ = 0;
  private java.lang.Object view_;
  public enum ViewCase {
    VIEW_CONTAINER(4),
    TEXT_VIEW(5),
    DIVIDER_VIEW(6),
    IMAGE_VIEW(7),
    TEXT_INPUT_VIEW(8),
    VERTICAL_EXPANDER_VIEW(9),
    TOGGLE_BUTTON_VIEW(10),
    VIEW_NOT_SET(0);
    private final int value;
    private ViewCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ViewCase valueOf(int value) {
      return forNumber(value);
    }

    public static ViewCase forNumber(int value) {
      switch (value) {
        case 4: return VIEW_CONTAINER;
        case 5: return TEXT_VIEW;
        case 6: return DIVIDER_VIEW;
        case 7: return IMAGE_VIEW;
        case 8: return TEXT_INPUT_VIEW;
        case 9: return VERTICAL_EXPANDER_VIEW;
        case 10: return TOGGLE_BUTTON_VIEW;
        case 0: return VIEW_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @java.lang.Override
  public ViewCase
  getViewCase() {
    return ViewCase.forNumber(
        viewCase_);
  }

  private void clearView() {
    viewCase_ = 0;
    view_ = null;
  }

  public static final int IDENTIFIER_FIELD_NUMBER = 1;
  private java.lang.String identifier_;
  /**
   * <pre>
   * The unique identifier of the view.
   * </pre>
   *
   * <code>optional string identifier = 1;</code>
   * @return Whether the identifier field is set.
   */
  @java.lang.Override
  public boolean hasIdentifier() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The unique identifier of the view.
   * </pre>
   *
   * <code>optional string identifier = 1;</code>
   * @return The identifier.
   */
  @java.lang.Override
  public java.lang.String getIdentifier() {
    return identifier_;
  }
  /**
   * <pre>
   * The unique identifier of the view.
   * </pre>
   *
   * <code>optional string identifier = 1;</code>
   * @return The bytes for identifier.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getIdentifierBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(identifier_);
  }
  /**
   * <pre>
   * The unique identifier of the view.
   * </pre>
   *
   * <code>optional string identifier = 1;</code>
   * @param value The identifier to set.
   */
  private void setIdentifier(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000001;
    identifier_ = value;
  }
  /**
   * <pre>
   * The unique identifier of the view.
   * </pre>
   *
   * <code>optional string identifier = 1;</code>
   */
  private void clearIdentifier() {
    bitField0_ = (bitField0_ & ~0x00000001);
    identifier_ = getDefaultInstance().getIdentifier();
  }
  /**
   * <pre>
   * The unique identifier of the view.
   * </pre>
   *
   * <code>optional string identifier = 1;</code>
   * @param value The bytes for identifier to set.
   */
  private void setIdentifierBytes(
      com.google.protobuf.ByteString value) {
    identifier_ = value.toStringUtf8();
    bitField0_ |= 0x00000001;
  }

  public static final int ATTRIBUTES_FIELD_NUMBER = 2;
  private org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto attributes_;
  /**
   * <pre>
   * Common view attributes, such as padding and background.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
   */
  @java.lang.Override
  public boolean hasAttributes() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Common view attributes, such as padding and background.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto getAttributes() {
    return attributes_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto.getDefaultInstance() : attributes_;
  }
  /**
   * <pre>
   * Common view attributes, such as padding and background.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
   */
  private void setAttributes(org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto value) {
    value.getClass();
  attributes_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <pre>
   * Common view attributes, such as padding and background.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeAttributes(org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto value) {
    value.getClass();
  if (attributes_ != null &&
        attributes_ != org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto.getDefaultInstance()) {
      attributes_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto.newBuilder(attributes_).mergeFrom(value).buildPartial();
    } else {
      attributes_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * Common view attributes, such as padding and background.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
   */
  private void clearAttributes() {  attributes_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int LAYOUT_PARAMS_FIELD_NUMBER = 3;
  private org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto layoutParams_;
  /**
   * <pre>
   * Layout parameters such as width, height, and gravity.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
   */
  @java.lang.Override
  public boolean hasLayoutParams() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Layout parameters such as width, height, and gravity.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto getLayoutParams() {
    return layoutParams_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto.getDefaultInstance() : layoutParams_;
  }
  /**
   * <pre>
   * Layout parameters such as width, height, and gravity.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
   */
  private void setLayoutParams(org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto value) {
    value.getClass();
  layoutParams_ = value;
    bitField0_ |= 0x00000004;
    }
  /**
   * <pre>
   * Layout parameters such as width, height, and gravity.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeLayoutParams(org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto value) {
    value.getClass();
  if (layoutParams_ != null &&
        layoutParams_ != org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto.getDefaultInstance()) {
      layoutParams_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto.newBuilder(layoutParams_).mergeFrom(value).buildPartial();
    } else {
      layoutParams_ = value;
    }
    bitField0_ |= 0x00000004;
  }
  /**
   * <pre>
   * Layout parameters such as width, height, and gravity.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
   */
  private void clearLayoutParams() {  layoutParams_ = null;
    bitField0_ = (bitField0_ & ~0x00000004);
  }

  public static final int VIEW_CONTAINER_FIELD_NUMBER = 4;
  /**
   * <code>.autofill_assistant.ViewContainerProto view_container = 4;</code>
   */
  @java.lang.Override
  public boolean hasViewContainer() {
    return viewCase_ == 4;
  }
  /**
   * <code>.autofill_assistant.ViewContainerProto view_container = 4;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto getViewContainer() {
    if (viewCase_ == 4) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto) view_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto.getDefaultInstance();
  }
  /**
   * <code>.autofill_assistant.ViewContainerProto view_container = 4;</code>
   */
  private void setViewContainer(org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto value) {
    value.getClass();
  view_ = value;
    viewCase_ = 4;
  }
  /**
   * <code>.autofill_assistant.ViewContainerProto view_container = 4;</code>
   */
  private void mergeViewContainer(org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto value) {
    value.getClass();
  if (viewCase_ == 4 &&
        view_ != org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto.getDefaultInstance()) {
      view_ = org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto) view_)
          .mergeFrom(value).buildPartial();
    } else {
      view_ = value;
    }
    viewCase_ = 4;
  }
  /**
   * <code>.autofill_assistant.ViewContainerProto view_container = 4;</code>
   */
  private void clearViewContainer() {
    if (viewCase_ == 4) {
      viewCase_ = 0;
      view_ = null;
    }
  }

  public static final int TEXT_VIEW_FIELD_NUMBER = 5;
  /**
   * <pre>
   * A regular read-only text view.
   * </pre>
   *
   * <code>.autofill_assistant.TextViewProto text_view = 5;</code>
   */
  @java.lang.Override
  public boolean hasTextView() {
    return viewCase_ == 5;
  }
  /**
   * <pre>
   * A regular read-only text view.
   * </pre>
   *
   * <code>.autofill_assistant.TextViewProto text_view = 5;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto getTextView() {
    if (viewCase_ == 5) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto) view_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto.getDefaultInstance();
  }
  /**
   * <pre>
   * A regular read-only text view.
   * </pre>
   *
   * <code>.autofill_assistant.TextViewProto text_view = 5;</code>
   */
  private void setTextView(org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto value) {
    value.getClass();
  view_ = value;
    viewCase_ = 5;
  }
  /**
   * <pre>
   * A regular read-only text view.
   * </pre>
   *
   * <code>.autofill_assistant.TextViewProto text_view = 5;</code>
   */
  private void mergeTextView(org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto value) {
    value.getClass();
  if (viewCase_ == 5 &&
        view_ != org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto.getDefaultInstance()) {
      view_ = org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto) view_)
          .mergeFrom(value).buildPartial();
    } else {
      view_ = value;
    }
    viewCase_ = 5;
  }
  /**
   * <pre>
   * A regular read-only text view.
   * </pre>
   *
   * <code>.autofill_assistant.TextViewProto text_view = 5;</code>
   */
  private void clearTextView() {
    if (viewCase_ == 5) {
      viewCase_ = 0;
      view_ = null;
    }
  }

  public static final int DIVIDER_VIEW_FIELD_NUMBER = 6;
  /**
   * <pre>
   * A horizontal view divider.
   * </pre>
   *
   * <code>.autofill_assistant.DividerViewProto divider_view = 6;</code>
   */
  @java.lang.Override
  public boolean hasDividerView() {
    return viewCase_ == 6;
  }
  /**
   * <pre>
   * A horizontal view divider.
   * </pre>
   *
   * <code>.autofill_assistant.DividerViewProto divider_view = 6;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto getDividerView() {
    if (viewCase_ == 6) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto) view_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto.getDefaultInstance();
  }
  /**
   * <pre>
   * A horizontal view divider.
   * </pre>
   *
   * <code>.autofill_assistant.DividerViewProto divider_view = 6;</code>
   */
  private void setDividerView(org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto value) {
    value.getClass();
  view_ = value;
    viewCase_ = 6;
  }
  /**
   * <pre>
   * A horizontal view divider.
   * </pre>
   *
   * <code>.autofill_assistant.DividerViewProto divider_view = 6;</code>
   */
  private void mergeDividerView(org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto value) {
    value.getClass();
  if (viewCase_ == 6 &&
        view_ != org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto.getDefaultInstance()) {
      view_ = org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto) view_)
          .mergeFrom(value).buildPartial();
    } else {
      view_ = value;
    }
    viewCase_ = 6;
  }
  /**
   * <pre>
   * A horizontal view divider.
   * </pre>
   *
   * <code>.autofill_assistant.DividerViewProto divider_view = 6;</code>
   */
  private void clearDividerView() {
    if (viewCase_ == 6) {
      viewCase_ = 0;
      view_ = null;
    }
  }

  public static final int IMAGE_VIEW_FIELD_NUMBER = 7;
  /**
   * <pre>
   * A regular image view.
   * </pre>
   *
   * <code>.autofill_assistant.ImageViewProto image_view = 7;</code>
   */
  @java.lang.Override
  public boolean hasImageView() {
    return viewCase_ == 7;
  }
  /**
   * <pre>
   * A regular image view.
   * </pre>
   *
   * <code>.autofill_assistant.ImageViewProto image_view = 7;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto getImageView() {
    if (viewCase_ == 7) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto) view_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto.getDefaultInstance();
  }
  /**
   * <pre>
   * A regular image view.
   * </pre>
   *
   * <code>.autofill_assistant.ImageViewProto image_view = 7;</code>
   */
  private void setImageView(org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto value) {
    value.getClass();
  view_ = value;
    viewCase_ = 7;
  }
  /**
   * <pre>
   * A regular image view.
   * </pre>
   *
   * <code>.autofill_assistant.ImageViewProto image_view = 7;</code>
   */
  private void mergeImageView(org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto value) {
    value.getClass();
  if (viewCase_ == 7 &&
        view_ != org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto.getDefaultInstance()) {
      view_ = org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto) view_)
          .mergeFrom(value).buildPartial();
    } else {
      view_ = value;
    }
    viewCase_ = 7;
  }
  /**
   * <pre>
   * A regular image view.
   * </pre>
   *
   * <code>.autofill_assistant.ImageViewProto image_view = 7;</code>
   */
  private void clearImageView() {
    if (viewCase_ == 7) {
      viewCase_ = 0;
      view_ = null;
    }
  }

  public static final int TEXT_INPUT_VIEW_FIELD_NUMBER = 8;
  /**
   * <pre>
   * A text input view.
   * </pre>
   *
   * <code>.autofill_assistant.TextInputViewProto text_input_view = 8;</code>
   */
  @java.lang.Override
  public boolean hasTextInputView() {
    return viewCase_ == 8;
  }
  /**
   * <pre>
   * A text input view.
   * </pre>
   *
   * <code>.autofill_assistant.TextInputViewProto text_input_view = 8;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.TextInputViewProto getTextInputView() {
    if (viewCase_ == 8) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.TextInputViewProto) view_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.TextInputViewProto.getDefaultInstance();
  }
  /**
   * <pre>
   * A text input view.
   * </pre>
   *
   * <code>.autofill_assistant.TextInputViewProto text_input_view = 8;</code>
   */
  private void setTextInputView(org.chromium.chrome.browser.autofill_assistant.proto.TextInputViewProto value) {
    value.getClass();
  view_ = value;
    viewCase_ = 8;
  }
  /**
   * <pre>
   * A text input view.
   * </pre>
   *
   * <code>.autofill_assistant.TextInputViewProto text_input_view = 8;</code>
   */
  private void mergeTextInputView(org.chromium.chrome.browser.autofill_assistant.proto.TextInputViewProto value) {
    value.getClass();
  if (viewCase_ == 8 &&
        view_ != org.chromium.chrome.browser.autofill_assistant.proto.TextInputViewProto.getDefaultInstance()) {
      view_ = org.chromium.chrome.browser.autofill_assistant.proto.TextInputViewProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.TextInputViewProto) view_)
          .mergeFrom(value).buildPartial();
    } else {
      view_ = value;
    }
    viewCase_ = 8;
  }
  /**
   * <pre>
   * A text input view.
   * </pre>
   *
   * <code>.autofill_assistant.TextInputViewProto text_input_view = 8;</code>
   */
  private void clearTextInputView() {
    if (viewCase_ == 8) {
      viewCase_ = 0;
      view_ = null;
    }
  }

  public static final int VERTICAL_EXPANDER_VIEW_FIELD_NUMBER = 9;
  /**
   * <pre>
   * A vertical expander with fixed title, collapsed, and expanded sections.
   * </pre>
   *
   * <code>.autofill_assistant.VerticalExpanderViewProto vertical_expander_view = 9;</code>
   */
  @java.lang.Override
  public boolean hasVerticalExpanderView() {
    return viewCase_ == 9;
  }
  /**
   * <pre>
   * A vertical expander with fixed title, collapsed, and expanded sections.
   * </pre>
   *
   * <code>.autofill_assistant.VerticalExpanderViewProto vertical_expander_view = 9;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto getVerticalExpanderView() {
    if (viewCase_ == 9) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto) view_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto.getDefaultInstance();
  }
  /**
   * <pre>
   * A vertical expander with fixed title, collapsed, and expanded sections.
   * </pre>
   *
   * <code>.autofill_assistant.VerticalExpanderViewProto vertical_expander_view = 9;</code>
   */
  private void setVerticalExpanderView(org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto value) {
    value.getClass();
  view_ = value;
    viewCase_ = 9;
  }
  /**
   * <pre>
   * A vertical expander with fixed title, collapsed, and expanded sections.
   * </pre>
   *
   * <code>.autofill_assistant.VerticalExpanderViewProto vertical_expander_view = 9;</code>
   */
  private void mergeVerticalExpanderView(org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto value) {
    value.getClass();
  if (viewCase_ == 9 &&
        view_ != org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto.getDefaultInstance()) {
      view_ = org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto) view_)
          .mergeFrom(value).buildPartial();
    } else {
      view_ = value;
    }
    viewCase_ = 9;
  }
  /**
   * <pre>
   * A vertical expander with fixed title, collapsed, and expanded sections.
   * </pre>
   *
   * <code>.autofill_assistant.VerticalExpanderViewProto vertical_expander_view = 9;</code>
   */
  private void clearVerticalExpanderView() {
    if (viewCase_ == 9) {
      viewCase_ = 0;
      view_ = null;
    }
  }

  public static final int TOGGLE_BUTTON_VIEW_FIELD_NUMBER = 10;
  /**
   * <pre>
   * A toggle button (checkbox or radio button).
   * </pre>
   *
   * <code>.autofill_assistant.ToggleButtonViewProto toggle_button_view = 10;</code>
   */
  @java.lang.Override
  public boolean hasToggleButtonView() {
    return viewCase_ == 10;
  }
  /**
   * <pre>
   * A toggle button (checkbox or radio button).
   * </pre>
   *
   * <code>.autofill_assistant.ToggleButtonViewProto toggle_button_view = 10;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ToggleButtonViewProto getToggleButtonView() {
    if (viewCase_ == 10) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.ToggleButtonViewProto) view_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.ToggleButtonViewProto.getDefaultInstance();
  }
  /**
   * <pre>
   * A toggle button (checkbox or radio button).
   * </pre>
   *
   * <code>.autofill_assistant.ToggleButtonViewProto toggle_button_view = 10;</code>
   */
  private void setToggleButtonView(org.chromium.chrome.browser.autofill_assistant.proto.ToggleButtonViewProto value) {
    value.getClass();
  view_ = value;
    viewCase_ = 10;
  }
  /**
   * <pre>
   * A toggle button (checkbox or radio button).
   * </pre>
   *
   * <code>.autofill_assistant.ToggleButtonViewProto toggle_button_view = 10;</code>
   */
  private void mergeToggleButtonView(org.chromium.chrome.browser.autofill_assistant.proto.ToggleButtonViewProto value) {
    value.getClass();
  if (viewCase_ == 10 &&
        view_ != org.chromium.chrome.browser.autofill_assistant.proto.ToggleButtonViewProto.getDefaultInstance()) {
      view_ = org.chromium.chrome.browser.autofill_assistant.proto.ToggleButtonViewProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.ToggleButtonViewProto) view_)
          .mergeFrom(value).buildPartial();
    } else {
      view_ = value;
    }
    viewCase_ = 10;
  }
  /**
   * <pre>
   * A toggle button (checkbox or radio button).
   * </pre>
   *
   * <code>.autofill_assistant.ToggleButtonViewProto toggle_button_view = 10;</code>
   */
  private void clearToggleButtonView() {
    if (viewCase_ == 10) {
      viewCase_ = 0;
      view_ = null;
    }
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ViewProto prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code autofill_assistant.ViewProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.ViewProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.ViewProto)
      org.chromium.chrome.browser.autofill_assistant.proto.ViewProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ViewProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @java.lang.Override
    public ViewCase
        getViewCase() {
      return instance.getViewCase();
    }

    public Builder clearView() {
      copyOnWrite();
      instance.clearView();
      return this;
    }


    /**
     * <pre>
     * The unique identifier of the view.
     * </pre>
     *
     * <code>optional string identifier = 1;</code>
     * @return Whether the identifier field is set.
     */
    @java.lang.Override
    public boolean hasIdentifier() {
      return instance.hasIdentifier();
    }
    /**
     * <pre>
     * The unique identifier of the view.
     * </pre>
     *
     * <code>optional string identifier = 1;</code>
     * @return The identifier.
     */
    @java.lang.Override
    public java.lang.String getIdentifier() {
      return instance.getIdentifier();
    }
    /**
     * <pre>
     * The unique identifier of the view.
     * </pre>
     *
     * <code>optional string identifier = 1;</code>
     * @return The bytes for identifier.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdentifierBytes() {
      return instance.getIdentifierBytes();
    }
    /**
     * <pre>
     * The unique identifier of the view.
     * </pre>
     *
     * <code>optional string identifier = 1;</code>
     * @param value The identifier to set.
     * @return This builder for chaining.
     */
    public Builder setIdentifier(
        java.lang.String value) {
      copyOnWrite();
      instance.setIdentifier(value);
      return this;
    }
    /**
     * <pre>
     * The unique identifier of the view.
     * </pre>
     *
     * <code>optional string identifier = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearIdentifier() {
      copyOnWrite();
      instance.clearIdentifier();
      return this;
    }
    /**
     * <pre>
     * The unique identifier of the view.
     * </pre>
     *
     * <code>optional string identifier = 1;</code>
     * @param value The bytes for identifier to set.
     * @return This builder for chaining.
     */
    public Builder setIdentifierBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setIdentifierBytes(value);
      return this;
    }

    /**
     * <pre>
     * Common view attributes, such as padding and background.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
     */
    @java.lang.Override
    public boolean hasAttributes() {
      return instance.hasAttributes();
    }
    /**
     * <pre>
     * Common view attributes, such as padding and background.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto getAttributes() {
      return instance.getAttributes();
    }
    /**
     * <pre>
     * Common view attributes, such as padding and background.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
     */
    public Builder setAttributes(org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto value) {
      copyOnWrite();
      instance.setAttributes(value);
      return this;
      }
    /**
     * <pre>
     * Common view attributes, such as padding and background.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
     */
    public Builder setAttributes(
        org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto.Builder builderForValue) {
      copyOnWrite();
      instance.setAttributes(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Common view attributes, such as padding and background.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
     */
    public Builder mergeAttributes(org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto value) {
      copyOnWrite();
      instance.mergeAttributes(value);
      return this;
    }
    /**
     * <pre>
     * Common view attributes, such as padding and background.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
     */
    public Builder clearAttributes() {  copyOnWrite();
      instance.clearAttributes();
      return this;
    }

    /**
     * <pre>
     * Layout parameters such as width, height, and gravity.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
     */
    @java.lang.Override
    public boolean hasLayoutParams() {
      return instance.hasLayoutParams();
    }
    /**
     * <pre>
     * Layout parameters such as width, height, and gravity.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto getLayoutParams() {
      return instance.getLayoutParams();
    }
    /**
     * <pre>
     * Layout parameters such as width, height, and gravity.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
     */
    public Builder setLayoutParams(org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto value) {
      copyOnWrite();
      instance.setLayoutParams(value);
      return this;
      }
    /**
     * <pre>
     * Layout parameters such as width, height, and gravity.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
     */
    public Builder setLayoutParams(
        org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto.Builder builderForValue) {
      copyOnWrite();
      instance.setLayoutParams(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Layout parameters such as width, height, and gravity.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
     */
    public Builder mergeLayoutParams(org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto value) {
      copyOnWrite();
      instance.mergeLayoutParams(value);
      return this;
    }
    /**
     * <pre>
     * Layout parameters such as width, height, and gravity.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
     */
    public Builder clearLayoutParams() {  copyOnWrite();
      instance.clearLayoutParams();
      return this;
    }

    /**
     * <code>.autofill_assistant.ViewContainerProto view_container = 4;</code>
     */
    @java.lang.Override
    public boolean hasViewContainer() {
      return instance.hasViewContainer();
    }
    /**
     * <code>.autofill_assistant.ViewContainerProto view_container = 4;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto getViewContainer() {
      return instance.getViewContainer();
    }
    /**
     * <code>.autofill_assistant.ViewContainerProto view_container = 4;</code>
     */
    public Builder setViewContainer(org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto value) {
      copyOnWrite();
      instance.setViewContainer(value);
      return this;
    }
    /**
     * <code>.autofill_assistant.ViewContainerProto view_container = 4;</code>
     */
    public Builder setViewContainer(
        org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto.Builder builderForValue) {
      copyOnWrite();
      instance.setViewContainer(builderForValue.build());
      return this;
    }
    /**
     * <code>.autofill_assistant.ViewContainerProto view_container = 4;</code>
     */
    public Builder mergeViewContainer(org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto value) {
      copyOnWrite();
      instance.mergeViewContainer(value);
      return this;
    }
    /**
     * <code>.autofill_assistant.ViewContainerProto view_container = 4;</code>
     */
    public Builder clearViewContainer() {
      copyOnWrite();
      instance.clearViewContainer();
      return this;
    }

    /**
     * <pre>
     * A regular read-only text view.
     * </pre>
     *
     * <code>.autofill_assistant.TextViewProto text_view = 5;</code>
     */
    @java.lang.Override
    public boolean hasTextView() {
      return instance.hasTextView();
    }
    /**
     * <pre>
     * A regular read-only text view.
     * </pre>
     *
     * <code>.autofill_assistant.TextViewProto text_view = 5;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto getTextView() {
      return instance.getTextView();
    }
    /**
     * <pre>
     * A regular read-only text view.
     * </pre>
     *
     * <code>.autofill_assistant.TextViewProto text_view = 5;</code>
     */
    public Builder setTextView(org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto value) {
      copyOnWrite();
      instance.setTextView(value);
      return this;
    }
    /**
     * <pre>
     * A regular read-only text view.
     * </pre>
     *
     * <code>.autofill_assistant.TextViewProto text_view = 5;</code>
     */
    public Builder setTextView(
        org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto.Builder builderForValue) {
      copyOnWrite();
      instance.setTextView(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A regular read-only text view.
     * </pre>
     *
     * <code>.autofill_assistant.TextViewProto text_view = 5;</code>
     */
    public Builder mergeTextView(org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto value) {
      copyOnWrite();
      instance.mergeTextView(value);
      return this;
    }
    /**
     * <pre>
     * A regular read-only text view.
     * </pre>
     *
     * <code>.autofill_assistant.TextViewProto text_view = 5;</code>
     */
    public Builder clearTextView() {
      copyOnWrite();
      instance.clearTextView();
      return this;
    }

    /**
     * <pre>
     * A horizontal view divider.
     * </pre>
     *
     * <code>.autofill_assistant.DividerViewProto divider_view = 6;</code>
     */
    @java.lang.Override
    public boolean hasDividerView() {
      return instance.hasDividerView();
    }
    /**
     * <pre>
     * A horizontal view divider.
     * </pre>
     *
     * <code>.autofill_assistant.DividerViewProto divider_view = 6;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto getDividerView() {
      return instance.getDividerView();
    }
    /**
     * <pre>
     * A horizontal view divider.
     * </pre>
     *
     * <code>.autofill_assistant.DividerViewProto divider_view = 6;</code>
     */
    public Builder setDividerView(org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto value) {
      copyOnWrite();
      instance.setDividerView(value);
      return this;
    }
    /**
     * <pre>
     * A horizontal view divider.
     * </pre>
     *
     * <code>.autofill_assistant.DividerViewProto divider_view = 6;</code>
     */
    public Builder setDividerView(
        org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto.Builder builderForValue) {
      copyOnWrite();
      instance.setDividerView(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A horizontal view divider.
     * </pre>
     *
     * <code>.autofill_assistant.DividerViewProto divider_view = 6;</code>
     */
    public Builder mergeDividerView(org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto value) {
      copyOnWrite();
      instance.mergeDividerView(value);
      return this;
    }
    /**
     * <pre>
     * A horizontal view divider.
     * </pre>
     *
     * <code>.autofill_assistant.DividerViewProto divider_view = 6;</code>
     */
    public Builder clearDividerView() {
      copyOnWrite();
      instance.clearDividerView();
      return this;
    }

    /**
     * <pre>
     * A regular image view.
     * </pre>
     *
     * <code>.autofill_assistant.ImageViewProto image_view = 7;</code>
     */
    @java.lang.Override
    public boolean hasImageView() {
      return instance.hasImageView();
    }
    /**
     * <pre>
     * A regular image view.
     * </pre>
     *
     * <code>.autofill_assistant.ImageViewProto image_view = 7;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto getImageView() {
      return instance.getImageView();
    }
    /**
     * <pre>
     * A regular image view.
     * </pre>
     *
     * <code>.autofill_assistant.ImageViewProto image_view = 7;</code>
     */
    public Builder setImageView(org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto value) {
      copyOnWrite();
      instance.setImageView(value);
      return this;
    }
    /**
     * <pre>
     * A regular image view.
     * </pre>
     *
     * <code>.autofill_assistant.ImageViewProto image_view = 7;</code>
     */
    public Builder setImageView(
        org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto.Builder builderForValue) {
      copyOnWrite();
      instance.setImageView(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A regular image view.
     * </pre>
     *
     * <code>.autofill_assistant.ImageViewProto image_view = 7;</code>
     */
    public Builder mergeImageView(org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto value) {
      copyOnWrite();
      instance.mergeImageView(value);
      return this;
    }
    /**
     * <pre>
     * A regular image view.
     * </pre>
     *
     * <code>.autofill_assistant.ImageViewProto image_view = 7;</code>
     */
    public Builder clearImageView() {
      copyOnWrite();
      instance.clearImageView();
      return this;
    }

    /**
     * <pre>
     * A text input view.
     * </pre>
     *
     * <code>.autofill_assistant.TextInputViewProto text_input_view = 8;</code>
     */
    @java.lang.Override
    public boolean hasTextInputView() {
      return instance.hasTextInputView();
    }
    /**
     * <pre>
     * A text input view.
     * </pre>
     *
     * <code>.autofill_assistant.TextInputViewProto text_input_view = 8;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.TextInputViewProto getTextInputView() {
      return instance.getTextInputView();
    }
    /**
     * <pre>
     * A text input view.
     * </pre>
     *
     * <code>.autofill_assistant.TextInputViewProto text_input_view = 8;</code>
     */
    public Builder setTextInputView(org.chromium.chrome.browser.autofill_assistant.proto.TextInputViewProto value) {
      copyOnWrite();
      instance.setTextInputView(value);
      return this;
    }
    /**
     * <pre>
     * A text input view.
     * </pre>
     *
     * <code>.autofill_assistant.TextInputViewProto text_input_view = 8;</code>
     */
    public Builder setTextInputView(
        org.chromium.chrome.browser.autofill_assistant.proto.TextInputViewProto.Builder builderForValue) {
      copyOnWrite();
      instance.setTextInputView(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A text input view.
     * </pre>
     *
     * <code>.autofill_assistant.TextInputViewProto text_input_view = 8;</code>
     */
    public Builder mergeTextInputView(org.chromium.chrome.browser.autofill_assistant.proto.TextInputViewProto value) {
      copyOnWrite();
      instance.mergeTextInputView(value);
      return this;
    }
    /**
     * <pre>
     * A text input view.
     * </pre>
     *
     * <code>.autofill_assistant.TextInputViewProto text_input_view = 8;</code>
     */
    public Builder clearTextInputView() {
      copyOnWrite();
      instance.clearTextInputView();
      return this;
    }

    /**
     * <pre>
     * A vertical expander with fixed title, collapsed, and expanded sections.
     * </pre>
     *
     * <code>.autofill_assistant.VerticalExpanderViewProto vertical_expander_view = 9;</code>
     */
    @java.lang.Override
    public boolean hasVerticalExpanderView() {
      return instance.hasVerticalExpanderView();
    }
    /**
     * <pre>
     * A vertical expander with fixed title, collapsed, and expanded sections.
     * </pre>
     *
     * <code>.autofill_assistant.VerticalExpanderViewProto vertical_expander_view = 9;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto getVerticalExpanderView() {
      return instance.getVerticalExpanderView();
    }
    /**
     * <pre>
     * A vertical expander with fixed title, collapsed, and expanded sections.
     * </pre>
     *
     * <code>.autofill_assistant.VerticalExpanderViewProto vertical_expander_view = 9;</code>
     */
    public Builder setVerticalExpanderView(org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto value) {
      copyOnWrite();
      instance.setVerticalExpanderView(value);
      return this;
    }
    /**
     * <pre>
     * A vertical expander with fixed title, collapsed, and expanded sections.
     * </pre>
     *
     * <code>.autofill_assistant.VerticalExpanderViewProto vertical_expander_view = 9;</code>
     */
    public Builder setVerticalExpanderView(
        org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto.Builder builderForValue) {
      copyOnWrite();
      instance.setVerticalExpanderView(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A vertical expander with fixed title, collapsed, and expanded sections.
     * </pre>
     *
     * <code>.autofill_assistant.VerticalExpanderViewProto vertical_expander_view = 9;</code>
     */
    public Builder mergeVerticalExpanderView(org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto value) {
      copyOnWrite();
      instance.mergeVerticalExpanderView(value);
      return this;
    }
    /**
     * <pre>
     * A vertical expander with fixed title, collapsed, and expanded sections.
     * </pre>
     *
     * <code>.autofill_assistant.VerticalExpanderViewProto vertical_expander_view = 9;</code>
     */
    public Builder clearVerticalExpanderView() {
      copyOnWrite();
      instance.clearVerticalExpanderView();
      return this;
    }

    /**
     * <pre>
     * A toggle button (checkbox or radio button).
     * </pre>
     *
     * <code>.autofill_assistant.ToggleButtonViewProto toggle_button_view = 10;</code>
     */
    @java.lang.Override
    public boolean hasToggleButtonView() {
      return instance.hasToggleButtonView();
    }
    /**
     * <pre>
     * A toggle button (checkbox or radio button).
     * </pre>
     *
     * <code>.autofill_assistant.ToggleButtonViewProto toggle_button_view = 10;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ToggleButtonViewProto getToggleButtonView() {
      return instance.getToggleButtonView();
    }
    /**
     * <pre>
     * A toggle button (checkbox or radio button).
     * </pre>
     *
     * <code>.autofill_assistant.ToggleButtonViewProto toggle_button_view = 10;</code>
     */
    public Builder setToggleButtonView(org.chromium.chrome.browser.autofill_assistant.proto.ToggleButtonViewProto value) {
      copyOnWrite();
      instance.setToggleButtonView(value);
      return this;
    }
    /**
     * <pre>
     * A toggle button (checkbox or radio button).
     * </pre>
     *
     * <code>.autofill_assistant.ToggleButtonViewProto toggle_button_view = 10;</code>
     */
    public Builder setToggleButtonView(
        org.chromium.chrome.browser.autofill_assistant.proto.ToggleButtonViewProto.Builder builderForValue) {
      copyOnWrite();
      instance.setToggleButtonView(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A toggle button (checkbox or radio button).
     * </pre>
     *
     * <code>.autofill_assistant.ToggleButtonViewProto toggle_button_view = 10;</code>
     */
    public Builder mergeToggleButtonView(org.chromium.chrome.browser.autofill_assistant.proto.ToggleButtonViewProto value) {
      copyOnWrite();
      instance.mergeToggleButtonView(value);
      return this;
    }
    /**
     * <pre>
     * A toggle button (checkbox or radio button).
     * </pre>
     *
     * <code>.autofill_assistant.ToggleButtonViewProto toggle_button_view = 10;</code>
     */
    public Builder clearToggleButtonView() {
      copyOnWrite();
      instance.clearToggleButtonView();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.ViewProto)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.ViewProto();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "view_",
            "viewCase_",
            "bitField0_",
            "identifier_",
            "attributes_",
            "layoutParams_",
            org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto.class,
            org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto.class,
            org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto.class,
            org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto.class,
            org.chromium.chrome.browser.autofill_assistant.proto.TextInputViewProto.class,
            org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto.class,
            org.chromium.chrome.browser.autofill_assistant.proto.ToggleButtonViewProto.class,
          };
          java.lang.String info =
              "\u0001\n\u0001\u0001\u0001\n\n\u0000\u0000\u0000\u0001\u1008\u0000\u0002\u1009\u0001" +
              "\u0003\u1009\u0002\u0004\u103c\u0000\u0005\u103c\u0000\u0006\u103c\u0000\u0007\u103c" +
              "\u0000\b\u103c\u0000\t\u103c\u0000\n\u103c\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ViewProto> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ViewProto.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ViewProto>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.ViewProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.ViewProto DEFAULT_INSTANCE;
  static {
    ViewProto defaultInstance = new ViewProto();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ViewProto.class, defaultInstance);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ViewProto> PARSER;

  public static com.google.protobuf.Parser<ViewProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

