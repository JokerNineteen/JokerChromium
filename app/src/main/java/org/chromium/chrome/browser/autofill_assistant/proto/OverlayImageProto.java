// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Overlay image to be drawn on top of full overlays.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.OverlayImageProto}
 */
public  final class OverlayImageProto extends
    com.google.protobuf.GeneratedMessageLite<
        OverlayImageProto, OverlayImageProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.OverlayImageProto)
    OverlayImageProtoOrBuilder {
  private OverlayImageProto() {
    text_ = "";
    textColor_ = "";
  }
  private int bitField0_;
  private int imageCase_ = 0;
  private java.lang.Object image_;
  public enum ImageCase {
    IMAGE_URL(1),
    IMAGE_DRAWABLE(8),
    IMAGE_NOT_SET(0);
    private final int value;
    private ImageCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ImageCase valueOf(int value) {
      return forNumber(value);
    }

    public static ImageCase forNumber(int value) {
      switch (value) {
        case 1: return IMAGE_URL;
        case 8: return IMAGE_DRAWABLE;
        case 0: return IMAGE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @java.lang.Override
  public ImageCase
  getImageCase() {
    return ImageCase.forNumber(
        imageCase_);
  }

  private void clearImage() {
    imageCase_ = 0;
    image_ = null;
  }

  public static final int IMAGE_URL_FIELD_NUMBER = 1;
  /**
   * <pre>
   * Deprecated, but currently still supported. The image to display.
   * </pre>
   *
   * <code>string image_url = 1;</code>
   * @return Whether the imageUrl field is set.
   */
  @java.lang.Override
  public boolean hasImageUrl() {
    return imageCase_ == 1;
  }
  /**
   * <pre>
   * Deprecated, but currently still supported. The image to display.
   * </pre>
   *
   * <code>string image_url = 1;</code>
   * @return The imageUrl.
   */
  @java.lang.Override
  public java.lang.String getImageUrl() {
    java.lang.String ref = "";
    if (imageCase_ == 1) {
      ref = (java.lang.String) image_;
    }
    return ref;
  }
  /**
   * <pre>
   * Deprecated, but currently still supported. The image to display.
   * </pre>
   *
   * <code>string image_url = 1;</code>
   * @return The bytes for imageUrl.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getImageUrlBytes() {
    java.lang.String ref = "";
    if (imageCase_ == 1) {
      ref = (java.lang.String) image_;
    }
    return com.google.protobuf.ByteString.copyFromUtf8(ref);
  }
  /**
   * <pre>
   * Deprecated, but currently still supported. The image to display.
   * </pre>
   *
   * <code>string image_url = 1;</code>
   * @param value The imageUrl to set.
   */
  private void setImageUrl(
      java.lang.String value) {
    value.getClass();
  imageCase_ = 1;
    image_ = value;
  }
  /**
   * <pre>
   * Deprecated, but currently still supported. The image to display.
   * </pre>
   *
   * <code>string image_url = 1;</code>
   */
  private void clearImageUrl() {
    if (imageCase_ == 1) {
      imageCase_ = 0;
      image_ = null;
    }
  }
  /**
   * <pre>
   * Deprecated, but currently still supported. The image to display.
   * </pre>
   *
   * <code>string image_url = 1;</code>
   * @param value The bytes for imageUrl to set.
   */
  private void setImageUrlBytes(
      com.google.protobuf.ByteString value) {
    image_ = value.toStringUtf8();
    imageCase_ = 1;
  }

  public static final int IMAGE_DRAWABLE_FIELD_NUMBER = 8;
  /**
   * <pre>
   * The image to display.
   * </pre>
   *
   * <code>.autofill_assistant.DrawableProto image_drawable = 8;</code>
   */
  @java.lang.Override
  public boolean hasImageDrawable() {
    return imageCase_ == 8;
  }
  /**
   * <pre>
   * The image to display.
   * </pre>
   *
   * <code>.autofill_assistant.DrawableProto image_drawable = 8;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto getImageDrawable() {
    if (imageCase_ == 8) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto) image_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto.getDefaultInstance();
  }
  /**
   * <pre>
   * The image to display.
   * </pre>
   *
   * <code>.autofill_assistant.DrawableProto image_drawable = 8;</code>
   */
  private void setImageDrawable(org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto value) {
    value.getClass();
  image_ = value;
    imageCase_ = 8;
  }
  /**
   * <pre>
   * The image to display.
   * </pre>
   *
   * <code>.autofill_assistant.DrawableProto image_drawable = 8;</code>
   */
  private void mergeImageDrawable(org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto value) {
    value.getClass();
  if (imageCase_ == 8 &&
        image_ != org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto.getDefaultInstance()) {
      image_ = org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto) image_)
          .mergeFrom(value).buildPartial();
    } else {
      image_ = value;
    }
    imageCase_ = 8;
  }
  /**
   * <pre>
   * The image to display.
   * </pre>
   *
   * <code>.autofill_assistant.DrawableProto image_drawable = 8;</code>
   */
  private void clearImageDrawable() {
    if (imageCase_ == 8) {
      imageCase_ = 0;
      image_ = null;
    }
  }

  public static final int IMAGE_SIZE_FIELD_NUMBER = 2;
  private org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto imageSize_;
  /**
   * <pre>
   * The size of the image to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
   */
  @java.lang.Override
  public boolean hasImageSize() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * The size of the image to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getImageSize() {
    return imageSize_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance() : imageSize_;
  }
  /**
   * <pre>
   * The size of the image to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
   */
  private void setImageSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    value.getClass();
  imageSize_ = value;
    bitField0_ |= 0x00000004;
    }
  /**
   * <pre>
   * The size of the image to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeImageSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    value.getClass();
  if (imageSize_ != null &&
        imageSize_ != org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance()) {
      imageSize_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.newBuilder(imageSize_).mergeFrom(value).buildPartial();
    } else {
      imageSize_ = value;
    }
    bitField0_ |= 0x00000004;
  }
  /**
   * <pre>
   * The size of the image to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
   */
  private void clearImageSize() {  imageSize_ = null;
    bitField0_ = (bitField0_ & ~0x00000004);
  }

  public static final int IMAGE_TOP_MARGIN_FIELD_NUMBER = 3;
  private org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto imageTopMargin_;
  /**
   * <pre>
   * The margin between the top of the page (anchor) and the image.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
   */
  @java.lang.Override
  public boolean hasImageTopMargin() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * The margin between the top of the page (anchor) and the image.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getImageTopMargin() {
    return imageTopMargin_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance() : imageTopMargin_;
  }
  /**
   * <pre>
   * The margin between the top of the page (anchor) and the image.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
   */
  private void setImageTopMargin(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    value.getClass();
  imageTopMargin_ = value;
    bitField0_ |= 0x00000008;
    }
  /**
   * <pre>
   * The margin between the top of the page (anchor) and the image.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeImageTopMargin(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    value.getClass();
  if (imageTopMargin_ != null &&
        imageTopMargin_ != org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance()) {
      imageTopMargin_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.newBuilder(imageTopMargin_).mergeFrom(value).buildPartial();
    } else {
      imageTopMargin_ = value;
    }
    bitField0_ |= 0x00000008;
  }
  /**
   * <pre>
   * The margin between the top of the page (anchor) and the image.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
   */
  private void clearImageTopMargin() {  imageTopMargin_ = null;
    bitField0_ = (bitField0_ & ~0x00000008);
  }

  public static final int IMAGE_BOTTOM_MARGIN_FIELD_NUMBER = 4;
  private org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto imageBottomMargin_;
  /**
   * <pre>
   * The margin between the bottom of the image and the baseline of the text.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
   */
  @java.lang.Override
  public boolean hasImageBottomMargin() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * The margin between the bottom of the image and the baseline of the text.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getImageBottomMargin() {
    return imageBottomMargin_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance() : imageBottomMargin_;
  }
  /**
   * <pre>
   * The margin between the bottom of the image and the baseline of the text.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
   */
  private void setImageBottomMargin(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    value.getClass();
  imageBottomMargin_ = value;
    bitField0_ |= 0x00000010;
    }
  /**
   * <pre>
   * The margin between the bottom of the image and the baseline of the text.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeImageBottomMargin(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    value.getClass();
  if (imageBottomMargin_ != null &&
        imageBottomMargin_ != org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance()) {
      imageBottomMargin_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.newBuilder(imageBottomMargin_).mergeFrom(value).buildPartial();
    } else {
      imageBottomMargin_ = value;
    }
    bitField0_ |= 0x00000010;
  }
  /**
   * <pre>
   * The margin between the bottom of the image and the baseline of the text.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
   */
  private void clearImageBottomMargin() {  imageBottomMargin_ = null;
    bitField0_ = (bitField0_ & ~0x00000010);
  }

  public static final int TEXT_FIELD_NUMBER = 5;
  private java.lang.String text_;
  /**
   * <pre>
   * The text to display beneath the image. If set, |text_color| and |text_size|
   * are mandatory.
   * </pre>
   *
   * <code>optional string text = 5;</code>
   * @return Whether the text field is set.
   */
  @java.lang.Override
  public boolean hasText() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * The text to display beneath the image. If set, |text_color| and |text_size|
   * are mandatory.
   * </pre>
   *
   * <code>optional string text = 5;</code>
   * @return The text.
   */
  @java.lang.Override
  public java.lang.String getText() {
    return text_;
  }
  /**
   * <pre>
   * The text to display beneath the image. If set, |text_color| and |text_size|
   * are mandatory.
   * </pre>
   *
   * <code>optional string text = 5;</code>
   * @return The bytes for text.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getTextBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(text_);
  }
  /**
   * <pre>
   * The text to display beneath the image. If set, |text_color| and |text_size|
   * are mandatory.
   * </pre>
   *
   * <code>optional string text = 5;</code>
   * @param value The text to set.
   */
  private void setText(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000020;
    text_ = value;
  }
  /**
   * <pre>
   * The text to display beneath the image. If set, |text_color| and |text_size|
   * are mandatory.
   * </pre>
   *
   * <code>optional string text = 5;</code>
   */
  private void clearText() {
    bitField0_ = (bitField0_ & ~0x00000020);
    text_ = getDefaultInstance().getText();
  }
  /**
   * <pre>
   * The text to display beneath the image. If set, |text_color| and |text_size|
   * are mandatory.
   * </pre>
   *
   * <code>optional string text = 5;</code>
   * @param value The bytes for text to set.
   */
  private void setTextBytes(
      com.google.protobuf.ByteString value) {
    text_ = value.toStringUtf8();
    bitField0_ |= 0x00000020;
  }

  public static final int TEXT_COLOR_FIELD_NUMBER = 6;
  private java.lang.String textColor_;
  /**
   * <pre>
   * Supported formats: #RRGGBB or #AARRGGBB.
   * </pre>
   *
   * <code>optional string text_color = 6;</code>
   * @return Whether the textColor field is set.
   */
  @java.lang.Override
  public boolean hasTextColor() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * Supported formats: #RRGGBB or #AARRGGBB.
   * </pre>
   *
   * <code>optional string text_color = 6;</code>
   * @return The textColor.
   */
  @java.lang.Override
  public java.lang.String getTextColor() {
    return textColor_;
  }
  /**
   * <pre>
   * Supported formats: #RRGGBB or #AARRGGBB.
   * </pre>
   *
   * <code>optional string text_color = 6;</code>
   * @return The bytes for textColor.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getTextColorBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(textColor_);
  }
  /**
   * <pre>
   * Supported formats: #RRGGBB or #AARRGGBB.
   * </pre>
   *
   * <code>optional string text_color = 6;</code>
   * @param value The textColor to set.
   */
  private void setTextColor(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000040;
    textColor_ = value;
  }
  /**
   * <pre>
   * Supported formats: #RRGGBB or #AARRGGBB.
   * </pre>
   *
   * <code>optional string text_color = 6;</code>
   */
  private void clearTextColor() {
    bitField0_ = (bitField0_ & ~0x00000040);
    textColor_ = getDefaultInstance().getTextColor();
  }
  /**
   * <pre>
   * Supported formats: #RRGGBB or #AARRGGBB.
   * </pre>
   *
   * <code>optional string text_color = 6;</code>
   * @param value The bytes for textColor to set.
   */
  private void setTextColorBytes(
      com.google.protobuf.ByteString value) {
    textColor_ = value.toStringUtf8();
    bitField0_ |= 0x00000040;
  }

  public static final int TEXT_SIZE_FIELD_NUMBER = 7;
  private org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto textSize_;
  /**
   * <pre>
   * The size of the text to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
   */
  @java.lang.Override
  public boolean hasTextSize() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <pre>
   * The size of the text to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getTextSize() {
    return textSize_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance() : textSize_;
  }
  /**
   * <pre>
   * The size of the text to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
   */
  private void setTextSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    value.getClass();
  textSize_ = value;
    bitField0_ |= 0x00000080;
    }
  /**
   * <pre>
   * The size of the text to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeTextSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    value.getClass();
  if (textSize_ != null &&
        textSize_ != org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance()) {
      textSize_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.newBuilder(textSize_).mergeFrom(value).buildPartial();
    } else {
      textSize_ = value;
    }
    bitField0_ |= 0x00000080;
  }
  /**
   * <pre>
   * The size of the text to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
   */
  private void clearTextSize() {  textSize_ = null;
    bitField0_ = (bitField0_ & ~0x00000080);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Overlay image to be drawn on top of full overlays.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.OverlayImageProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.OverlayImageProto)
      org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @java.lang.Override
    public ImageCase
        getImageCase() {
      return instance.getImageCase();
    }

    public Builder clearImage() {
      copyOnWrite();
      instance.clearImage();
      return this;
    }


    /**
     * <pre>
     * Deprecated, but currently still supported. The image to display.
     * </pre>
     *
     * <code>string image_url = 1;</code>
     * @return Whether the imageUrl field is set.
     */
    @java.lang.Override
    public boolean hasImageUrl() {
      return instance.hasImageUrl();
    }
    /**
     * <pre>
     * Deprecated, but currently still supported. The image to display.
     * </pre>
     *
     * <code>string image_url = 1;</code>
     * @return The imageUrl.
     */
    @java.lang.Override
    public java.lang.String getImageUrl() {
      return instance.getImageUrl();
    }
    /**
     * <pre>
     * Deprecated, but currently still supported. The image to display.
     * </pre>
     *
     * <code>string image_url = 1;</code>
     * @return The bytes for imageUrl.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getImageUrlBytes() {
      return instance.getImageUrlBytes();
    }
    /**
     * <pre>
     * Deprecated, but currently still supported. The image to display.
     * </pre>
     *
     * <code>string image_url = 1;</code>
     * @param value The imageUrl to set.
     * @return This builder for chaining.
     */
    public Builder setImageUrl(
        java.lang.String value) {
      copyOnWrite();
      instance.setImageUrl(value);
      return this;
    }
    /**
     * <pre>
     * Deprecated, but currently still supported. The image to display.
     * </pre>
     *
     * <code>string image_url = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearImageUrl() {
      copyOnWrite();
      instance.clearImageUrl();
      return this;
    }
    /**
     * <pre>
     * Deprecated, but currently still supported. The image to display.
     * </pre>
     *
     * <code>string image_url = 1;</code>
     * @param value The bytes for imageUrl to set.
     * @return This builder for chaining.
     */
    public Builder setImageUrlBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setImageUrlBytes(value);
      return this;
    }

    /**
     * <pre>
     * The image to display.
     * </pre>
     *
     * <code>.autofill_assistant.DrawableProto image_drawable = 8;</code>
     */
    @java.lang.Override
    public boolean hasImageDrawable() {
      return instance.hasImageDrawable();
    }
    /**
     * <pre>
     * The image to display.
     * </pre>
     *
     * <code>.autofill_assistant.DrawableProto image_drawable = 8;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto getImageDrawable() {
      return instance.getImageDrawable();
    }
    /**
     * <pre>
     * The image to display.
     * </pre>
     *
     * <code>.autofill_assistant.DrawableProto image_drawable = 8;</code>
     */
    public Builder setImageDrawable(org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto value) {
      copyOnWrite();
      instance.setImageDrawable(value);
      return this;
    }
    /**
     * <pre>
     * The image to display.
     * </pre>
     *
     * <code>.autofill_assistant.DrawableProto image_drawable = 8;</code>
     */
    public Builder setImageDrawable(
        org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto.Builder builderForValue) {
      copyOnWrite();
      instance.setImageDrawable(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The image to display.
     * </pre>
     *
     * <code>.autofill_assistant.DrawableProto image_drawable = 8;</code>
     */
    public Builder mergeImageDrawable(org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto value) {
      copyOnWrite();
      instance.mergeImageDrawable(value);
      return this;
    }
    /**
     * <pre>
     * The image to display.
     * </pre>
     *
     * <code>.autofill_assistant.DrawableProto image_drawable = 8;</code>
     */
    public Builder clearImageDrawable() {
      copyOnWrite();
      instance.clearImageDrawable();
      return this;
    }

    /**
     * <pre>
     * The size of the image to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
     */
    @java.lang.Override
    public boolean hasImageSize() {
      return instance.hasImageSize();
    }
    /**
     * <pre>
     * The size of the image to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getImageSize() {
      return instance.getImageSize();
    }
    /**
     * <pre>
     * The size of the image to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
     */
    public Builder setImageSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.setImageSize(value);
      return this;
      }
    /**
     * <pre>
     * The size of the image to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
     */
    public Builder setImageSize(
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.Builder builderForValue) {
      copyOnWrite();
      instance.setImageSize(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The size of the image to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
     */
    public Builder mergeImageSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.mergeImageSize(value);
      return this;
    }
    /**
     * <pre>
     * The size of the image to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
     */
    public Builder clearImageSize() {  copyOnWrite();
      instance.clearImageSize();
      return this;
    }

    /**
     * <pre>
     * The margin between the top of the page (anchor) and the image.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
     */
    @java.lang.Override
    public boolean hasImageTopMargin() {
      return instance.hasImageTopMargin();
    }
    /**
     * <pre>
     * The margin between the top of the page (anchor) and the image.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getImageTopMargin() {
      return instance.getImageTopMargin();
    }
    /**
     * <pre>
     * The margin between the top of the page (anchor) and the image.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
     */
    public Builder setImageTopMargin(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.setImageTopMargin(value);
      return this;
      }
    /**
     * <pre>
     * The margin between the top of the page (anchor) and the image.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
     */
    public Builder setImageTopMargin(
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.Builder builderForValue) {
      copyOnWrite();
      instance.setImageTopMargin(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The margin between the top of the page (anchor) and the image.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
     */
    public Builder mergeImageTopMargin(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.mergeImageTopMargin(value);
      return this;
    }
    /**
     * <pre>
     * The margin between the top of the page (anchor) and the image.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
     */
    public Builder clearImageTopMargin() {  copyOnWrite();
      instance.clearImageTopMargin();
      return this;
    }

    /**
     * <pre>
     * The margin between the bottom of the image and the baseline of the text.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
     */
    @java.lang.Override
    public boolean hasImageBottomMargin() {
      return instance.hasImageBottomMargin();
    }
    /**
     * <pre>
     * The margin between the bottom of the image and the baseline of the text.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getImageBottomMargin() {
      return instance.getImageBottomMargin();
    }
    /**
     * <pre>
     * The margin between the bottom of the image and the baseline of the text.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
     */
    public Builder setImageBottomMargin(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.setImageBottomMargin(value);
      return this;
      }
    /**
     * <pre>
     * The margin between the bottom of the image and the baseline of the text.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
     */
    public Builder setImageBottomMargin(
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.Builder builderForValue) {
      copyOnWrite();
      instance.setImageBottomMargin(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The margin between the bottom of the image and the baseline of the text.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
     */
    public Builder mergeImageBottomMargin(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.mergeImageBottomMargin(value);
      return this;
    }
    /**
     * <pre>
     * The margin between the bottom of the image and the baseline of the text.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
     */
    public Builder clearImageBottomMargin() {  copyOnWrite();
      instance.clearImageBottomMargin();
      return this;
    }

    /**
     * <pre>
     * The text to display beneath the image. If set, |text_color| and |text_size|
     * are mandatory.
     * </pre>
     *
     * <code>optional string text = 5;</code>
     * @return Whether the text field is set.
     */
    @java.lang.Override
    public boolean hasText() {
      return instance.hasText();
    }
    /**
     * <pre>
     * The text to display beneath the image. If set, |text_color| and |text_size|
     * are mandatory.
     * </pre>
     *
     * <code>optional string text = 5;</code>
     * @return The text.
     */
    @java.lang.Override
    public java.lang.String getText() {
      return instance.getText();
    }
    /**
     * <pre>
     * The text to display beneath the image. If set, |text_color| and |text_size|
     * are mandatory.
     * </pre>
     *
     * <code>optional string text = 5;</code>
     * @return The bytes for text.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTextBytes() {
      return instance.getTextBytes();
    }
    /**
     * <pre>
     * The text to display beneath the image. If set, |text_color| and |text_size|
     * are mandatory.
     * </pre>
     *
     * <code>optional string text = 5;</code>
     * @param value The text to set.
     * @return This builder for chaining.
     */
    public Builder setText(
        java.lang.String value) {
      copyOnWrite();
      instance.setText(value);
      return this;
    }
    /**
     * <pre>
     * The text to display beneath the image. If set, |text_color| and |text_size|
     * are mandatory.
     * </pre>
     *
     * <code>optional string text = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearText() {
      copyOnWrite();
      instance.clearText();
      return this;
    }
    /**
     * <pre>
     * The text to display beneath the image. If set, |text_color| and |text_size|
     * are mandatory.
     * </pre>
     *
     * <code>optional string text = 5;</code>
     * @param value The bytes for text to set.
     * @return This builder for chaining.
     */
    public Builder setTextBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTextBytes(value);
      return this;
    }

    /**
     * <pre>
     * Supported formats: #RRGGBB or #AARRGGBB.
     * </pre>
     *
     * <code>optional string text_color = 6;</code>
     * @return Whether the textColor field is set.
     */
    @java.lang.Override
    public boolean hasTextColor() {
      return instance.hasTextColor();
    }
    /**
     * <pre>
     * Supported formats: #RRGGBB or #AARRGGBB.
     * </pre>
     *
     * <code>optional string text_color = 6;</code>
     * @return The textColor.
     */
    @java.lang.Override
    public java.lang.String getTextColor() {
      return instance.getTextColor();
    }
    /**
     * <pre>
     * Supported formats: #RRGGBB or #AARRGGBB.
     * </pre>
     *
     * <code>optional string text_color = 6;</code>
     * @return The bytes for textColor.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTextColorBytes() {
      return instance.getTextColorBytes();
    }
    /**
     * <pre>
     * Supported formats: #RRGGBB or #AARRGGBB.
     * </pre>
     *
     * <code>optional string text_color = 6;</code>
     * @param value The textColor to set.
     * @return This builder for chaining.
     */
    public Builder setTextColor(
        java.lang.String value) {
      copyOnWrite();
      instance.setTextColor(value);
      return this;
    }
    /**
     * <pre>
     * Supported formats: #RRGGBB or #AARRGGBB.
     * </pre>
     *
     * <code>optional string text_color = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearTextColor() {
      copyOnWrite();
      instance.clearTextColor();
      return this;
    }
    /**
     * <pre>
     * Supported formats: #RRGGBB or #AARRGGBB.
     * </pre>
     *
     * <code>optional string text_color = 6;</code>
     * @param value The bytes for textColor to set.
     * @return This builder for chaining.
     */
    public Builder setTextColorBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTextColorBytes(value);
      return this;
    }

    /**
     * <pre>
     * The size of the text to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
     */
    @java.lang.Override
    public boolean hasTextSize() {
      return instance.hasTextSize();
    }
    /**
     * <pre>
     * The size of the text to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getTextSize() {
      return instance.getTextSize();
    }
    /**
     * <pre>
     * The size of the text to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
     */
    public Builder setTextSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.setTextSize(value);
      return this;
      }
    /**
     * <pre>
     * The size of the text to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
     */
    public Builder setTextSize(
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.Builder builderForValue) {
      copyOnWrite();
      instance.setTextSize(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The size of the text to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
     */
    public Builder mergeTextSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.mergeTextSize(value);
      return this;
    }
    /**
     * <pre>
     * The size of the text to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
     */
    public Builder clearTextSize() {  copyOnWrite();
      instance.clearTextSize();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.OverlayImageProto)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "image_",
            "imageCase_",
            "bitField0_",
            "imageSize_",
            "imageTopMargin_",
            "imageBottomMargin_",
            "text_",
            "textColor_",
            "textSize_",
            org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto.class,
          };
          java.lang.String info =
              "\u0001\b\u0001\u0001\u0001\b\b\u0000\u0000\u0000\u0001\u103b\u0000\u0002\u1009\u0002" +
              "\u0003\u1009\u0003\u0004\u1009\u0004\u0005\u1008\u0005\u0006\u1008\u0006\u0007\u1009" +
              "\u0007\b\u103c\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.OverlayImageProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto DEFAULT_INSTANCE;
  static {
    OverlayImageProto defaultInstance = new OverlayImageProto();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      OverlayImageProto.class, defaultInstance);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<OverlayImageProto> PARSER;

  public static com.google.protobuf.Parser<OverlayImageProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

