// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Contain all arguments to perform a click.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.ClickProto}
 */
public  final class ClickProto extends
    com.google.protobuf.GeneratedMessageLite<
        ClickProto, ClickProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.ClickProto)
    ClickProtoOrBuilder {
  private ClickProto() {
  }
  private int bitField0_;
  public static final int ELEMENT_TO_CLICK_FIELD_NUMBER = 1;
  private org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto elementToClick_;
  /**
   * <code>optional .autofill_assistant.SelectorProto element_to_click = 1;</code>
   */
  @java.lang.Override
  public boolean hasElementToClick() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>optional .autofill_assistant.SelectorProto element_to_click = 1;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto getElementToClick() {
    return elementToClick_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.getDefaultInstance() : elementToClick_;
  }
  /**
   * <code>optional .autofill_assistant.SelectorProto element_to_click = 1;</code>
   */
  private void setElementToClick(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
    value.getClass();
  elementToClick_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <code>optional .autofill_assistant.SelectorProto element_to_click = 1;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeElementToClick(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
    value.getClass();
  if (elementToClick_ != null &&
        elementToClick_ != org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.getDefaultInstance()) {
      elementToClick_ =
        org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.newBuilder(elementToClick_).mergeFrom(value).buildPartial();
    } else {
      elementToClick_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <code>optional .autofill_assistant.SelectorProto element_to_click = 1;</code>
   */
  private void clearElementToClick() {  elementToClick_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int CLICK_TYPE_FIELD_NUMBER = 2;
  private int clickType_;
  /**
   * <code>optional .autofill_assistant.ClickType click_type = 2;</code>
   * @return Whether the clickType field is set.
   */
  @java.lang.Override
  public boolean hasClickType() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>optional .autofill_assistant.ClickType click_type = 2;</code>
   * @return The clickType.
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ClickType getClickType() {
    org.chromium.chrome.browser.autofill_assistant.proto.ClickType result = org.chromium.chrome.browser.autofill_assistant.proto.ClickType.forNumber(clickType_);
    return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.ClickType.NOT_SET : result;
  }
  /**
   * <code>optional .autofill_assistant.ClickType click_type = 2;</code>
   * @param value The clickType to set.
   */
  private void setClickType(org.chromium.chrome.browser.autofill_assistant.proto.ClickType value) {
    clickType_ = value.getNumber();
    bitField0_ |= 0x00000002;
  }
  /**
   * <code>optional .autofill_assistant.ClickType click_type = 2;</code>
   */
  private void clearClickType() {
    bitField0_ = (bitField0_ & ~0x00000002);
    clickType_ = 0;
  }

  public static final int ON_TOP_FIELD_NUMBER = 3;
  private int onTop_;
  /**
   * <pre>
   * Configure whether click should check whether the element is the topmost
   * element before clicking on it.
   * If set to REQUIRE_STEP_SUCCESS, click might fail with ELEMENT_NOT_ON_TOP.
   * </pre>
   *
   * <code>optional .autofill_assistant.OptionalStep on_top = 3;</code>
   * @return Whether the onTop field is set.
   */
  @java.lang.Override
  public boolean hasOnTop() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Configure whether click should check whether the element is the topmost
   * element before clicking on it.
   * If set to REQUIRE_STEP_SUCCESS, click might fail with ELEMENT_NOT_ON_TOP.
   * </pre>
   *
   * <code>optional .autofill_assistant.OptionalStep on_top = 3;</code>
   * @return The onTop.
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.OptionalStep getOnTop() {
    org.chromium.chrome.browser.autofill_assistant.proto.OptionalStep result = org.chromium.chrome.browser.autofill_assistant.proto.OptionalStep.forNumber(onTop_);
    return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.OptionalStep.STEP_UNSPECIFIED : result;
  }
  /**
   * <pre>
   * Configure whether click should check whether the element is the topmost
   * element before clicking on it.
   * If set to REQUIRE_STEP_SUCCESS, click might fail with ELEMENT_NOT_ON_TOP.
   * </pre>
   *
   * <code>optional .autofill_assistant.OptionalStep on_top = 3;</code>
   * @param value The onTop to set.
   */
  private void setOnTop(org.chromium.chrome.browser.autofill_assistant.proto.OptionalStep value) {
    onTop_ = value.getNumber();
    bitField0_ |= 0x00000004;
  }
  /**
   * <pre>
   * Configure whether click should check whether the element is the topmost
   * element before clicking on it.
   * If set to REQUIRE_STEP_SUCCESS, click might fail with ELEMENT_NOT_ON_TOP.
   * </pre>
   *
   * <code>optional .autofill_assistant.OptionalStep on_top = 3;</code>
   */
  private void clearOnTop() {
    bitField0_ = (bitField0_ & ~0x00000004);
    onTop_ = 0;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ClickProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClickProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClickProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClickProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClickProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClickProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClickProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClickProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClickProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClickProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClickProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ClickProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ClickProto prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Contain all arguments to perform a click.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.ClickProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.ClickProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.ClickProto)
      org.chromium.chrome.browser.autofill_assistant.proto.ClickProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ClickProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>optional .autofill_assistant.SelectorProto element_to_click = 1;</code>
     */
    @java.lang.Override
    public boolean hasElementToClick() {
      return instance.hasElementToClick();
    }
    /**
     * <code>optional .autofill_assistant.SelectorProto element_to_click = 1;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto getElementToClick() {
      return instance.getElementToClick();
    }
    /**
     * <code>optional .autofill_assistant.SelectorProto element_to_click = 1;</code>
     */
    public Builder setElementToClick(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
      copyOnWrite();
      instance.setElementToClick(value);
      return this;
      }
    /**
     * <code>optional .autofill_assistant.SelectorProto element_to_click = 1;</code>
     */
    public Builder setElementToClick(
        org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.Builder builderForValue) {
      copyOnWrite();
      instance.setElementToClick(builderForValue.build());
      return this;
    }
    /**
     * <code>optional .autofill_assistant.SelectorProto element_to_click = 1;</code>
     */
    public Builder mergeElementToClick(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
      copyOnWrite();
      instance.mergeElementToClick(value);
      return this;
    }
    /**
     * <code>optional .autofill_assistant.SelectorProto element_to_click = 1;</code>
     */
    public Builder clearElementToClick() {  copyOnWrite();
      instance.clearElementToClick();
      return this;
    }

    /**
     * <code>optional .autofill_assistant.ClickType click_type = 2;</code>
     * @return Whether the clickType field is set.
     */
    @java.lang.Override
    public boolean hasClickType() {
      return instance.hasClickType();
    }
    /**
     * <code>optional .autofill_assistant.ClickType click_type = 2;</code>
     * @return The clickType.
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ClickType getClickType() {
      return instance.getClickType();
    }
    /**
     * <code>optional .autofill_assistant.ClickType click_type = 2;</code>
     * @param value The enum numeric value on the wire for clickType to set.
     * @return This builder for chaining.
     */
    public Builder setClickType(org.chromium.chrome.browser.autofill_assistant.proto.ClickType value) {
      copyOnWrite();
      instance.setClickType(value);
      return this;
    }
    /**
     * <code>optional .autofill_assistant.ClickType click_type = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearClickType() {
      copyOnWrite();
      instance.clearClickType();
      return this;
    }

    /**
     * <pre>
     * Configure whether click should check whether the element is the topmost
     * element before clicking on it.
     * If set to REQUIRE_STEP_SUCCESS, click might fail with ELEMENT_NOT_ON_TOP.
     * </pre>
     *
     * <code>optional .autofill_assistant.OptionalStep on_top = 3;</code>
     * @return Whether the onTop field is set.
     */
    @java.lang.Override
    public boolean hasOnTop() {
      return instance.hasOnTop();
    }
    /**
     * <pre>
     * Configure whether click should check whether the element is the topmost
     * element before clicking on it.
     * If set to REQUIRE_STEP_SUCCESS, click might fail with ELEMENT_NOT_ON_TOP.
     * </pre>
     *
     * <code>optional .autofill_assistant.OptionalStep on_top = 3;</code>
     * @return The onTop.
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.OptionalStep getOnTop() {
      return instance.getOnTop();
    }
    /**
     * <pre>
     * Configure whether click should check whether the element is the topmost
     * element before clicking on it.
     * If set to REQUIRE_STEP_SUCCESS, click might fail with ELEMENT_NOT_ON_TOP.
     * </pre>
     *
     * <code>optional .autofill_assistant.OptionalStep on_top = 3;</code>
     * @param value The enum numeric value on the wire for onTop to set.
     * @return This builder for chaining.
     */
    public Builder setOnTop(org.chromium.chrome.browser.autofill_assistant.proto.OptionalStep value) {
      copyOnWrite();
      instance.setOnTop(value);
      return this;
    }
    /**
     * <pre>
     * Configure whether click should check whether the element is the topmost
     * element before clicking on it.
     * If set to REQUIRE_STEP_SUCCESS, click might fail with ELEMENT_NOT_ON_TOP.
     * </pre>
     *
     * <code>optional .autofill_assistant.OptionalStep on_top = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearOnTop() {
      copyOnWrite();
      instance.clearOnTop();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.ClickProto)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.ClickProto();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "elementToClick_",
            "clickType_",
            org.chromium.chrome.browser.autofill_assistant.proto.ClickType.internalGetVerifier(),
            "onTop_",
            org.chromium.chrome.browser.autofill_assistant.proto.OptionalStep.internalGetVerifier(),
          };
          java.lang.String info =
              "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
              "\u100c\u0001\u0003\u100c\u0002";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ClickProto> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ClickProto.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ClickProto>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.ClickProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.ClickProto DEFAULT_INSTANCE;
  static {
    ClickProto defaultInstance = new ClickProto();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ClickProto.class, defaultInstance);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ClickProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ClickProto> PARSER;

  public static com.google.protobuf.Parser<ClickProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

