// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Allow scripts to display a form with multiple inputs.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.ShowFormProto}
 */
public  final class ShowFormProto extends
    com.google.protobuf.GeneratedMessageLite<
        ShowFormProto, ShowFormProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.ShowFormProto)
    ShowFormProtoOrBuilder {
  private ShowFormProto() {
  }
  private int bitField0_;
  public static final int FORM_FIELD_NUMBER = 1;
  private org.chromium.chrome.browser.autofill_assistant.proto.FormProto form_;
  /**
   * <pre>
   * The form to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.FormProto form = 1;</code>
   */
  @java.lang.Override
  public boolean hasForm() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The form to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.FormProto form = 1;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.FormProto getForm() {
    return form_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.FormProto.getDefaultInstance() : form_;
  }
  /**
   * <pre>
   * The form to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.FormProto form = 1;</code>
   */
  private void setForm(org.chromium.chrome.browser.autofill_assistant.proto.FormProto value) {
    value.getClass();
  form_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * The form to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.FormProto form = 1;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeForm(org.chromium.chrome.browser.autofill_assistant.proto.FormProto value) {
    value.getClass();
  if (form_ != null &&
        form_ != org.chromium.chrome.browser.autofill_assistant.proto.FormProto.getDefaultInstance()) {
      form_ =
        org.chromium.chrome.browser.autofill_assistant.proto.FormProto.newBuilder(form_).mergeFrom(value).buildPartial();
    } else {
      form_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * The form to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.FormProto form = 1;</code>
   */
  private void clearForm() {  form_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int CHIP_FIELD_NUMBER = 2;
  private org.chromium.chrome.browser.autofill_assistant.proto.ChipProto chip_;
  /**
   * <pre>
   * The chip to display below the form. This chip will be enabled only if all
   * form inputs are valid.
   * </pre>
   *
   * <code>optional .autofill_assistant.ChipProto chip = 2;</code>
   */
  @java.lang.Override
  public boolean hasChip() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The chip to display below the form. This chip will be enabled only if all
   * form inputs are valid.
   * </pre>
   *
   * <code>optional .autofill_assistant.ChipProto chip = 2;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ChipProto getChip() {
    return chip_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ChipProto.getDefaultInstance() : chip_;
  }
  /**
   * <pre>
   * The chip to display below the form. This chip will be enabled only if all
   * form inputs are valid.
   * </pre>
   *
   * <code>optional .autofill_assistant.ChipProto chip = 2;</code>
   */
  private void setChip(org.chromium.chrome.browser.autofill_assistant.proto.ChipProto value) {
    value.getClass();
  chip_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <pre>
   * The chip to display below the form. This chip will be enabled only if all
   * form inputs are valid.
   * </pre>
   *
   * <code>optional .autofill_assistant.ChipProto chip = 2;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeChip(org.chromium.chrome.browser.autofill_assistant.proto.ChipProto value) {
    value.getClass();
  if (chip_ != null &&
        chip_ != org.chromium.chrome.browser.autofill_assistant.proto.ChipProto.getDefaultInstance()) {
      chip_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ChipProto.newBuilder(chip_).mergeFrom(value).buildPartial();
    } else {
      chip_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * The chip to display below the form. This chip will be enabled only if all
   * form inputs are valid.
   * </pre>
   *
   * <code>optional .autofill_assistant.ChipProto chip = 2;</code>
   */
  private void clearChip() {  chip_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int DIRECT_ACTION_FIELD_NUMBER = 3;
  private org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto directAction_;
  /**
   * <pre>
   * Optionally allow confirming the prompt using given direct actions.
   * </pre>
   *
   * <code>optional .autofill_assistant.DirectActionProto direct_action = 3;</code>
   */
  @java.lang.Override
  public boolean hasDirectAction() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Optionally allow confirming the prompt using given direct actions.
   * </pre>
   *
   * <code>optional .autofill_assistant.DirectActionProto direct_action = 3;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto getDirectAction() {
    return directAction_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto.getDefaultInstance() : directAction_;
  }
  /**
   * <pre>
   * Optionally allow confirming the prompt using given direct actions.
   * </pre>
   *
   * <code>optional .autofill_assistant.DirectActionProto direct_action = 3;</code>
   */
  private void setDirectAction(org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto value) {
    value.getClass();
  directAction_ = value;
    bitField0_ |= 0x00000004;
    }
  /**
   * <pre>
   * Optionally allow confirming the prompt using given direct actions.
   * </pre>
   *
   * <code>optional .autofill_assistant.DirectActionProto direct_action = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeDirectAction(org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto value) {
    value.getClass();
  if (directAction_ != null &&
        directAction_ != org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto.getDefaultInstance()) {
      directAction_ =
        org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto.newBuilder(directAction_).mergeFrom(value).buildPartial();
    } else {
      directAction_ = value;
    }
    bitField0_ |= 0x00000004;
  }
  /**
   * <pre>
   * Optionally allow confirming the prompt using given direct actions.
   * </pre>
   *
   * <code>optional .autofill_assistant.DirectActionProto direct_action = 3;</code>
   */
  private void clearDirectAction() {  directAction_ = null;
    bitField0_ = (bitField0_ & ~0x00000004);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Allow scripts to display a form with multiple inputs.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.ShowFormProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.ShowFormProto)
      org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The form to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.FormProto form = 1;</code>
     */
    @java.lang.Override
    public boolean hasForm() {
      return instance.hasForm();
    }
    /**
     * <pre>
     * The form to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.FormProto form = 1;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.FormProto getForm() {
      return instance.getForm();
    }
    /**
     * <pre>
     * The form to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.FormProto form = 1;</code>
     */
    public Builder setForm(org.chromium.chrome.browser.autofill_assistant.proto.FormProto value) {
      copyOnWrite();
      instance.setForm(value);
      return this;
      }
    /**
     * <pre>
     * The form to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.FormProto form = 1;</code>
     */
    public Builder setForm(
        org.chromium.chrome.browser.autofill_assistant.proto.FormProto.Builder builderForValue) {
      copyOnWrite();
      instance.setForm(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The form to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.FormProto form = 1;</code>
     */
    public Builder mergeForm(org.chromium.chrome.browser.autofill_assistant.proto.FormProto value) {
      copyOnWrite();
      instance.mergeForm(value);
      return this;
    }
    /**
     * <pre>
     * The form to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.FormProto form = 1;</code>
     */
    public Builder clearForm() {  copyOnWrite();
      instance.clearForm();
      return this;
    }

    /**
     * <pre>
     * The chip to display below the form. This chip will be enabled only if all
     * form inputs are valid.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipProto chip = 2;</code>
     */
    @java.lang.Override
    public boolean hasChip() {
      return instance.hasChip();
    }
    /**
     * <pre>
     * The chip to display below the form. This chip will be enabled only if all
     * form inputs are valid.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipProto chip = 2;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ChipProto getChip() {
      return instance.getChip();
    }
    /**
     * <pre>
     * The chip to display below the form. This chip will be enabled only if all
     * form inputs are valid.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipProto chip = 2;</code>
     */
    public Builder setChip(org.chromium.chrome.browser.autofill_assistant.proto.ChipProto value) {
      copyOnWrite();
      instance.setChip(value);
      return this;
      }
    /**
     * <pre>
     * The chip to display below the form. This chip will be enabled only if all
     * form inputs are valid.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipProto chip = 2;</code>
     */
    public Builder setChip(
        org.chromium.chrome.browser.autofill_assistant.proto.ChipProto.Builder builderForValue) {
      copyOnWrite();
      instance.setChip(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The chip to display below the form. This chip will be enabled only if all
     * form inputs are valid.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipProto chip = 2;</code>
     */
    public Builder mergeChip(org.chromium.chrome.browser.autofill_assistant.proto.ChipProto value) {
      copyOnWrite();
      instance.mergeChip(value);
      return this;
    }
    /**
     * <pre>
     * The chip to display below the form. This chip will be enabled only if all
     * form inputs are valid.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipProto chip = 2;</code>
     */
    public Builder clearChip() {  copyOnWrite();
      instance.clearChip();
      return this;
    }

    /**
     * <pre>
     * Optionally allow confirming the prompt using given direct actions.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto direct_action = 3;</code>
     */
    @java.lang.Override
    public boolean hasDirectAction() {
      return instance.hasDirectAction();
    }
    /**
     * <pre>
     * Optionally allow confirming the prompt using given direct actions.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto direct_action = 3;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto getDirectAction() {
      return instance.getDirectAction();
    }
    /**
     * <pre>
     * Optionally allow confirming the prompt using given direct actions.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto direct_action = 3;</code>
     */
    public Builder setDirectAction(org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto value) {
      copyOnWrite();
      instance.setDirectAction(value);
      return this;
      }
    /**
     * <pre>
     * Optionally allow confirming the prompt using given direct actions.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto direct_action = 3;</code>
     */
    public Builder setDirectAction(
        org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto.Builder builderForValue) {
      copyOnWrite();
      instance.setDirectAction(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Optionally allow confirming the prompt using given direct actions.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto direct_action = 3;</code>
     */
    public Builder mergeDirectAction(org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto value) {
      copyOnWrite();
      instance.mergeDirectAction(value);
      return this;
    }
    /**
     * <pre>
     * Optionally allow confirming the prompt using given direct actions.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto direct_action = 3;</code>
     */
    public Builder clearDirectAction() {  copyOnWrite();
      instance.clearDirectAction();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.ShowFormProto)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "form_",
            "chip_",
            "directAction_",
          };
          java.lang.String info =
              "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
              "\u1009\u0001\u0003\u1009\u0002";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.ShowFormProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto DEFAULT_INSTANCE;
  static {
    ShowFormProto defaultInstance = new ShowFormProto();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ShowFormProto.class, defaultInstance);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowFormProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ShowFormProto> PARSER;

  public static com.google.protobuf.Parser<ShowFormProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

