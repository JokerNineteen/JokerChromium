// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Contain all arguments to show cast on an element.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.ShowCastProto}
 */
public  final class ShowCastProto extends
    com.google.protobuf.GeneratedMessageLite<
        ShowCastProto, ShowCastProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.ShowCastProto)
    ShowCastProtoOrBuilder {
  private ShowCastProto() {
    title_ = "";
    deprecatedTouchableElements_ = emptyProtobufList();
    stableCheckMaxRounds_ = 50;
    stableCheckIntervalMs_ = 200;
  }
  public interface TopPaddingOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.ShowCastProto.TopPadding)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Padding in CSS pixels. Eg. 20.
     * </pre>
     *
     * <code>int32 pixels = 1;</code>
     * @return Whether the pixels field is set.
     */
    boolean hasPixels();
    /**
     * <pre>
     * Padding in CSS pixels. Eg. 20.
     * </pre>
     *
     * <code>int32 pixels = 1;</code>
     * @return The pixels.
     */
    int getPixels();

    /**
     * <pre>
     * Ratio in relation to the window.innerHeight. Eg. 0.25.
     * </pre>
     *
     * <code>float ratio = 2;</code>
     * @return Whether the ratio field is set.
     */
    boolean hasRatio();
    /**
     * <pre>
     * Ratio in relation to the window.innerHeight. Eg. 0.25.
     * </pre>
     *
     * <code>float ratio = 2;</code>
     * @return The ratio.
     */
    float getRatio();

    public org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding.TopPaddingCase getTopPaddingCase();
  }
  /**
   * Protobuf type {@code autofill_assistant.ShowCastProto.TopPadding}
   */
  public  static final class TopPadding extends
      com.google.protobuf.GeneratedMessageLite<
          TopPadding, TopPadding.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.ShowCastProto.TopPadding)
      TopPaddingOrBuilder {
    private TopPadding() {
    }
    private int bitField0_;
    private int topPaddingCase_ = 0;
    private java.lang.Object topPadding_;
    public enum TopPaddingCase {
      PIXELS(1),
      RATIO(2),
      TOPPADDING_NOT_SET(0);
      private final int value;
      private TopPaddingCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TopPaddingCase valueOf(int value) {
        return forNumber(value);
      }

      public static TopPaddingCase forNumber(int value) {
        switch (value) {
          case 1: return PIXELS;
          case 2: return RATIO;
          case 0: return TOPPADDING_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @java.lang.Override
    public TopPaddingCase
    getTopPaddingCase() {
      return TopPaddingCase.forNumber(
          topPaddingCase_);
    }

    private void clearTopPadding() {
      topPaddingCase_ = 0;
      topPadding_ = null;
    }

    public static final int PIXELS_FIELD_NUMBER = 1;
    /**
     * <pre>
     * Padding in CSS pixels. Eg. 20.
     * </pre>
     *
     * <code>int32 pixels = 1;</code>
     * @return Whether the pixels field is set.
     */
    @java.lang.Override
    public boolean hasPixels() {
      return topPaddingCase_ == 1;
    }
    /**
     * <pre>
     * Padding in CSS pixels. Eg. 20.
     * </pre>
     *
     * <code>int32 pixels = 1;</code>
     * @return The pixels.
     */
    @java.lang.Override
    public int getPixels() {
      if (topPaddingCase_ == 1) {
        return (java.lang.Integer) topPadding_;
      }
      return 0;
    }
    /**
     * <pre>
     * Padding in CSS pixels. Eg. 20.
     * </pre>
     *
     * <code>int32 pixels = 1;</code>
     * @param value The pixels to set.
     */
    private void setPixels(int value) {
      topPaddingCase_ = 1;
      topPadding_ = value;
    }
    /**
     * <pre>
     * Padding in CSS pixels. Eg. 20.
     * </pre>
     *
     * <code>int32 pixels = 1;</code>
     */
    private void clearPixels() {
      if (topPaddingCase_ == 1) {
        topPaddingCase_ = 0;
        topPadding_ = null;
      }
    }

    public static final int RATIO_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Ratio in relation to the window.innerHeight. Eg. 0.25.
     * </pre>
     *
     * <code>float ratio = 2;</code>
     * @return Whether the ratio field is set.
     */
    @java.lang.Override
    public boolean hasRatio() {
      return topPaddingCase_ == 2;
    }
    /**
     * <pre>
     * Ratio in relation to the window.innerHeight. Eg. 0.25.
     * </pre>
     *
     * <code>float ratio = 2;</code>
     * @return The ratio.
     */
    @java.lang.Override
    public float getRatio() {
      if (topPaddingCase_ == 2) {
        return (java.lang.Float) topPadding_;
      }
      return 0F;
    }
    /**
     * <pre>
     * Ratio in relation to the window.innerHeight. Eg. 0.25.
     * </pre>
     *
     * <code>float ratio = 2;</code>
     * @param value The ratio to set.
     */
    private void setRatio(float value) {
      topPaddingCase_ = 2;
      topPadding_ = value;
    }
    /**
     * <pre>
     * Ratio in relation to the window.innerHeight. Eg. 0.25.
     * </pre>
     *
     * <code>float ratio = 2;</code>
     */
    private void clearRatio() {
      if (topPaddingCase_ == 2) {
        topPaddingCase_ = 0;
        topPadding_ = null;
      }
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code autofill_assistant.ShowCastProto.TopPadding}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.ShowCastProto.TopPadding)
        org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPaddingOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      @java.lang.Override
      public TopPaddingCase
          getTopPaddingCase() {
        return instance.getTopPaddingCase();
      }

      public Builder clearTopPadding() {
        copyOnWrite();
        instance.clearTopPadding();
        return this;
      }


      /**
       * <pre>
       * Padding in CSS pixels. Eg. 20.
       * </pre>
       *
       * <code>int32 pixels = 1;</code>
       * @return Whether the pixels field is set.
       */
      @java.lang.Override
      public boolean hasPixels() {
        return instance.hasPixels();
      }
      /**
       * <pre>
       * Padding in CSS pixels. Eg. 20.
       * </pre>
       *
       * <code>int32 pixels = 1;</code>
       * @return The pixels.
       */
      @java.lang.Override
      public int getPixels() {
        return instance.getPixels();
      }
      /**
       * <pre>
       * Padding in CSS pixels. Eg. 20.
       * </pre>
       *
       * <code>int32 pixels = 1;</code>
       * @param value The pixels to set.
       * @return This builder for chaining.
       */
      public Builder setPixels(int value) {
        copyOnWrite();
        instance.setPixels(value);
        return this;
      }
      /**
       * <pre>
       * Padding in CSS pixels. Eg. 20.
       * </pre>
       *
       * <code>int32 pixels = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPixels() {
        copyOnWrite();
        instance.clearPixels();
        return this;
      }

      /**
       * <pre>
       * Ratio in relation to the window.innerHeight. Eg. 0.25.
       * </pre>
       *
       * <code>float ratio = 2;</code>
       * @return Whether the ratio field is set.
       */
      @java.lang.Override
      public boolean hasRatio() {
        return instance.hasRatio();
      }
      /**
       * <pre>
       * Ratio in relation to the window.innerHeight. Eg. 0.25.
       * </pre>
       *
       * <code>float ratio = 2;</code>
       * @return The ratio.
       */
      @java.lang.Override
      public float getRatio() {
        return instance.getRatio();
      }
      /**
       * <pre>
       * Ratio in relation to the window.innerHeight. Eg. 0.25.
       * </pre>
       *
       * <code>float ratio = 2;</code>
       * @param value The ratio to set.
       * @return This builder for chaining.
       */
      public Builder setRatio(float value) {
        copyOnWrite();
        instance.setRatio(value);
        return this;
      }
      /**
       * <pre>
       * Ratio in relation to the window.innerHeight. Eg. 0.25.
       * </pre>
       *
       * <code>float ratio = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearRatio() {
        copyOnWrite();
        instance.clearRatio();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.ShowCastProto.TopPadding)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "topPadding_",
              "topPaddingCase_",
              "bitField0_",
            };
            java.lang.String info =
                "\u0001\u0002\u0001\u0001\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u1037\u0000\u0002" +
                "\u1034\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.ShowCastProto.TopPadding)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding DEFAULT_INSTANCE;
    static {
      TopPadding defaultInstance = new TopPadding();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TopPadding.class, defaultInstance);
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TopPadding> PARSER;

    public static com.google.protobuf.Parser<TopPadding> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  public static final int ELEMENT_TO_PRESENT_FIELD_NUMBER = 1;
  private org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto elementToPresent_;
  /**
   * <pre>
   * Element to scroll to.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto element_to_present = 1;</code>
   */
  @java.lang.Override
  public boolean hasElementToPresent() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Element to scroll to.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto element_to_present = 1;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto getElementToPresent() {
    return elementToPresent_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.getDefaultInstance() : elementToPresent_;
  }
  /**
   * <pre>
   * Element to scroll to.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto element_to_present = 1;</code>
   */
  private void setElementToPresent(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
    value.getClass();
  elementToPresent_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * Element to scroll to.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto element_to_present = 1;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeElementToPresent(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
    value.getClass();
  if (elementToPresent_ != null &&
        elementToPresent_ != org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.getDefaultInstance()) {
      elementToPresent_ =
        org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.newBuilder(elementToPresent_).mergeFrom(value).buildPartial();
    } else {
      elementToPresent_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * Element to scroll to.
   * </pre>
   *
   * <code>optional .autofill_assistant.SelectorProto element_to_present = 1;</code>
   */
  private void clearElementToPresent() {  elementToPresent_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int TITLE_FIELD_NUMBER = 2;
  private java.lang.String title_;
  /**
   * <pre>
   * Optional title to show in the status bar.
   * </pre>
   *
   * <code>optional string title = 2;</code>
   * @return Whether the title field is set.
   */
  @java.lang.Override
  public boolean hasTitle() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Optional title to show in the status bar.
   * </pre>
   *
   * <code>optional string title = 2;</code>
   * @return The title.
   */
  @java.lang.Override
  public java.lang.String getTitle() {
    return title_;
  }
  /**
   * <pre>
   * Optional title to show in the status bar.
   * </pre>
   *
   * <code>optional string title = 2;</code>
   * @return The bytes for title.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getTitleBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(title_);
  }
  /**
   * <pre>
   * Optional title to show in the status bar.
   * </pre>
   *
   * <code>optional string title = 2;</code>
   * @param value The title to set.
   */
  private void setTitle(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000002;
    title_ = value;
  }
  /**
   * <pre>
   * Optional title to show in the status bar.
   * </pre>
   *
   * <code>optional string title = 2;</code>
   */
  private void clearTitle() {
    bitField0_ = (bitField0_ & ~0x00000002);
    title_ = getDefaultInstance().getTitle();
  }
  /**
   * <pre>
   * Optional title to show in the status bar.
   * </pre>
   *
   * <code>optional string title = 2;</code>
   * @param value The bytes for title to set.
   */
  private void setTitleBytes(
      com.google.protobuf.ByteString value) {
    title_ = value.toStringUtf8();
    bitField0_ |= 0x00000002;
  }

  public static final int DEPRECATED_TOUCHABLE_ELEMENTS_FIELD_NUMBER = 5;
  private com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto> deprecatedTouchableElements_;
  /**
   * <pre>
   * Restrict interaction to the area spanned by the given elements.
   * Deprecated: use touchable_element_area instead. Ignored if
   * touchable_element_area is non-empty.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
   */
  @java.lang.Override
  public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto> getDeprecatedTouchableElementsList() {
    return deprecatedTouchableElements_;
  }
  /**
   * <pre>
   * Restrict interaction to the area spanned by the given elements.
   * Deprecated: use touchable_element_area instead. Ignored if
   * touchable_element_area is non-empty.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
   */
  public java.util.List<? extends org.chromium.chrome.browser.autofill_assistant.proto.SelectorProtoOrBuilder> 
      getDeprecatedTouchableElementsOrBuilderList() {
    return deprecatedTouchableElements_;
  }
  /**
   * <pre>
   * Restrict interaction to the area spanned by the given elements.
   * Deprecated: use touchable_element_area instead. Ignored if
   * touchable_element_area is non-empty.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
   */
  @java.lang.Override
  public int getDeprecatedTouchableElementsCount() {
    return deprecatedTouchableElements_.size();
  }
  /**
   * <pre>
   * Restrict interaction to the area spanned by the given elements.
   * Deprecated: use touchable_element_area instead. Ignored if
   * touchable_element_area is non-empty.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto getDeprecatedTouchableElements(int index) {
    return deprecatedTouchableElements_.get(index);
  }
  /**
   * <pre>
   * Restrict interaction to the area spanned by the given elements.
   * Deprecated: use touchable_element_area instead. Ignored if
   * touchable_element_area is non-empty.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.SelectorProtoOrBuilder getDeprecatedTouchableElementsOrBuilder(
      int index) {
    return deprecatedTouchableElements_.get(index);
  }
  private void ensureDeprecatedTouchableElementsIsMutable() {
    com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto> tmp = deprecatedTouchableElements_;
    if (!tmp.isModifiable()) {
      deprecatedTouchableElements_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <pre>
   * Restrict interaction to the area spanned by the given elements.
   * Deprecated: use touchable_element_area instead. Ignored if
   * touchable_element_area is non-empty.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
   */
  private void setDeprecatedTouchableElements(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
    value.getClass();
  ensureDeprecatedTouchableElementsIsMutable();
    deprecatedTouchableElements_.set(index, value);
  }
  /**
   * <pre>
   * Restrict interaction to the area spanned by the given elements.
   * Deprecated: use touchable_element_area instead. Ignored if
   * touchable_element_area is non-empty.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
   */
  private void addDeprecatedTouchableElements(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
    value.getClass();
  ensureDeprecatedTouchableElementsIsMutable();
    deprecatedTouchableElements_.add(value);
  }
  /**
   * <pre>
   * Restrict interaction to the area spanned by the given elements.
   * Deprecated: use touchable_element_area instead. Ignored if
   * touchable_element_area is non-empty.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
   */
  private void addDeprecatedTouchableElements(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
    value.getClass();
  ensureDeprecatedTouchableElementsIsMutable();
    deprecatedTouchableElements_.add(index, value);
  }
  /**
   * <pre>
   * Restrict interaction to the area spanned by the given elements.
   * Deprecated: use touchable_element_area instead. Ignored if
   * touchable_element_area is non-empty.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
   */
  private void addAllDeprecatedTouchableElements(
      java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto> values) {
    ensureDeprecatedTouchableElementsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, deprecatedTouchableElements_);
  }
  /**
   * <pre>
   * Restrict interaction to the area spanned by the given elements.
   * Deprecated: use touchable_element_area instead. Ignored if
   * touchable_element_area is non-empty.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
   */
  private void clearDeprecatedTouchableElements() {
    deprecatedTouchableElements_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Restrict interaction to the area spanned by the given elements.
   * Deprecated: use touchable_element_area instead. Ignored if
   * touchable_element_area is non-empty.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
   */
  private void removeDeprecatedTouchableElements(int index) {
    ensureDeprecatedTouchableElementsIsMutable();
    deprecatedTouchableElements_.remove(index);
  }

  public static final int TOUCHABLE_ELEMENT_AREA_FIELD_NUMBER = 6;
  private org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto touchableElementArea_;
  /**
   * <pre>
   * Restrict interaction to a series of rectangular areas.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementAreaProto touchable_element_area = 6;</code>
   */
  @java.lang.Override
  public boolean hasTouchableElementArea() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Restrict interaction to a series of rectangular areas.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementAreaProto touchable_element_area = 6;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto getTouchableElementArea() {
    return touchableElementArea_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.getDefaultInstance() : touchableElementArea_;
  }
  /**
   * <pre>
   * Restrict interaction to a series of rectangular areas.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementAreaProto touchable_element_area = 6;</code>
   */
  private void setTouchableElementArea(org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto value) {
    value.getClass();
  touchableElementArea_ = value;
    bitField0_ |= 0x00000004;
    }
  /**
   * <pre>
   * Restrict interaction to a series of rectangular areas.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementAreaProto touchable_element_area = 6;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeTouchableElementArea(org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto value) {
    value.getClass();
  if (touchableElementArea_ != null &&
        touchableElementArea_ != org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.getDefaultInstance()) {
      touchableElementArea_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.newBuilder(touchableElementArea_).mergeFrom(value).buildPartial();
    } else {
      touchableElementArea_ = value;
    }
    bitField0_ |= 0x00000004;
  }
  /**
   * <pre>
   * Restrict interaction to a series of rectangular areas.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementAreaProto touchable_element_area = 6;</code>
   */
  private void clearTouchableElementArea() {  touchableElementArea_ = null;
    bitField0_ = (bitField0_ & ~0x00000004);
  }

  public static final int TOP_PADDING_FIELD_NUMBER = 7;
  private org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding topPadding_;
  /**
   * <pre>
   * The padding that will be added between the focused element and the top.
   * </pre>
   *
   * <code>optional .autofill_assistant.ShowCastProto.TopPadding top_padding = 7;</code>
   */
  @java.lang.Override
  public boolean hasTopPadding() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * The padding that will be added between the focused element and the top.
   * </pre>
   *
   * <code>optional .autofill_assistant.ShowCastProto.TopPadding top_padding = 7;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding getTopPadding() {
    return topPadding_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding.getDefaultInstance() : topPadding_;
  }
  /**
   * <pre>
   * The padding that will be added between the focused element and the top.
   * </pre>
   *
   * <code>optional .autofill_assistant.ShowCastProto.TopPadding top_padding = 7;</code>
   */
  private void setTopPadding(org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding value) {
    value.getClass();
  topPadding_ = value;
    bitField0_ |= 0x00000008;
    }
  /**
   * <pre>
   * The padding that will be added between the focused element and the top.
   * </pre>
   *
   * <code>optional .autofill_assistant.ShowCastProto.TopPadding top_padding = 7;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeTopPadding(org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding value) {
    value.getClass();
  if (topPadding_ != null &&
        topPadding_ != org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding.getDefaultInstance()) {
      topPadding_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding.newBuilder(topPadding_).mergeFrom(value).buildPartial();
    } else {
      topPadding_ = value;
    }
    bitField0_ |= 0x00000008;
  }
  /**
   * <pre>
   * The padding that will be added between the focused element and the top.
   * </pre>
   *
   * <code>optional .autofill_assistant.ShowCastProto.TopPadding top_padding = 7;</code>
   */
  private void clearTopPadding() {  topPadding_ = null;
    bitField0_ = (bitField0_ & ~0x00000008);
  }

  public static final int WAIT_FOR_STABLE_ELEMENT_FIELD_NUMBER = 9;
  private int waitForStableElement_;
  /**
   * <pre>
   * Configure whether the scrolling should wait for the element to be stable
   * before scrolling.
   * If set to REQUIRE_STEP_SUCCESS, scrolling may fail with ELEMENT_UNSTABLE.
   * </pre>
   *
   * <code>optional .autofill_assistant.OptionalStep wait_for_stable_element = 9;</code>
   * @return Whether the waitForStableElement field is set.
   */
  @java.lang.Override
  public boolean hasWaitForStableElement() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * Configure whether the scrolling should wait for the element to be stable
   * before scrolling.
   * If set to REQUIRE_STEP_SUCCESS, scrolling may fail with ELEMENT_UNSTABLE.
   * </pre>
   *
   * <code>optional .autofill_assistant.OptionalStep wait_for_stable_element = 9;</code>
   * @return The waitForStableElement.
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.OptionalStep getWaitForStableElement() {
    org.chromium.chrome.browser.autofill_assistant.proto.OptionalStep result = org.chromium.chrome.browser.autofill_assistant.proto.OptionalStep.forNumber(waitForStableElement_);
    return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.OptionalStep.STEP_UNSPECIFIED : result;
  }
  /**
   * <pre>
   * Configure whether the scrolling should wait for the element to be stable
   * before scrolling.
   * If set to REQUIRE_STEP_SUCCESS, scrolling may fail with ELEMENT_UNSTABLE.
   * </pre>
   *
   * <code>optional .autofill_assistant.OptionalStep wait_for_stable_element = 9;</code>
   * @param value The waitForStableElement to set.
   */
  private void setWaitForStableElement(org.chromium.chrome.browser.autofill_assistant.proto.OptionalStep value) {
    waitForStableElement_ = value.getNumber();
    bitField0_ |= 0x00000010;
  }
  /**
   * <pre>
   * Configure whether the scrolling should wait for the element to be stable
   * before scrolling.
   * If set to REQUIRE_STEP_SUCCESS, scrolling may fail with ELEMENT_UNSTABLE.
   * </pre>
   *
   * <code>optional .autofill_assistant.OptionalStep wait_for_stable_element = 9;</code>
   */
  private void clearWaitForStableElement() {
    bitField0_ = (bitField0_ & ~0x00000010);
    waitForStableElement_ = 0;
  }

  public static final int STABLE_CHECK_MAX_ROUNDS_FIELD_NUMBER = 10;
  private int stableCheckMaxRounds_;
  /**
   * <pre>
   * Maximum rounds to stable check.
   * </pre>
   *
   * <code>optional int32 stable_check_max_rounds = 10 [default = 50];</code>
   * @return Whether the stableCheckMaxRounds field is set.
   */
  @java.lang.Override
  public boolean hasStableCheckMaxRounds() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * Maximum rounds to stable check.
   * </pre>
   *
   * <code>optional int32 stable_check_max_rounds = 10 [default = 50];</code>
   * @return The stableCheckMaxRounds.
   */
  @java.lang.Override
  public int getStableCheckMaxRounds() {
    return stableCheckMaxRounds_;
  }
  /**
   * <pre>
   * Maximum rounds to stable check.
   * </pre>
   *
   * <code>optional int32 stable_check_max_rounds = 10 [default = 50];</code>
   * @param value The stableCheckMaxRounds to set.
   */
  private void setStableCheckMaxRounds(int value) {
    bitField0_ |= 0x00000020;
    stableCheckMaxRounds_ = value;
  }
  /**
   * <pre>
   * Maximum rounds to stable check.
   * </pre>
   *
   * <code>optional int32 stable_check_max_rounds = 10 [default = 50];</code>
   */
  private void clearStableCheckMaxRounds() {
    bitField0_ = (bitField0_ & ~0x00000020);
    stableCheckMaxRounds_ = 50;
  }

  public static final int STABLE_CHECK_INTERVAL_MS_FIELD_NUMBER = 11;
  private int stableCheckIntervalMs_;
  /**
   * <pre>
   * Interval for stable check in ms.
   * </pre>
   *
   * <code>optional int32 stable_check_interval_ms = 11 [default = 200];</code>
   * @return Whether the stableCheckIntervalMs field is set.
   */
  @java.lang.Override
  public boolean hasStableCheckIntervalMs() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * Interval for stable check in ms.
   * </pre>
   *
   * <code>optional int32 stable_check_interval_ms = 11 [default = 200];</code>
   * @return The stableCheckIntervalMs.
   */
  @java.lang.Override
  public int getStableCheckIntervalMs() {
    return stableCheckIntervalMs_;
  }
  /**
   * <pre>
   * Interval for stable check in ms.
   * </pre>
   *
   * <code>optional int32 stable_check_interval_ms = 11 [default = 200];</code>
   * @param value The stableCheckIntervalMs to set.
   */
  private void setStableCheckIntervalMs(int value) {
    bitField0_ |= 0x00000040;
    stableCheckIntervalMs_ = value;
  }
  /**
   * <pre>
   * Interval for stable check in ms.
   * </pre>
   *
   * <code>optional int32 stable_check_interval_ms = 11 [default = 200];</code>
   */
  private void clearStableCheckIntervalMs() {
    bitField0_ = (bitField0_ & ~0x00000040);
    stableCheckIntervalMs_ = 200;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Contain all arguments to show cast on an element.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.ShowCastProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.ShowCastProto)
      org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Element to scroll to.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto element_to_present = 1;</code>
     */
    @java.lang.Override
    public boolean hasElementToPresent() {
      return instance.hasElementToPresent();
    }
    /**
     * <pre>
     * Element to scroll to.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto element_to_present = 1;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto getElementToPresent() {
      return instance.getElementToPresent();
    }
    /**
     * <pre>
     * Element to scroll to.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto element_to_present = 1;</code>
     */
    public Builder setElementToPresent(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
      copyOnWrite();
      instance.setElementToPresent(value);
      return this;
      }
    /**
     * <pre>
     * Element to scroll to.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto element_to_present = 1;</code>
     */
    public Builder setElementToPresent(
        org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.Builder builderForValue) {
      copyOnWrite();
      instance.setElementToPresent(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Element to scroll to.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto element_to_present = 1;</code>
     */
    public Builder mergeElementToPresent(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
      copyOnWrite();
      instance.mergeElementToPresent(value);
      return this;
    }
    /**
     * <pre>
     * Element to scroll to.
     * </pre>
     *
     * <code>optional .autofill_assistant.SelectorProto element_to_present = 1;</code>
     */
    public Builder clearElementToPresent() {  copyOnWrite();
      instance.clearElementToPresent();
      return this;
    }

    /**
     * <pre>
     * Optional title to show in the status bar.
     * </pre>
     *
     * <code>optional string title = 2;</code>
     * @return Whether the title field is set.
     */
    @java.lang.Override
    public boolean hasTitle() {
      return instance.hasTitle();
    }
    /**
     * <pre>
     * Optional title to show in the status bar.
     * </pre>
     *
     * <code>optional string title = 2;</code>
     * @return The title.
     */
    @java.lang.Override
    public java.lang.String getTitle() {
      return instance.getTitle();
    }
    /**
     * <pre>
     * Optional title to show in the status bar.
     * </pre>
     *
     * <code>optional string title = 2;</code>
     * @return The bytes for title.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTitleBytes() {
      return instance.getTitleBytes();
    }
    /**
     * <pre>
     * Optional title to show in the status bar.
     * </pre>
     *
     * <code>optional string title = 2;</code>
     * @param value The title to set.
     * @return This builder for chaining.
     */
    public Builder setTitle(
        java.lang.String value) {
      copyOnWrite();
      instance.setTitle(value);
      return this;
    }
    /**
     * <pre>
     * Optional title to show in the status bar.
     * </pre>
     *
     * <code>optional string title = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearTitle() {
      copyOnWrite();
      instance.clearTitle();
      return this;
    }
    /**
     * <pre>
     * Optional title to show in the status bar.
     * </pre>
     *
     * <code>optional string title = 2;</code>
     * @param value The bytes for title to set.
     * @return This builder for chaining.
     */
    public Builder setTitleBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTitleBytes(value);
      return this;
    }

    /**
     * <pre>
     * Restrict interaction to the area spanned by the given elements.
     * Deprecated: use touchable_element_area instead. Ignored if
     * touchable_element_area is non-empty.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto> getDeprecatedTouchableElementsList() {
      return java.util.Collections.unmodifiableList(
          instance.getDeprecatedTouchableElementsList());
    }
    /**
     * <pre>
     * Restrict interaction to the area spanned by the given elements.
     * Deprecated: use touchable_element_area instead. Ignored if
     * touchable_element_area is non-empty.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
     */
    @java.lang.Override
    public int getDeprecatedTouchableElementsCount() {
      return instance.getDeprecatedTouchableElementsCount();
    }/**
     * <pre>
     * Restrict interaction to the area spanned by the given elements.
     * Deprecated: use touchable_element_area instead. Ignored if
     * touchable_element_area is non-empty.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto getDeprecatedTouchableElements(int index) {
      return instance.getDeprecatedTouchableElements(index);
    }
    /**
     * <pre>
     * Restrict interaction to the area spanned by the given elements.
     * Deprecated: use touchable_element_area instead. Ignored if
     * touchable_element_area is non-empty.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
     */
    public Builder setDeprecatedTouchableElements(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
      copyOnWrite();
      instance.setDeprecatedTouchableElements(index, value);
      return this;
    }
    /**
     * <pre>
     * Restrict interaction to the area spanned by the given elements.
     * Deprecated: use touchable_element_area instead. Ignored if
     * touchable_element_area is non-empty.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
     */
    public Builder setDeprecatedTouchableElements(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.Builder builderForValue) {
      copyOnWrite();
      instance.setDeprecatedTouchableElements(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Restrict interaction to the area spanned by the given elements.
     * Deprecated: use touchable_element_area instead. Ignored if
     * touchable_element_area is non-empty.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
     */
    public Builder addDeprecatedTouchableElements(org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
      copyOnWrite();
      instance.addDeprecatedTouchableElements(value);
      return this;
    }
    /**
     * <pre>
     * Restrict interaction to the area spanned by the given elements.
     * Deprecated: use touchable_element_area instead. Ignored if
     * touchable_element_area is non-empty.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
     */
    public Builder addDeprecatedTouchableElements(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto value) {
      copyOnWrite();
      instance.addDeprecatedTouchableElements(index, value);
      return this;
    }
    /**
     * <pre>
     * Restrict interaction to the area spanned by the given elements.
     * Deprecated: use touchable_element_area instead. Ignored if
     * touchable_element_area is non-empty.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
     */
    public Builder addDeprecatedTouchableElements(
        org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.Builder builderForValue) {
      copyOnWrite();
      instance.addDeprecatedTouchableElements(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Restrict interaction to the area spanned by the given elements.
     * Deprecated: use touchable_element_area instead. Ignored if
     * touchable_element_area is non-empty.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
     */
    public Builder addDeprecatedTouchableElements(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.Builder builderForValue) {
      copyOnWrite();
      instance.addDeprecatedTouchableElements(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Restrict interaction to the area spanned by the given elements.
     * Deprecated: use touchable_element_area instead. Ignored if
     * touchable_element_area is non-empty.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
     */
    public Builder addAllDeprecatedTouchableElements(
        java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto> values) {
      copyOnWrite();
      instance.addAllDeprecatedTouchableElements(values);
      return this;
    }
    /**
     * <pre>
     * Restrict interaction to the area spanned by the given elements.
     * Deprecated: use touchable_element_area instead. Ignored if
     * touchable_element_area is non-empty.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
     */
    public Builder clearDeprecatedTouchableElements() {
      copyOnWrite();
      instance.clearDeprecatedTouchableElements();
      return this;
    }
    /**
     * <pre>
     * Restrict interaction to the area spanned by the given elements.
     * Deprecated: use touchable_element_area instead. Ignored if
     * touchable_element_area is non-empty.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SelectorProto deprecated_touchable_elements = 5;</code>
     */
    public Builder removeDeprecatedTouchableElements(int index) {
      copyOnWrite();
      instance.removeDeprecatedTouchableElements(index);
      return this;
    }

    /**
     * <pre>
     * Restrict interaction to a series of rectangular areas.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementAreaProto touchable_element_area = 6;</code>
     */
    @java.lang.Override
    public boolean hasTouchableElementArea() {
      return instance.hasTouchableElementArea();
    }
    /**
     * <pre>
     * Restrict interaction to a series of rectangular areas.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementAreaProto touchable_element_area = 6;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto getTouchableElementArea() {
      return instance.getTouchableElementArea();
    }
    /**
     * <pre>
     * Restrict interaction to a series of rectangular areas.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementAreaProto touchable_element_area = 6;</code>
     */
    public Builder setTouchableElementArea(org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto value) {
      copyOnWrite();
      instance.setTouchableElementArea(value);
      return this;
      }
    /**
     * <pre>
     * Restrict interaction to a series of rectangular areas.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementAreaProto touchable_element_area = 6;</code>
     */
    public Builder setTouchableElementArea(
        org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto.Builder builderForValue) {
      copyOnWrite();
      instance.setTouchableElementArea(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Restrict interaction to a series of rectangular areas.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementAreaProto touchable_element_area = 6;</code>
     */
    public Builder mergeTouchableElementArea(org.chromium.chrome.browser.autofill_assistant.proto.ElementAreaProto value) {
      copyOnWrite();
      instance.mergeTouchableElementArea(value);
      return this;
    }
    /**
     * <pre>
     * Restrict interaction to a series of rectangular areas.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementAreaProto touchable_element_area = 6;</code>
     */
    public Builder clearTouchableElementArea() {  copyOnWrite();
      instance.clearTouchableElementArea();
      return this;
    }

    /**
     * <pre>
     * The padding that will be added between the focused element and the top.
     * </pre>
     *
     * <code>optional .autofill_assistant.ShowCastProto.TopPadding top_padding = 7;</code>
     */
    @java.lang.Override
    public boolean hasTopPadding() {
      return instance.hasTopPadding();
    }
    /**
     * <pre>
     * The padding that will be added between the focused element and the top.
     * </pre>
     *
     * <code>optional .autofill_assistant.ShowCastProto.TopPadding top_padding = 7;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding getTopPadding() {
      return instance.getTopPadding();
    }
    /**
     * <pre>
     * The padding that will be added between the focused element and the top.
     * </pre>
     *
     * <code>optional .autofill_assistant.ShowCastProto.TopPadding top_padding = 7;</code>
     */
    public Builder setTopPadding(org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding value) {
      copyOnWrite();
      instance.setTopPadding(value);
      return this;
      }
    /**
     * <pre>
     * The padding that will be added between the focused element and the top.
     * </pre>
     *
     * <code>optional .autofill_assistant.ShowCastProto.TopPadding top_padding = 7;</code>
     */
    public Builder setTopPadding(
        org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding.Builder builderForValue) {
      copyOnWrite();
      instance.setTopPadding(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The padding that will be added between the focused element and the top.
     * </pre>
     *
     * <code>optional .autofill_assistant.ShowCastProto.TopPadding top_padding = 7;</code>
     */
    public Builder mergeTopPadding(org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.TopPadding value) {
      copyOnWrite();
      instance.mergeTopPadding(value);
      return this;
    }
    /**
     * <pre>
     * The padding that will be added between the focused element and the top.
     * </pre>
     *
     * <code>optional .autofill_assistant.ShowCastProto.TopPadding top_padding = 7;</code>
     */
    public Builder clearTopPadding() {  copyOnWrite();
      instance.clearTopPadding();
      return this;
    }

    /**
     * <pre>
     * Configure whether the scrolling should wait for the element to be stable
     * before scrolling.
     * If set to REQUIRE_STEP_SUCCESS, scrolling may fail with ELEMENT_UNSTABLE.
     * </pre>
     *
     * <code>optional .autofill_assistant.OptionalStep wait_for_stable_element = 9;</code>
     * @return Whether the waitForStableElement field is set.
     */
    @java.lang.Override
    public boolean hasWaitForStableElement() {
      return instance.hasWaitForStableElement();
    }
    /**
     * <pre>
     * Configure whether the scrolling should wait for the element to be stable
     * before scrolling.
     * If set to REQUIRE_STEP_SUCCESS, scrolling may fail with ELEMENT_UNSTABLE.
     * </pre>
     *
     * <code>optional .autofill_assistant.OptionalStep wait_for_stable_element = 9;</code>
     * @return The waitForStableElement.
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.OptionalStep getWaitForStableElement() {
      return instance.getWaitForStableElement();
    }
    /**
     * <pre>
     * Configure whether the scrolling should wait for the element to be stable
     * before scrolling.
     * If set to REQUIRE_STEP_SUCCESS, scrolling may fail with ELEMENT_UNSTABLE.
     * </pre>
     *
     * <code>optional .autofill_assistant.OptionalStep wait_for_stable_element = 9;</code>
     * @param value The enum numeric value on the wire for waitForStableElement to set.
     * @return This builder for chaining.
     */
    public Builder setWaitForStableElement(org.chromium.chrome.browser.autofill_assistant.proto.OptionalStep value) {
      copyOnWrite();
      instance.setWaitForStableElement(value);
      return this;
    }
    /**
     * <pre>
     * Configure whether the scrolling should wait for the element to be stable
     * before scrolling.
     * If set to REQUIRE_STEP_SUCCESS, scrolling may fail with ELEMENT_UNSTABLE.
     * </pre>
     *
     * <code>optional .autofill_assistant.OptionalStep wait_for_stable_element = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearWaitForStableElement() {
      copyOnWrite();
      instance.clearWaitForStableElement();
      return this;
    }

    /**
     * <pre>
     * Maximum rounds to stable check.
     * </pre>
     *
     * <code>optional int32 stable_check_max_rounds = 10 [default = 50];</code>
     * @return Whether the stableCheckMaxRounds field is set.
     */
    @java.lang.Override
    public boolean hasStableCheckMaxRounds() {
      return instance.hasStableCheckMaxRounds();
    }
    /**
     * <pre>
     * Maximum rounds to stable check.
     * </pre>
     *
     * <code>optional int32 stable_check_max_rounds = 10 [default = 50];</code>
     * @return The stableCheckMaxRounds.
     */
    @java.lang.Override
    public int getStableCheckMaxRounds() {
      return instance.getStableCheckMaxRounds();
    }
    /**
     * <pre>
     * Maximum rounds to stable check.
     * </pre>
     *
     * <code>optional int32 stable_check_max_rounds = 10 [default = 50];</code>
     * @param value The stableCheckMaxRounds to set.
     * @return This builder for chaining.
     */
    public Builder setStableCheckMaxRounds(int value) {
      copyOnWrite();
      instance.setStableCheckMaxRounds(value);
      return this;
    }
    /**
     * <pre>
     * Maximum rounds to stable check.
     * </pre>
     *
     * <code>optional int32 stable_check_max_rounds = 10 [default = 50];</code>
     * @return This builder for chaining.
     */
    public Builder clearStableCheckMaxRounds() {
      copyOnWrite();
      instance.clearStableCheckMaxRounds();
      return this;
    }

    /**
     * <pre>
     * Interval for stable check in ms.
     * </pre>
     *
     * <code>optional int32 stable_check_interval_ms = 11 [default = 200];</code>
     * @return Whether the stableCheckIntervalMs field is set.
     */
    @java.lang.Override
    public boolean hasStableCheckIntervalMs() {
      return instance.hasStableCheckIntervalMs();
    }
    /**
     * <pre>
     * Interval for stable check in ms.
     * </pre>
     *
     * <code>optional int32 stable_check_interval_ms = 11 [default = 200];</code>
     * @return The stableCheckIntervalMs.
     */
    @java.lang.Override
    public int getStableCheckIntervalMs() {
      return instance.getStableCheckIntervalMs();
    }
    /**
     * <pre>
     * Interval for stable check in ms.
     * </pre>
     *
     * <code>optional int32 stable_check_interval_ms = 11 [default = 200];</code>
     * @param value The stableCheckIntervalMs to set.
     * @return This builder for chaining.
     */
    public Builder setStableCheckIntervalMs(int value) {
      copyOnWrite();
      instance.setStableCheckIntervalMs(value);
      return this;
    }
    /**
     * <pre>
     * Interval for stable check in ms.
     * </pre>
     *
     * <code>optional int32 stable_check_interval_ms = 11 [default = 200];</code>
     * @return This builder for chaining.
     */
    public Builder clearStableCheckIntervalMs() {
      copyOnWrite();
      instance.clearStableCheckIntervalMs();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.ShowCastProto)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "elementToPresent_",
            "title_",
            "deprecatedTouchableElements_",
            org.chromium.chrome.browser.autofill_assistant.proto.SelectorProto.class,
            "touchableElementArea_",
            "topPadding_",
            "waitForStableElement_",
            org.chromium.chrome.browser.autofill_assistant.proto.OptionalStep.internalGetVerifier(),
            "stableCheckMaxRounds_",
            "stableCheckIntervalMs_",
          };
          java.lang.String info =
              "\u0001\b\u0000\u0001\u0001\u000b\b\u0000\u0001\u0000\u0001\u1009\u0000\u0002\u1008" +
              "\u0001\u0005\u001b\u0006\u1009\u0002\u0007\u1009\u0003\t\u100c\u0004\n\u1004\u0005" +
              "\u000b\u1004\u0006";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.ShowCastProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto DEFAULT_INSTANCE;
  static {
    ShowCastProto defaultInstance = new ShowCastProto();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ShowCastProto.class, defaultInstance);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCastProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ShowCastProto> PARSER;

  public static com.google.protobuf.Parser<ShowCastProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

