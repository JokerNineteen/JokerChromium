// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: view_layout.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * A vertical expander is a special type of vertical linear layout. It has two
 * expansion states (expanded vs. collapsed) and toggles between them by tapping
 * the title widget. For user guidance, a chevron is shown in the title to
 * indicate the current state.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.VerticalExpanderViewProto}
 */
public  final class VerticalExpanderViewProto extends
    com.google.protobuf.GeneratedMessageLite<
        VerticalExpanderViewProto, VerticalExpanderViewProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.VerticalExpanderViewProto)
    VerticalExpanderViewProtoOrBuilder {
  private VerticalExpanderViewProto() {
  }
  /**
   * Protobuf enum {@code autofill_assistant.VerticalExpanderViewProto.ChevronStyle}
   */
  public enum ChevronStyle
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * Automatic: will show the chevron only if |expanded_view| is set.
     * </pre>
     *
     * <code>NOT_SET_AUTOMATIC = 0;</code>
     */
    NOT_SET_AUTOMATIC(0),
    /**
     * <code>ALWAYS = 1;</code>
     */
    ALWAYS(1),
    /**
     * <code>NEVER = 2;</code>
     */
    NEVER(2),
    ;

    /**
     * <pre>
     * Automatic: will show the chevron only if |expanded_view| is set.
     * </pre>
     *
     * <code>NOT_SET_AUTOMATIC = 0;</code>
     */
    public static final int NOT_SET_AUTOMATIC_VALUE = 0;
    /**
     * <code>ALWAYS = 1;</code>
     */
    public static final int ALWAYS_VALUE = 1;
    /**
     * <code>NEVER = 2;</code>
     */
    public static final int NEVER_VALUE = 2;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ChevronStyle valueOf(int value) {
      return forNumber(value);
    }

    public static ChevronStyle forNumber(int value) {
      switch (value) {
        case 0: return NOT_SET_AUTOMATIC;
        case 1: return ALWAYS;
        case 2: return NEVER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ChevronStyle>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ChevronStyle> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ChevronStyle>() {
            @java.lang.Override
            public ChevronStyle findValueByNumber(int number) {
              return ChevronStyle.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return ChevronStyleVerifier.INSTANCE;
    }

    private static final class ChevronStyleVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new ChevronStyleVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return ChevronStyle.forNumber(number) != null;
            }
          };

    private final int value;

    private ChevronStyle(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:autofill_assistant.VerticalExpanderViewProto.ChevronStyle)
  }

  private int bitField0_;
  public static final int TITLE_VIEW_FIELD_NUMBER = 1;
  private org.chromium.chrome.browser.autofill_assistant.proto.ViewProto titleView_;
  /**
   * <pre>
   * The view to show in the expander title.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewProto title_view = 1;</code>
   */
  @java.lang.Override
  public boolean hasTitleView() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The view to show in the expander title.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewProto title_view = 1;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ViewProto getTitleView() {
    return titleView_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ViewProto.getDefaultInstance() : titleView_;
  }
  /**
   * <pre>
   * The view to show in the expander title.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewProto title_view = 1;</code>
   */
  private void setTitleView(org.chromium.chrome.browser.autofill_assistant.proto.ViewProto value) {
    value.getClass();
  titleView_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * The view to show in the expander title.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewProto title_view = 1;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeTitleView(org.chromium.chrome.browser.autofill_assistant.proto.ViewProto value) {
    value.getClass();
  if (titleView_ != null &&
        titleView_ != org.chromium.chrome.browser.autofill_assistant.proto.ViewProto.getDefaultInstance()) {
      titleView_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ViewProto.newBuilder(titleView_).mergeFrom(value).buildPartial();
    } else {
      titleView_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * The view to show in the expander title.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewProto title_view = 1;</code>
   */
  private void clearTitleView() {  titleView_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int COLLAPSED_VIEW_FIELD_NUMBER = 2;
  private org.chromium.chrome.browser.autofill_assistant.proto.ViewProto collapsedView_;
  /**
   * <pre>
   * The view to show in the collapsed state.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewProto collapsed_view = 2;</code>
   */
  @java.lang.Override
  public boolean hasCollapsedView() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The view to show in the collapsed state.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewProto collapsed_view = 2;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ViewProto getCollapsedView() {
    return collapsedView_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ViewProto.getDefaultInstance() : collapsedView_;
  }
  /**
   * <pre>
   * The view to show in the collapsed state.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewProto collapsed_view = 2;</code>
   */
  private void setCollapsedView(org.chromium.chrome.browser.autofill_assistant.proto.ViewProto value) {
    value.getClass();
  collapsedView_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <pre>
   * The view to show in the collapsed state.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewProto collapsed_view = 2;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeCollapsedView(org.chromium.chrome.browser.autofill_assistant.proto.ViewProto value) {
    value.getClass();
  if (collapsedView_ != null &&
        collapsedView_ != org.chromium.chrome.browser.autofill_assistant.proto.ViewProto.getDefaultInstance()) {
      collapsedView_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ViewProto.newBuilder(collapsedView_).mergeFrom(value).buildPartial();
    } else {
      collapsedView_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * The view to show in the collapsed state.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewProto collapsed_view = 2;</code>
   */
  private void clearCollapsedView() {  collapsedView_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int EXPANDED_VIEW_FIELD_NUMBER = 3;
  private org.chromium.chrome.browser.autofill_assistant.proto.ViewProto expandedView_;
  /**
   * <pre>
   * The view to show in the expanded state.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewProto expanded_view = 3;</code>
   */
  @java.lang.Override
  public boolean hasExpandedView() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * The view to show in the expanded state.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewProto expanded_view = 3;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ViewProto getExpandedView() {
    return expandedView_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ViewProto.getDefaultInstance() : expandedView_;
  }
  /**
   * <pre>
   * The view to show in the expanded state.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewProto expanded_view = 3;</code>
   */
  private void setExpandedView(org.chromium.chrome.browser.autofill_assistant.proto.ViewProto value) {
    value.getClass();
  expandedView_ = value;
    bitField0_ |= 0x00000004;
    }
  /**
   * <pre>
   * The view to show in the expanded state.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewProto expanded_view = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeExpandedView(org.chromium.chrome.browser.autofill_assistant.proto.ViewProto value) {
    value.getClass();
  if (expandedView_ != null &&
        expandedView_ != org.chromium.chrome.browser.autofill_assistant.proto.ViewProto.getDefaultInstance()) {
      expandedView_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ViewProto.newBuilder(expandedView_).mergeFrom(value).buildPartial();
    } else {
      expandedView_ = value;
    }
    bitField0_ |= 0x00000004;
  }
  /**
   * <pre>
   * The view to show in the expanded state.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewProto expanded_view = 3;</code>
   */
  private void clearExpandedView() {  expandedView_ = null;
    bitField0_ = (bitField0_ & ~0x00000004);
  }

  public static final int CHEVRON_STYLE_FIELD_NUMBER = 4;
  private int chevronStyle_;
  /**
   * <pre>
   * The chevron style controls when to show the expand/collapse chevron.
   * </pre>
   *
   * <code>optional .autofill_assistant.VerticalExpanderViewProto.ChevronStyle chevron_style = 4;</code>
   * @return Whether the chevronStyle field is set.
   */
  @java.lang.Override
  public boolean hasChevronStyle() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * The chevron style controls when to show the expand/collapse chevron.
   * </pre>
   *
   * <code>optional .autofill_assistant.VerticalExpanderViewProto.ChevronStyle chevron_style = 4;</code>
   * @return The chevronStyle.
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto.ChevronStyle getChevronStyle() {
    org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto.ChevronStyle result = org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto.ChevronStyle.forNumber(chevronStyle_);
    return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto.ChevronStyle.NOT_SET_AUTOMATIC : result;
  }
  /**
   * <pre>
   * The chevron style controls when to show the expand/collapse chevron.
   * </pre>
   *
   * <code>optional .autofill_assistant.VerticalExpanderViewProto.ChevronStyle chevron_style = 4;</code>
   * @param value The chevronStyle to set.
   */
  private void setChevronStyle(org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto.ChevronStyle value) {
    chevronStyle_ = value.getNumber();
    bitField0_ |= 0x00000008;
  }
  /**
   * <pre>
   * The chevron style controls when to show the expand/collapse chevron.
   * </pre>
   *
   * <code>optional .autofill_assistant.VerticalExpanderViewProto.ChevronStyle chevron_style = 4;</code>
   */
  private void clearChevronStyle() {
    bitField0_ = (bitField0_ & ~0x00000008);
    chevronStyle_ = 0;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * A vertical expander is a special type of vertical linear layout. It has two
   * expansion states (expanded vs. collapsed) and toggles between them by tapping
   * the title widget. For user guidance, a chevron is shown in the title to
   * indicate the current state.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.VerticalExpanderViewProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.VerticalExpanderViewProto)
      org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The view to show in the expander title.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto title_view = 1;</code>
     */
    @java.lang.Override
    public boolean hasTitleView() {
      return instance.hasTitleView();
    }
    /**
     * <pre>
     * The view to show in the expander title.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto title_view = 1;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ViewProto getTitleView() {
      return instance.getTitleView();
    }
    /**
     * <pre>
     * The view to show in the expander title.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto title_view = 1;</code>
     */
    public Builder setTitleView(org.chromium.chrome.browser.autofill_assistant.proto.ViewProto value) {
      copyOnWrite();
      instance.setTitleView(value);
      return this;
      }
    /**
     * <pre>
     * The view to show in the expander title.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto title_view = 1;</code>
     */
    public Builder setTitleView(
        org.chromium.chrome.browser.autofill_assistant.proto.ViewProto.Builder builderForValue) {
      copyOnWrite();
      instance.setTitleView(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The view to show in the expander title.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto title_view = 1;</code>
     */
    public Builder mergeTitleView(org.chromium.chrome.browser.autofill_assistant.proto.ViewProto value) {
      copyOnWrite();
      instance.mergeTitleView(value);
      return this;
    }
    /**
     * <pre>
     * The view to show in the expander title.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto title_view = 1;</code>
     */
    public Builder clearTitleView() {  copyOnWrite();
      instance.clearTitleView();
      return this;
    }

    /**
     * <pre>
     * The view to show in the collapsed state.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto collapsed_view = 2;</code>
     */
    @java.lang.Override
    public boolean hasCollapsedView() {
      return instance.hasCollapsedView();
    }
    /**
     * <pre>
     * The view to show in the collapsed state.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto collapsed_view = 2;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ViewProto getCollapsedView() {
      return instance.getCollapsedView();
    }
    /**
     * <pre>
     * The view to show in the collapsed state.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto collapsed_view = 2;</code>
     */
    public Builder setCollapsedView(org.chromium.chrome.browser.autofill_assistant.proto.ViewProto value) {
      copyOnWrite();
      instance.setCollapsedView(value);
      return this;
      }
    /**
     * <pre>
     * The view to show in the collapsed state.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto collapsed_view = 2;</code>
     */
    public Builder setCollapsedView(
        org.chromium.chrome.browser.autofill_assistant.proto.ViewProto.Builder builderForValue) {
      copyOnWrite();
      instance.setCollapsedView(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The view to show in the collapsed state.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto collapsed_view = 2;</code>
     */
    public Builder mergeCollapsedView(org.chromium.chrome.browser.autofill_assistant.proto.ViewProto value) {
      copyOnWrite();
      instance.mergeCollapsedView(value);
      return this;
    }
    /**
     * <pre>
     * The view to show in the collapsed state.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto collapsed_view = 2;</code>
     */
    public Builder clearCollapsedView() {  copyOnWrite();
      instance.clearCollapsedView();
      return this;
    }

    /**
     * <pre>
     * The view to show in the expanded state.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto expanded_view = 3;</code>
     */
    @java.lang.Override
    public boolean hasExpandedView() {
      return instance.hasExpandedView();
    }
    /**
     * <pre>
     * The view to show in the expanded state.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto expanded_view = 3;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ViewProto getExpandedView() {
      return instance.getExpandedView();
    }
    /**
     * <pre>
     * The view to show in the expanded state.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto expanded_view = 3;</code>
     */
    public Builder setExpandedView(org.chromium.chrome.browser.autofill_assistant.proto.ViewProto value) {
      copyOnWrite();
      instance.setExpandedView(value);
      return this;
      }
    /**
     * <pre>
     * The view to show in the expanded state.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto expanded_view = 3;</code>
     */
    public Builder setExpandedView(
        org.chromium.chrome.browser.autofill_assistant.proto.ViewProto.Builder builderForValue) {
      copyOnWrite();
      instance.setExpandedView(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The view to show in the expanded state.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto expanded_view = 3;</code>
     */
    public Builder mergeExpandedView(org.chromium.chrome.browser.autofill_assistant.proto.ViewProto value) {
      copyOnWrite();
      instance.mergeExpandedView(value);
      return this;
    }
    /**
     * <pre>
     * The view to show in the expanded state.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewProto expanded_view = 3;</code>
     */
    public Builder clearExpandedView() {  copyOnWrite();
      instance.clearExpandedView();
      return this;
    }

    /**
     * <pre>
     * The chevron style controls when to show the expand/collapse chevron.
     * </pre>
     *
     * <code>optional .autofill_assistant.VerticalExpanderViewProto.ChevronStyle chevron_style = 4;</code>
     * @return Whether the chevronStyle field is set.
     */
    @java.lang.Override
    public boolean hasChevronStyle() {
      return instance.hasChevronStyle();
    }
    /**
     * <pre>
     * The chevron style controls when to show the expand/collapse chevron.
     * </pre>
     *
     * <code>optional .autofill_assistant.VerticalExpanderViewProto.ChevronStyle chevron_style = 4;</code>
     * @return The chevronStyle.
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto.ChevronStyle getChevronStyle() {
      return instance.getChevronStyle();
    }
    /**
     * <pre>
     * The chevron style controls when to show the expand/collapse chevron.
     * </pre>
     *
     * <code>optional .autofill_assistant.VerticalExpanderViewProto.ChevronStyle chevron_style = 4;</code>
     * @param value The enum numeric value on the wire for chevronStyle to set.
     * @return This builder for chaining.
     */
    public Builder setChevronStyle(org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto.ChevronStyle value) {
      copyOnWrite();
      instance.setChevronStyle(value);
      return this;
    }
    /**
     * <pre>
     * The chevron style controls when to show the expand/collapse chevron.
     * </pre>
     *
     * <code>optional .autofill_assistant.VerticalExpanderViewProto.ChevronStyle chevron_style = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearChevronStyle() {
      copyOnWrite();
      instance.clearChevronStyle();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.VerticalExpanderViewProto)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "titleView_",
            "collapsedView_",
            "expandedView_",
            "chevronStyle_",
            org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto.ChevronStyle.internalGetVerifier(),
          };
          java.lang.String info =
              "\u0001\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
              "\u1009\u0001\u0003\u1009\u0002\u0004\u100c\u0003";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.VerticalExpanderViewProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto DEFAULT_INSTANCE;
  static {
    VerticalExpanderViewProto defaultInstance = new VerticalExpanderViewProto();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      VerticalExpanderViewProto.class, defaultInstance);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.VerticalExpanderViewProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<VerticalExpanderViewProto> PARSER;

  public static com.google.protobuf.Parser<VerticalExpanderViewProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

