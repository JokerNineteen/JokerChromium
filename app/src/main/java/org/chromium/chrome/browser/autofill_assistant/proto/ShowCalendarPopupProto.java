// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: generic_ui.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Displays a calendar popup that lets the user select a date.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.ShowCalendarPopupProto}
 */
public  final class ShowCalendarPopupProto extends
    com.google.protobuf.GeneratedMessageLite<
        ShowCalendarPopupProto, ShowCalendarPopupProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.ShowCalendarPopupProto)
    ShowCalendarPopupProtoOrBuilder {
  private ShowCalendarPopupProto() {
    dateModelIdentifier_ = "";
  }
  private int bitField0_;
  public static final int DATE_MODEL_IDENTIFIER_FIELD_NUMBER = 1;
  private java.lang.String dateModelIdentifier_;
  /**
   * <pre>
   * The date model identifier (both input and output). Must point to a single
   * Date. If not set, the calendar will default to the current date.
   * </pre>
   *
   * <code>optional string date_model_identifier = 1;</code>
   * @return Whether the dateModelIdentifier field is set.
   */
  @java.lang.Override
  public boolean hasDateModelIdentifier() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The date model identifier (both input and output). Must point to a single
   * Date. If not set, the calendar will default to the current date.
   * </pre>
   *
   * <code>optional string date_model_identifier = 1;</code>
   * @return The dateModelIdentifier.
   */
  @java.lang.Override
  public java.lang.String getDateModelIdentifier() {
    return dateModelIdentifier_;
  }
  /**
   * <pre>
   * The date model identifier (both input and output). Must point to a single
   * Date. If not set, the calendar will default to the current date.
   * </pre>
   *
   * <code>optional string date_model_identifier = 1;</code>
   * @return The bytes for dateModelIdentifier.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDateModelIdentifierBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(dateModelIdentifier_);
  }
  /**
   * <pre>
   * The date model identifier (both input and output). Must point to a single
   * Date. If not set, the calendar will default to the current date.
   * </pre>
   *
   * <code>optional string date_model_identifier = 1;</code>
   * @param value The dateModelIdentifier to set.
   */
  private void setDateModelIdentifier(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000001;
    dateModelIdentifier_ = value;
  }
  /**
   * <pre>
   * The date model identifier (both input and output). Must point to a single
   * Date. If not set, the calendar will default to the current date.
   * </pre>
   *
   * <code>optional string date_model_identifier = 1;</code>
   */
  private void clearDateModelIdentifier() {
    bitField0_ = (bitField0_ & ~0x00000001);
    dateModelIdentifier_ = getDefaultInstance().getDateModelIdentifier();
  }
  /**
   * <pre>
   * The date model identifier (both input and output). Must point to a single
   * Date. If not set, the calendar will default to the current date.
   * </pre>
   *
   * <code>optional string date_model_identifier = 1;</code>
   * @param value The bytes for dateModelIdentifier to set.
   */
  private void setDateModelIdentifierBytes(
      com.google.protobuf.ByteString value) {
    dateModelIdentifier_ = value.toStringUtf8();
    bitField0_ |= 0x00000001;
  }

  public static final int MIN_DATE_FIELD_NUMBER = 4;
  private org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto minDate_;
  /**
   * <pre>
   * The minimum allowed date. Must point to a single Date.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueReferenceProto min_date = 4;</code>
   */
  @java.lang.Override
  public boolean hasMinDate() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The minimum allowed date. Must point to a single Date.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueReferenceProto min_date = 4;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto getMinDate() {
    return minDate_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto.getDefaultInstance() : minDate_;
  }
  /**
   * <pre>
   * The minimum allowed date. Must point to a single Date.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueReferenceProto min_date = 4;</code>
   */
  private void setMinDate(org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto value) {
    value.getClass();
  minDate_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <pre>
   * The minimum allowed date. Must point to a single Date.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueReferenceProto min_date = 4;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeMinDate(org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto value) {
    value.getClass();
  if (minDate_ != null &&
        minDate_ != org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto.getDefaultInstance()) {
      minDate_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto.newBuilder(minDate_).mergeFrom(value).buildPartial();
    } else {
      minDate_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * The minimum allowed date. Must point to a single Date.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueReferenceProto min_date = 4;</code>
   */
  private void clearMinDate() {  minDate_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int MAX_DATE_FIELD_NUMBER = 5;
  private org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto maxDate_;
  /**
   * <pre>
   * The maximum allowed date. Must point to a single Date.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueReferenceProto max_date = 5;</code>
   */
  @java.lang.Override
  public boolean hasMaxDate() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * The maximum allowed date. Must point to a single Date.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueReferenceProto max_date = 5;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto getMaxDate() {
    return maxDate_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto.getDefaultInstance() : maxDate_;
  }
  /**
   * <pre>
   * The maximum allowed date. Must point to a single Date.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueReferenceProto max_date = 5;</code>
   */
  private void setMaxDate(org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto value) {
    value.getClass();
  maxDate_ = value;
    bitField0_ |= 0x00000004;
    }
  /**
   * <pre>
   * The maximum allowed date. Must point to a single Date.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueReferenceProto max_date = 5;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeMaxDate(org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto value) {
    value.getClass();
  if (maxDate_ != null &&
        maxDate_ != org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto.getDefaultInstance()) {
      maxDate_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto.newBuilder(maxDate_).mergeFrom(value).buildPartial();
    } else {
      maxDate_ = value;
    }
    bitField0_ |= 0x00000004;
  }
  /**
   * <pre>
   * The maximum allowed date. Must point to a single Date.
   * </pre>
   *
   * <code>optional .autofill_assistant.ValueReferenceProto max_date = 5;</code>
   */
  private void clearMaxDate() {  maxDate_ = null;
    bitField0_ = (bitField0_ & ~0x00000004);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Displays a calendar popup that lets the user select a date.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.ShowCalendarPopupProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.ShowCalendarPopupProto)
      org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The date model identifier (both input and output). Must point to a single
     * Date. If not set, the calendar will default to the current date.
     * </pre>
     *
     * <code>optional string date_model_identifier = 1;</code>
     * @return Whether the dateModelIdentifier field is set.
     */
    @java.lang.Override
    public boolean hasDateModelIdentifier() {
      return instance.hasDateModelIdentifier();
    }
    /**
     * <pre>
     * The date model identifier (both input and output). Must point to a single
     * Date. If not set, the calendar will default to the current date.
     * </pre>
     *
     * <code>optional string date_model_identifier = 1;</code>
     * @return The dateModelIdentifier.
     */
    @java.lang.Override
    public java.lang.String getDateModelIdentifier() {
      return instance.getDateModelIdentifier();
    }
    /**
     * <pre>
     * The date model identifier (both input and output). Must point to a single
     * Date. If not set, the calendar will default to the current date.
     * </pre>
     *
     * <code>optional string date_model_identifier = 1;</code>
     * @return The bytes for dateModelIdentifier.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDateModelIdentifierBytes() {
      return instance.getDateModelIdentifierBytes();
    }
    /**
     * <pre>
     * The date model identifier (both input and output). Must point to a single
     * Date. If not set, the calendar will default to the current date.
     * </pre>
     *
     * <code>optional string date_model_identifier = 1;</code>
     * @param value The dateModelIdentifier to set.
     * @return This builder for chaining.
     */
    public Builder setDateModelIdentifier(
        java.lang.String value) {
      copyOnWrite();
      instance.setDateModelIdentifier(value);
      return this;
    }
    /**
     * <pre>
     * The date model identifier (both input and output). Must point to a single
     * Date. If not set, the calendar will default to the current date.
     * </pre>
     *
     * <code>optional string date_model_identifier = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearDateModelIdentifier() {
      copyOnWrite();
      instance.clearDateModelIdentifier();
      return this;
    }
    /**
     * <pre>
     * The date model identifier (both input and output). Must point to a single
     * Date. If not set, the calendar will default to the current date.
     * </pre>
     *
     * <code>optional string date_model_identifier = 1;</code>
     * @param value The bytes for dateModelIdentifier to set.
     * @return This builder for chaining.
     */
    public Builder setDateModelIdentifierBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDateModelIdentifierBytes(value);
      return this;
    }

    /**
     * <pre>
     * The minimum allowed date. Must point to a single Date.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueReferenceProto min_date = 4;</code>
     */
    @java.lang.Override
    public boolean hasMinDate() {
      return instance.hasMinDate();
    }
    /**
     * <pre>
     * The minimum allowed date. Must point to a single Date.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueReferenceProto min_date = 4;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto getMinDate() {
      return instance.getMinDate();
    }
    /**
     * <pre>
     * The minimum allowed date. Must point to a single Date.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueReferenceProto min_date = 4;</code>
     */
    public Builder setMinDate(org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto value) {
      copyOnWrite();
      instance.setMinDate(value);
      return this;
      }
    /**
     * <pre>
     * The minimum allowed date. Must point to a single Date.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueReferenceProto min_date = 4;</code>
     */
    public Builder setMinDate(
        org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto.Builder builderForValue) {
      copyOnWrite();
      instance.setMinDate(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The minimum allowed date. Must point to a single Date.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueReferenceProto min_date = 4;</code>
     */
    public Builder mergeMinDate(org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto value) {
      copyOnWrite();
      instance.mergeMinDate(value);
      return this;
    }
    /**
     * <pre>
     * The minimum allowed date. Must point to a single Date.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueReferenceProto min_date = 4;</code>
     */
    public Builder clearMinDate() {  copyOnWrite();
      instance.clearMinDate();
      return this;
    }

    /**
     * <pre>
     * The maximum allowed date. Must point to a single Date.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueReferenceProto max_date = 5;</code>
     */
    @java.lang.Override
    public boolean hasMaxDate() {
      return instance.hasMaxDate();
    }
    /**
     * <pre>
     * The maximum allowed date. Must point to a single Date.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueReferenceProto max_date = 5;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto getMaxDate() {
      return instance.getMaxDate();
    }
    /**
     * <pre>
     * The maximum allowed date. Must point to a single Date.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueReferenceProto max_date = 5;</code>
     */
    public Builder setMaxDate(org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto value) {
      copyOnWrite();
      instance.setMaxDate(value);
      return this;
      }
    /**
     * <pre>
     * The maximum allowed date. Must point to a single Date.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueReferenceProto max_date = 5;</code>
     */
    public Builder setMaxDate(
        org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto.Builder builderForValue) {
      copyOnWrite();
      instance.setMaxDate(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The maximum allowed date. Must point to a single Date.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueReferenceProto max_date = 5;</code>
     */
    public Builder mergeMaxDate(org.chromium.chrome.browser.autofill_assistant.proto.ValueReferenceProto value) {
      copyOnWrite();
      instance.mergeMaxDate(value);
      return this;
    }
    /**
     * <pre>
     * The maximum allowed date. Must point to a single Date.
     * </pre>
     *
     * <code>optional .autofill_assistant.ValueReferenceProto max_date = 5;</code>
     */
    public Builder clearMaxDate() {  copyOnWrite();
      instance.clearMaxDate();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.ShowCalendarPopupProto)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "dateModelIdentifier_",
            "minDate_",
            "maxDate_",
          };
          java.lang.String info =
              "\u0001\u0003\u0000\u0001\u0001\u0005\u0003\u0000\u0000\u0000\u0001\u1008\u0000\u0004" +
              "\u1009\u0001\u0005\u1009\u0002";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.ShowCalendarPopupProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto DEFAULT_INSTANCE;
  static {
    ShowCalendarPopupProto defaultInstance = new ShowCalendarPopupProto();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ShowCalendarPopupProto.class, defaultInstance);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ShowCalendarPopupProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ShowCalendarPopupProto> PARSER;

  public static com.google.protobuf.Parser<ShowCalendarPopupProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

