// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Supported script.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.SupportedScriptProto}
 */
public  final class SupportedScriptProto extends
    com.google.protobuf.GeneratedMessageLite<
        SupportedScriptProto, SupportedScriptProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.SupportedScriptProto)
    SupportedScriptProtoOrBuilder {
  private SupportedScriptProto() {
    path_ = "";
  }
  public interface PresentationProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.SupportedScriptProto.PresentationProto)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Precondition contains a set of conditions that must hold for a script to
     * be executed. No precondition means that a script can run in any case.
     * </pre>
     *
     * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
     * @return Whether the precondition field is set.
     */
    boolean hasPrecondition();
    /**
     * <pre>
     * Precondition contains a set of conditions that must hold for a script to
     * be executed. No precondition means that a script can run in any case.
     * </pre>
     *
     * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
     * @return The precondition.
     */
    org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto getPrecondition();

    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     * @return Whether the initialPrompt field is set.
     */
    boolean hasInitialPrompt();
    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     * @return The initialPrompt.
     */
    java.lang.String getInitialPrompt();
    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     * @return The bytes for initialPrompt.
     */
    com.google.protobuf.ByteString
        getInitialPromptBytes();

    /**
     * <pre>
     * Display priority of the script. Lowest number has highest priority, which
     * means a script with priority 0 should be displayed before a script with
     * priority 1.
     * </pre>
     *
     * <code>optional int32 priority = 5;</code>
     * @return Whether the priority field is set.
     */
    boolean hasPriority();
    /**
     * <pre>
     * Display priority of the script. Lowest number has highest priority, which
     * means a script with priority 0 should be displayed before a script with
     * priority 1.
     * </pre>
     *
     * <code>optional int32 priority = 5;</code>
     * @return The priority.
     */
    int getPriority();

    /**
     * <pre>
     * An optional chip to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipProto chip = 12;</code>
     * @return Whether the chip field is set.
     */
    boolean hasChip();
    /**
     * <pre>
     * An optional chip to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipProto chip = 12;</code>
     * @return The chip.
     */
    org.chromium.chrome.browser.autofill_assistant.proto.ChipProto getChip();

    /**
     * <pre>
     * Optionally map this script to a direct action.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto direct_action = 13;</code>
     * @return Whether the directAction field is set.
     */
    boolean hasDirectAction();
    /**
     * <pre>
     * Optionally map this script to a direct action.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto direct_action = 13;</code>
     * @return The directAction.
     */
    org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto getDirectAction();

    /**
     * <pre>
     * When set to true this script can be run in 'autostart mode'.
     * </pre>
     *
     * <code>optional bool autostart = 8;</code>
     * @return Whether the autostart field is set.
     */
    boolean hasAutostart();
    /**
     * <pre>
     * When set to true this script can be run in 'autostart mode'.
     * </pre>
     *
     * <code>optional bool autostart = 8;</code>
     * @return The autostart.
     */
    boolean getAutostart();

    /**
     * <pre>
     * When set to true this script will be run from WaitForDom actions with
     * allow_interrupt=true.
     * </pre>
     *
     * <code>optional bool interrupt = 9;</code>
     * @return Whether the interrupt field is set.
     */
    boolean hasInterrupt();
    /**
     * <pre>
     * When set to true this script will be run from WaitForDom actions with
     * allow_interrupt=true.
     * </pre>
     *
     * <code>optional bool interrupt = 9;</code>
     * @return The interrupt.
     */
    boolean getInterrupt();

    /**
     * <pre>
     * Message to show once the script has been started. This is shown while
     * loading the actions.
     * </pre>
     *
     * <code>optional string start_message = 14;</code>
     * @return Whether the startMessage field is set.
     */
    boolean hasStartMessage();
    /**
     * <pre>
     * Message to show once the script has been started. This is shown while
     * loading the actions.
     * </pre>
     *
     * <code>optional string start_message = 14;</code>
     * @return The startMessage.
     */
    java.lang.String getStartMessage();
    /**
     * <pre>
     * Message to show once the script has been started. This is shown while
     * loading the actions.
     * </pre>
     *
     * <code>optional string start_message = 14;</code>
     * @return The bytes for startMessage.
     */
    com.google.protobuf.ByteString
        getStartMessageBytes();

    /**
     * <pre>
     * Show the UI if it's not shown yet. Setting this to false is useful for
     * scripts started by direct actions.
     * </pre>
     *
     * <code>optional bool needs_ui = 15 [default = true];</code>
     * @return Whether the needsUi field is set.
     */
    boolean hasNeedsUi();
    /**
     * <pre>
     * Show the UI if it's not shown yet. Setting this to false is useful for
     * scripts started by direct actions.
     * </pre>
     *
     * <code>optional bool needs_ui = 15 [default = true];</code>
     * @return The needsUi.
     */
    boolean getNeedsUi();
  }
  /**
   * Protobuf type {@code autofill_assistant.SupportedScriptProto.PresentationProto}
   */
  public  static final class PresentationProto extends
      com.google.protobuf.GeneratedMessageLite<
          PresentationProto, PresentationProto.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.SupportedScriptProto.PresentationProto)
      PresentationProtoOrBuilder {
    private PresentationProto() {
      initialPrompt_ = "";
      startMessage_ = "";
      needsUi_ = true;
    }
    private int bitField0_;
    public static final int PRECONDITION_FIELD_NUMBER = 3;
    private org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto precondition_;
    /**
     * <pre>
     * Precondition contains a set of conditions that must hold for a script to
     * be executed. No precondition means that a script can run in any case.
     * </pre>
     *
     * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
     */
    @java.lang.Override
    public boolean hasPrecondition() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Precondition contains a set of conditions that must hold for a script to
     * be executed. No precondition means that a script can run in any case.
     * </pre>
     *
     * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto getPrecondition() {
      return precondition_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto.getDefaultInstance() : precondition_;
    }
    /**
     * <pre>
     * Precondition contains a set of conditions that must hold for a script to
     * be executed. No precondition means that a script can run in any case.
     * </pre>
     *
     * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
     */
    private void setPrecondition(org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto value) {
      value.getClass();
  precondition_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * Precondition contains a set of conditions that must hold for a script to
     * be executed. No precondition means that a script can run in any case.
     * </pre>
     *
     * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergePrecondition(org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto value) {
      value.getClass();
  if (precondition_ != null &&
          precondition_ != org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto.getDefaultInstance()) {
        precondition_ =
          org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto.newBuilder(precondition_).mergeFrom(value).buildPartial();
      } else {
        precondition_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * Precondition contains a set of conditions that must hold for a script to
     * be executed. No precondition means that a script can run in any case.
     * </pre>
     *
     * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
     */
    private void clearPrecondition() {  precondition_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int INITIAL_PROMPT_FIELD_NUMBER = 4;
    private java.lang.String initialPrompt_;
    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     * @return Whether the initialPrompt field is set.
     */
    @java.lang.Override
    public boolean hasInitialPrompt() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     * @return The initialPrompt.
     */
    @java.lang.Override
    public java.lang.String getInitialPrompt() {
      return initialPrompt_;
    }
    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     * @return The bytes for initialPrompt.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getInitialPromptBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(initialPrompt_);
    }
    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     * @param value The initialPrompt to set.
     */
    private void setInitialPrompt(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000002;
      initialPrompt_ = value;
    }
    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     */
    private void clearInitialPrompt() {
      bitField0_ = (bitField0_ & ~0x00000002);
      initialPrompt_ = getDefaultInstance().getInitialPrompt();
    }
    /**
     * <pre>
     * Text display at the same time as the script is proposed. If more than one
     * script has an initial prompt, the prompt of the highest-priority script
     * wins.
     * </pre>
     *
     * <code>optional string initial_prompt = 4;</code>
     * @param value The bytes for initialPrompt to set.
     */
    private void setInitialPromptBytes(
        com.google.protobuf.ByteString value) {
      initialPrompt_ = value.toStringUtf8();
      bitField0_ |= 0x00000002;
    }

    public static final int PRIORITY_FIELD_NUMBER = 5;
    private int priority_;
    /**
     * <pre>
     * Display priority of the script. Lowest number has highest priority, which
     * means a script with priority 0 should be displayed before a script with
     * priority 1.
     * </pre>
     *
     * <code>optional int32 priority = 5;</code>
     * @return Whether the priority field is set.
     */
    @java.lang.Override
    public boolean hasPriority() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Display priority of the script. Lowest number has highest priority, which
     * means a script with priority 0 should be displayed before a script with
     * priority 1.
     * </pre>
     *
     * <code>optional int32 priority = 5;</code>
     * @return The priority.
     */
    @java.lang.Override
    public int getPriority() {
      return priority_;
    }
    /**
     * <pre>
     * Display priority of the script. Lowest number has highest priority, which
     * means a script with priority 0 should be displayed before a script with
     * priority 1.
     * </pre>
     *
     * <code>optional int32 priority = 5;</code>
     * @param value The priority to set.
     */
    private void setPriority(int value) {
      bitField0_ |= 0x00000004;
      priority_ = value;
    }
    /**
     * <pre>
     * Display priority of the script. Lowest number has highest priority, which
     * means a script with priority 0 should be displayed before a script with
     * priority 1.
     * </pre>
     *
     * <code>optional int32 priority = 5;</code>
     */
    private void clearPriority() {
      bitField0_ = (bitField0_ & ~0x00000004);
      priority_ = 0;
    }

    public static final int CHIP_FIELD_NUMBER = 12;
    private org.chromium.chrome.browser.autofill_assistant.proto.ChipProto chip_;
    /**
     * <pre>
     * An optional chip to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipProto chip = 12;</code>
     */
    @java.lang.Override
    public boolean hasChip() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * An optional chip to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipProto chip = 12;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.ChipProto getChip() {
      return chip_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ChipProto.getDefaultInstance() : chip_;
    }
    /**
     * <pre>
     * An optional chip to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipProto chip = 12;</code>
     */
    private void setChip(org.chromium.chrome.browser.autofill_assistant.proto.ChipProto value) {
      value.getClass();
  chip_ = value;
      bitField0_ |= 0x00000008;
      }
    /**
     * <pre>
     * An optional chip to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipProto chip = 12;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeChip(org.chromium.chrome.browser.autofill_assistant.proto.ChipProto value) {
      value.getClass();
  if (chip_ != null &&
          chip_ != org.chromium.chrome.browser.autofill_assistant.proto.ChipProto.getDefaultInstance()) {
        chip_ =
          org.chromium.chrome.browser.autofill_assistant.proto.ChipProto.newBuilder(chip_).mergeFrom(value).buildPartial();
      } else {
        chip_ = value;
      }
      bitField0_ |= 0x00000008;
    }
    /**
     * <pre>
     * An optional chip to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipProto chip = 12;</code>
     */
    private void clearChip() {  chip_ = null;
      bitField0_ = (bitField0_ & ~0x00000008);
    }

    public static final int DIRECT_ACTION_FIELD_NUMBER = 13;
    private org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto directAction_;
    /**
     * <pre>
     * Optionally map this script to a direct action.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto direct_action = 13;</code>
     */
    @java.lang.Override
    public boolean hasDirectAction() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Optionally map this script to a direct action.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto direct_action = 13;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto getDirectAction() {
      return directAction_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto.getDefaultInstance() : directAction_;
    }
    /**
     * <pre>
     * Optionally map this script to a direct action.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto direct_action = 13;</code>
     */
    private void setDirectAction(org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto value) {
      value.getClass();
  directAction_ = value;
      bitField0_ |= 0x00000010;
      }
    /**
     * <pre>
     * Optionally map this script to a direct action.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto direct_action = 13;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeDirectAction(org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto value) {
      value.getClass();
  if (directAction_ != null &&
          directAction_ != org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto.getDefaultInstance()) {
        directAction_ =
          org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto.newBuilder(directAction_).mergeFrom(value).buildPartial();
      } else {
        directAction_ = value;
      }
      bitField0_ |= 0x00000010;
    }
    /**
     * <pre>
     * Optionally map this script to a direct action.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto direct_action = 13;</code>
     */
    private void clearDirectAction() {  directAction_ = null;
      bitField0_ = (bitField0_ & ~0x00000010);
    }

    public static final int AUTOSTART_FIELD_NUMBER = 8;
    private boolean autostart_;
    /**
     * <pre>
     * When set to true this script can be run in 'autostart mode'.
     * </pre>
     *
     * <code>optional bool autostart = 8;</code>
     * @return Whether the autostart field is set.
     */
    @java.lang.Override
    public boolean hasAutostart() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * When set to true this script can be run in 'autostart mode'.
     * </pre>
     *
     * <code>optional bool autostart = 8;</code>
     * @return The autostart.
     */
    @java.lang.Override
    public boolean getAutostart() {
      return autostart_;
    }
    /**
     * <pre>
     * When set to true this script can be run in 'autostart mode'.
     * </pre>
     *
     * <code>optional bool autostart = 8;</code>
     * @param value The autostart to set.
     */
    private void setAutostart(boolean value) {
      bitField0_ |= 0x00000020;
      autostart_ = value;
    }
    /**
     * <pre>
     * When set to true this script can be run in 'autostart mode'.
     * </pre>
     *
     * <code>optional bool autostart = 8;</code>
     */
    private void clearAutostart() {
      bitField0_ = (bitField0_ & ~0x00000020);
      autostart_ = false;
    }

    public static final int INTERRUPT_FIELD_NUMBER = 9;
    private boolean interrupt_;
    /**
     * <pre>
     * When set to true this script will be run from WaitForDom actions with
     * allow_interrupt=true.
     * </pre>
     *
     * <code>optional bool interrupt = 9;</code>
     * @return Whether the interrupt field is set.
     */
    @java.lang.Override
    public boolean hasInterrupt() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * When set to true this script will be run from WaitForDom actions with
     * allow_interrupt=true.
     * </pre>
     *
     * <code>optional bool interrupt = 9;</code>
     * @return The interrupt.
     */
    @java.lang.Override
    public boolean getInterrupt() {
      return interrupt_;
    }
    /**
     * <pre>
     * When set to true this script will be run from WaitForDom actions with
     * allow_interrupt=true.
     * </pre>
     *
     * <code>optional bool interrupt = 9;</code>
     * @param value The interrupt to set.
     */
    private void setInterrupt(boolean value) {
      bitField0_ |= 0x00000040;
      interrupt_ = value;
    }
    /**
     * <pre>
     * When set to true this script will be run from WaitForDom actions with
     * allow_interrupt=true.
     * </pre>
     *
     * <code>optional bool interrupt = 9;</code>
     */
    private void clearInterrupt() {
      bitField0_ = (bitField0_ & ~0x00000040);
      interrupt_ = false;
    }

    public static final int START_MESSAGE_FIELD_NUMBER = 14;
    private java.lang.String startMessage_;
    /**
     * <pre>
     * Message to show once the script has been started. This is shown while
     * loading the actions.
     * </pre>
     *
     * <code>optional string start_message = 14;</code>
     * @return Whether the startMessage field is set.
     */
    @java.lang.Override
    public boolean hasStartMessage() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Message to show once the script has been started. This is shown while
     * loading the actions.
     * </pre>
     *
     * <code>optional string start_message = 14;</code>
     * @return The startMessage.
     */
    @java.lang.Override
    public java.lang.String getStartMessage() {
      return startMessage_;
    }
    /**
     * <pre>
     * Message to show once the script has been started. This is shown while
     * loading the actions.
     * </pre>
     *
     * <code>optional string start_message = 14;</code>
     * @return The bytes for startMessage.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStartMessageBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(startMessage_);
    }
    /**
     * <pre>
     * Message to show once the script has been started. This is shown while
     * loading the actions.
     * </pre>
     *
     * <code>optional string start_message = 14;</code>
     * @param value The startMessage to set.
     */
    private void setStartMessage(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000080;
      startMessage_ = value;
    }
    /**
     * <pre>
     * Message to show once the script has been started. This is shown while
     * loading the actions.
     * </pre>
     *
     * <code>optional string start_message = 14;</code>
     */
    private void clearStartMessage() {
      bitField0_ = (bitField0_ & ~0x00000080);
      startMessage_ = getDefaultInstance().getStartMessage();
    }
    /**
     * <pre>
     * Message to show once the script has been started. This is shown while
     * loading the actions.
     * </pre>
     *
     * <code>optional string start_message = 14;</code>
     * @param value The bytes for startMessage to set.
     */
    private void setStartMessageBytes(
        com.google.protobuf.ByteString value) {
      startMessage_ = value.toStringUtf8();
      bitField0_ |= 0x00000080;
    }

    public static final int NEEDS_UI_FIELD_NUMBER = 15;
    private boolean needsUi_;
    /**
     * <pre>
     * Show the UI if it's not shown yet. Setting this to false is useful for
     * scripts started by direct actions.
     * </pre>
     *
     * <code>optional bool needs_ui = 15 [default = true];</code>
     * @return Whether the needsUi field is set.
     */
    @java.lang.Override
    public boolean hasNeedsUi() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Show the UI if it's not shown yet. Setting this to false is useful for
     * scripts started by direct actions.
     * </pre>
     *
     * <code>optional bool needs_ui = 15 [default = true];</code>
     * @return The needsUi.
     */
    @java.lang.Override
    public boolean getNeedsUi() {
      return needsUi_;
    }
    /**
     * <pre>
     * Show the UI if it's not shown yet. Setting this to false is useful for
     * scripts started by direct actions.
     * </pre>
     *
     * <code>optional bool needs_ui = 15 [default = true];</code>
     * @param value The needsUi to set.
     */
    private void setNeedsUi(boolean value) {
      bitField0_ |= 0x00000100;
      needsUi_ = value;
    }
    /**
     * <pre>
     * Show the UI if it's not shown yet. Setting this to false is useful for
     * scripts started by direct actions.
     * </pre>
     *
     * <code>optional bool needs_ui = 15 [default = true];</code>
     */
    private void clearNeedsUi() {
      bitField0_ = (bitField0_ & ~0x00000100);
      needsUi_ = true;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code autofill_assistant.SupportedScriptProto.PresentationProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.SupportedScriptProto.PresentationProto)
        org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProtoOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Precondition contains a set of conditions that must hold for a script to
       * be executed. No precondition means that a script can run in any case.
       * </pre>
       *
       * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
       */
      @java.lang.Override
      public boolean hasPrecondition() {
        return instance.hasPrecondition();
      }
      /**
       * <pre>
       * Precondition contains a set of conditions that must hold for a script to
       * be executed. No precondition means that a script can run in any case.
       * </pre>
       *
       * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
       */
      @java.lang.Override
      public org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto getPrecondition() {
        return instance.getPrecondition();
      }
      /**
       * <pre>
       * Precondition contains a set of conditions that must hold for a script to
       * be executed. No precondition means that a script can run in any case.
       * </pre>
       *
       * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
       */
      public Builder setPrecondition(org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto value) {
        copyOnWrite();
        instance.setPrecondition(value);
        return this;
        }
      /**
       * <pre>
       * Precondition contains a set of conditions that must hold for a script to
       * be executed. No precondition means that a script can run in any case.
       * </pre>
       *
       * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
       */
      public Builder setPrecondition(
          org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto.Builder builderForValue) {
        copyOnWrite();
        instance.setPrecondition(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Precondition contains a set of conditions that must hold for a script to
       * be executed. No precondition means that a script can run in any case.
       * </pre>
       *
       * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
       */
      public Builder mergePrecondition(org.chromium.chrome.browser.autofill_assistant.proto.ScriptPreconditionProto value) {
        copyOnWrite();
        instance.mergePrecondition(value);
        return this;
      }
      /**
       * <pre>
       * Precondition contains a set of conditions that must hold for a script to
       * be executed. No precondition means that a script can run in any case.
       * </pre>
       *
       * <code>optional .autofill_assistant.ScriptPreconditionProto precondition = 3;</code>
       */
      public Builder clearPrecondition() {  copyOnWrite();
        instance.clearPrecondition();
        return this;
      }

      /**
       * <pre>
       * Text display at the same time as the script is proposed. If more than one
       * script has an initial prompt, the prompt of the highest-priority script
       * wins.
       * </pre>
       *
       * <code>optional string initial_prompt = 4;</code>
       * @return Whether the initialPrompt field is set.
       */
      @java.lang.Override
      public boolean hasInitialPrompt() {
        return instance.hasInitialPrompt();
      }
      /**
       * <pre>
       * Text display at the same time as the script is proposed. If more than one
       * script has an initial prompt, the prompt of the highest-priority script
       * wins.
       * </pre>
       *
       * <code>optional string initial_prompt = 4;</code>
       * @return The initialPrompt.
       */
      @java.lang.Override
      public java.lang.String getInitialPrompt() {
        return instance.getInitialPrompt();
      }
      /**
       * <pre>
       * Text display at the same time as the script is proposed. If more than one
       * script has an initial prompt, the prompt of the highest-priority script
       * wins.
       * </pre>
       *
       * <code>optional string initial_prompt = 4;</code>
       * @return The bytes for initialPrompt.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getInitialPromptBytes() {
        return instance.getInitialPromptBytes();
      }
      /**
       * <pre>
       * Text display at the same time as the script is proposed. If more than one
       * script has an initial prompt, the prompt of the highest-priority script
       * wins.
       * </pre>
       *
       * <code>optional string initial_prompt = 4;</code>
       * @param value The initialPrompt to set.
       * @return This builder for chaining.
       */
      public Builder setInitialPrompt(
          java.lang.String value) {
        copyOnWrite();
        instance.setInitialPrompt(value);
        return this;
      }
      /**
       * <pre>
       * Text display at the same time as the script is proposed. If more than one
       * script has an initial prompt, the prompt of the highest-priority script
       * wins.
       * </pre>
       *
       * <code>optional string initial_prompt = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearInitialPrompt() {
        copyOnWrite();
        instance.clearInitialPrompt();
        return this;
      }
      /**
       * <pre>
       * Text display at the same time as the script is proposed. If more than one
       * script has an initial prompt, the prompt of the highest-priority script
       * wins.
       * </pre>
       *
       * <code>optional string initial_prompt = 4;</code>
       * @param value The bytes for initialPrompt to set.
       * @return This builder for chaining.
       */
      public Builder setInitialPromptBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setInitialPromptBytes(value);
        return this;
      }

      /**
       * <pre>
       * Display priority of the script. Lowest number has highest priority, which
       * means a script with priority 0 should be displayed before a script with
       * priority 1.
       * </pre>
       *
       * <code>optional int32 priority = 5;</code>
       * @return Whether the priority field is set.
       */
      @java.lang.Override
      public boolean hasPriority() {
        return instance.hasPriority();
      }
      /**
       * <pre>
       * Display priority of the script. Lowest number has highest priority, which
       * means a script with priority 0 should be displayed before a script with
       * priority 1.
       * </pre>
       *
       * <code>optional int32 priority = 5;</code>
       * @return The priority.
       */
      @java.lang.Override
      public int getPriority() {
        return instance.getPriority();
      }
      /**
       * <pre>
       * Display priority of the script. Lowest number has highest priority, which
       * means a script with priority 0 should be displayed before a script with
       * priority 1.
       * </pre>
       *
       * <code>optional int32 priority = 5;</code>
       * @param value The priority to set.
       * @return This builder for chaining.
       */
      public Builder setPriority(int value) {
        copyOnWrite();
        instance.setPriority(value);
        return this;
      }
      /**
       * <pre>
       * Display priority of the script. Lowest number has highest priority, which
       * means a script with priority 0 should be displayed before a script with
       * priority 1.
       * </pre>
       *
       * <code>optional int32 priority = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearPriority() {
        copyOnWrite();
        instance.clearPriority();
        return this;
      }

      /**
       * <pre>
       * An optional chip to display.
       * </pre>
       *
       * <code>optional .autofill_assistant.ChipProto chip = 12;</code>
       */
      @java.lang.Override
      public boolean hasChip() {
        return instance.hasChip();
      }
      /**
       * <pre>
       * An optional chip to display.
       * </pre>
       *
       * <code>optional .autofill_assistant.ChipProto chip = 12;</code>
       */
      @java.lang.Override
      public org.chromium.chrome.browser.autofill_assistant.proto.ChipProto getChip() {
        return instance.getChip();
      }
      /**
       * <pre>
       * An optional chip to display.
       * </pre>
       *
       * <code>optional .autofill_assistant.ChipProto chip = 12;</code>
       */
      public Builder setChip(org.chromium.chrome.browser.autofill_assistant.proto.ChipProto value) {
        copyOnWrite();
        instance.setChip(value);
        return this;
        }
      /**
       * <pre>
       * An optional chip to display.
       * </pre>
       *
       * <code>optional .autofill_assistant.ChipProto chip = 12;</code>
       */
      public Builder setChip(
          org.chromium.chrome.browser.autofill_assistant.proto.ChipProto.Builder builderForValue) {
        copyOnWrite();
        instance.setChip(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * An optional chip to display.
       * </pre>
       *
       * <code>optional .autofill_assistant.ChipProto chip = 12;</code>
       */
      public Builder mergeChip(org.chromium.chrome.browser.autofill_assistant.proto.ChipProto value) {
        copyOnWrite();
        instance.mergeChip(value);
        return this;
      }
      /**
       * <pre>
       * An optional chip to display.
       * </pre>
       *
       * <code>optional .autofill_assistant.ChipProto chip = 12;</code>
       */
      public Builder clearChip() {  copyOnWrite();
        instance.clearChip();
        return this;
      }

      /**
       * <pre>
       * Optionally map this script to a direct action.
       * </pre>
       *
       * <code>optional .autofill_assistant.DirectActionProto direct_action = 13;</code>
       */
      @java.lang.Override
      public boolean hasDirectAction() {
        return instance.hasDirectAction();
      }
      /**
       * <pre>
       * Optionally map this script to a direct action.
       * </pre>
       *
       * <code>optional .autofill_assistant.DirectActionProto direct_action = 13;</code>
       */
      @java.lang.Override
      public org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto getDirectAction() {
        return instance.getDirectAction();
      }
      /**
       * <pre>
       * Optionally map this script to a direct action.
       * </pre>
       *
       * <code>optional .autofill_assistant.DirectActionProto direct_action = 13;</code>
       */
      public Builder setDirectAction(org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto value) {
        copyOnWrite();
        instance.setDirectAction(value);
        return this;
        }
      /**
       * <pre>
       * Optionally map this script to a direct action.
       * </pre>
       *
       * <code>optional .autofill_assistant.DirectActionProto direct_action = 13;</code>
       */
      public Builder setDirectAction(
          org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto.Builder builderForValue) {
        copyOnWrite();
        instance.setDirectAction(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Optionally map this script to a direct action.
       * </pre>
       *
       * <code>optional .autofill_assistant.DirectActionProto direct_action = 13;</code>
       */
      public Builder mergeDirectAction(org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto value) {
        copyOnWrite();
        instance.mergeDirectAction(value);
        return this;
      }
      /**
       * <pre>
       * Optionally map this script to a direct action.
       * </pre>
       *
       * <code>optional .autofill_assistant.DirectActionProto direct_action = 13;</code>
       */
      public Builder clearDirectAction() {  copyOnWrite();
        instance.clearDirectAction();
        return this;
      }

      /**
       * <pre>
       * When set to true this script can be run in 'autostart mode'.
       * </pre>
       *
       * <code>optional bool autostart = 8;</code>
       * @return Whether the autostart field is set.
       */
      @java.lang.Override
      public boolean hasAutostart() {
        return instance.hasAutostart();
      }
      /**
       * <pre>
       * When set to true this script can be run in 'autostart mode'.
       * </pre>
       *
       * <code>optional bool autostart = 8;</code>
       * @return The autostart.
       */
      @java.lang.Override
      public boolean getAutostart() {
        return instance.getAutostart();
      }
      /**
       * <pre>
       * When set to true this script can be run in 'autostart mode'.
       * </pre>
       *
       * <code>optional bool autostart = 8;</code>
       * @param value The autostart to set.
       * @return This builder for chaining.
       */
      public Builder setAutostart(boolean value) {
        copyOnWrite();
        instance.setAutostart(value);
        return this;
      }
      /**
       * <pre>
       * When set to true this script can be run in 'autostart mode'.
       * </pre>
       *
       * <code>optional bool autostart = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearAutostart() {
        copyOnWrite();
        instance.clearAutostart();
        return this;
      }

      /**
       * <pre>
       * When set to true this script will be run from WaitForDom actions with
       * allow_interrupt=true.
       * </pre>
       *
       * <code>optional bool interrupt = 9;</code>
       * @return Whether the interrupt field is set.
       */
      @java.lang.Override
      public boolean hasInterrupt() {
        return instance.hasInterrupt();
      }
      /**
       * <pre>
       * When set to true this script will be run from WaitForDom actions with
       * allow_interrupt=true.
       * </pre>
       *
       * <code>optional bool interrupt = 9;</code>
       * @return The interrupt.
       */
      @java.lang.Override
      public boolean getInterrupt() {
        return instance.getInterrupt();
      }
      /**
       * <pre>
       * When set to true this script will be run from WaitForDom actions with
       * allow_interrupt=true.
       * </pre>
       *
       * <code>optional bool interrupt = 9;</code>
       * @param value The interrupt to set.
       * @return This builder for chaining.
       */
      public Builder setInterrupt(boolean value) {
        copyOnWrite();
        instance.setInterrupt(value);
        return this;
      }
      /**
       * <pre>
       * When set to true this script will be run from WaitForDom actions with
       * allow_interrupt=true.
       * </pre>
       *
       * <code>optional bool interrupt = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearInterrupt() {
        copyOnWrite();
        instance.clearInterrupt();
        return this;
      }

      /**
       * <pre>
       * Message to show once the script has been started. This is shown while
       * loading the actions.
       * </pre>
       *
       * <code>optional string start_message = 14;</code>
       * @return Whether the startMessage field is set.
       */
      @java.lang.Override
      public boolean hasStartMessage() {
        return instance.hasStartMessage();
      }
      /**
       * <pre>
       * Message to show once the script has been started. This is shown while
       * loading the actions.
       * </pre>
       *
       * <code>optional string start_message = 14;</code>
       * @return The startMessage.
       */
      @java.lang.Override
      public java.lang.String getStartMessage() {
        return instance.getStartMessage();
      }
      /**
       * <pre>
       * Message to show once the script has been started. This is shown while
       * loading the actions.
       * </pre>
       *
       * <code>optional string start_message = 14;</code>
       * @return The bytes for startMessage.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getStartMessageBytes() {
        return instance.getStartMessageBytes();
      }
      /**
       * <pre>
       * Message to show once the script has been started. This is shown while
       * loading the actions.
       * </pre>
       *
       * <code>optional string start_message = 14;</code>
       * @param value The startMessage to set.
       * @return This builder for chaining.
       */
      public Builder setStartMessage(
          java.lang.String value) {
        copyOnWrite();
        instance.setStartMessage(value);
        return this;
      }
      /**
       * <pre>
       * Message to show once the script has been started. This is shown while
       * loading the actions.
       * </pre>
       *
       * <code>optional string start_message = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearStartMessage() {
        copyOnWrite();
        instance.clearStartMessage();
        return this;
      }
      /**
       * <pre>
       * Message to show once the script has been started. This is shown while
       * loading the actions.
       * </pre>
       *
       * <code>optional string start_message = 14;</code>
       * @param value The bytes for startMessage to set.
       * @return This builder for chaining.
       */
      public Builder setStartMessageBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setStartMessageBytes(value);
        return this;
      }

      /**
       * <pre>
       * Show the UI if it's not shown yet. Setting this to false is useful for
       * scripts started by direct actions.
       * </pre>
       *
       * <code>optional bool needs_ui = 15 [default = true];</code>
       * @return Whether the needsUi field is set.
       */
      @java.lang.Override
      public boolean hasNeedsUi() {
        return instance.hasNeedsUi();
      }
      /**
       * <pre>
       * Show the UI if it's not shown yet. Setting this to false is useful for
       * scripts started by direct actions.
       * </pre>
       *
       * <code>optional bool needs_ui = 15 [default = true];</code>
       * @return The needsUi.
       */
      @java.lang.Override
      public boolean getNeedsUi() {
        return instance.getNeedsUi();
      }
      /**
       * <pre>
       * Show the UI if it's not shown yet. Setting this to false is useful for
       * scripts started by direct actions.
       * </pre>
       *
       * <code>optional bool needs_ui = 15 [default = true];</code>
       * @param value The needsUi to set.
       * @return This builder for chaining.
       */
      public Builder setNeedsUi(boolean value) {
        copyOnWrite();
        instance.setNeedsUi(value);
        return this;
      }
      /**
       * <pre>
       * Show the UI if it's not shown yet. Setting this to false is useful for
       * scripts started by direct actions.
       * </pre>
       *
       * <code>optional bool needs_ui = 15 [default = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearNeedsUi() {
        copyOnWrite();
        instance.clearNeedsUi();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.SupportedScriptProto.PresentationProto)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "precondition_",
              "initialPrompt_",
              "priority_",
              "autostart_",
              "interrupt_",
              "chip_",
              "directAction_",
              "startMessage_",
              "needsUi_",
            };
            java.lang.String info =
                "\u0001\t\u0000\u0001\u0003\u000f\t\u0000\u0000\u0000\u0003\u1009\u0000\u0004\u1008" +
                "\u0001\u0005\u1004\u0002\b\u1007\u0005\t\u1007\u0006\f\u1009\u0003\r\u1009\u0004" +
                "\u000e\u1008\u0007\u000f\u1007\b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.SupportedScriptProto.PresentationProto)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto DEFAULT_INSTANCE;
    static {
      PresentationProto defaultInstance = new PresentationProto();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        PresentationProto.class, defaultInstance);
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PresentationProto> PARSER;

    public static com.google.protobuf.Parser<PresentationProto> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  public static final int PATH_FIELD_NUMBER = 1;
  private java.lang.String path_;
  /**
   * <pre>
   * This is the internal name of the script.
   * </pre>
   *
   * <code>optional string path = 1;</code>
   * @return Whether the path field is set.
   */
  @java.lang.Override
  public boolean hasPath() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * This is the internal name of the script.
   * </pre>
   *
   * <code>optional string path = 1;</code>
   * @return The path.
   */
  @java.lang.Override
  public java.lang.String getPath() {
    return path_;
  }
  /**
   * <pre>
   * This is the internal name of the script.
   * </pre>
   *
   * <code>optional string path = 1;</code>
   * @return The bytes for path.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPathBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(path_);
  }
  /**
   * <pre>
   * This is the internal name of the script.
   * </pre>
   *
   * <code>optional string path = 1;</code>
   * @param value The path to set.
   */
  private void setPath(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000001;
    path_ = value;
  }
  /**
   * <pre>
   * This is the internal name of the script.
   * </pre>
   *
   * <code>optional string path = 1;</code>
   */
  private void clearPath() {
    bitField0_ = (bitField0_ & ~0x00000001);
    path_ = getDefaultInstance().getPath();
  }
  /**
   * <pre>
   * This is the internal name of the script.
   * </pre>
   *
   * <code>optional string path = 1;</code>
   * @param value The bytes for path to set.
   */
  private void setPathBytes(
      com.google.protobuf.ByteString value) {
    path_ = value.toStringUtf8();
    bitField0_ |= 0x00000001;
  }

  public static final int PRESENTATION_FIELD_NUMBER = 2;
  private org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto presentation_;
  /**
   * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
   */
  @java.lang.Override
  public boolean hasPresentation() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
   */
  @java.lang.Override
  public org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto getPresentation() {
    return presentation_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto.getDefaultInstance() : presentation_;
  }
  /**
   * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
   */
  private void setPresentation(org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto value) {
    value.getClass();
  presentation_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergePresentation(org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto value) {
    value.getClass();
  if (presentation_ != null &&
        presentation_ != org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto.getDefaultInstance()) {
      presentation_ =
        org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto.newBuilder(presentation_).mergeFrom(value).buildPartial();
    } else {
      presentation_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
   */
  private void clearPresentation() {  presentation_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Supported script.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.SupportedScriptProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.SupportedScriptProto)
      org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * This is the internal name of the script.
     * </pre>
     *
     * <code>optional string path = 1;</code>
     * @return Whether the path field is set.
     */
    @java.lang.Override
    public boolean hasPath() {
      return instance.hasPath();
    }
    /**
     * <pre>
     * This is the internal name of the script.
     * </pre>
     *
     * <code>optional string path = 1;</code>
     * @return The path.
     */
    @java.lang.Override
    public java.lang.String getPath() {
      return instance.getPath();
    }
    /**
     * <pre>
     * This is the internal name of the script.
     * </pre>
     *
     * <code>optional string path = 1;</code>
     * @return The bytes for path.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPathBytes() {
      return instance.getPathBytes();
    }
    /**
     * <pre>
     * This is the internal name of the script.
     * </pre>
     *
     * <code>optional string path = 1;</code>
     * @param value The path to set.
     * @return This builder for chaining.
     */
    public Builder setPath(
        java.lang.String value) {
      copyOnWrite();
      instance.setPath(value);
      return this;
    }
    /**
     * <pre>
     * This is the internal name of the script.
     * </pre>
     *
     * <code>optional string path = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearPath() {
      copyOnWrite();
      instance.clearPath();
      return this;
    }
    /**
     * <pre>
     * This is the internal name of the script.
     * </pre>
     *
     * <code>optional string path = 1;</code>
     * @param value The bytes for path to set.
     * @return This builder for chaining.
     */
    public Builder setPathBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPathBytes(value);
      return this;
    }

    /**
     * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
     */
    @java.lang.Override
    public boolean hasPresentation() {
      return instance.hasPresentation();
    }
    /**
     * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
     */
    @java.lang.Override
    public org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto getPresentation() {
      return instance.getPresentation();
    }
    /**
     * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
     */
    public Builder setPresentation(org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto value) {
      copyOnWrite();
      instance.setPresentation(value);
      return this;
      }
    /**
     * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
     */
    public Builder setPresentation(
        org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto.Builder builderForValue) {
      copyOnWrite();
      instance.setPresentation(builderForValue.build());
      return this;
    }
    /**
     * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
     */
    public Builder mergePresentation(org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.PresentationProto value) {
      copyOnWrite();
      instance.mergePresentation(value);
      return this;
    }
    /**
     * <code>optional .autofill_assistant.SupportedScriptProto.PresentationProto presentation = 2;</code>
     */
    public Builder clearPresentation() {  copyOnWrite();
      instance.clearPresentation();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.SupportedScriptProto)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "path_",
            "presentation_",
          };
          java.lang.String info =
              "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u1008\u0000\u0002" +
              "\u1009\u0001";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.SupportedScriptProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto DEFAULT_INSTANCE;
  static {
    SupportedScriptProto defaultInstance = new SupportedScriptProto();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      SupportedScriptProto.class, defaultInstance);
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.SupportedScriptProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<SupportedScriptProto> PARSER;

  public static com.google.protobuf.Parser<SupportedScriptProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

