// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/unique_position.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * A UniquePosition is a string of bytes.
 * Unique positions are unique per-item, since they are guaranteed to end with a
 * fixed-length suffix that is unique per-item.  The position string may not end
 * with a '&#92;0' byte.
 * Prior to the suffix is a series of arbitrary bytes of arbitrary length.
 * Items under the same parent are positioned relative to each other by a
 * lexicographic comparison of their UniquePosition values.
 * </pre>
 *
 * Protobuf type {@code sync_pb.UniquePosition}
 */
public  final class UniquePosition extends
    com.google.protobuf.GeneratedMessageLite<
        UniquePosition, UniquePosition.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.UniquePosition)
    UniquePositionOrBuilder {
  private UniquePosition() {
    value_ = com.google.protobuf.ByteString.EMPTY;
    compressedValue_ = com.google.protobuf.ByteString.EMPTY;
    customCompressedV1_ = com.google.protobuf.ByteString.EMPTY;
  }
  private int bitField0_;
  public static final int VALUE_FIELD_NUMBER = 1;
  private com.google.protobuf.ByteString value_;
  /**
   * <pre>
   * The uncompressed string of bytes representing the position.
   * Deprecated.  See history note above.
   * </pre>
   *
   * <code>optional bytes value = 1 [deprecated = true];</code>
   * @return Whether the value field is set.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean hasValue() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The uncompressed string of bytes representing the position.
   * Deprecated.  See history note above.
   * </pre>
   *
   * <code>optional bytes value = 1 [deprecated = true];</code>
   * @return The value.
   */
  @java.lang.Override
  @java.lang.Deprecated public com.google.protobuf.ByteString getValue() {
    return value_;
  }
  /**
   * <pre>
   * The uncompressed string of bytes representing the position.
   * Deprecated.  See history note above.
   * </pre>
   *
   * <code>optional bytes value = 1 [deprecated = true];</code>
   * @param value The value to set.
   */
  private void setValue(com.google.protobuf.ByteString value) {
    value.getClass();
  bitField0_ |= 0x00000001;
    value_ = value;
  }
  /**
   * <pre>
   * The uncompressed string of bytes representing the position.
   * Deprecated.  See history note above.
   * </pre>
   *
   * <code>optional bytes value = 1 [deprecated = true];</code>
   */
  private void clearValue() {
    bitField0_ = (bitField0_ & ~0x00000001);
    value_ = getDefaultInstance().getValue();
  }

  public static final int COMPRESSED_VALUE_FIELD_NUMBER = 2;
  private com.google.protobuf.ByteString compressedValue_;
  /**
   * <pre>
   * The client may choose to write a compressed position to this field instead
   * of populating the 'value' above.  If it chooses to use compression, the
   * 'value' field above must be empty.  The position value will be compressed
   * with gzip and stored in the compressed_value field.  The position's
   * uncompressed length must be specified and written to the
   * uncompressed_length field.
   * Deprecated.  See history note above.
   * </pre>
   *
   * <code>optional bytes compressed_value = 2 [deprecated = true];</code>
   * @return Whether the compressedValue field is set.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean hasCompressedValue() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The client may choose to write a compressed position to this field instead
   * of populating the 'value' above.  If it chooses to use compression, the
   * 'value' field above must be empty.  The position value will be compressed
   * with gzip and stored in the compressed_value field.  The position's
   * uncompressed length must be specified and written to the
   * uncompressed_length field.
   * Deprecated.  See history note above.
   * </pre>
   *
   * <code>optional bytes compressed_value = 2 [deprecated = true];</code>
   * @return The compressedValue.
   */
  @java.lang.Override
  @java.lang.Deprecated public com.google.protobuf.ByteString getCompressedValue() {
    return compressedValue_;
  }
  /**
   * <pre>
   * The client may choose to write a compressed position to this field instead
   * of populating the 'value' above.  If it chooses to use compression, the
   * 'value' field above must be empty.  The position value will be compressed
   * with gzip and stored in the compressed_value field.  The position's
   * uncompressed length must be specified and written to the
   * uncompressed_length field.
   * Deprecated.  See history note above.
   * </pre>
   *
   * <code>optional bytes compressed_value = 2 [deprecated = true];</code>
   * @param value The compressedValue to set.
   */
  private void setCompressedValue(com.google.protobuf.ByteString value) {
    value.getClass();
  bitField0_ |= 0x00000002;
    compressedValue_ = value;
  }
  /**
   * <pre>
   * The client may choose to write a compressed position to this field instead
   * of populating the 'value' above.  If it chooses to use compression, the
   * 'value' field above must be empty.  The position value will be compressed
   * with gzip and stored in the compressed_value field.  The position's
   * uncompressed length must be specified and written to the
   * uncompressed_length field.
   * Deprecated.  See history note above.
   * </pre>
   *
   * <code>optional bytes compressed_value = 2 [deprecated = true];</code>
   */
  private void clearCompressedValue() {
    bitField0_ = (bitField0_ & ~0x00000002);
    compressedValue_ = getDefaultInstance().getCompressedValue();
  }

  public static final int UNCOMPRESSED_LENGTH_FIELD_NUMBER = 3;
  private long uncompressedLength_;
  /**
   * <code>optional uint64 uncompressed_length = 3 [deprecated = true];</code>
   * @return Whether the uncompressedLength field is set.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean hasUncompressedLength() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <code>optional uint64 uncompressed_length = 3 [deprecated = true];</code>
   * @return The uncompressedLength.
   */
  @java.lang.Override
  @java.lang.Deprecated public long getUncompressedLength() {
    return uncompressedLength_;
  }
  /**
   * <code>optional uint64 uncompressed_length = 3 [deprecated = true];</code>
   * @param value The uncompressedLength to set.
   */
  private void setUncompressedLength(long value) {
    bitField0_ |= 0x00000004;
    uncompressedLength_ = value;
  }
  /**
   * <code>optional uint64 uncompressed_length = 3 [deprecated = true];</code>
   */
  private void clearUncompressedLength() {
    bitField0_ = (bitField0_ & ~0x00000004);
    uncompressedLength_ = 0L;
  }

  public static final int CUSTOM_COMPRESSED_V1_FIELD_NUMBER = 4;
  private com.google.protobuf.ByteString customCompressedV1_;
  /**
   * <pre>
   * This encoding uses compression scheme designed especially for unique
   * positions.  It has the property that X &lt; Y precisely when Compressed(X) &lt;
   * Compressed(Y), which is very useful when the most common operation is to
   * compare these positions against each other.  Their values may remain
   * compressed in memory.
   * The compression scheme is implemented and documented in
   * sync/core_impl/base/unique_position.cc.
   * As of M30, this is the preferred encoding.  Newer clients may continue to
   * populate the 'value' and 'compressed_value' fields to ensure backwards
   * compatibility, but they will always try to read from this field first.
   * </pre>
   *
   * <code>optional bytes custom_compressed_v1 = 4;</code>
   * @return Whether the customCompressedV1 field is set.
   */
  @java.lang.Override
  public boolean hasCustomCompressedV1() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * This encoding uses compression scheme designed especially for unique
   * positions.  It has the property that X &lt; Y precisely when Compressed(X) &lt;
   * Compressed(Y), which is very useful when the most common operation is to
   * compare these positions against each other.  Their values may remain
   * compressed in memory.
   * The compression scheme is implemented and documented in
   * sync/core_impl/base/unique_position.cc.
   * As of M30, this is the preferred encoding.  Newer clients may continue to
   * populate the 'value' and 'compressed_value' fields to ensure backwards
   * compatibility, but they will always try to read from this field first.
   * </pre>
   *
   * <code>optional bytes custom_compressed_v1 = 4;</code>
   * @return The customCompressedV1.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getCustomCompressedV1() {
    return customCompressedV1_;
  }
  /**
   * <pre>
   * This encoding uses compression scheme designed especially for unique
   * positions.  It has the property that X &lt; Y precisely when Compressed(X) &lt;
   * Compressed(Y), which is very useful when the most common operation is to
   * compare these positions against each other.  Their values may remain
   * compressed in memory.
   * The compression scheme is implemented and documented in
   * sync/core_impl/base/unique_position.cc.
   * As of M30, this is the preferred encoding.  Newer clients may continue to
   * populate the 'value' and 'compressed_value' fields to ensure backwards
   * compatibility, but they will always try to read from this field first.
   * </pre>
   *
   * <code>optional bytes custom_compressed_v1 = 4;</code>
   * @param value The customCompressedV1 to set.
   */
  private void setCustomCompressedV1(com.google.protobuf.ByteString value) {
    value.getClass();
  bitField0_ |= 0x00000008;
    customCompressedV1_ = value;
  }
  /**
   * <pre>
   * This encoding uses compression scheme designed especially for unique
   * positions.  It has the property that X &lt; Y precisely when Compressed(X) &lt;
   * Compressed(Y), which is very useful when the most common operation is to
   * compare these positions against each other.  Their values may remain
   * compressed in memory.
   * The compression scheme is implemented and documented in
   * sync/core_impl/base/unique_position.cc.
   * As of M30, this is the preferred encoding.  Newer clients may continue to
   * populate the 'value' and 'compressed_value' fields to ensure backwards
   * compatibility, but they will always try to read from this field first.
   * </pre>
   *
   * <code>optional bytes custom_compressed_v1 = 4;</code>
   */
  private void clearCustomCompressedV1() {
    bitField0_ = (bitField0_ & ~0x00000008);
    customCompressedV1_ = getDefaultInstance().getCustomCompressedV1();
  }

  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.UniquePosition parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.UniquePosition prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * A UniquePosition is a string of bytes.
   * Unique positions are unique per-item, since they are guaranteed to end with a
   * fixed-length suffix that is unique per-item.  The position string may not end
   * with a '&#92;0' byte.
   * Prior to the suffix is a series of arbitrary bytes of arbitrary length.
   * Items under the same parent are positioned relative to each other by a
   * lexicographic comparison of their UniquePosition values.
   * </pre>
   *
   * Protobuf type {@code sync_pb.UniquePosition}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.UniquePosition, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.UniquePosition)
      org.chromium.components.sync.protocol.UniquePositionOrBuilder {
    // Construct using org.chromium.components.sync.protocol.UniquePosition.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The uncompressed string of bytes representing the position.
     * Deprecated.  See history note above.
     * </pre>
     *
     * <code>optional bytes value = 1 [deprecated = true];</code>
     * @return Whether the value field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasValue() {
      return instance.hasValue();
    }
    /**
     * <pre>
     * The uncompressed string of bytes representing the position.
     * Deprecated.  See history note above.
     * </pre>
     *
     * <code>optional bytes value = 1 [deprecated = true];</code>
     * @return The value.
     */
    @java.lang.Override
    @java.lang.Deprecated public com.google.protobuf.ByteString getValue() {
      return instance.getValue();
    }
    /**
     * <pre>
     * The uncompressed string of bytes representing the position.
     * Deprecated.  See history note above.
     * </pre>
     *
     * <code>optional bytes value = 1 [deprecated = true];</code>
     * @param value The value to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setValue(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setValue(value);
      return this;
    }
    /**
     * <pre>
     * The uncompressed string of bytes representing the position.
     * Deprecated.  See history note above.
     * </pre>
     *
     * <code>optional bytes value = 1 [deprecated = true];</code>
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearValue() {
      copyOnWrite();
      instance.clearValue();
      return this;
    }

    /**
     * <pre>
     * The client may choose to write a compressed position to this field instead
     * of populating the 'value' above.  If it chooses to use compression, the
     * 'value' field above must be empty.  The position value will be compressed
     * with gzip and stored in the compressed_value field.  The position's
     * uncompressed length must be specified and written to the
     * uncompressed_length field.
     * Deprecated.  See history note above.
     * </pre>
     *
     * <code>optional bytes compressed_value = 2 [deprecated = true];</code>
     * @return Whether the compressedValue field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasCompressedValue() {
      return instance.hasCompressedValue();
    }
    /**
     * <pre>
     * The client may choose to write a compressed position to this field instead
     * of populating the 'value' above.  If it chooses to use compression, the
     * 'value' field above must be empty.  The position value will be compressed
     * with gzip and stored in the compressed_value field.  The position's
     * uncompressed length must be specified and written to the
     * uncompressed_length field.
     * Deprecated.  See history note above.
     * </pre>
     *
     * <code>optional bytes compressed_value = 2 [deprecated = true];</code>
     * @return The compressedValue.
     */
    @java.lang.Override
    @java.lang.Deprecated public com.google.protobuf.ByteString getCompressedValue() {
      return instance.getCompressedValue();
    }
    /**
     * <pre>
     * The client may choose to write a compressed position to this field instead
     * of populating the 'value' above.  If it chooses to use compression, the
     * 'value' field above must be empty.  The position value will be compressed
     * with gzip and stored in the compressed_value field.  The position's
     * uncompressed length must be specified and written to the
     * uncompressed_length field.
     * Deprecated.  See history note above.
     * </pre>
     *
     * <code>optional bytes compressed_value = 2 [deprecated = true];</code>
     * @param value The compressedValue to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setCompressedValue(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCompressedValue(value);
      return this;
    }
    /**
     * <pre>
     * The client may choose to write a compressed position to this field instead
     * of populating the 'value' above.  If it chooses to use compression, the
     * 'value' field above must be empty.  The position value will be compressed
     * with gzip and stored in the compressed_value field.  The position's
     * uncompressed length must be specified and written to the
     * uncompressed_length field.
     * Deprecated.  See history note above.
     * </pre>
     *
     * <code>optional bytes compressed_value = 2 [deprecated = true];</code>
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearCompressedValue() {
      copyOnWrite();
      instance.clearCompressedValue();
      return this;
    }

    /**
     * <code>optional uint64 uncompressed_length = 3 [deprecated = true];</code>
     * @return Whether the uncompressedLength field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasUncompressedLength() {
      return instance.hasUncompressedLength();
    }
    /**
     * <code>optional uint64 uncompressed_length = 3 [deprecated = true];</code>
     * @return The uncompressedLength.
     */
    @java.lang.Override
    @java.lang.Deprecated public long getUncompressedLength() {
      return instance.getUncompressedLength();
    }
    /**
     * <code>optional uint64 uncompressed_length = 3 [deprecated = true];</code>
     * @param value The uncompressedLength to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setUncompressedLength(long value) {
      copyOnWrite();
      instance.setUncompressedLength(value);
      return this;
    }
    /**
     * <code>optional uint64 uncompressed_length = 3 [deprecated = true];</code>
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearUncompressedLength() {
      copyOnWrite();
      instance.clearUncompressedLength();
      return this;
    }

    /**
     * <pre>
     * This encoding uses compression scheme designed especially for unique
     * positions.  It has the property that X &lt; Y precisely when Compressed(X) &lt;
     * Compressed(Y), which is very useful when the most common operation is to
     * compare these positions against each other.  Their values may remain
     * compressed in memory.
     * The compression scheme is implemented and documented in
     * sync/core_impl/base/unique_position.cc.
     * As of M30, this is the preferred encoding.  Newer clients may continue to
     * populate the 'value' and 'compressed_value' fields to ensure backwards
     * compatibility, but they will always try to read from this field first.
     * </pre>
     *
     * <code>optional bytes custom_compressed_v1 = 4;</code>
     * @return Whether the customCompressedV1 field is set.
     */
    @java.lang.Override
    public boolean hasCustomCompressedV1() {
      return instance.hasCustomCompressedV1();
    }
    /**
     * <pre>
     * This encoding uses compression scheme designed especially for unique
     * positions.  It has the property that X &lt; Y precisely when Compressed(X) &lt;
     * Compressed(Y), which is very useful when the most common operation is to
     * compare these positions against each other.  Their values may remain
     * compressed in memory.
     * The compression scheme is implemented and documented in
     * sync/core_impl/base/unique_position.cc.
     * As of M30, this is the preferred encoding.  Newer clients may continue to
     * populate the 'value' and 'compressed_value' fields to ensure backwards
     * compatibility, but they will always try to read from this field first.
     * </pre>
     *
     * <code>optional bytes custom_compressed_v1 = 4;</code>
     * @return The customCompressedV1.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getCustomCompressedV1() {
      return instance.getCustomCompressedV1();
    }
    /**
     * <pre>
     * This encoding uses compression scheme designed especially for unique
     * positions.  It has the property that X &lt; Y precisely when Compressed(X) &lt;
     * Compressed(Y), which is very useful when the most common operation is to
     * compare these positions against each other.  Their values may remain
     * compressed in memory.
     * The compression scheme is implemented and documented in
     * sync/core_impl/base/unique_position.cc.
     * As of M30, this is the preferred encoding.  Newer clients may continue to
     * populate the 'value' and 'compressed_value' fields to ensure backwards
     * compatibility, but they will always try to read from this field first.
     * </pre>
     *
     * <code>optional bytes custom_compressed_v1 = 4;</code>
     * @param value The customCompressedV1 to set.
     * @return This builder for chaining.
     */
    public Builder setCustomCompressedV1(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCustomCompressedV1(value);
      return this;
    }
    /**
     * <pre>
     * This encoding uses compression scheme designed especially for unique
     * positions.  It has the property that X &lt; Y precisely when Compressed(X) &lt;
     * Compressed(Y), which is very useful when the most common operation is to
     * compare these positions against each other.  Their values may remain
     * compressed in memory.
     * The compression scheme is implemented and documented in
     * sync/core_impl/base/unique_position.cc.
     * As of M30, this is the preferred encoding.  Newer clients may continue to
     * populate the 'value' and 'compressed_value' fields to ensure backwards
     * compatibility, but they will always try to read from this field first.
     * </pre>
     *
     * <code>optional bytes custom_compressed_v1 = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearCustomCompressedV1() {
      copyOnWrite();
      instance.clearCustomCompressedV1();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.UniquePosition)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.UniquePosition();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "value_",
            "compressedValue_",
            "uncompressedLength_",
            "customCompressedV1_",
          };
          java.lang.String info =
              "\u0001\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0000\u0000\u0001\u100a\u0000\u0002" +
              "\u100a\u0001\u0003\u1003\u0002\u0004\u100a\u0003";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.components.sync.protocol.UniquePosition> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.components.sync.protocol.UniquePosition.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.UniquePosition>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.UniquePosition)
  private static final org.chromium.components.sync.protocol.UniquePosition DEFAULT_INSTANCE;
  static {
    UniquePosition defaultInstance = new UniquePosition();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      UniquePosition.class, defaultInstance);
  }

  public static org.chromium.components.sync.protocol.UniquePosition getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<UniquePosition> PARSER;

  public static com.google.protobuf.Parser<UniquePosition> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

