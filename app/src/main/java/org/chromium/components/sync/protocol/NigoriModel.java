// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/nigori_local_data.proto

package org.chromium.components.sync.protocol;

/**
 * Protobuf type {@code sync_pb.NigoriModel}
 */
public  final class NigoriModel extends
    com.google.protobuf.GeneratedMessageLite<
        NigoriModel, NigoriModel.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.NigoriModel)
    NigoriModelOrBuilder {
  private NigoriModel() {
    currentKeystoreKeyName_ = "";
    encryptedTypesSpecificsFieldNumber_ = emptyIntList();
    keystoreKey_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    lastDefaultTrustedVaultKeyName_ = "";
  }
  private int bitField0_;
  public static final int CRYPTOGRAPHER_DATA_FIELD_NUMBER = 1;
  private org.chromium.components.sync.protocol.CryptographerData cryptographerData_;
  /**
   * <pre>
   * Represents state of the cryptographer.
   * </pre>
   *
   * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
   */
  @java.lang.Override
  public boolean hasCryptographerData() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Represents state of the cryptographer.
   * </pre>
   *
   * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.CryptographerData getCryptographerData() {
    return cryptographerData_ == null ? org.chromium.components.sync.protocol.CryptographerData.getDefaultInstance() : cryptographerData_;
  }
  /**
   * <pre>
   * Represents state of the cryptographer.
   * </pre>
   *
   * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
   */
  private void setCryptographerData(org.chromium.components.sync.protocol.CryptographerData value) {
    value.getClass();
  cryptographerData_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * Represents state of the cryptographer.
   * </pre>
   *
   * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeCryptographerData(org.chromium.components.sync.protocol.CryptographerData value) {
    value.getClass();
  if (cryptographerData_ != null &&
        cryptographerData_ != org.chromium.components.sync.protocol.CryptographerData.getDefaultInstance()) {
      cryptographerData_ =
        org.chromium.components.sync.protocol.CryptographerData.newBuilder(cryptographerData_).mergeFrom(value).buildPartial();
    } else {
      cryptographerData_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * Represents state of the cryptographer.
   * </pre>
   *
   * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
   */
  private void clearCryptographerData() {  cryptographerData_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int CURRENT_KEYSTORE_KEY_NAME_FIELD_NUMBER = 2;
  private java.lang.String currentKeystoreKeyName_;
  /**
   * <pre>
   * Contains the name of the key, used for encryption of
   * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
   * latest keystore key. Equals to cryptographer_data.default_key_name iff it
   * is Nigori in full keystore mode (not in backward compatible keystore
   * mode).
   * </pre>
   *
   * <code>optional string current_keystore_key_name = 2;</code>
   * @return Whether the currentKeystoreKeyName field is set.
   */
  @java.lang.Override
  public boolean hasCurrentKeystoreKeyName() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Contains the name of the key, used for encryption of
   * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
   * latest keystore key. Equals to cryptographer_data.default_key_name iff it
   * is Nigori in full keystore mode (not in backward compatible keystore
   * mode).
   * </pre>
   *
   * <code>optional string current_keystore_key_name = 2;</code>
   * @return The currentKeystoreKeyName.
   */
  @java.lang.Override
  public java.lang.String getCurrentKeystoreKeyName() {
    return currentKeystoreKeyName_;
  }
  /**
   * <pre>
   * Contains the name of the key, used for encryption of
   * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
   * latest keystore key. Equals to cryptographer_data.default_key_name iff it
   * is Nigori in full keystore mode (not in backward compatible keystore
   * mode).
   * </pre>
   *
   * <code>optional string current_keystore_key_name = 2;</code>
   * @return The bytes for currentKeystoreKeyName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCurrentKeystoreKeyNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(currentKeystoreKeyName_);
  }
  /**
   * <pre>
   * Contains the name of the key, used for encryption of
   * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
   * latest keystore key. Equals to cryptographer_data.default_key_name iff it
   * is Nigori in full keystore mode (not in backward compatible keystore
   * mode).
   * </pre>
   *
   * <code>optional string current_keystore_key_name = 2;</code>
   * @param value The currentKeystoreKeyName to set.
   */
  private void setCurrentKeystoreKeyName(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000002;
    currentKeystoreKeyName_ = value;
  }
  /**
   * <pre>
   * Contains the name of the key, used for encryption of
   * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
   * latest keystore key. Equals to cryptographer_data.default_key_name iff it
   * is Nigori in full keystore mode (not in backward compatible keystore
   * mode).
   * </pre>
   *
   * <code>optional string current_keystore_key_name = 2;</code>
   */
  private void clearCurrentKeystoreKeyName() {
    bitField0_ = (bitField0_ & ~0x00000002);
    currentKeystoreKeyName_ = getDefaultInstance().getCurrentKeystoreKeyName();
  }
  /**
   * <pre>
   * Contains the name of the key, used for encryption of
   * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
   * latest keystore key. Equals to cryptographer_data.default_key_name iff it
   * is Nigori in full keystore mode (not in backward compatible keystore
   * mode).
   * </pre>
   *
   * <code>optional string current_keystore_key_name = 2;</code>
   * @param value The bytes for currentKeystoreKeyName to set.
   */
  private void setCurrentKeystoreKeyNameBytes(
      com.google.protobuf.ByteString value) {
    currentKeystoreKeyName_ = value.toStringUtf8();
    bitField0_ |= 0x00000002;
  }

  public static final int PENDING_KEYS_FIELD_NUMBER = 3;
  private org.chromium.components.sync.protocol.EncryptedData pendingKeys_;
  /**
   * <pre>
   * Contains keybag in encrypted form, should be empty once we were able to
   * decrypt keybag from specifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
   */
  @java.lang.Override
  public boolean hasPendingKeys() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Contains keybag in encrypted form, should be empty once we were able to
   * decrypt keybag from specifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.EncryptedData getPendingKeys() {
    return pendingKeys_ == null ? org.chromium.components.sync.protocol.EncryptedData.getDefaultInstance() : pendingKeys_;
  }
  /**
   * <pre>
   * Contains keybag in encrypted form, should be empty once we were able to
   * decrypt keybag from specifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
   */
  private void setPendingKeys(org.chromium.components.sync.protocol.EncryptedData value) {
    value.getClass();
  pendingKeys_ = value;
    bitField0_ |= 0x00000004;
    }
  /**
   * <pre>
   * Contains keybag in encrypted form, should be empty once we were able to
   * decrypt keybag from specifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergePendingKeys(org.chromium.components.sync.protocol.EncryptedData value) {
    value.getClass();
  if (pendingKeys_ != null &&
        pendingKeys_ != org.chromium.components.sync.protocol.EncryptedData.getDefaultInstance()) {
      pendingKeys_ =
        org.chromium.components.sync.protocol.EncryptedData.newBuilder(pendingKeys_).mergeFrom(value).buildPartial();
    } else {
      pendingKeys_ = value;
    }
    bitField0_ |= 0x00000004;
  }
  /**
   * <pre>
   * Contains keybag in encrypted form, should be empty once we were able to
   * decrypt keybag from specifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
   */
  private void clearPendingKeys() {  pendingKeys_ = null;
    bitField0_ = (bitField0_ & ~0x00000004);
  }

  public static final int PASSPHRASE_TYPE_FIELD_NUMBER = 4;
  private int passphraseType_;
  /**
   * <pre>
   * PassphraseType used for encryption. IMPLICIT_PASSPRHASE shouldn't be used
   * here.
   * </pre>
   *
   * <code>optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];</code>
   * @return Whether the passphraseType field is set.
   */
  @java.lang.Override
  public boolean hasPassphraseType() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * PassphraseType used for encryption. IMPLICIT_PASSPRHASE shouldn't be used
   * here.
   * </pre>
   *
   * <code>optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];</code>
   * @return The passphraseType.
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.NigoriSpecifics.PassphraseType getPassphraseType() {
    org.chromium.components.sync.protocol.NigoriSpecifics.PassphraseType result = org.chromium.components.sync.protocol.NigoriSpecifics.PassphraseType.forNumber(passphraseType_);
    return result == null ? org.chromium.components.sync.protocol.NigoriSpecifics.PassphraseType.UNKNOWN : result;
  }
  /**
   * <pre>
   * PassphraseType used for encryption. IMPLICIT_PASSPRHASE shouldn't be used
   * here.
   * </pre>
   *
   * <code>optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];</code>
   * @param value The passphraseType to set.
   */
  private void setPassphraseType(org.chromium.components.sync.protocol.NigoriSpecifics.PassphraseType value) {
    passphraseType_ = value.getNumber();
    bitField0_ |= 0x00000008;
  }
  /**
   * <pre>
   * PassphraseType used for encryption. IMPLICIT_PASSPRHASE shouldn't be used
   * here.
   * </pre>
   *
   * <code>optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];</code>
   */
  private void clearPassphraseType() {
    bitField0_ = (bitField0_ & ~0x00000008);
    passphraseType_ = 0;
  }

  public static final int KEYSTORE_MIGRATION_TIME_FIELD_NUMBER = 5;
  private long keystoreMigrationTime_;
  /**
   * <pre>
   * The time (in UNIX epoch milliseconds) at which the keystore migration was
   * performed.
   * </pre>
   *
   * <code>optional int64 keystore_migration_time = 5;</code>
   * @return Whether the keystoreMigrationTime field is set.
   */
  @java.lang.Override
  public boolean hasKeystoreMigrationTime() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * The time (in UNIX epoch milliseconds) at which the keystore migration was
   * performed.
   * </pre>
   *
   * <code>optional int64 keystore_migration_time = 5;</code>
   * @return The keystoreMigrationTime.
   */
  @java.lang.Override
  public long getKeystoreMigrationTime() {
    return keystoreMigrationTime_;
  }
  /**
   * <pre>
   * The time (in UNIX epoch milliseconds) at which the keystore migration was
   * performed.
   * </pre>
   *
   * <code>optional int64 keystore_migration_time = 5;</code>
   * @param value The keystoreMigrationTime to set.
   */
  private void setKeystoreMigrationTime(long value) {
    bitField0_ |= 0x00000010;
    keystoreMigrationTime_ = value;
  }
  /**
   * <pre>
   * The time (in UNIX epoch milliseconds) at which the keystore migration was
   * performed.
   * </pre>
   *
   * <code>optional int64 keystore_migration_time = 5;</code>
   */
  private void clearKeystoreMigrationTime() {
    bitField0_ = (bitField0_ & ~0x00000010);
    keystoreMigrationTime_ = 0L;
  }

  public static final int CUSTOM_PASSPHRASE_TIME_FIELD_NUMBER = 6;
  private long customPassphraseTime_;
  /**
   * <pre>
   * The time (in UNIX epoch milliseconds) at which a custom passphrase was
   * set.
   * Note: this field may not be set if the custom passphrase was applied before
   * corresponding field in NigoriSpecifics was introduced.
   * </pre>
   *
   * <code>optional int64 custom_passphrase_time = 6;</code>
   * @return Whether the customPassphraseTime field is set.
   */
  @java.lang.Override
  public boolean hasCustomPassphraseTime() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * The time (in UNIX epoch milliseconds) at which a custom passphrase was
   * set.
   * Note: this field may not be set if the custom passphrase was applied before
   * corresponding field in NigoriSpecifics was introduced.
   * </pre>
   *
   * <code>optional int64 custom_passphrase_time = 6;</code>
   * @return The customPassphraseTime.
   */
  @java.lang.Override
  public long getCustomPassphraseTime() {
    return customPassphraseTime_;
  }
  /**
   * <pre>
   * The time (in UNIX epoch milliseconds) at which a custom passphrase was
   * set.
   * Note: this field may not be set if the custom passphrase was applied before
   * corresponding field in NigoriSpecifics was introduced.
   * </pre>
   *
   * <code>optional int64 custom_passphrase_time = 6;</code>
   * @param value The customPassphraseTime to set.
   */
  private void setCustomPassphraseTime(long value) {
    bitField0_ |= 0x00000020;
    customPassphraseTime_ = value;
  }
  /**
   * <pre>
   * The time (in UNIX epoch milliseconds) at which a custom passphrase was
   * set.
   * Note: this field may not be set if the custom passphrase was applied before
   * corresponding field in NigoriSpecifics was introduced.
   * </pre>
   *
   * <code>optional int64 custom_passphrase_time = 6;</code>
   */
  private void clearCustomPassphraseTime() {
    bitField0_ = (bitField0_ & ~0x00000020);
    customPassphraseTime_ = 0L;
  }

  public static final int CUSTOM_PASSPHRASE_KEY_DERIVATION_PARAMS_FIELD_NUMBER = 7;
  private org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams customPassphraseKeyDerivationParams_;
  /**
   * <pre>
   * Params used for deriving keys from custom passphrase. Should be set iff
   * |passphrase_type| is CUSTOM_PASSPHRASE.
   * </pre>
   *
   * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
   */
  @java.lang.Override
  public boolean hasCustomPassphraseKeyDerivationParams() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * Params used for deriving keys from custom passphrase. Should be set iff
   * |passphrase_type| is CUSTOM_PASSPHRASE.
   * </pre>
   *
   * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams getCustomPassphraseKeyDerivationParams() {
    return customPassphraseKeyDerivationParams_ == null ? org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams.getDefaultInstance() : customPassphraseKeyDerivationParams_;
  }
  /**
   * <pre>
   * Params used for deriving keys from custom passphrase. Should be set iff
   * |passphrase_type| is CUSTOM_PASSPHRASE.
   * </pre>
   *
   * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
   */
  private void setCustomPassphraseKeyDerivationParams(org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams value) {
    value.getClass();
  customPassphraseKeyDerivationParams_ = value;
    bitField0_ |= 0x00000040;
    }
  /**
   * <pre>
   * Params used for deriving keys from custom passphrase. Should be set iff
   * |passphrase_type| is CUSTOM_PASSPHRASE.
   * </pre>
   *
   * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeCustomPassphraseKeyDerivationParams(org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams value) {
    value.getClass();
  if (customPassphraseKeyDerivationParams_ != null &&
        customPassphraseKeyDerivationParams_ != org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams.getDefaultInstance()) {
      customPassphraseKeyDerivationParams_ =
        org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams.newBuilder(customPassphraseKeyDerivationParams_).mergeFrom(value).buildPartial();
    } else {
      customPassphraseKeyDerivationParams_ = value;
    }
    bitField0_ |= 0x00000040;
  }
  /**
   * <pre>
   * Params used for deriving keys from custom passphrase. Should be set iff
   * |passphrase_type| is CUSTOM_PASSPHRASE.
   * </pre>
   *
   * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
   */
  private void clearCustomPassphraseKeyDerivationParams() {  customPassphraseKeyDerivationParams_ = null;
    bitField0_ = (bitField0_ & ~0x00000040);
  }

  public static final int ENCRYPT_EVERYTHING_FIELD_NUMBER = 8;
  private boolean encryptEverything_;
  /**
   * <pre>
   * Indicates whether we need to encrypt all encryptable user types.
   * </pre>
   *
   * <code>optional bool encrypt_everything = 8;</code>
   * @return Whether the encryptEverything field is set.
   */
  @java.lang.Override
  public boolean hasEncryptEverything() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <pre>
   * Indicates whether we need to encrypt all encryptable user types.
   * </pre>
   *
   * <code>optional bool encrypt_everything = 8;</code>
   * @return The encryptEverything.
   */
  @java.lang.Override
  public boolean getEncryptEverything() {
    return encryptEverything_;
  }
  /**
   * <pre>
   * Indicates whether we need to encrypt all encryptable user types.
   * </pre>
   *
   * <code>optional bool encrypt_everything = 8;</code>
   * @param value The encryptEverything to set.
   */
  private void setEncryptEverything(boolean value) {
    bitField0_ |= 0x00000080;
    encryptEverything_ = value;
  }
  /**
   * <pre>
   * Indicates whether we need to encrypt all encryptable user types.
   * </pre>
   *
   * <code>optional bool encrypt_everything = 8;</code>
   */
  private void clearEncryptEverything() {
    bitField0_ = (bitField0_ & ~0x00000080);
    encryptEverything_ = false;
  }

  public static final int ENCRYPTED_TYPES_SPECIFICS_FIELD_NUMBER_FIELD_NUMBER = 9;
  private com.google.protobuf.Internal.IntList encryptedTypesSpecificsFieldNumber_;
  /**
   * <pre>
   * The list of encrypted UserEncryptableTypes, represented by their specifics
   * field number.
   * </pre>
   *
   * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
   * @return A list containing the encryptedTypesSpecificsFieldNumber.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getEncryptedTypesSpecificsFieldNumberList() {
    return encryptedTypesSpecificsFieldNumber_;
  }
  /**
   * <pre>
   * The list of encrypted UserEncryptableTypes, represented by their specifics
   * field number.
   * </pre>
   *
   * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
   * @return The count of encryptedTypesSpecificsFieldNumber.
   */
  @java.lang.Override
  public int getEncryptedTypesSpecificsFieldNumberCount() {
    return encryptedTypesSpecificsFieldNumber_.size();
  }
  /**
   * <pre>
   * The list of encrypted UserEncryptableTypes, represented by their specifics
   * field number.
   * </pre>
   *
   * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
   * @param index The index of the element to return.
   * @return The encryptedTypesSpecificsFieldNumber at the given index.
   */
  @java.lang.Override
  public int getEncryptedTypesSpecificsFieldNumber(int index) {
    return encryptedTypesSpecificsFieldNumber_.getInt(index);
  }
  private void ensureEncryptedTypesSpecificsFieldNumberIsMutable() {
    com.google.protobuf.Internal.IntList tmp = encryptedTypesSpecificsFieldNumber_;
    if (!tmp.isModifiable()) {
      encryptedTypesSpecificsFieldNumber_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <pre>
   * The list of encrypted UserEncryptableTypes, represented by their specifics
   * field number.
   * </pre>
   *
   * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
   * @param index The index to set the value at.
   * @param value The encryptedTypesSpecificsFieldNumber to set.
   */
  private void setEncryptedTypesSpecificsFieldNumber(
      int index, int value) {
    ensureEncryptedTypesSpecificsFieldNumberIsMutable();
    encryptedTypesSpecificsFieldNumber_.setInt(index, value);
  }
  /**
   * <pre>
   * The list of encrypted UserEncryptableTypes, represented by their specifics
   * field number.
   * </pre>
   *
   * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
   * @param value The encryptedTypesSpecificsFieldNumber to add.
   */
  private void addEncryptedTypesSpecificsFieldNumber(int value) {
    ensureEncryptedTypesSpecificsFieldNumberIsMutable();
    encryptedTypesSpecificsFieldNumber_.addInt(value);
  }
  /**
   * <pre>
   * The list of encrypted UserEncryptableTypes, represented by their specifics
   * field number.
   * </pre>
   *
   * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
   * @param values The encryptedTypesSpecificsFieldNumber to add.
   */
  private void addAllEncryptedTypesSpecificsFieldNumber(
      java.lang.Iterable<? extends java.lang.Integer> values) {
    ensureEncryptedTypesSpecificsFieldNumberIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, encryptedTypesSpecificsFieldNumber_);
  }
  /**
   * <pre>
   * The list of encrypted UserEncryptableTypes, represented by their specifics
   * field number.
   * </pre>
   *
   * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
   */
  private void clearEncryptedTypesSpecificsFieldNumber() {
    encryptedTypesSpecificsFieldNumber_ = emptyIntList();
  }

  public static final int KEYSTORE_KEY_FIELD_NUMBER = 10;
  private com.google.protobuf.Internal.ProtobufList<java.lang.String> keystoreKey_;
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   * @return A list containing the keystoreKey.
   */
  @java.lang.Override
  public java.util.List<java.lang.String> getKeystoreKeyList() {
    return keystoreKey_;
  }
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   * @return The count of keystoreKey.
   */
  @java.lang.Override
  public int getKeystoreKeyCount() {
    return keystoreKey_.size();
  }
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   * @param index The index of the element to return.
   * @return The keystoreKey at the given index.
   */
  @java.lang.Override
  public java.lang.String getKeystoreKey(int index) {
    return keystoreKey_.get(index);
  }
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   * @param index The index of the value to return.
   * @return The bytes of the keystoreKey at the given index.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getKeystoreKeyBytes(int index) {
    return com.google.protobuf.ByteString.copyFromUtf8(
        keystoreKey_.get(index));
  }
  private void ensureKeystoreKeyIsMutable() {
    com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
        keystoreKey_;  if (!tmp.isModifiable()) {
      keystoreKey_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   * @param index The index to set the value at.
   * @param value The keystoreKey to set.
   */
  private void setKeystoreKey(
      int index, java.lang.String value) {
    value.getClass();
  ensureKeystoreKeyIsMutable();
    keystoreKey_.set(index, value);
  }
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   * @param value The keystoreKey to add.
   */
  private void addKeystoreKey(
      java.lang.String value) {
    value.getClass();
  ensureKeystoreKeyIsMutable();
    keystoreKey_.add(value);
  }
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   * @param values The keystoreKey to add.
   */
  private void addAllKeystoreKey(
      java.lang.Iterable<java.lang.String> values) {
    ensureKeystoreKeyIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, keystoreKey_);
  }
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   */
  private void clearKeystoreKey() {
    keystoreKey_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
  }
  /**
   * <pre>
   * Keystore keys are used to decrypt keystore-based Nigori. Should be
   * persisted in order to not ask the keystore server for them during every
   * browser startup. Due to backward compatibility requirements keys are
   * always Base64 encoded.
   * </pre>
   *
   * <code>repeated string keystore_key = 10;</code>
   * @param value The bytes of the keystoreKey to add.
   */
  private void addKeystoreKeyBytes(
      com.google.protobuf.ByteString value) {
    ensureKeystoreKeyIsMutable();
    keystoreKey_.add(value.toStringUtf8());
  }

  public static final int PENDING_KEYSTORE_DECRYPTOR_TOKEN_FIELD_NUMBER = 11;
  private org.chromium.components.sync.protocol.EncryptedData pendingKeystoreDecryptorToken_;
  /**
   * <pre>
   * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
   * in case keystore keys arrived after NigoriSpecifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
   */
  @java.lang.Override
  public boolean hasPendingKeystoreDecryptorToken() {
    return ((bitField0_ & 0x00000100) != 0);
  }
  /**
   * <pre>
   * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
   * in case keystore keys arrived after NigoriSpecifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.EncryptedData getPendingKeystoreDecryptorToken() {
    return pendingKeystoreDecryptorToken_ == null ? org.chromium.components.sync.protocol.EncryptedData.getDefaultInstance() : pendingKeystoreDecryptorToken_;
  }
  /**
   * <pre>
   * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
   * in case keystore keys arrived after NigoriSpecifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
   */
  private void setPendingKeystoreDecryptorToken(org.chromium.components.sync.protocol.EncryptedData value) {
    value.getClass();
  pendingKeystoreDecryptorToken_ = value;
    bitField0_ |= 0x00000100;
    }
  /**
   * <pre>
   * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
   * in case keystore keys arrived after NigoriSpecifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergePendingKeystoreDecryptorToken(org.chromium.components.sync.protocol.EncryptedData value) {
    value.getClass();
  if (pendingKeystoreDecryptorToken_ != null &&
        pendingKeystoreDecryptorToken_ != org.chromium.components.sync.protocol.EncryptedData.getDefaultInstance()) {
      pendingKeystoreDecryptorToken_ =
        org.chromium.components.sync.protocol.EncryptedData.newBuilder(pendingKeystoreDecryptorToken_).mergeFrom(value).buildPartial();
    } else {
      pendingKeystoreDecryptorToken_ = value;
    }
    bitField0_ |= 0x00000100;
  }
  /**
   * <pre>
   * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
   * in case keystore keys arrived after NigoriSpecifics.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
   */
  private void clearPendingKeystoreDecryptorToken() {  pendingKeystoreDecryptorToken_ = null;
    bitField0_ = (bitField0_ & ~0x00000100);
  }

  public static final int LAST_DEFAULT_TRUSTED_VAULT_KEY_NAME_FIELD_NUMBER = 12;
  private java.lang.String lastDefaultTrustedVaultKeyName_;
  /**
   * <pre>
   * Contains the name of the latest available trusted vault key that was used
   * as the default encryption key. Resets when the client go out of pending
   * decryption state and transits to other passphrase types.
   * </pre>
   *
   * <code>optional string last_default_trusted_vault_key_name = 12;</code>
   * @return Whether the lastDefaultTrustedVaultKeyName field is set.
   */
  @java.lang.Override
  public boolean hasLastDefaultTrustedVaultKeyName() {
    return ((bitField0_ & 0x00000200) != 0);
  }
  /**
   * <pre>
   * Contains the name of the latest available trusted vault key that was used
   * as the default encryption key. Resets when the client go out of pending
   * decryption state and transits to other passphrase types.
   * </pre>
   *
   * <code>optional string last_default_trusted_vault_key_name = 12;</code>
   * @return The lastDefaultTrustedVaultKeyName.
   */
  @java.lang.Override
  public java.lang.String getLastDefaultTrustedVaultKeyName() {
    return lastDefaultTrustedVaultKeyName_;
  }
  /**
   * <pre>
   * Contains the name of the latest available trusted vault key that was used
   * as the default encryption key. Resets when the client go out of pending
   * decryption state and transits to other passphrase types.
   * </pre>
   *
   * <code>optional string last_default_trusted_vault_key_name = 12;</code>
   * @return The bytes for lastDefaultTrustedVaultKeyName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getLastDefaultTrustedVaultKeyNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(lastDefaultTrustedVaultKeyName_);
  }
  /**
   * <pre>
   * Contains the name of the latest available trusted vault key that was used
   * as the default encryption key. Resets when the client go out of pending
   * decryption state and transits to other passphrase types.
   * </pre>
   *
   * <code>optional string last_default_trusted_vault_key_name = 12;</code>
   * @param value The lastDefaultTrustedVaultKeyName to set.
   */
  private void setLastDefaultTrustedVaultKeyName(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000200;
    lastDefaultTrustedVaultKeyName_ = value;
  }
  /**
   * <pre>
   * Contains the name of the latest available trusted vault key that was used
   * as the default encryption key. Resets when the client go out of pending
   * decryption state and transits to other passphrase types.
   * </pre>
   *
   * <code>optional string last_default_trusted_vault_key_name = 12;</code>
   */
  private void clearLastDefaultTrustedVaultKeyName() {
    bitField0_ = (bitField0_ & ~0x00000200);
    lastDefaultTrustedVaultKeyName_ = getDefaultInstance().getLastDefaultTrustedVaultKeyName();
  }
  /**
   * <pre>
   * Contains the name of the latest available trusted vault key that was used
   * as the default encryption key. Resets when the client go out of pending
   * decryption state and transits to other passphrase types.
   * </pre>
   *
   * <code>optional string last_default_trusted_vault_key_name = 12;</code>
   * @param value The bytes for lastDefaultTrustedVaultKeyName to set.
   */
  private void setLastDefaultTrustedVaultKeyNameBytes(
      com.google.protobuf.ByteString value) {
    lastDefaultTrustedVaultKeyName_ = value.toStringUtf8();
    bitField0_ |= 0x00000200;
  }

  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.NigoriModel parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.NigoriModel prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code sync_pb.NigoriModel}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.NigoriModel, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.NigoriModel)
      org.chromium.components.sync.protocol.NigoriModelOrBuilder {
    // Construct using org.chromium.components.sync.protocol.NigoriModel.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Represents state of the cryptographer.
     * </pre>
     *
     * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
     */
    @java.lang.Override
    public boolean hasCryptographerData() {
      return instance.hasCryptographerData();
    }
    /**
     * <pre>
     * Represents state of the cryptographer.
     * </pre>
     *
     * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.CryptographerData getCryptographerData() {
      return instance.getCryptographerData();
    }
    /**
     * <pre>
     * Represents state of the cryptographer.
     * </pre>
     *
     * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
     */
    public Builder setCryptographerData(org.chromium.components.sync.protocol.CryptographerData value) {
      copyOnWrite();
      instance.setCryptographerData(value);
      return this;
      }
    /**
     * <pre>
     * Represents state of the cryptographer.
     * </pre>
     *
     * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
     */
    public Builder setCryptographerData(
        org.chromium.components.sync.protocol.CryptographerData.Builder builderForValue) {
      copyOnWrite();
      instance.setCryptographerData(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Represents state of the cryptographer.
     * </pre>
     *
     * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
     */
    public Builder mergeCryptographerData(org.chromium.components.sync.protocol.CryptographerData value) {
      copyOnWrite();
      instance.mergeCryptographerData(value);
      return this;
    }
    /**
     * <pre>
     * Represents state of the cryptographer.
     * </pre>
     *
     * <code>optional .sync_pb.CryptographerData cryptographer_data = 1;</code>
     */
    public Builder clearCryptographerData() {  copyOnWrite();
      instance.clearCryptographerData();
      return this;
    }

    /**
     * <pre>
     * Contains the name of the key, used for encryption of
     * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
     * latest keystore key. Equals to cryptographer_data.default_key_name iff it
     * is Nigori in full keystore mode (not in backward compatible keystore
     * mode).
     * </pre>
     *
     * <code>optional string current_keystore_key_name = 2;</code>
     * @return Whether the currentKeystoreKeyName field is set.
     */
    @java.lang.Override
    public boolean hasCurrentKeystoreKeyName() {
      return instance.hasCurrentKeystoreKeyName();
    }
    /**
     * <pre>
     * Contains the name of the key, used for encryption of
     * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
     * latest keystore key. Equals to cryptographer_data.default_key_name iff it
     * is Nigori in full keystore mode (not in backward compatible keystore
     * mode).
     * </pre>
     *
     * <code>optional string current_keystore_key_name = 2;</code>
     * @return The currentKeystoreKeyName.
     */
    @java.lang.Override
    public java.lang.String getCurrentKeystoreKeyName() {
      return instance.getCurrentKeystoreKeyName();
    }
    /**
     * <pre>
     * Contains the name of the key, used for encryption of
     * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
     * latest keystore key. Equals to cryptographer_data.default_key_name iff it
     * is Nigori in full keystore mode (not in backward compatible keystore
     * mode).
     * </pre>
     *
     * <code>optional string current_keystore_key_name = 2;</code>
     * @return The bytes for currentKeystoreKeyName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCurrentKeystoreKeyNameBytes() {
      return instance.getCurrentKeystoreKeyNameBytes();
    }
    /**
     * <pre>
     * Contains the name of the key, used for encryption of
     * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
     * latest keystore key. Equals to cryptographer_data.default_key_name iff it
     * is Nigori in full keystore mode (not in backward compatible keystore
     * mode).
     * </pre>
     *
     * <code>optional string current_keystore_key_name = 2;</code>
     * @param value The currentKeystoreKeyName to set.
     * @return This builder for chaining.
     */
    public Builder setCurrentKeystoreKeyName(
        java.lang.String value) {
      copyOnWrite();
      instance.setCurrentKeystoreKeyName(value);
      return this;
    }
    /**
     * <pre>
     * Contains the name of the key, used for encryption of
     * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
     * latest keystore key. Equals to cryptographer_data.default_key_name iff it
     * is Nigori in full keystore mode (not in backward compatible keystore
     * mode).
     * </pre>
     *
     * <code>optional string current_keystore_key_name = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearCurrentKeystoreKeyName() {
      copyOnWrite();
      instance.clearCurrentKeystoreKeyName();
      return this;
    }
    /**
     * <pre>
     * Contains the name of the key, used for encryption of
     * NigoriSpecifics.keystore_decryptor_token, should always be the name of the
     * latest keystore key. Equals to cryptographer_data.default_key_name iff it
     * is Nigori in full keystore mode (not in backward compatible keystore
     * mode).
     * </pre>
     *
     * <code>optional string current_keystore_key_name = 2;</code>
     * @param value The bytes for currentKeystoreKeyName to set.
     * @return This builder for chaining.
     */
    public Builder setCurrentKeystoreKeyNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCurrentKeystoreKeyNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * Contains keybag in encrypted form, should be empty once we were able to
     * decrypt keybag from specifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
     */
    @java.lang.Override
    public boolean hasPendingKeys() {
      return instance.hasPendingKeys();
    }
    /**
     * <pre>
     * Contains keybag in encrypted form, should be empty once we were able to
     * decrypt keybag from specifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.EncryptedData getPendingKeys() {
      return instance.getPendingKeys();
    }
    /**
     * <pre>
     * Contains keybag in encrypted form, should be empty once we were able to
     * decrypt keybag from specifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
     */
    public Builder setPendingKeys(org.chromium.components.sync.protocol.EncryptedData value) {
      copyOnWrite();
      instance.setPendingKeys(value);
      return this;
      }
    /**
     * <pre>
     * Contains keybag in encrypted form, should be empty once we were able to
     * decrypt keybag from specifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
     */
    public Builder setPendingKeys(
        org.chromium.components.sync.protocol.EncryptedData.Builder builderForValue) {
      copyOnWrite();
      instance.setPendingKeys(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Contains keybag in encrypted form, should be empty once we were able to
     * decrypt keybag from specifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
     */
    public Builder mergePendingKeys(org.chromium.components.sync.protocol.EncryptedData value) {
      copyOnWrite();
      instance.mergePendingKeys(value);
      return this;
    }
    /**
     * <pre>
     * Contains keybag in encrypted form, should be empty once we were able to
     * decrypt keybag from specifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keys = 3;</code>
     */
    public Builder clearPendingKeys() {  copyOnWrite();
      instance.clearPendingKeys();
      return this;
    }

    /**
     * <pre>
     * PassphraseType used for encryption. IMPLICIT_PASSPRHASE shouldn't be used
     * here.
     * </pre>
     *
     * <code>optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];</code>
     * @return Whether the passphraseType field is set.
     */
    @java.lang.Override
    public boolean hasPassphraseType() {
      return instance.hasPassphraseType();
    }
    /**
     * <pre>
     * PassphraseType used for encryption. IMPLICIT_PASSPRHASE shouldn't be used
     * here.
     * </pre>
     *
     * <code>optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];</code>
     * @return The passphraseType.
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.NigoriSpecifics.PassphraseType getPassphraseType() {
      return instance.getPassphraseType();
    }
    /**
     * <pre>
     * PassphraseType used for encryption. IMPLICIT_PASSPRHASE shouldn't be used
     * here.
     * </pre>
     *
     * <code>optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];</code>
     * @param value The enum numeric value on the wire for passphraseType to set.
     * @return This builder for chaining.
     */
    public Builder setPassphraseType(org.chromium.components.sync.protocol.NigoriSpecifics.PassphraseType value) {
      copyOnWrite();
      instance.setPassphraseType(value);
      return this;
    }
    /**
     * <pre>
     * PassphraseType used for encryption. IMPLICIT_PASSPRHASE shouldn't be used
     * here.
     * </pre>
     *
     * <code>optional .sync_pb.NigoriSpecifics.PassphraseType passphrase_type = 4 [default = UNKNOWN];</code>
     * @return This builder for chaining.
     */
    public Builder clearPassphraseType() {
      copyOnWrite();
      instance.clearPassphraseType();
      return this;
    }

    /**
     * <pre>
     * The time (in UNIX epoch milliseconds) at which the keystore migration was
     * performed.
     * </pre>
     *
     * <code>optional int64 keystore_migration_time = 5;</code>
     * @return Whether the keystoreMigrationTime field is set.
     */
    @java.lang.Override
    public boolean hasKeystoreMigrationTime() {
      return instance.hasKeystoreMigrationTime();
    }
    /**
     * <pre>
     * The time (in UNIX epoch milliseconds) at which the keystore migration was
     * performed.
     * </pre>
     *
     * <code>optional int64 keystore_migration_time = 5;</code>
     * @return The keystoreMigrationTime.
     */
    @java.lang.Override
    public long getKeystoreMigrationTime() {
      return instance.getKeystoreMigrationTime();
    }
    /**
     * <pre>
     * The time (in UNIX epoch milliseconds) at which the keystore migration was
     * performed.
     * </pre>
     *
     * <code>optional int64 keystore_migration_time = 5;</code>
     * @param value The keystoreMigrationTime to set.
     * @return This builder for chaining.
     */
    public Builder setKeystoreMigrationTime(long value) {
      copyOnWrite();
      instance.setKeystoreMigrationTime(value);
      return this;
    }
    /**
     * <pre>
     * The time (in UNIX epoch milliseconds) at which the keystore migration was
     * performed.
     * </pre>
     *
     * <code>optional int64 keystore_migration_time = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearKeystoreMigrationTime() {
      copyOnWrite();
      instance.clearKeystoreMigrationTime();
      return this;
    }

    /**
     * <pre>
     * The time (in UNIX epoch milliseconds) at which a custom passphrase was
     * set.
     * Note: this field may not be set if the custom passphrase was applied before
     * corresponding field in NigoriSpecifics was introduced.
     * </pre>
     *
     * <code>optional int64 custom_passphrase_time = 6;</code>
     * @return Whether the customPassphraseTime field is set.
     */
    @java.lang.Override
    public boolean hasCustomPassphraseTime() {
      return instance.hasCustomPassphraseTime();
    }
    /**
     * <pre>
     * The time (in UNIX epoch milliseconds) at which a custom passphrase was
     * set.
     * Note: this field may not be set if the custom passphrase was applied before
     * corresponding field in NigoriSpecifics was introduced.
     * </pre>
     *
     * <code>optional int64 custom_passphrase_time = 6;</code>
     * @return The customPassphraseTime.
     */
    @java.lang.Override
    public long getCustomPassphraseTime() {
      return instance.getCustomPassphraseTime();
    }
    /**
     * <pre>
     * The time (in UNIX epoch milliseconds) at which a custom passphrase was
     * set.
     * Note: this field may not be set if the custom passphrase was applied before
     * corresponding field in NigoriSpecifics was introduced.
     * </pre>
     *
     * <code>optional int64 custom_passphrase_time = 6;</code>
     * @param value The customPassphraseTime to set.
     * @return This builder for chaining.
     */
    public Builder setCustomPassphraseTime(long value) {
      copyOnWrite();
      instance.setCustomPassphraseTime(value);
      return this;
    }
    /**
     * <pre>
     * The time (in UNIX epoch milliseconds) at which a custom passphrase was
     * set.
     * Note: this field may not be set if the custom passphrase was applied before
     * corresponding field in NigoriSpecifics was introduced.
     * </pre>
     *
     * <code>optional int64 custom_passphrase_time = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearCustomPassphraseTime() {
      copyOnWrite();
      instance.clearCustomPassphraseTime();
      return this;
    }

    /**
     * <pre>
     * Params used for deriving keys from custom passphrase. Should be set iff
     * |passphrase_type| is CUSTOM_PASSPHRASE.
     * </pre>
     *
     * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
     */
    @java.lang.Override
    public boolean hasCustomPassphraseKeyDerivationParams() {
      return instance.hasCustomPassphraseKeyDerivationParams();
    }
    /**
     * <pre>
     * Params used for deriving keys from custom passphrase. Should be set iff
     * |passphrase_type| is CUSTOM_PASSPHRASE.
     * </pre>
     *
     * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams getCustomPassphraseKeyDerivationParams() {
      return instance.getCustomPassphraseKeyDerivationParams();
    }
    /**
     * <pre>
     * Params used for deriving keys from custom passphrase. Should be set iff
     * |passphrase_type| is CUSTOM_PASSPHRASE.
     * </pre>
     *
     * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
     */
    public Builder setCustomPassphraseKeyDerivationParams(org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams value) {
      copyOnWrite();
      instance.setCustomPassphraseKeyDerivationParams(value);
      return this;
      }
    /**
     * <pre>
     * Params used for deriving keys from custom passphrase. Should be set iff
     * |passphrase_type| is CUSTOM_PASSPHRASE.
     * </pre>
     *
     * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
     */
    public Builder setCustomPassphraseKeyDerivationParams(
        org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams.Builder builderForValue) {
      copyOnWrite();
      instance.setCustomPassphraseKeyDerivationParams(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Params used for deriving keys from custom passphrase. Should be set iff
     * |passphrase_type| is CUSTOM_PASSPHRASE.
     * </pre>
     *
     * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
     */
    public Builder mergeCustomPassphraseKeyDerivationParams(org.chromium.components.sync.protocol.CustomPassphraseKeyDerivationParams value) {
      copyOnWrite();
      instance.mergeCustomPassphraseKeyDerivationParams(value);
      return this;
    }
    /**
     * <pre>
     * Params used for deriving keys from custom passphrase. Should be set iff
     * |passphrase_type| is CUSTOM_PASSPHRASE.
     * </pre>
     *
     * <code>optional .sync_pb.CustomPassphraseKeyDerivationParams custom_passphrase_key_derivation_params = 7;</code>
     */
    public Builder clearCustomPassphraseKeyDerivationParams() {  copyOnWrite();
      instance.clearCustomPassphraseKeyDerivationParams();
      return this;
    }

    /**
     * <pre>
     * Indicates whether we need to encrypt all encryptable user types.
     * </pre>
     *
     * <code>optional bool encrypt_everything = 8;</code>
     * @return Whether the encryptEverything field is set.
     */
    @java.lang.Override
    public boolean hasEncryptEverything() {
      return instance.hasEncryptEverything();
    }
    /**
     * <pre>
     * Indicates whether we need to encrypt all encryptable user types.
     * </pre>
     *
     * <code>optional bool encrypt_everything = 8;</code>
     * @return The encryptEverything.
     */
    @java.lang.Override
    public boolean getEncryptEverything() {
      return instance.getEncryptEverything();
    }
    /**
     * <pre>
     * Indicates whether we need to encrypt all encryptable user types.
     * </pre>
     *
     * <code>optional bool encrypt_everything = 8;</code>
     * @param value The encryptEverything to set.
     * @return This builder for chaining.
     */
    public Builder setEncryptEverything(boolean value) {
      copyOnWrite();
      instance.setEncryptEverything(value);
      return this;
    }
    /**
     * <pre>
     * Indicates whether we need to encrypt all encryptable user types.
     * </pre>
     *
     * <code>optional bool encrypt_everything = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearEncryptEverything() {
      copyOnWrite();
      instance.clearEncryptEverything();
      return this;
    }

    /**
     * <pre>
     * The list of encrypted UserEncryptableTypes, represented by their specifics
     * field number.
     * </pre>
     *
     * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
     * @return A list containing the encryptedTypesSpecificsFieldNumber.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getEncryptedTypesSpecificsFieldNumberList() {
      return java.util.Collections.unmodifiableList(
          instance.getEncryptedTypesSpecificsFieldNumberList());
    }
    /**
     * <pre>
     * The list of encrypted UserEncryptableTypes, represented by their specifics
     * field number.
     * </pre>
     *
     * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
     * @return The count of encryptedTypesSpecificsFieldNumber.
     */
    @java.lang.Override
    public int getEncryptedTypesSpecificsFieldNumberCount() {
      return instance.getEncryptedTypesSpecificsFieldNumberCount();
    }
    /**
     * <pre>
     * The list of encrypted UserEncryptableTypes, represented by their specifics
     * field number.
     * </pre>
     *
     * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
     * @param index The index of the element to return.
     * @return The encryptedTypesSpecificsFieldNumber at the given index.
     */
    @java.lang.Override
    public int getEncryptedTypesSpecificsFieldNumber(int index) {
      return instance.getEncryptedTypesSpecificsFieldNumber(index);
    }
    /**
     * <pre>
     * The list of encrypted UserEncryptableTypes, represented by their specifics
     * field number.
     * </pre>
     *
     * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
     * @param value The encryptedTypesSpecificsFieldNumber to set.
     * @return This builder for chaining.
     */
    public Builder setEncryptedTypesSpecificsFieldNumber(
        int index, int value) {
      copyOnWrite();
      instance.setEncryptedTypesSpecificsFieldNumber(index, value);
      return this;
    }
    /**
     * <pre>
     * The list of encrypted UserEncryptableTypes, represented by their specifics
     * field number.
     * </pre>
     *
     * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
     * @param value The encryptedTypesSpecificsFieldNumber to add.
     * @return This builder for chaining.
     */
    public Builder addEncryptedTypesSpecificsFieldNumber(int value) {
      copyOnWrite();
      instance.addEncryptedTypesSpecificsFieldNumber(value);
      return this;
    }
    /**
     * <pre>
     * The list of encrypted UserEncryptableTypes, represented by their specifics
     * field number.
     * </pre>
     *
     * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
     * @param values The encryptedTypesSpecificsFieldNumber to add.
     * @return This builder for chaining.
     */
    public Builder addAllEncryptedTypesSpecificsFieldNumber(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllEncryptedTypesSpecificsFieldNumber(values);
      return this;
    }
    /**
     * <pre>
     * The list of encrypted UserEncryptableTypes, represented by their specifics
     * field number.
     * </pre>
     *
     * <code>repeated int32 encrypted_types_specifics_field_number = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearEncryptedTypesSpecificsFieldNumber() {
      copyOnWrite();
      instance.clearEncryptedTypesSpecificsFieldNumber();
      return this;
    }

    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     * @return A list containing the keystoreKey.
     */
    @java.lang.Override
    public java.util.List<java.lang.String>
        getKeystoreKeyList() {
      return java.util.Collections.unmodifiableList(
          instance.getKeystoreKeyList());
    }
    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     * @return The count of keystoreKey.
     */
    @java.lang.Override
    public int getKeystoreKeyCount() {
      return instance.getKeystoreKeyCount();
    }
    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     * @param index The index of the element to return.
     * @return The keystoreKey at the given index.
     */
    @java.lang.Override
    public java.lang.String getKeystoreKey(int index) {
      return instance.getKeystoreKey(index);
    }
    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     * @param index The index of the value to return.
     * @return The bytes of the keystoreKey at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getKeystoreKeyBytes(int index) {
      return instance.getKeystoreKeyBytes(index);
    }
    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     * @param index The index to set the value at.
     * @param value The keystoreKey to set.
     * @return This builder for chaining.
     */
    public Builder setKeystoreKey(
        int index, java.lang.String value) {
      copyOnWrite();
      instance.setKeystoreKey(index, value);
      return this;
    }
    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     * @param value The keystoreKey to add.
     * @return This builder for chaining.
     */
    public Builder addKeystoreKey(
        java.lang.String value) {
      copyOnWrite();
      instance.addKeystoreKey(value);
      return this;
    }
    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     * @param values The keystoreKey to add.
     * @return This builder for chaining.
     */
    public Builder addAllKeystoreKey(
        java.lang.Iterable<java.lang.String> values) {
      copyOnWrite();
      instance.addAllKeystoreKey(values);
      return this;
    }
    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearKeystoreKey() {
      copyOnWrite();
      instance.clearKeystoreKey();
      return this;
    }
    /**
     * <pre>
     * Keystore keys are used to decrypt keystore-based Nigori. Should be
     * persisted in order to not ask the keystore server for them during every
     * browser startup. Due to backward compatibility requirements keys are
     * always Base64 encoded.
     * </pre>
     *
     * <code>repeated string keystore_key = 10;</code>
     * @param value The bytes of the keystoreKey to add.
     * @return This builder for chaining.
     */
    public Builder addKeystoreKeyBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.addKeystoreKeyBytes(value);
      return this;
    }

    /**
     * <pre>
     * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
     * in case keystore keys arrived after NigoriSpecifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
     */
    @java.lang.Override
    public boolean hasPendingKeystoreDecryptorToken() {
      return instance.hasPendingKeystoreDecryptorToken();
    }
    /**
     * <pre>
     * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
     * in case keystore keys arrived after NigoriSpecifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.EncryptedData getPendingKeystoreDecryptorToken() {
      return instance.getPendingKeystoreDecryptorToken();
    }
    /**
     * <pre>
     * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
     * in case keystore keys arrived after NigoriSpecifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
     */
    public Builder setPendingKeystoreDecryptorToken(org.chromium.components.sync.protocol.EncryptedData value) {
      copyOnWrite();
      instance.setPendingKeystoreDecryptorToken(value);
      return this;
      }
    /**
     * <pre>
     * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
     * in case keystore keys arrived after NigoriSpecifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
     */
    public Builder setPendingKeystoreDecryptorToken(
        org.chromium.components.sync.protocol.EncryptedData.Builder builderForValue) {
      copyOnWrite();
      instance.setPendingKeystoreDecryptorToken(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
     * in case keystore keys arrived after NigoriSpecifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
     */
    public Builder mergePendingKeystoreDecryptorToken(org.chromium.components.sync.protocol.EncryptedData value) {
      copyOnWrite();
      instance.mergePendingKeystoreDecryptorToken(value);
      return this;
    }
    /**
     * <pre>
     * Encryptor keystore decryptor token. Used for decryption of keystore Nigori
     * in case keystore keys arrived after NigoriSpecifics.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData pending_keystore_decryptor_token = 11;</code>
     */
    public Builder clearPendingKeystoreDecryptorToken() {  copyOnWrite();
      instance.clearPendingKeystoreDecryptorToken();
      return this;
    }

    /**
     * <pre>
     * Contains the name of the latest available trusted vault key that was used
     * as the default encryption key. Resets when the client go out of pending
     * decryption state and transits to other passphrase types.
     * </pre>
     *
     * <code>optional string last_default_trusted_vault_key_name = 12;</code>
     * @return Whether the lastDefaultTrustedVaultKeyName field is set.
     */
    @java.lang.Override
    public boolean hasLastDefaultTrustedVaultKeyName() {
      return instance.hasLastDefaultTrustedVaultKeyName();
    }
    /**
     * <pre>
     * Contains the name of the latest available trusted vault key that was used
     * as the default encryption key. Resets when the client go out of pending
     * decryption state and transits to other passphrase types.
     * </pre>
     *
     * <code>optional string last_default_trusted_vault_key_name = 12;</code>
     * @return The lastDefaultTrustedVaultKeyName.
     */
    @java.lang.Override
    public java.lang.String getLastDefaultTrustedVaultKeyName() {
      return instance.getLastDefaultTrustedVaultKeyName();
    }
    /**
     * <pre>
     * Contains the name of the latest available trusted vault key that was used
     * as the default encryption key. Resets when the client go out of pending
     * decryption state and transits to other passphrase types.
     * </pre>
     *
     * <code>optional string last_default_trusted_vault_key_name = 12;</code>
     * @return The bytes for lastDefaultTrustedVaultKeyName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLastDefaultTrustedVaultKeyNameBytes() {
      return instance.getLastDefaultTrustedVaultKeyNameBytes();
    }
    /**
     * <pre>
     * Contains the name of the latest available trusted vault key that was used
     * as the default encryption key. Resets when the client go out of pending
     * decryption state and transits to other passphrase types.
     * </pre>
     *
     * <code>optional string last_default_trusted_vault_key_name = 12;</code>
     * @param value The lastDefaultTrustedVaultKeyName to set.
     * @return This builder for chaining.
     */
    public Builder setLastDefaultTrustedVaultKeyName(
        java.lang.String value) {
      copyOnWrite();
      instance.setLastDefaultTrustedVaultKeyName(value);
      return this;
    }
    /**
     * <pre>
     * Contains the name of the latest available trusted vault key that was used
     * as the default encryption key. Resets when the client go out of pending
     * decryption state and transits to other passphrase types.
     * </pre>
     *
     * <code>optional string last_default_trusted_vault_key_name = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearLastDefaultTrustedVaultKeyName() {
      copyOnWrite();
      instance.clearLastDefaultTrustedVaultKeyName();
      return this;
    }
    /**
     * <pre>
     * Contains the name of the latest available trusted vault key that was used
     * as the default encryption key. Resets when the client go out of pending
     * decryption state and transits to other passphrase types.
     * </pre>
     *
     * <code>optional string last_default_trusted_vault_key_name = 12;</code>
     * @param value The bytes for lastDefaultTrustedVaultKeyName to set.
     * @return This builder for chaining.
     */
    public Builder setLastDefaultTrustedVaultKeyNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setLastDefaultTrustedVaultKeyNameBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.NigoriModel)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.NigoriModel();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "cryptographerData_",
            "currentKeystoreKeyName_",
            "pendingKeys_",
            "passphraseType_",
            org.chromium.components.sync.protocol.NigoriSpecifics.PassphraseType.internalGetVerifier(),
            "keystoreMigrationTime_",
            "customPassphraseTime_",
            "customPassphraseKeyDerivationParams_",
            "encryptEverything_",
            "encryptedTypesSpecificsFieldNumber_",
            "keystoreKey_",
            "pendingKeystoreDecryptorToken_",
            "lastDefaultTrustedVaultKeyName_",
          };
          java.lang.String info =
              "\u0001\f\u0000\u0001\u0001\f\f\u0000\u0002\u0000\u0001\u1009\u0000\u0002\u1008\u0001" +
              "\u0003\u1009\u0002\u0004\u100c\u0003\u0005\u1002\u0004\u0006\u1002\u0005\u0007\u1009" +
              "\u0006\b\u1007\u0007\t\u0016\n\u001a\u000b\u1009\b\f\u1008\t";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.components.sync.protocol.NigoriModel> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.components.sync.protocol.NigoriModel.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.NigoriModel>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.NigoriModel)
  private static final org.chromium.components.sync.protocol.NigoriModel DEFAULT_INSTANCE;
  static {
    NigoriModel defaultInstance = new NigoriModel();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      NigoriModel.class, defaultInstance);
  }

  public static org.chromium.components.sync.protocol.NigoriModel getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<NigoriModel> PARSER;

  public static com.google.protobuf.Parser<NigoriModel> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

