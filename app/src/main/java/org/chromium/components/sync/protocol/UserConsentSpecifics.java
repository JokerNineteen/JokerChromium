// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/user_consent_specifics.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * Next id: 14
 * </pre>
 *
 * Protobuf type {@code sync_pb.UserConsentSpecifics}
 */
public  final class UserConsentSpecifics extends
    com.google.protobuf.GeneratedMessageLite<
        UserConsentSpecifics, UserConsentSpecifics.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.UserConsentSpecifics)
    UserConsentSpecificsOrBuilder {
  private UserConsentSpecifics() {
    locale_ = "";
    accountId_ = "";
    descriptionGrdIds_ = emptyIntList();
  }
  /**
   * <pre>
   * Which feature does the consent apply to?
   * </pre>
   *
   * Protobuf enum {@code sync_pb.UserConsentSpecifics.Feature}
   */
  public enum Feature
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>FEATURE_UNSPECIFIED = 0;</code>
     */
    FEATURE_UNSPECIFIED(0),
    /**
     * <code>CHROME_SYNC = 1;</code>
     */
    CHROME_SYNC(1),
    /**
     * <code>PLAY_STORE = 2;</code>
     */
    PLAY_STORE(2),
    /**
     * <code>BACKUP_AND_RESTORE = 3;</code>
     */
    BACKUP_AND_RESTORE(3),
    /**
     * <code>GOOGLE_LOCATION_SERVICE = 4;</code>
     */
    GOOGLE_LOCATION_SERVICE(4),
    /**
     * <code>CHROME_UNIFIED_CONSENT = 5;</code>
     */
    CHROME_UNIFIED_CONSENT(5),
    /**
     * <pre>
     * TODO(markusheintz): ASSISTANT_ACTIVITY_CONTROL was only added for
     * compatibility with the Feature enum in UserEventSpecifics.UserConsent.
     * Delete this value once the value is deleted from the other proto.
     * </pre>
     *
     * <code>ASSISTANT_ACTIVITY_CONTROL = 6;</code>
     */
    ASSISTANT_ACTIVITY_CONTROL(6),
    ;

    /**
     * <code>FEATURE_UNSPECIFIED = 0;</code>
     */
    public static final int FEATURE_UNSPECIFIED_VALUE = 0;
    /**
     * <code>CHROME_SYNC = 1;</code>
     */
    public static final int CHROME_SYNC_VALUE = 1;
    /**
     * <code>PLAY_STORE = 2;</code>
     */
    public static final int PLAY_STORE_VALUE = 2;
    /**
     * <code>BACKUP_AND_RESTORE = 3;</code>
     */
    public static final int BACKUP_AND_RESTORE_VALUE = 3;
    /**
     * <code>GOOGLE_LOCATION_SERVICE = 4;</code>
     */
    public static final int GOOGLE_LOCATION_SERVICE_VALUE = 4;
    /**
     * <code>CHROME_UNIFIED_CONSENT = 5;</code>
     */
    public static final int CHROME_UNIFIED_CONSENT_VALUE = 5;
    /**
     * <pre>
     * TODO(markusheintz): ASSISTANT_ACTIVITY_CONTROL was only added for
     * compatibility with the Feature enum in UserEventSpecifics.UserConsent.
     * Delete this value once the value is deleted from the other proto.
     * </pre>
     *
     * <code>ASSISTANT_ACTIVITY_CONTROL = 6;</code>
     */
    public static final int ASSISTANT_ACTIVITY_CONTROL_VALUE = 6;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Feature valueOf(int value) {
      return forNumber(value);
    }

    public static Feature forNumber(int value) {
      switch (value) {
        case 0: return FEATURE_UNSPECIFIED;
        case 1: return CHROME_SYNC;
        case 2: return PLAY_STORE;
        case 3: return BACKUP_AND_RESTORE;
        case 4: return GOOGLE_LOCATION_SERVICE;
        case 5: return CHROME_UNIFIED_CONSENT;
        case 6: return ASSISTANT_ACTIVITY_CONTROL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Feature>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Feature> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Feature>() {
            @java.lang.Override
            public Feature findValueByNumber(int number) {
              return Feature.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return FeatureVerifier.INSTANCE;
    }

    private static final class FeatureVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new FeatureVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return Feature.forNumber(number) != null;
            }
          };

    private final int value;

    private Feature(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sync_pb.UserConsentSpecifics.Feature)
  }

  private int bitField0_;
  private int consentCase_ = 0;
  private java.lang.Object consent_;
  public enum ConsentCase {
    SYNC_CONSENT(7),
    ARC_BACKUP_AND_RESTORE_CONSENT(8),
    ARC_LOCATION_SERVICE_CONSENT(9),
    ARC_PLAY_TERMS_OF_SERVICE_CONSENT(10),
    UNIFIED_CONSENT(13),
    ASSISTANT_ACTIVITY_CONTROL_CONSENT(14),
    ACCOUNT_PASSWORDS_CONSENT(15),
    CONSENT_NOT_SET(0);
    private final int value;
    private ConsentCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ConsentCase valueOf(int value) {
      return forNumber(value);
    }

    public static ConsentCase forNumber(int value) {
      switch (value) {
        case 7: return SYNC_CONSENT;
        case 8: return ARC_BACKUP_AND_RESTORE_CONSENT;
        case 9: return ARC_LOCATION_SERVICE_CONSENT;
        case 10: return ARC_PLAY_TERMS_OF_SERVICE_CONSENT;
        case 13: return UNIFIED_CONSENT;
        case 14: return ASSISTANT_ACTIVITY_CONTROL_CONSENT;
        case 15: return ACCOUNT_PASSWORDS_CONSENT;
        case 0: return CONSENT_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @java.lang.Override
  public ConsentCase
  getConsentCase() {
    return ConsentCase.forNumber(
        consentCase_);
  }

  private void clearConsent() {
    consentCase_ = 0;
    consent_ = null;
  }

  public static final int LOCALE_FIELD_NUMBER = 4;
  private java.lang.String locale_;
  /**
   * <pre>
   * The UI language Chrome is using, represented as the IETF language tag
   * defined in BCP 47. The region subtag is not included when it adds no
   * distinguishing information to the language tag (e.g. both "en-US"
   * and "fr" are correct here).
   * </pre>
   *
   * <code>optional string locale = 4;</code>
   * @return Whether the locale field is set.
   */
  @java.lang.Override
  public boolean hasLocale() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The UI language Chrome is using, represented as the IETF language tag
   * defined in BCP 47. The region subtag is not included when it adds no
   * distinguishing information to the language tag (e.g. both "en-US"
   * and "fr" are correct here).
   * </pre>
   *
   * <code>optional string locale = 4;</code>
   * @return The locale.
   */
  @java.lang.Override
  public java.lang.String getLocale() {
    return locale_;
  }
  /**
   * <pre>
   * The UI language Chrome is using, represented as the IETF language tag
   * defined in BCP 47. The region subtag is not included when it adds no
   * distinguishing information to the language tag (e.g. both "en-US"
   * and "fr" are correct here).
   * </pre>
   *
   * <code>optional string locale = 4;</code>
   * @return The bytes for locale.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getLocaleBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(locale_);
  }
  /**
   * <pre>
   * The UI language Chrome is using, represented as the IETF language tag
   * defined in BCP 47. The region subtag is not included when it adds no
   * distinguishing information to the language tag (e.g. both "en-US"
   * and "fr" are correct here).
   * </pre>
   *
   * <code>optional string locale = 4;</code>
   * @param value The locale to set.
   */
  private void setLocale(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000001;
    locale_ = value;
  }
  /**
   * <pre>
   * The UI language Chrome is using, represented as the IETF language tag
   * defined in BCP 47. The region subtag is not included when it adds no
   * distinguishing information to the language tag (e.g. both "en-US"
   * and "fr" are correct here).
   * </pre>
   *
   * <code>optional string locale = 4;</code>
   */
  private void clearLocale() {
    bitField0_ = (bitField0_ & ~0x00000001);
    locale_ = getDefaultInstance().getLocale();
  }
  /**
   * <pre>
   * The UI language Chrome is using, represented as the IETF language tag
   * defined in BCP 47. The region subtag is not included when it adds no
   * distinguishing information to the language tag (e.g. both "en-US"
   * and "fr" are correct here).
   * </pre>
   *
   * <code>optional string locale = 4;</code>
   * @param value The bytes for locale to set.
   */
  private void setLocaleBytes(
      com.google.protobuf.ByteString value) {
    locale_ = value.toStringUtf8();
    bitField0_ |= 0x00000001;
  }

  public static final int CLIENT_CONSENT_TIME_USEC_FIELD_NUMBER = 12;
  private long clientConsentTimeUsec_;
  /**
   * <pre>
   * The local time on the client when the user consent was recorded. The time
   * as measured by client is given in microseconds since Windows epoch. This
   * is needed since user consent recording may happen when a client is
   * offline.
   * </pre>
   *
   * <code>optional int64 client_consent_time_usec = 12;</code>
   * @return Whether the clientConsentTimeUsec field is set.
   */
  @java.lang.Override
  public boolean hasClientConsentTimeUsec() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The local time on the client when the user consent was recorded. The time
   * as measured by client is given in microseconds since Windows epoch. This
   * is needed since user consent recording may happen when a client is
   * offline.
   * </pre>
   *
   * <code>optional int64 client_consent_time_usec = 12;</code>
   * @return The clientConsentTimeUsec.
   */
  @java.lang.Override
  public long getClientConsentTimeUsec() {
    return clientConsentTimeUsec_;
  }
  /**
   * <pre>
   * The local time on the client when the user consent was recorded. The time
   * as measured by client is given in microseconds since Windows epoch. This
   * is needed since user consent recording may happen when a client is
   * offline.
   * </pre>
   *
   * <code>optional int64 client_consent_time_usec = 12;</code>
   * @param value The clientConsentTimeUsec to set.
   */
  private void setClientConsentTimeUsec(long value) {
    bitField0_ |= 0x00000002;
    clientConsentTimeUsec_ = value;
  }
  /**
   * <pre>
   * The local time on the client when the user consent was recorded. The time
   * as measured by client is given in microseconds since Windows epoch. This
   * is needed since user consent recording may happen when a client is
   * offline.
   * </pre>
   *
   * <code>optional int64 client_consent_time_usec = 12;</code>
   */
  private void clearClientConsentTimeUsec() {
    bitField0_ = (bitField0_ & ~0x00000002);
    clientConsentTimeUsec_ = 0L;
  }

  public static final int SYNC_CONSENT_FIELD_NUMBER = 7;
  /**
   * <code>.sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;</code>
   */
  @java.lang.Override
  public boolean hasSyncConsent() {
    return consentCase_ == 7;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent getSyncConsent() {
    if (consentCase_ == 7) {
       return (org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent) consent_;
    }
    return org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent.getDefaultInstance();
  }
  /**
   * <code>.sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;</code>
   */
  private void setSyncConsent(org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent value) {
    value.getClass();
  consent_ = value;
    consentCase_ = 7;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;</code>
   */
  private void mergeSyncConsent(org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent value) {
    value.getClass();
  if (consentCase_ == 7 &&
        consent_ != org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent.getDefaultInstance()) {
      consent_ = org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent.newBuilder((org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent) consent_)
          .mergeFrom(value).buildPartial();
    } else {
      consent_ = value;
    }
    consentCase_ = 7;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;</code>
   */
  private void clearSyncConsent() {
    if (consentCase_ == 7) {
      consentCase_ = 0;
      consent_ = null;
    }
  }

  public static final int ARC_BACKUP_AND_RESTORE_CONSENT_FIELD_NUMBER = 8;
  /**
   * <code>.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;</code>
   */
  @java.lang.Override
  public boolean hasArcBackupAndRestoreConsent() {
    return consentCase_ == 8;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent getArcBackupAndRestoreConsent() {
    if (consentCase_ == 8) {
       return (org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent) consent_;
    }
    return org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent.getDefaultInstance();
  }
  /**
   * <code>.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;</code>
   */
  private void setArcBackupAndRestoreConsent(org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent value) {
    value.getClass();
  consent_ = value;
    consentCase_ = 8;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;</code>
   */
  private void mergeArcBackupAndRestoreConsent(org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent value) {
    value.getClass();
  if (consentCase_ == 8 &&
        consent_ != org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent.getDefaultInstance()) {
      consent_ = org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent.newBuilder((org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent) consent_)
          .mergeFrom(value).buildPartial();
    } else {
      consent_ = value;
    }
    consentCase_ = 8;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;</code>
   */
  private void clearArcBackupAndRestoreConsent() {
    if (consentCase_ == 8) {
      consentCase_ = 0;
      consent_ = null;
    }
  }

  public static final int ARC_LOCATION_SERVICE_CONSENT_FIELD_NUMBER = 9;
  /**
   * <code>.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;</code>
   */
  @java.lang.Override
  public boolean hasArcLocationServiceConsent() {
    return consentCase_ == 9;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent getArcLocationServiceConsent() {
    if (consentCase_ == 9) {
       return (org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent) consent_;
    }
    return org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent.getDefaultInstance();
  }
  /**
   * <code>.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;</code>
   */
  private void setArcLocationServiceConsent(org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent value) {
    value.getClass();
  consent_ = value;
    consentCase_ = 9;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;</code>
   */
  private void mergeArcLocationServiceConsent(org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent value) {
    value.getClass();
  if (consentCase_ == 9 &&
        consent_ != org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent.getDefaultInstance()) {
      consent_ = org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent.newBuilder((org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent) consent_)
          .mergeFrom(value).buildPartial();
    } else {
      consent_ = value;
    }
    consentCase_ = 9;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;</code>
   */
  private void clearArcLocationServiceConsent() {
    if (consentCase_ == 9) {
      consentCase_ = 0;
      consent_ = null;
    }
  }

  public static final int ARC_PLAY_TERMS_OF_SERVICE_CONSENT_FIELD_NUMBER = 10;
  /**
   * <code>.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;</code>
   */
  @java.lang.Override
  public boolean hasArcPlayTermsOfServiceConsent() {
    return consentCase_ == 10;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent getArcPlayTermsOfServiceConsent() {
    if (consentCase_ == 10) {
       return (org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent) consent_;
    }
    return org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent.getDefaultInstance();
  }
  /**
   * <code>.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;</code>
   */
  private void setArcPlayTermsOfServiceConsent(org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent value) {
    value.getClass();
  consent_ = value;
    consentCase_ = 10;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;</code>
   */
  private void mergeArcPlayTermsOfServiceConsent(org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent value) {
    value.getClass();
  if (consentCase_ == 10 &&
        consent_ != org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent.getDefaultInstance()) {
      consent_ = org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent.newBuilder((org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent) consent_)
          .mergeFrom(value).buildPartial();
    } else {
      consent_ = value;
    }
    consentCase_ = 10;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;</code>
   */
  private void clearArcPlayTermsOfServiceConsent() {
    if (consentCase_ == 10) {
      consentCase_ = 0;
      consent_ = null;
    }
  }

  public static final int UNIFIED_CONSENT_FIELD_NUMBER = 13;
  /**
   * <code>.sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean hasUnifiedConsent() {
    return consentCase_ == 13;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent getUnifiedConsent() {
    if (consentCase_ == 13) {
       return (org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent) consent_;
    }
    return org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent.getDefaultInstance();
  }
  /**
   * <code>.sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13 [deprecated = true];</code>
   */
  private void setUnifiedConsent(org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent value) {
    value.getClass();
  consent_ = value;
    consentCase_ = 13;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13 [deprecated = true];</code>
   */
  private void mergeUnifiedConsent(org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent value) {
    value.getClass();
  if (consentCase_ == 13 &&
        consent_ != org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent.getDefaultInstance()) {
      consent_ = org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent.newBuilder((org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent) consent_)
          .mergeFrom(value).buildPartial();
    } else {
      consent_ = value;
    }
    consentCase_ = 13;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13 [deprecated = true];</code>
   */
  private void clearUnifiedConsent() {
    if (consentCase_ == 13) {
      consentCase_ = 0;
      consent_ = null;
    }
  }

  public static final int ASSISTANT_ACTIVITY_CONTROL_CONSENT_FIELD_NUMBER = 14;
  /**
   * <code>.sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;</code>
   */
  @java.lang.Override
  public boolean hasAssistantActivityControlConsent() {
    return consentCase_ == 14;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent getAssistantActivityControlConsent() {
    if (consentCase_ == 14) {
       return (org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent) consent_;
    }
    return org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent.getDefaultInstance();
  }
  /**
   * <code>.sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;</code>
   */
  private void setAssistantActivityControlConsent(org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent value) {
    value.getClass();
  consent_ = value;
    consentCase_ = 14;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;</code>
   */
  private void mergeAssistantActivityControlConsent(org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent value) {
    value.getClass();
  if (consentCase_ == 14 &&
        consent_ != org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent.getDefaultInstance()) {
      consent_ = org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent.newBuilder((org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent) consent_)
          .mergeFrom(value).buildPartial();
    } else {
      consent_ = value;
    }
    consentCase_ = 14;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;</code>
   */
  private void clearAssistantActivityControlConsent() {
    if (consentCase_ == 14) {
      consentCase_ = 0;
      consent_ = null;
    }
  }

  public static final int ACCOUNT_PASSWORDS_CONSENT_FIELD_NUMBER = 15;
  /**
   * <code>.sync_pb.UserConsentTypes.AccountPasswordsConsent account_passwords_consent = 15;</code>
   */
  @java.lang.Override
  public boolean hasAccountPasswordsConsent() {
    return consentCase_ == 15;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.AccountPasswordsConsent account_passwords_consent = 15;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.UserConsentTypes.AccountPasswordsConsent getAccountPasswordsConsent() {
    if (consentCase_ == 15) {
       return (org.chromium.components.sync.protocol.UserConsentTypes.AccountPasswordsConsent) consent_;
    }
    return org.chromium.components.sync.protocol.UserConsentTypes.AccountPasswordsConsent.getDefaultInstance();
  }
  /**
   * <code>.sync_pb.UserConsentTypes.AccountPasswordsConsent account_passwords_consent = 15;</code>
   */
  private void setAccountPasswordsConsent(org.chromium.components.sync.protocol.UserConsentTypes.AccountPasswordsConsent value) {
    value.getClass();
  consent_ = value;
    consentCase_ = 15;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.AccountPasswordsConsent account_passwords_consent = 15;</code>
   */
  private void mergeAccountPasswordsConsent(org.chromium.components.sync.protocol.UserConsentTypes.AccountPasswordsConsent value) {
    value.getClass();
  if (consentCase_ == 15 &&
        consent_ != org.chromium.components.sync.protocol.UserConsentTypes.AccountPasswordsConsent.getDefaultInstance()) {
      consent_ = org.chromium.components.sync.protocol.UserConsentTypes.AccountPasswordsConsent.newBuilder((org.chromium.components.sync.protocol.UserConsentTypes.AccountPasswordsConsent) consent_)
          .mergeFrom(value).buildPartial();
    } else {
      consent_ = value;
    }
    consentCase_ = 15;
  }
  /**
   * <code>.sync_pb.UserConsentTypes.AccountPasswordsConsent account_passwords_consent = 15;</code>
   */
  private void clearAccountPasswordsConsent() {
    if (consentCase_ == 15) {
      consentCase_ = 0;
      consent_ = null;
    }
  }

  public static final int ACCOUNT_ID_FIELD_NUMBER = 6;
  private java.lang.String accountId_;
  /**
   * <pre>
   * The account ID of the user who gave the consent. This field is used
   * by UserEventService to distinguish consents from different users,
   * as UserConsent does not get deleted when a user signs out. However,
   * it should be cleared before being sent over the wire, as the UserEvent
   * is sent over an authenticated channel, so this information would be
   * redundant.
   * For semantics and usage of the |account_id| in the signin codebase,
   * see IdentityManager::GetPrimaryAccountId() or CoreAccountId.
   * </pre>
   *
   * <code>optional string account_id = 6;</code>
   * @return Whether the accountId field is set.
   */
  @java.lang.Override
  public boolean hasAccountId() {
    return ((bitField0_ & 0x00000200) != 0);
  }
  /**
   * <pre>
   * The account ID of the user who gave the consent. This field is used
   * by UserEventService to distinguish consents from different users,
   * as UserConsent does not get deleted when a user signs out. However,
   * it should be cleared before being sent over the wire, as the UserEvent
   * is sent over an authenticated channel, so this information would be
   * redundant.
   * For semantics and usage of the |account_id| in the signin codebase,
   * see IdentityManager::GetPrimaryAccountId() or CoreAccountId.
   * </pre>
   *
   * <code>optional string account_id = 6;</code>
   * @return The accountId.
   */
  @java.lang.Override
  public java.lang.String getAccountId() {
    return accountId_;
  }
  /**
   * <pre>
   * The account ID of the user who gave the consent. This field is used
   * by UserEventService to distinguish consents from different users,
   * as UserConsent does not get deleted when a user signs out. However,
   * it should be cleared before being sent over the wire, as the UserEvent
   * is sent over an authenticated channel, so this information would be
   * redundant.
   * For semantics and usage of the |account_id| in the signin codebase,
   * see IdentityManager::GetPrimaryAccountId() or CoreAccountId.
   * </pre>
   *
   * <code>optional string account_id = 6;</code>
   * @return The bytes for accountId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAccountIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(accountId_);
  }
  /**
   * <pre>
   * The account ID of the user who gave the consent. This field is used
   * by UserEventService to distinguish consents from different users,
   * as UserConsent does not get deleted when a user signs out. However,
   * it should be cleared before being sent over the wire, as the UserEvent
   * is sent over an authenticated channel, so this information would be
   * redundant.
   * For semantics and usage of the |account_id| in the signin codebase,
   * see IdentityManager::GetPrimaryAccountId() or CoreAccountId.
   * </pre>
   *
   * <code>optional string account_id = 6;</code>
   * @param value The accountId to set.
   */
  private void setAccountId(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000200;
    accountId_ = value;
  }
  /**
   * <pre>
   * The account ID of the user who gave the consent. This field is used
   * by UserEventService to distinguish consents from different users,
   * as UserConsent does not get deleted when a user signs out. However,
   * it should be cleared before being sent over the wire, as the UserEvent
   * is sent over an authenticated channel, so this information would be
   * redundant.
   * For semantics and usage of the |account_id| in the signin codebase,
   * see IdentityManager::GetPrimaryAccountId() or CoreAccountId.
   * </pre>
   *
   * <code>optional string account_id = 6;</code>
   */
  private void clearAccountId() {
    bitField0_ = (bitField0_ & ~0x00000200);
    accountId_ = getDefaultInstance().getAccountId();
  }
  /**
   * <pre>
   * The account ID of the user who gave the consent. This field is used
   * by UserEventService to distinguish consents from different users,
   * as UserConsent does not get deleted when a user signs out. However,
   * it should be cleared before being sent over the wire, as the UserEvent
   * is sent over an authenticated channel, so this information would be
   * redundant.
   * For semantics and usage of the |account_id| in the signin codebase,
   * see IdentityManager::GetPrimaryAccountId() or CoreAccountId.
   * </pre>
   *
   * <code>optional string account_id = 6;</code>
   * @param value The bytes for accountId to set.
   */
  private void setAccountIdBytes(
      com.google.protobuf.ByteString value) {
    accountId_ = value.toStringUtf8();
    bitField0_ |= 0x00000200;
  }

  public static final int FEATURE_FIELD_NUMBER = 1;
  private int feature_;
  /**
   * <code>optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];</code>
   * @return Whether the feature field is set.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean hasFeature() {
    return ((bitField0_ & 0x00000400) != 0);
  }
  /**
   * <code>optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];</code>
   * @return The feature.
   */
  @java.lang.Override
  @java.lang.Deprecated public org.chromium.components.sync.protocol.UserConsentSpecifics.Feature getFeature() {
    org.chromium.components.sync.protocol.UserConsentSpecifics.Feature result = org.chromium.components.sync.protocol.UserConsentSpecifics.Feature.forNumber(feature_);
    return result == null ? org.chromium.components.sync.protocol.UserConsentSpecifics.Feature.FEATURE_UNSPECIFIED : result;
  }
  /**
   * <code>optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];</code>
   * @param value The feature to set.
   */
  private void setFeature(org.chromium.components.sync.protocol.UserConsentSpecifics.Feature value) {
    feature_ = value.getNumber();
    bitField0_ |= 0x00000400;
  }
  /**
   * <code>optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];</code>
   */
  private void clearFeature() {
    bitField0_ = (bitField0_ & ~0x00000400);
    feature_ = 0;
  }

  public static final int DESCRIPTION_GRD_IDS_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.IntList descriptionGrdIds_;
  /**
   * <pre>
   * Ids of the strings of the consent text presented to the user.
   * </pre>
   *
   * <code>repeated int32 description_grd_ids = 2 [deprecated = true];</code>
   * @return A list containing the descriptionGrdIds.
   */
  @java.lang.Override
  @java.lang.Deprecated public java.util.List<java.lang.Integer>
      getDescriptionGrdIdsList() {
    return descriptionGrdIds_;
  }
  /**
   * <pre>
   * Ids of the strings of the consent text presented to the user.
   * </pre>
   *
   * <code>repeated int32 description_grd_ids = 2 [deprecated = true];</code>
   * @return The count of descriptionGrdIds.
   */
  @java.lang.Override
  @java.lang.Deprecated public int getDescriptionGrdIdsCount() {
    return descriptionGrdIds_.size();
  }
  /**
   * <pre>
   * Ids of the strings of the consent text presented to the user.
   * </pre>
   *
   * <code>repeated int32 description_grd_ids = 2 [deprecated = true];</code>
   * @param index The index of the element to return.
   * @return The descriptionGrdIds at the given index.
   */
  @java.lang.Override
  @java.lang.Deprecated public int getDescriptionGrdIds(int index) {
    return descriptionGrdIds_.getInt(index);
  }
  private void ensureDescriptionGrdIdsIsMutable() {
    com.google.protobuf.Internal.IntList tmp = descriptionGrdIds_;
    if (!tmp.isModifiable()) {
      descriptionGrdIds_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <pre>
   * Ids of the strings of the consent text presented to the user.
   * </pre>
   *
   * <code>repeated int32 description_grd_ids = 2 [deprecated = true];</code>
   * @param index The index to set the value at.
   * @param value The descriptionGrdIds to set.
   */
  private void setDescriptionGrdIds(
      int index, int value) {
    ensureDescriptionGrdIdsIsMutable();
    descriptionGrdIds_.setInt(index, value);
  }
  /**
   * <pre>
   * Ids of the strings of the consent text presented to the user.
   * </pre>
   *
   * <code>repeated int32 description_grd_ids = 2 [deprecated = true];</code>
   * @param value The descriptionGrdIds to add.
   */
  private void addDescriptionGrdIds(int value) {
    ensureDescriptionGrdIdsIsMutable();
    descriptionGrdIds_.addInt(value);
  }
  /**
   * <pre>
   * Ids of the strings of the consent text presented to the user.
   * </pre>
   *
   * <code>repeated int32 description_grd_ids = 2 [deprecated = true];</code>
   * @param values The descriptionGrdIds to add.
   */
  private void addAllDescriptionGrdIds(
      java.lang.Iterable<? extends java.lang.Integer> values) {
    ensureDescriptionGrdIdsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, descriptionGrdIds_);
  }
  /**
   * <pre>
   * Ids of the strings of the consent text presented to the user.
   * </pre>
   *
   * <code>repeated int32 description_grd_ids = 2 [deprecated = true];</code>
   */
  private void clearDescriptionGrdIds() {
    descriptionGrdIds_ = emptyIntList();
  }

  public static final int CONFIRMATION_GRD_ID_FIELD_NUMBER = 3;
  private int confirmationGrdId_;
  /**
   * <pre>
   * Id of the string of the UI element the user clicked when consenting.
   * </pre>
   *
   * <code>optional int32 confirmation_grd_id = 3 [deprecated = true];</code>
   * @return Whether the confirmationGrdId field is set.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean hasConfirmationGrdId() {
    return ((bitField0_ & 0x00000800) != 0);
  }
  /**
   * <pre>
   * Id of the string of the UI element the user clicked when consenting.
   * </pre>
   *
   * <code>optional int32 confirmation_grd_id = 3 [deprecated = true];</code>
   * @return The confirmationGrdId.
   */
  @java.lang.Override
  @java.lang.Deprecated public int getConfirmationGrdId() {
    return confirmationGrdId_;
  }
  /**
   * <pre>
   * Id of the string of the UI element the user clicked when consenting.
   * </pre>
   *
   * <code>optional int32 confirmation_grd_id = 3 [deprecated = true];</code>
   * @param value The confirmationGrdId to set.
   */
  private void setConfirmationGrdId(int value) {
    bitField0_ |= 0x00000800;
    confirmationGrdId_ = value;
  }
  /**
   * <pre>
   * Id of the string of the UI element the user clicked when consenting.
   * </pre>
   *
   * <code>optional int32 confirmation_grd_id = 3 [deprecated = true];</code>
   */
  private void clearConfirmationGrdId() {
    bitField0_ = (bitField0_ & ~0x00000800);
    confirmationGrdId_ = 0;
  }

  public static final int STATUS_FIELD_NUMBER = 5;
  private int status_;
  /**
   * <pre>
   * Was the consent for |feature| given or not given (denied/revoked)?
   * </pre>
   *
   * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];</code>
   * @return Whether the status field is set.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean hasStatus() {
    return ((bitField0_ & 0x00001000) != 0);
  }
  /**
   * <pre>
   * Was the consent for |feature| given or not given (denied/revoked)?
   * </pre>
   *
   * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];</code>
   * @return The status.
   */
  @java.lang.Override
  @java.lang.Deprecated public org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus() {
    org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus result = org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.forNumber(status_);
    return result == null ? org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.CONSENT_STATUS_UNSPECIFIED : result;
  }
  /**
   * <pre>
   * Was the consent for |feature| given or not given (denied/revoked)?
   * </pre>
   *
   * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];</code>
   * @param value The status to set.
   */
  private void setStatus(org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value) {
    status_ = value.getNumber();
    bitField0_ |= 0x00001000;
  }
  /**
   * <pre>
   * Was the consent for |feature| given or not given (denied/revoked)?
   * </pre>
   *
   * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];</code>
   */
  private void clearStatus() {
    bitField0_ = (bitField0_ & ~0x00001000);
    status_ = 0;
  }

  public static org.chromium.components.sync.protocol.UserConsentSpecifics parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.UserConsentSpecifics parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UserConsentSpecifics parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.UserConsentSpecifics parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UserConsentSpecifics parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.UserConsentSpecifics parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UserConsentSpecifics parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.UserConsentSpecifics parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UserConsentSpecifics parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.UserConsentSpecifics parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.UserConsentSpecifics parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.UserConsentSpecifics parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.UserConsentSpecifics prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Next id: 14
   * </pre>
   *
   * Protobuf type {@code sync_pb.UserConsentSpecifics}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.UserConsentSpecifics, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.UserConsentSpecifics)
      org.chromium.components.sync.protocol.UserConsentSpecificsOrBuilder {
    // Construct using org.chromium.components.sync.protocol.UserConsentSpecifics.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @java.lang.Override
    public ConsentCase
        getConsentCase() {
      return instance.getConsentCase();
    }

    public Builder clearConsent() {
      copyOnWrite();
      instance.clearConsent();
      return this;
    }


    /**
     * <pre>
     * The UI language Chrome is using, represented as the IETF language tag
     * defined in BCP 47. The region subtag is not included when it adds no
     * distinguishing information to the language tag (e.g. both "en-US"
     * and "fr" are correct here).
     * </pre>
     *
     * <code>optional string locale = 4;</code>
     * @return Whether the locale field is set.
     */
    @java.lang.Override
    public boolean hasLocale() {
      return instance.hasLocale();
    }
    /**
     * <pre>
     * The UI language Chrome is using, represented as the IETF language tag
     * defined in BCP 47. The region subtag is not included when it adds no
     * distinguishing information to the language tag (e.g. both "en-US"
     * and "fr" are correct here).
     * </pre>
     *
     * <code>optional string locale = 4;</code>
     * @return The locale.
     */
    @java.lang.Override
    public java.lang.String getLocale() {
      return instance.getLocale();
    }
    /**
     * <pre>
     * The UI language Chrome is using, represented as the IETF language tag
     * defined in BCP 47. The region subtag is not included when it adds no
     * distinguishing information to the language tag (e.g. both "en-US"
     * and "fr" are correct here).
     * </pre>
     *
     * <code>optional string locale = 4;</code>
     * @return The bytes for locale.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLocaleBytes() {
      return instance.getLocaleBytes();
    }
    /**
     * <pre>
     * The UI language Chrome is using, represented as the IETF language tag
     * defined in BCP 47. The region subtag is not included when it adds no
     * distinguishing information to the language tag (e.g. both "en-US"
     * and "fr" are correct here).
     * </pre>
     *
     * <code>optional string locale = 4;</code>
     * @param value The locale to set.
     * @return This builder for chaining.
     */
    public Builder setLocale(
        java.lang.String value) {
      copyOnWrite();
      instance.setLocale(value);
      return this;
    }
    /**
     * <pre>
     * The UI language Chrome is using, represented as the IETF language tag
     * defined in BCP 47. The region subtag is not included when it adds no
     * distinguishing information to the language tag (e.g. both "en-US"
     * and "fr" are correct here).
     * </pre>
     *
     * <code>optional string locale = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearLocale() {
      copyOnWrite();
      instance.clearLocale();
      return this;
    }
    /**
     * <pre>
     * The UI language Chrome is using, represented as the IETF language tag
     * defined in BCP 47. The region subtag is not included when it adds no
     * distinguishing information to the language tag (e.g. both "en-US"
     * and "fr" are correct here).
     * </pre>
     *
     * <code>optional string locale = 4;</code>
     * @param value The bytes for locale to set.
     * @return This builder for chaining.
     */
    public Builder setLocaleBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setLocaleBytes(value);
      return this;
    }

    /**
     * <pre>
     * The local time on the client when the user consent was recorded. The time
     * as measured by client is given in microseconds since Windows epoch. This
     * is needed since user consent recording may happen when a client is
     * offline.
     * </pre>
     *
     * <code>optional int64 client_consent_time_usec = 12;</code>
     * @return Whether the clientConsentTimeUsec field is set.
     */
    @java.lang.Override
    public boolean hasClientConsentTimeUsec() {
      return instance.hasClientConsentTimeUsec();
    }
    /**
     * <pre>
     * The local time on the client when the user consent was recorded. The time
     * as measured by client is given in microseconds since Windows epoch. This
     * is needed since user consent recording may happen when a client is
     * offline.
     * </pre>
     *
     * <code>optional int64 client_consent_time_usec = 12;</code>
     * @return The clientConsentTimeUsec.
     */
    @java.lang.Override
    public long getClientConsentTimeUsec() {
      return instance.getClientConsentTimeUsec();
    }
    /**
     * <pre>
     * The local time on the client when the user consent was recorded. The time
     * as measured by client is given in microseconds since Windows epoch. This
     * is needed since user consent recording may happen when a client is
     * offline.
     * </pre>
     *
     * <code>optional int64 client_consent_time_usec = 12;</code>
     * @param value The clientConsentTimeUsec to set.
     * @return This builder for chaining.
     */
    public Builder setClientConsentTimeUsec(long value) {
      copyOnWrite();
      instance.setClientConsentTimeUsec(value);
      return this;
    }
    /**
     * <pre>
     * The local time on the client when the user consent was recorded. The time
     * as measured by client is given in microseconds since Windows epoch. This
     * is needed since user consent recording may happen when a client is
     * offline.
     * </pre>
     *
     * <code>optional int64 client_consent_time_usec = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearClientConsentTimeUsec() {
      copyOnWrite();
      instance.clearClientConsentTimeUsec();
      return this;
    }

    /**
     * <code>.sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;</code>
     */
    @java.lang.Override
    public boolean hasSyncConsent() {
      return instance.hasSyncConsent();
    }
    /**
     * <code>.sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent getSyncConsent() {
      return instance.getSyncConsent();
    }
    /**
     * <code>.sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;</code>
     */
    public Builder setSyncConsent(org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent value) {
      copyOnWrite();
      instance.setSyncConsent(value);
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;</code>
     */
    public Builder setSyncConsent(
        org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent.Builder builderForValue) {
      copyOnWrite();
      instance.setSyncConsent(builderForValue.build());
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;</code>
     */
    public Builder mergeSyncConsent(org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent value) {
      copyOnWrite();
      instance.mergeSyncConsent(value);
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.SyncConsent sync_consent = 7;</code>
     */
    public Builder clearSyncConsent() {
      copyOnWrite();
      instance.clearSyncConsent();
      return this;
    }

    /**
     * <code>.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;</code>
     */
    @java.lang.Override
    public boolean hasArcBackupAndRestoreConsent() {
      return instance.hasArcBackupAndRestoreConsent();
    }
    /**
     * <code>.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent getArcBackupAndRestoreConsent() {
      return instance.getArcBackupAndRestoreConsent();
    }
    /**
     * <code>.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;</code>
     */
    public Builder setArcBackupAndRestoreConsent(org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent value) {
      copyOnWrite();
      instance.setArcBackupAndRestoreConsent(value);
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;</code>
     */
    public Builder setArcBackupAndRestoreConsent(
        org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent.Builder builderForValue) {
      copyOnWrite();
      instance.setArcBackupAndRestoreConsent(builderForValue.build());
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;</code>
     */
    public Builder mergeArcBackupAndRestoreConsent(org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent value) {
      copyOnWrite();
      instance.mergeArcBackupAndRestoreConsent(value);
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.ArcBackupAndRestoreConsent arc_backup_and_restore_consent = 8;</code>
     */
    public Builder clearArcBackupAndRestoreConsent() {
      copyOnWrite();
      instance.clearArcBackupAndRestoreConsent();
      return this;
    }

    /**
     * <code>.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;</code>
     */
    @java.lang.Override
    public boolean hasArcLocationServiceConsent() {
      return instance.hasArcLocationServiceConsent();
    }
    /**
     * <code>.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent getArcLocationServiceConsent() {
      return instance.getArcLocationServiceConsent();
    }
    /**
     * <code>.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;</code>
     */
    public Builder setArcLocationServiceConsent(org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent value) {
      copyOnWrite();
      instance.setArcLocationServiceConsent(value);
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;</code>
     */
    public Builder setArcLocationServiceConsent(
        org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent.Builder builderForValue) {
      copyOnWrite();
      instance.setArcLocationServiceConsent(builderForValue.build());
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;</code>
     */
    public Builder mergeArcLocationServiceConsent(org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent value) {
      copyOnWrite();
      instance.mergeArcLocationServiceConsent(value);
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.ArcGoogleLocationServiceConsent arc_location_service_consent = 9;</code>
     */
    public Builder clearArcLocationServiceConsent() {
      copyOnWrite();
      instance.clearArcLocationServiceConsent();
      return this;
    }

    /**
     * <code>.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;</code>
     */
    @java.lang.Override
    public boolean hasArcPlayTermsOfServiceConsent() {
      return instance.hasArcPlayTermsOfServiceConsent();
    }
    /**
     * <code>.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent getArcPlayTermsOfServiceConsent() {
      return instance.getArcPlayTermsOfServiceConsent();
    }
    /**
     * <code>.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;</code>
     */
    public Builder setArcPlayTermsOfServiceConsent(org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent value) {
      copyOnWrite();
      instance.setArcPlayTermsOfServiceConsent(value);
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;</code>
     */
    public Builder setArcPlayTermsOfServiceConsent(
        org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent.Builder builderForValue) {
      copyOnWrite();
      instance.setArcPlayTermsOfServiceConsent(builderForValue.build());
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;</code>
     */
    public Builder mergeArcPlayTermsOfServiceConsent(org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent value) {
      copyOnWrite();
      instance.mergeArcPlayTermsOfServiceConsent(value);
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.ArcPlayTermsOfServiceConsent arc_play_terms_of_service_consent = 10;</code>
     */
    public Builder clearArcPlayTermsOfServiceConsent() {
      copyOnWrite();
      instance.clearArcPlayTermsOfServiceConsent();
      return this;
    }

    /**
     * <code>.sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasUnifiedConsent() {
      return instance.hasUnifiedConsent();
    }
    /**
     * <code>.sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent getUnifiedConsent() {
      return instance.getUnifiedConsent();
    }
    /**
     * <code>.sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setUnifiedConsent(org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent value) {
      copyOnWrite();
      instance.setUnifiedConsent(value);
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setUnifiedConsent(
        org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent.Builder builderForValue) {
      copyOnWrite();
      instance.setUnifiedConsent(builderForValue.build());
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder mergeUnifiedConsent(org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent value) {
      copyOnWrite();
      instance.mergeUnifiedConsent(value);
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.UnifiedConsent unified_consent = 13 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearUnifiedConsent() {
      copyOnWrite();
      instance.clearUnifiedConsent();
      return this;
    }

    /**
     * <code>.sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;</code>
     */
    @java.lang.Override
    public boolean hasAssistantActivityControlConsent() {
      return instance.hasAssistantActivityControlConsent();
    }
    /**
     * <code>.sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent getAssistantActivityControlConsent() {
      return instance.getAssistantActivityControlConsent();
    }
    /**
     * <code>.sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;</code>
     */
    public Builder setAssistantActivityControlConsent(org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent value) {
      copyOnWrite();
      instance.setAssistantActivityControlConsent(value);
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;</code>
     */
    public Builder setAssistantActivityControlConsent(
        org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent.Builder builderForValue) {
      copyOnWrite();
      instance.setAssistantActivityControlConsent(builderForValue.build());
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;</code>
     */
    public Builder mergeAssistantActivityControlConsent(org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent value) {
      copyOnWrite();
      instance.mergeAssistantActivityControlConsent(value);
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.AssistantActivityControlConsent assistant_activity_control_consent = 14;</code>
     */
    public Builder clearAssistantActivityControlConsent() {
      copyOnWrite();
      instance.clearAssistantActivityControlConsent();
      return this;
    }

    /**
     * <code>.sync_pb.UserConsentTypes.AccountPasswordsConsent account_passwords_consent = 15;</code>
     */
    @java.lang.Override
    public boolean hasAccountPasswordsConsent() {
      return instance.hasAccountPasswordsConsent();
    }
    /**
     * <code>.sync_pb.UserConsentTypes.AccountPasswordsConsent account_passwords_consent = 15;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.UserConsentTypes.AccountPasswordsConsent getAccountPasswordsConsent() {
      return instance.getAccountPasswordsConsent();
    }
    /**
     * <code>.sync_pb.UserConsentTypes.AccountPasswordsConsent account_passwords_consent = 15;</code>
     */
    public Builder setAccountPasswordsConsent(org.chromium.components.sync.protocol.UserConsentTypes.AccountPasswordsConsent value) {
      copyOnWrite();
      instance.setAccountPasswordsConsent(value);
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.AccountPasswordsConsent account_passwords_consent = 15;</code>
     */
    public Builder setAccountPasswordsConsent(
        org.chromium.components.sync.protocol.UserConsentTypes.AccountPasswordsConsent.Builder builderForValue) {
      copyOnWrite();
      instance.setAccountPasswordsConsent(builderForValue.build());
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.AccountPasswordsConsent account_passwords_consent = 15;</code>
     */
    public Builder mergeAccountPasswordsConsent(org.chromium.components.sync.protocol.UserConsentTypes.AccountPasswordsConsent value) {
      copyOnWrite();
      instance.mergeAccountPasswordsConsent(value);
      return this;
    }
    /**
     * <code>.sync_pb.UserConsentTypes.AccountPasswordsConsent account_passwords_consent = 15;</code>
     */
    public Builder clearAccountPasswordsConsent() {
      copyOnWrite();
      instance.clearAccountPasswordsConsent();
      return this;
    }

    /**
     * <pre>
     * The account ID of the user who gave the consent. This field is used
     * by UserEventService to distinguish consents from different users,
     * as UserConsent does not get deleted when a user signs out. However,
     * it should be cleared before being sent over the wire, as the UserEvent
     * is sent over an authenticated channel, so this information would be
     * redundant.
     * For semantics and usage of the |account_id| in the signin codebase,
     * see IdentityManager::GetPrimaryAccountId() or CoreAccountId.
     * </pre>
     *
     * <code>optional string account_id = 6;</code>
     * @return Whether the accountId field is set.
     */
    @java.lang.Override
    public boolean hasAccountId() {
      return instance.hasAccountId();
    }
    /**
     * <pre>
     * The account ID of the user who gave the consent. This field is used
     * by UserEventService to distinguish consents from different users,
     * as UserConsent does not get deleted when a user signs out. However,
     * it should be cleared before being sent over the wire, as the UserEvent
     * is sent over an authenticated channel, so this information would be
     * redundant.
     * For semantics and usage of the |account_id| in the signin codebase,
     * see IdentityManager::GetPrimaryAccountId() or CoreAccountId.
     * </pre>
     *
     * <code>optional string account_id = 6;</code>
     * @return The accountId.
     */
    @java.lang.Override
    public java.lang.String getAccountId() {
      return instance.getAccountId();
    }
    /**
     * <pre>
     * The account ID of the user who gave the consent. This field is used
     * by UserEventService to distinguish consents from different users,
     * as UserConsent does not get deleted when a user signs out. However,
     * it should be cleared before being sent over the wire, as the UserEvent
     * is sent over an authenticated channel, so this information would be
     * redundant.
     * For semantics and usage of the |account_id| in the signin codebase,
     * see IdentityManager::GetPrimaryAccountId() or CoreAccountId.
     * </pre>
     *
     * <code>optional string account_id = 6;</code>
     * @return The bytes for accountId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getAccountIdBytes() {
      return instance.getAccountIdBytes();
    }
    /**
     * <pre>
     * The account ID of the user who gave the consent. This field is used
     * by UserEventService to distinguish consents from different users,
     * as UserConsent does not get deleted when a user signs out. However,
     * it should be cleared before being sent over the wire, as the UserEvent
     * is sent over an authenticated channel, so this information would be
     * redundant.
     * For semantics and usage of the |account_id| in the signin codebase,
     * see IdentityManager::GetPrimaryAccountId() or CoreAccountId.
     * </pre>
     *
     * <code>optional string account_id = 6;</code>
     * @param value The accountId to set.
     * @return This builder for chaining.
     */
    public Builder setAccountId(
        java.lang.String value) {
      copyOnWrite();
      instance.setAccountId(value);
      return this;
    }
    /**
     * <pre>
     * The account ID of the user who gave the consent. This field is used
     * by UserEventService to distinguish consents from different users,
     * as UserConsent does not get deleted when a user signs out. However,
     * it should be cleared before being sent over the wire, as the UserEvent
     * is sent over an authenticated channel, so this information would be
     * redundant.
     * For semantics and usage of the |account_id| in the signin codebase,
     * see IdentityManager::GetPrimaryAccountId() or CoreAccountId.
     * </pre>
     *
     * <code>optional string account_id = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearAccountId() {
      copyOnWrite();
      instance.clearAccountId();
      return this;
    }
    /**
     * <pre>
     * The account ID of the user who gave the consent. This field is used
     * by UserEventService to distinguish consents from different users,
     * as UserConsent does not get deleted when a user signs out. However,
     * it should be cleared before being sent over the wire, as the UserEvent
     * is sent over an authenticated channel, so this information would be
     * redundant.
     * For semantics and usage of the |account_id| in the signin codebase,
     * see IdentityManager::GetPrimaryAccountId() or CoreAccountId.
     * </pre>
     *
     * <code>optional string account_id = 6;</code>
     * @param value The bytes for accountId to set.
     * @return This builder for chaining.
     */
    public Builder setAccountIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setAccountIdBytes(value);
      return this;
    }

    /**
     * <code>optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];</code>
     * @return Whether the feature field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasFeature() {
      return instance.hasFeature();
    }
    /**
     * <code>optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];</code>
     * @return The feature.
     */
    @java.lang.Override
    @java.lang.Deprecated public org.chromium.components.sync.protocol.UserConsentSpecifics.Feature getFeature() {
      return instance.getFeature();
    }
    /**
     * <code>optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];</code>
     * @param value The enum numeric value on the wire for feature to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setFeature(org.chromium.components.sync.protocol.UserConsentSpecifics.Feature value) {
      copyOnWrite();
      instance.setFeature(value);
      return this;
    }
    /**
     * <code>optional .sync_pb.UserConsentSpecifics.Feature feature = 1 [deprecated = true];</code>
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearFeature() {
      copyOnWrite();
      instance.clearFeature();
      return this;
    }

    /**
     * <pre>
     * Ids of the strings of the consent text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 2 [deprecated = true];</code>
     * @return A list containing the descriptionGrdIds.
     */
    @java.lang.Override
    @java.lang.Deprecated public java.util.List<java.lang.Integer>
        getDescriptionGrdIdsList() {
      return java.util.Collections.unmodifiableList(
          instance.getDescriptionGrdIdsList());
    }
    /**
     * <pre>
     * Ids of the strings of the consent text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 2 [deprecated = true];</code>
     * @return The count of descriptionGrdIds.
     */
    @java.lang.Override
    @java.lang.Deprecated public int getDescriptionGrdIdsCount() {
      return instance.getDescriptionGrdIdsCount();
    }
    /**
     * <pre>
     * Ids of the strings of the consent text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 2 [deprecated = true];</code>
     * @param index The index of the element to return.
     * @return The descriptionGrdIds at the given index.
     */
    @java.lang.Override
    @java.lang.Deprecated public int getDescriptionGrdIds(int index) {
      return instance.getDescriptionGrdIds(index);
    }
    /**
     * <pre>
     * Ids of the strings of the consent text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 2 [deprecated = true];</code>
     * @param value The descriptionGrdIds to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setDescriptionGrdIds(
        int index, int value) {
      copyOnWrite();
      instance.setDescriptionGrdIds(index, value);
      return this;
    }
    /**
     * <pre>
     * Ids of the strings of the consent text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 2 [deprecated = true];</code>
     * @param value The descriptionGrdIds to add.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder addDescriptionGrdIds(int value) {
      copyOnWrite();
      instance.addDescriptionGrdIds(value);
      return this;
    }
    /**
     * <pre>
     * Ids of the strings of the consent text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 2 [deprecated = true];</code>
     * @param values The descriptionGrdIds to add.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder addAllDescriptionGrdIds(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllDescriptionGrdIds(values);
      return this;
    }
    /**
     * <pre>
     * Ids of the strings of the consent text presented to the user.
     * </pre>
     *
     * <code>repeated int32 description_grd_ids = 2 [deprecated = true];</code>
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearDescriptionGrdIds() {
      copyOnWrite();
      instance.clearDescriptionGrdIds();
      return this;
    }

    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 3 [deprecated = true];</code>
     * @return Whether the confirmationGrdId field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasConfirmationGrdId() {
      return instance.hasConfirmationGrdId();
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 3 [deprecated = true];</code>
     * @return The confirmationGrdId.
     */
    @java.lang.Override
    @java.lang.Deprecated public int getConfirmationGrdId() {
      return instance.getConfirmationGrdId();
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 3 [deprecated = true];</code>
     * @param value The confirmationGrdId to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setConfirmationGrdId(int value) {
      copyOnWrite();
      instance.setConfirmationGrdId(value);
      return this;
    }
    /**
     * <pre>
     * Id of the string of the UI element the user clicked when consenting.
     * </pre>
     *
     * <code>optional int32 confirmation_grd_id = 3 [deprecated = true];</code>
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearConfirmationGrdId() {
      copyOnWrite();
      instance.clearConfirmationGrdId();
      return this;
    }

    /**
     * <pre>
     * Was the consent for |feature| given or not given (denied/revoked)?
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];</code>
     * @return Whether the status field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasStatus() {
      return instance.hasStatus();
    }
    /**
     * <pre>
     * Was the consent for |feature| given or not given (denied/revoked)?
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];</code>
     * @return The status.
     */
    @java.lang.Override
    @java.lang.Deprecated public org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus getStatus() {
      return instance.getStatus();
    }
    /**
     * <pre>
     * Was the consent for |feature| given or not given (denied/revoked)?
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];</code>
     * @param value The enum numeric value on the wire for status to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setStatus(org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus value) {
      copyOnWrite();
      instance.setStatus(value);
      return this;
    }
    /**
     * <pre>
     * Was the consent for |feature| given or not given (denied/revoked)?
     * </pre>
     *
     * <code>optional .sync_pb.UserConsentTypes.ConsentStatus status = 5 [deprecated = true];</code>
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearStatus() {
      copyOnWrite();
      instance.clearStatus();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.UserConsentSpecifics)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.UserConsentSpecifics();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "consent_",
            "consentCase_",
            "bitField0_",
            "feature_",
            org.chromium.components.sync.protocol.UserConsentSpecifics.Feature.internalGetVerifier(),
            "descriptionGrdIds_",
            "confirmationGrdId_",
            "locale_",
            "status_",
            org.chromium.components.sync.protocol.UserConsentTypes.ConsentStatus.internalGetVerifier(),
            "accountId_",
            org.chromium.components.sync.protocol.UserConsentTypes.SyncConsent.class,
            org.chromium.components.sync.protocol.UserConsentTypes.ArcBackupAndRestoreConsent.class,
            org.chromium.components.sync.protocol.UserConsentTypes.ArcGoogleLocationServiceConsent.class,
            org.chromium.components.sync.protocol.UserConsentTypes.ArcPlayTermsOfServiceConsent.class,
            "clientConsentTimeUsec_",
            org.chromium.components.sync.protocol.UserConsentTypes.UnifiedConsent.class,
            org.chromium.components.sync.protocol.UserConsentTypes.AssistantActivityControlConsent.class,
            org.chromium.components.sync.protocol.UserConsentTypes.AccountPasswordsConsent.class,
          };
          java.lang.String info =
              "\u0001\u000e\u0001\u0001\u0001\u000f\u000e\u0000\u0001\u0000\u0001\u100c\n\u0002" +
              "\u0016\u0003\u1004\u000b\u0004\u1008\u0000\u0005\u100c\f\u0006\u1008\t\u0007\u103c" +
              "\u0000\b\u103c\u0000\t\u103c\u0000\n\u103c\u0000\f\u1002\u0001\r\u103c\u0000\u000e" +
              "\u103c\u0000\u000f\u103c\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.components.sync.protocol.UserConsentSpecifics> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.components.sync.protocol.UserConsentSpecifics.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.UserConsentSpecifics>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.UserConsentSpecifics)
  private static final org.chromium.components.sync.protocol.UserConsentSpecifics DEFAULT_INSTANCE;
  static {
    UserConsentSpecifics defaultInstance = new UserConsentSpecifics();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      UserConsentSpecifics.class, defaultInstance);
  }

  public static org.chromium.components.sync.protocol.UserConsentSpecifics getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<UserConsentSpecifics> PARSER;

  public static com.google.protobuf.Parser<UserConsentSpecifics> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

