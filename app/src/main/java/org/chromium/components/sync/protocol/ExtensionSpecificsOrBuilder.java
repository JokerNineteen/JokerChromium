// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/extension_specifics.proto

package org.chromium.components.sync.protocol;

public interface ExtensionSpecificsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sync_pb.ExtensionSpecifics)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * Globally unique id for this extension.
   * </pre>
   *
   * <code>optional string id = 1;</code>
   * @return Whether the id field is set.
   */
  boolean hasId();
  /**
   * <pre>
   * Globally unique id for this extension.
   * </pre>
   *
   * <code>optional string id = 1;</code>
   * @return The id.
   */
  java.lang.String getId();
  /**
   * <pre>
   * Globally unique id for this extension.
   * </pre>
   *
   * <code>optional string id = 1;</code>
   * @return The bytes for id.
   */
  com.google.protobuf.ByteString
      getIdBytes();

  /**
   * <pre>
   * The known installed version.
   * </pre>
   *
   * <code>optional string version = 2;</code>
   * @return Whether the version field is set.
   */
  boolean hasVersion();
  /**
   * <pre>
   * The known installed version.
   * </pre>
   *
   * <code>optional string version = 2;</code>
   * @return The version.
   */
  java.lang.String getVersion();
  /**
   * <pre>
   * The known installed version.
   * </pre>
   *
   * <code>optional string version = 2;</code>
   * @return The bytes for version.
   */
  com.google.protobuf.ByteString
      getVersionBytes();

  /**
   * <pre>
   * Auto-update URL to use for this extension.  May be blank, in
   * which case the default one (i.e., the one for the Chrome
   * Extensions Gallery) is used.
   * </pre>
   *
   * <code>optional string update_url = 3;</code>
   * @return Whether the updateUrl field is set.
   */
  boolean hasUpdateUrl();
  /**
   * <pre>
   * Auto-update URL to use for this extension.  May be blank, in
   * which case the default one (i.e., the one for the Chrome
   * Extensions Gallery) is used.
   * </pre>
   *
   * <code>optional string update_url = 3;</code>
   * @return The updateUrl.
   */
  java.lang.String getUpdateUrl();
  /**
   * <pre>
   * Auto-update URL to use for this extension.  May be blank, in
   * which case the default one (i.e., the one for the Chrome
   * Extensions Gallery) is used.
   * </pre>
   *
   * <code>optional string update_url = 3;</code>
   * @return The bytes for updateUrl.
   */
  com.google.protobuf.ByteString
      getUpdateUrlBytes();

  /**
   * <pre>
   * Whether or not this extension is enabled.
   * </pre>
   *
   * <code>optional bool enabled = 4;</code>
   * @return Whether the enabled field is set.
   */
  boolean hasEnabled();
  /**
   * <pre>
   * Whether or not this extension is enabled.
   * </pre>
   *
   * <code>optional bool enabled = 4;</code>
   * @return The enabled.
   */
  boolean getEnabled();

  /**
   * <pre>
   * Whether or not this extension is enabled in incognito mode.
   * </pre>
   *
   * <code>optional bool incognito_enabled = 5;</code>
   * @return Whether the incognitoEnabled field is set.
   */
  boolean hasIncognitoEnabled();
  /**
   * <pre>
   * Whether or not this extension is enabled in incognito mode.
   * </pre>
   *
   * <code>optional bool incognito_enabled = 5;</code>
   * @return The incognitoEnabled.
   */
  boolean getIncognitoEnabled();

  /**
   * <pre>
   * The name of the extension. Used for bookmark apps.
   * </pre>
   *
   * <code>optional string name = 6;</code>
   * @return Whether the name field is set.
   */
  boolean hasName();
  /**
   * <pre>
   * The name of the extension. Used for bookmark apps.
   * </pre>
   *
   * <code>optional string name = 6;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The name of the extension. Used for bookmark apps.
   * </pre>
   *
   * <code>optional string name = 6;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Whether this extension was installed remotely, and hasn't been approved by
   * a user in chrome yet.
   * </pre>
   *
   * <code>optional bool remote_install = 7;</code>
   * @return Whether the remoteInstall field is set.
   */
  boolean hasRemoteInstall();
  /**
   * <pre>
   * Whether this extension was installed remotely, and hasn't been approved by
   * a user in chrome yet.
   * </pre>
   *
   * <code>optional bool remote_install = 7;</code>
   * @return The remoteInstall.
   */
  boolean getRemoteInstall();

  /**
   * <pre>
   * DEPRECATED. See https://crbug.com/1014183.
   * </pre>
   *
   * <code>optional bool installed_by_custodian = 8 [deprecated = true];</code>
   * @return Whether the installedByCustodian field is set.
   */
  @java.lang.Deprecated boolean hasInstalledByCustodian();
  /**
   * <pre>
   * DEPRECATED. See https://crbug.com/1014183.
   * </pre>
   *
   * <code>optional bool installed_by_custodian = 8 [deprecated = true];</code>
   * @return The installedByCustodian.
   */
  @java.lang.Deprecated boolean getInstalledByCustodian();

  /**
   * <pre>
   * DEPRECATED. See https://crbug.com/839681.
   * </pre>
   *
   * <code>optional bool all_urls_enabled = 9 [deprecated = true];</code>
   * @return Whether the allUrlsEnabled field is set.
   */
  @java.lang.Deprecated boolean hasAllUrlsEnabled();
  /**
   * <pre>
   * DEPRECATED. See https://crbug.com/839681.
   * </pre>
   *
   * <code>optional bool all_urls_enabled = 9 [deprecated = true];</code>
   * @return The allUrlsEnabled.
   */
  @java.lang.Deprecated boolean getAllUrlsEnabled();

  /**
   * <pre>
   * Bitmask of the set of reasons why the extension is disabled (see
   * extensions::disable_reason::DisableReason). Only relevant when enabled ==
   * false. Note that old clients (&lt;M45) won't set this, even when enabled is
   * false.
   * </pre>
   *
   * <code>optional int32 disable_reasons = 10;</code>
   * @return Whether the disableReasons field is set.
   */
  boolean hasDisableReasons();
  /**
   * <pre>
   * Bitmask of the set of reasons why the extension is disabled (see
   * extensions::disable_reason::DisableReason). Only relevant when enabled ==
   * false. Note that old clients (&lt;M45) won't set this, even when enabled is
   * false.
   * </pre>
   *
   * <code>optional int32 disable_reasons = 10;</code>
   * @return The disableReasons.
   */
  int getDisableReasons();
}
