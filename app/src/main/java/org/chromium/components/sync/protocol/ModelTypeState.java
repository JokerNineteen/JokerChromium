// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/model_type_state.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * Sync proto to store data type global metadata in model type storage.
 * </pre>
 *
 * Protobuf type {@code sync_pb.ModelTypeState}
 */
public  final class ModelTypeState extends
    com.google.protobuf.GeneratedMessageLite<
        ModelTypeState, ModelTypeState.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.ModelTypeState)
    ModelTypeStateOrBuilder {
  private ModelTypeState() {
    encryptionKeyName_ = "";
    cacheGuid_ = "";
    authenticatedAccountId_ = "";
  }
  private int bitField0_;
  public static final int PROGRESS_MARKER_FIELD_NUMBER = 1;
  private org.chromium.components.sync.protocol.DataTypeProgressMarker progressMarker_;
  /**
   * <pre>
   * The latest progress markers received from the server.
   * </pre>
   *
   * <code>optional .sync_pb.DataTypeProgressMarker progress_marker = 1;</code>
   */
  @java.lang.Override
  public boolean hasProgressMarker() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The latest progress markers received from the server.
   * </pre>
   *
   * <code>optional .sync_pb.DataTypeProgressMarker progress_marker = 1;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.DataTypeProgressMarker getProgressMarker() {
    return progressMarker_ == null ? org.chromium.components.sync.protocol.DataTypeProgressMarker.getDefaultInstance() : progressMarker_;
  }
  /**
   * <pre>
   * The latest progress markers received from the server.
   * </pre>
   *
   * <code>optional .sync_pb.DataTypeProgressMarker progress_marker = 1;</code>
   */
  private void setProgressMarker(org.chromium.components.sync.protocol.DataTypeProgressMarker value) {
    value.getClass();
  progressMarker_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * The latest progress markers received from the server.
   * </pre>
   *
   * <code>optional .sync_pb.DataTypeProgressMarker progress_marker = 1;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeProgressMarker(org.chromium.components.sync.protocol.DataTypeProgressMarker value) {
    value.getClass();
  if (progressMarker_ != null &&
        progressMarker_ != org.chromium.components.sync.protocol.DataTypeProgressMarker.getDefaultInstance()) {
      progressMarker_ =
        org.chromium.components.sync.protocol.DataTypeProgressMarker.newBuilder(progressMarker_).mergeFrom(value).buildPartial();
    } else {
      progressMarker_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * The latest progress markers received from the server.
   * </pre>
   *
   * <code>optional .sync_pb.DataTypeProgressMarker progress_marker = 1;</code>
   */
  private void clearProgressMarker() {  progressMarker_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int TYPE_CONTEXT_FIELD_NUMBER = 2;
  private org.chromium.components.sync.protocol.DataTypeContext typeContext_;
  /**
   * <pre>
   * A data type context.  Sent to the server in every commit or update
   * request.  May be updated by either responses from the server or requests
   * made on the model thread.  The interpretation of this value may be
   * data-type specific.  Many data types ignore it.
   * </pre>
   *
   * <code>optional .sync_pb.DataTypeContext type_context = 2;</code>
   */
  @java.lang.Override
  public boolean hasTypeContext() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * A data type context.  Sent to the server in every commit or update
   * request.  May be updated by either responses from the server or requests
   * made on the model thread.  The interpretation of this value may be
   * data-type specific.  Many data types ignore it.
   * </pre>
   *
   * <code>optional .sync_pb.DataTypeContext type_context = 2;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.DataTypeContext getTypeContext() {
    return typeContext_ == null ? org.chromium.components.sync.protocol.DataTypeContext.getDefaultInstance() : typeContext_;
  }
  /**
   * <pre>
   * A data type context.  Sent to the server in every commit or update
   * request.  May be updated by either responses from the server or requests
   * made on the model thread.  The interpretation of this value may be
   * data-type specific.  Many data types ignore it.
   * </pre>
   *
   * <code>optional .sync_pb.DataTypeContext type_context = 2;</code>
   */
  private void setTypeContext(org.chromium.components.sync.protocol.DataTypeContext value) {
    value.getClass();
  typeContext_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <pre>
   * A data type context.  Sent to the server in every commit or update
   * request.  May be updated by either responses from the server or requests
   * made on the model thread.  The interpretation of this value may be
   * data-type specific.  Many data types ignore it.
   * </pre>
   *
   * <code>optional .sync_pb.DataTypeContext type_context = 2;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeTypeContext(org.chromium.components.sync.protocol.DataTypeContext value) {
    value.getClass();
  if (typeContext_ != null &&
        typeContext_ != org.chromium.components.sync.protocol.DataTypeContext.getDefaultInstance()) {
      typeContext_ =
        org.chromium.components.sync.protocol.DataTypeContext.newBuilder(typeContext_).mergeFrom(value).buildPartial();
    } else {
      typeContext_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * A data type context.  Sent to the server in every commit or update
   * request.  May be updated by either responses from the server or requests
   * made on the model thread.  The interpretation of this value may be
   * data-type specific.  Many data types ignore it.
   * </pre>
   *
   * <code>optional .sync_pb.DataTypeContext type_context = 2;</code>
   */
  private void clearTypeContext() {  typeContext_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int ENCRYPTION_KEY_NAME_FIELD_NUMBER = 3;
  private java.lang.String encryptionKeyName_;
  /**
   * <pre>
   * This value is set if this type's data should be encrypted on the server.
   * If this key changes, the client will need to re-commit all of its local
   * data to the server using the new encryption key.
   * </pre>
   *
   * <code>optional string encryption_key_name = 3;</code>
   * @return Whether the encryptionKeyName field is set.
   */
  @java.lang.Override
  public boolean hasEncryptionKeyName() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * This value is set if this type's data should be encrypted on the server.
   * If this key changes, the client will need to re-commit all of its local
   * data to the server using the new encryption key.
   * </pre>
   *
   * <code>optional string encryption_key_name = 3;</code>
   * @return The encryptionKeyName.
   */
  @java.lang.Override
  public java.lang.String getEncryptionKeyName() {
    return encryptionKeyName_;
  }
  /**
   * <pre>
   * This value is set if this type's data should be encrypted on the server.
   * If this key changes, the client will need to re-commit all of its local
   * data to the server using the new encryption key.
   * </pre>
   *
   * <code>optional string encryption_key_name = 3;</code>
   * @return The bytes for encryptionKeyName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getEncryptionKeyNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(encryptionKeyName_);
  }
  /**
   * <pre>
   * This value is set if this type's data should be encrypted on the server.
   * If this key changes, the client will need to re-commit all of its local
   * data to the server using the new encryption key.
   * </pre>
   *
   * <code>optional string encryption_key_name = 3;</code>
   * @param value The encryptionKeyName to set.
   */
  private void setEncryptionKeyName(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000004;
    encryptionKeyName_ = value;
  }
  /**
   * <pre>
   * This value is set if this type's data should be encrypted on the server.
   * If this key changes, the client will need to re-commit all of its local
   * data to the server using the new encryption key.
   * </pre>
   *
   * <code>optional string encryption_key_name = 3;</code>
   */
  private void clearEncryptionKeyName() {
    bitField0_ = (bitField0_ & ~0x00000004);
    encryptionKeyName_ = getDefaultInstance().getEncryptionKeyName();
  }
  /**
   * <pre>
   * This value is set if this type's data should be encrypted on the server.
   * If this key changes, the client will need to re-commit all of its local
   * data to the server using the new encryption key.
   * </pre>
   *
   * <code>optional string encryption_key_name = 3;</code>
   * @param value The bytes for encryptionKeyName to set.
   */
  private void setEncryptionKeyNameBytes(
      com.google.protobuf.ByteString value) {
    encryptionKeyName_ = value.toStringUtf8();
    bitField0_ |= 0x00000004;
  }

  public static final int INITIAL_SYNC_DONE_FIELD_NUMBER = 4;
  private boolean initialSyncDone_;
  /**
   * <pre>
   * This flag is set to true when the first download cycle is complete.  The
   * ModelTypeProcessor should not attempt to commit any items until this
   * flag is set.
   * </pre>
   *
   * <code>optional bool initial_sync_done = 4;</code>
   * @return Whether the initialSyncDone field is set.
   */
  @java.lang.Override
  public boolean hasInitialSyncDone() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * This flag is set to true when the first download cycle is complete.  The
   * ModelTypeProcessor should not attempt to commit any items until this
   * flag is set.
   * </pre>
   *
   * <code>optional bool initial_sync_done = 4;</code>
   * @return The initialSyncDone.
   */
  @java.lang.Override
  public boolean getInitialSyncDone() {
    return initialSyncDone_;
  }
  /**
   * <pre>
   * This flag is set to true when the first download cycle is complete.  The
   * ModelTypeProcessor should not attempt to commit any items until this
   * flag is set.
   * </pre>
   *
   * <code>optional bool initial_sync_done = 4;</code>
   * @param value The initialSyncDone to set.
   */
  private void setInitialSyncDone(boolean value) {
    bitField0_ |= 0x00000008;
    initialSyncDone_ = value;
  }
  /**
   * <pre>
   * This flag is set to true when the first download cycle is complete.  The
   * ModelTypeProcessor should not attempt to commit any items until this
   * flag is set.
   * </pre>
   *
   * <code>optional bool initial_sync_done = 4;</code>
   */
  private void clearInitialSyncDone() {
    bitField0_ = (bitField0_ & ~0x00000008);
    initialSyncDone_ = false;
  }

  public static final int CACHE_GUID_FIELD_NUMBER = 5;
  private java.lang.String cacheGuid_;
  /**
   * <pre>
   * A GUID that identifies the committing sync client. It's persisted within
   * the sync metadata and should be used to check the integrity of the
   * metadata. Mismatches with the guid of the running client indicates invalid
   * persisted sync metadata, because cache_guid is reset when sync is disabled,
   * and disabling sync is supposed to clear sync metadata.
   * </pre>
   *
   * <code>optional string cache_guid = 5;</code>
   * @return Whether the cacheGuid field is set.
   */
  @java.lang.Override
  public boolean hasCacheGuid() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * A GUID that identifies the committing sync client. It's persisted within
   * the sync metadata and should be used to check the integrity of the
   * metadata. Mismatches with the guid of the running client indicates invalid
   * persisted sync metadata, because cache_guid is reset when sync is disabled,
   * and disabling sync is supposed to clear sync metadata.
   * </pre>
   *
   * <code>optional string cache_guid = 5;</code>
   * @return The cacheGuid.
   */
  @java.lang.Override
  public java.lang.String getCacheGuid() {
    return cacheGuid_;
  }
  /**
   * <pre>
   * A GUID that identifies the committing sync client. It's persisted within
   * the sync metadata and should be used to check the integrity of the
   * metadata. Mismatches with the guid of the running client indicates invalid
   * persisted sync metadata, because cache_guid is reset when sync is disabled,
   * and disabling sync is supposed to clear sync metadata.
   * </pre>
   *
   * <code>optional string cache_guid = 5;</code>
   * @return The bytes for cacheGuid.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCacheGuidBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(cacheGuid_);
  }
  /**
   * <pre>
   * A GUID that identifies the committing sync client. It's persisted within
   * the sync metadata and should be used to check the integrity of the
   * metadata. Mismatches with the guid of the running client indicates invalid
   * persisted sync metadata, because cache_guid is reset when sync is disabled,
   * and disabling sync is supposed to clear sync metadata.
   * </pre>
   *
   * <code>optional string cache_guid = 5;</code>
   * @param value The cacheGuid to set.
   */
  private void setCacheGuid(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000010;
    cacheGuid_ = value;
  }
  /**
   * <pre>
   * A GUID that identifies the committing sync client. It's persisted within
   * the sync metadata and should be used to check the integrity of the
   * metadata. Mismatches with the guid of the running client indicates invalid
   * persisted sync metadata, because cache_guid is reset when sync is disabled,
   * and disabling sync is supposed to clear sync metadata.
   * </pre>
   *
   * <code>optional string cache_guid = 5;</code>
   */
  private void clearCacheGuid() {
    bitField0_ = (bitField0_ & ~0x00000010);
    cacheGuid_ = getDefaultInstance().getCacheGuid();
  }
  /**
   * <pre>
   * A GUID that identifies the committing sync client. It's persisted within
   * the sync metadata and should be used to check the integrity of the
   * metadata. Mismatches with the guid of the running client indicates invalid
   * persisted sync metadata, because cache_guid is reset when sync is disabled,
   * and disabling sync is supposed to clear sync metadata.
   * </pre>
   *
   * <code>optional string cache_guid = 5;</code>
   * @param value The bytes for cacheGuid to set.
   */
  private void setCacheGuidBytes(
      com.google.protobuf.ByteString value) {
    cacheGuid_ = value.toStringUtf8();
    bitField0_ |= 0x00000010;
  }

  public static final int AUTHENTICATED_ACCOUNT_ID_FIELD_NUMBER = 6;
  private java.lang.String authenticatedAccountId_;
  /**
   * <pre>
   * Syncing account ID, representing the user.
   * </pre>
   *
   * <code>optional string authenticated_account_id = 6;</code>
   * @return Whether the authenticatedAccountId field is set.
   */
  @java.lang.Override
  public boolean hasAuthenticatedAccountId() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * Syncing account ID, representing the user.
   * </pre>
   *
   * <code>optional string authenticated_account_id = 6;</code>
   * @return The authenticatedAccountId.
   */
  @java.lang.Override
  public java.lang.String getAuthenticatedAccountId() {
    return authenticatedAccountId_;
  }
  /**
   * <pre>
   * Syncing account ID, representing the user.
   * </pre>
   *
   * <code>optional string authenticated_account_id = 6;</code>
   * @return The bytes for authenticatedAccountId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAuthenticatedAccountIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(authenticatedAccountId_);
  }
  /**
   * <pre>
   * Syncing account ID, representing the user.
   * </pre>
   *
   * <code>optional string authenticated_account_id = 6;</code>
   * @param value The authenticatedAccountId to set.
   */
  private void setAuthenticatedAccountId(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000020;
    authenticatedAccountId_ = value;
  }
  /**
   * <pre>
   * Syncing account ID, representing the user.
   * </pre>
   *
   * <code>optional string authenticated_account_id = 6;</code>
   */
  private void clearAuthenticatedAccountId() {
    bitField0_ = (bitField0_ & ~0x00000020);
    authenticatedAccountId_ = getDefaultInstance().getAuthenticatedAccountId();
  }
  /**
   * <pre>
   * Syncing account ID, representing the user.
   * </pre>
   *
   * <code>optional string authenticated_account_id = 6;</code>
   * @param value The bytes for authenticatedAccountId to set.
   */
  private void setAuthenticatedAccountIdBytes(
      com.google.protobuf.ByteString value) {
    authenticatedAccountId_ = value.toStringUtf8();
    bitField0_ |= 0x00000020;
  }

  public static org.chromium.components.sync.protocol.ModelTypeState parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.ModelTypeState parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ModelTypeState parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.ModelTypeState parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ModelTypeState parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.ModelTypeState parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ModelTypeState parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.ModelTypeState parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ModelTypeState parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.ModelTypeState parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ModelTypeState parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.ModelTypeState parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.ModelTypeState prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Sync proto to store data type global metadata in model type storage.
   * </pre>
   *
   * Protobuf type {@code sync_pb.ModelTypeState}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.ModelTypeState, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.ModelTypeState)
      org.chromium.components.sync.protocol.ModelTypeStateOrBuilder {
    // Construct using org.chromium.components.sync.protocol.ModelTypeState.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The latest progress markers received from the server.
     * </pre>
     *
     * <code>optional .sync_pb.DataTypeProgressMarker progress_marker = 1;</code>
     */
    @java.lang.Override
    public boolean hasProgressMarker() {
      return instance.hasProgressMarker();
    }
    /**
     * <pre>
     * The latest progress markers received from the server.
     * </pre>
     *
     * <code>optional .sync_pb.DataTypeProgressMarker progress_marker = 1;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.DataTypeProgressMarker getProgressMarker() {
      return instance.getProgressMarker();
    }
    /**
     * <pre>
     * The latest progress markers received from the server.
     * </pre>
     *
     * <code>optional .sync_pb.DataTypeProgressMarker progress_marker = 1;</code>
     */
    public Builder setProgressMarker(org.chromium.components.sync.protocol.DataTypeProgressMarker value) {
      copyOnWrite();
      instance.setProgressMarker(value);
      return this;
      }
    /**
     * <pre>
     * The latest progress markers received from the server.
     * </pre>
     *
     * <code>optional .sync_pb.DataTypeProgressMarker progress_marker = 1;</code>
     */
    public Builder setProgressMarker(
        org.chromium.components.sync.protocol.DataTypeProgressMarker.Builder builderForValue) {
      copyOnWrite();
      instance.setProgressMarker(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The latest progress markers received from the server.
     * </pre>
     *
     * <code>optional .sync_pb.DataTypeProgressMarker progress_marker = 1;</code>
     */
    public Builder mergeProgressMarker(org.chromium.components.sync.protocol.DataTypeProgressMarker value) {
      copyOnWrite();
      instance.mergeProgressMarker(value);
      return this;
    }
    /**
     * <pre>
     * The latest progress markers received from the server.
     * </pre>
     *
     * <code>optional .sync_pb.DataTypeProgressMarker progress_marker = 1;</code>
     */
    public Builder clearProgressMarker() {  copyOnWrite();
      instance.clearProgressMarker();
      return this;
    }

    /**
     * <pre>
     * A data type context.  Sent to the server in every commit or update
     * request.  May be updated by either responses from the server or requests
     * made on the model thread.  The interpretation of this value may be
     * data-type specific.  Many data types ignore it.
     * </pre>
     *
     * <code>optional .sync_pb.DataTypeContext type_context = 2;</code>
     */
    @java.lang.Override
    public boolean hasTypeContext() {
      return instance.hasTypeContext();
    }
    /**
     * <pre>
     * A data type context.  Sent to the server in every commit or update
     * request.  May be updated by either responses from the server or requests
     * made on the model thread.  The interpretation of this value may be
     * data-type specific.  Many data types ignore it.
     * </pre>
     *
     * <code>optional .sync_pb.DataTypeContext type_context = 2;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.DataTypeContext getTypeContext() {
      return instance.getTypeContext();
    }
    /**
     * <pre>
     * A data type context.  Sent to the server in every commit or update
     * request.  May be updated by either responses from the server or requests
     * made on the model thread.  The interpretation of this value may be
     * data-type specific.  Many data types ignore it.
     * </pre>
     *
     * <code>optional .sync_pb.DataTypeContext type_context = 2;</code>
     */
    public Builder setTypeContext(org.chromium.components.sync.protocol.DataTypeContext value) {
      copyOnWrite();
      instance.setTypeContext(value);
      return this;
      }
    /**
     * <pre>
     * A data type context.  Sent to the server in every commit or update
     * request.  May be updated by either responses from the server or requests
     * made on the model thread.  The interpretation of this value may be
     * data-type specific.  Many data types ignore it.
     * </pre>
     *
     * <code>optional .sync_pb.DataTypeContext type_context = 2;</code>
     */
    public Builder setTypeContext(
        org.chromium.components.sync.protocol.DataTypeContext.Builder builderForValue) {
      copyOnWrite();
      instance.setTypeContext(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A data type context.  Sent to the server in every commit or update
     * request.  May be updated by either responses from the server or requests
     * made on the model thread.  The interpretation of this value may be
     * data-type specific.  Many data types ignore it.
     * </pre>
     *
     * <code>optional .sync_pb.DataTypeContext type_context = 2;</code>
     */
    public Builder mergeTypeContext(org.chromium.components.sync.protocol.DataTypeContext value) {
      copyOnWrite();
      instance.mergeTypeContext(value);
      return this;
    }
    /**
     * <pre>
     * A data type context.  Sent to the server in every commit or update
     * request.  May be updated by either responses from the server or requests
     * made on the model thread.  The interpretation of this value may be
     * data-type specific.  Many data types ignore it.
     * </pre>
     *
     * <code>optional .sync_pb.DataTypeContext type_context = 2;</code>
     */
    public Builder clearTypeContext() {  copyOnWrite();
      instance.clearTypeContext();
      return this;
    }

    /**
     * <pre>
     * This value is set if this type's data should be encrypted on the server.
     * If this key changes, the client will need to re-commit all of its local
     * data to the server using the new encryption key.
     * </pre>
     *
     * <code>optional string encryption_key_name = 3;</code>
     * @return Whether the encryptionKeyName field is set.
     */
    @java.lang.Override
    public boolean hasEncryptionKeyName() {
      return instance.hasEncryptionKeyName();
    }
    /**
     * <pre>
     * This value is set if this type's data should be encrypted on the server.
     * If this key changes, the client will need to re-commit all of its local
     * data to the server using the new encryption key.
     * </pre>
     *
     * <code>optional string encryption_key_name = 3;</code>
     * @return The encryptionKeyName.
     */
    @java.lang.Override
    public java.lang.String getEncryptionKeyName() {
      return instance.getEncryptionKeyName();
    }
    /**
     * <pre>
     * This value is set if this type's data should be encrypted on the server.
     * If this key changes, the client will need to re-commit all of its local
     * data to the server using the new encryption key.
     * </pre>
     *
     * <code>optional string encryption_key_name = 3;</code>
     * @return The bytes for encryptionKeyName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getEncryptionKeyNameBytes() {
      return instance.getEncryptionKeyNameBytes();
    }
    /**
     * <pre>
     * This value is set if this type's data should be encrypted on the server.
     * If this key changes, the client will need to re-commit all of its local
     * data to the server using the new encryption key.
     * </pre>
     *
     * <code>optional string encryption_key_name = 3;</code>
     * @param value The encryptionKeyName to set.
     * @return This builder for chaining.
     */
    public Builder setEncryptionKeyName(
        java.lang.String value) {
      copyOnWrite();
      instance.setEncryptionKeyName(value);
      return this;
    }
    /**
     * <pre>
     * This value is set if this type's data should be encrypted on the server.
     * If this key changes, the client will need to re-commit all of its local
     * data to the server using the new encryption key.
     * </pre>
     *
     * <code>optional string encryption_key_name = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearEncryptionKeyName() {
      copyOnWrite();
      instance.clearEncryptionKeyName();
      return this;
    }
    /**
     * <pre>
     * This value is set if this type's data should be encrypted on the server.
     * If this key changes, the client will need to re-commit all of its local
     * data to the server using the new encryption key.
     * </pre>
     *
     * <code>optional string encryption_key_name = 3;</code>
     * @param value The bytes for encryptionKeyName to set.
     * @return This builder for chaining.
     */
    public Builder setEncryptionKeyNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setEncryptionKeyNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * This flag is set to true when the first download cycle is complete.  The
     * ModelTypeProcessor should not attempt to commit any items until this
     * flag is set.
     * </pre>
     *
     * <code>optional bool initial_sync_done = 4;</code>
     * @return Whether the initialSyncDone field is set.
     */
    @java.lang.Override
    public boolean hasInitialSyncDone() {
      return instance.hasInitialSyncDone();
    }
    /**
     * <pre>
     * This flag is set to true when the first download cycle is complete.  The
     * ModelTypeProcessor should not attempt to commit any items until this
     * flag is set.
     * </pre>
     *
     * <code>optional bool initial_sync_done = 4;</code>
     * @return The initialSyncDone.
     */
    @java.lang.Override
    public boolean getInitialSyncDone() {
      return instance.getInitialSyncDone();
    }
    /**
     * <pre>
     * This flag is set to true when the first download cycle is complete.  The
     * ModelTypeProcessor should not attempt to commit any items until this
     * flag is set.
     * </pre>
     *
     * <code>optional bool initial_sync_done = 4;</code>
     * @param value The initialSyncDone to set.
     * @return This builder for chaining.
     */
    public Builder setInitialSyncDone(boolean value) {
      copyOnWrite();
      instance.setInitialSyncDone(value);
      return this;
    }
    /**
     * <pre>
     * This flag is set to true when the first download cycle is complete.  The
     * ModelTypeProcessor should not attempt to commit any items until this
     * flag is set.
     * </pre>
     *
     * <code>optional bool initial_sync_done = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearInitialSyncDone() {
      copyOnWrite();
      instance.clearInitialSyncDone();
      return this;
    }

    /**
     * <pre>
     * A GUID that identifies the committing sync client. It's persisted within
     * the sync metadata and should be used to check the integrity of the
     * metadata. Mismatches with the guid of the running client indicates invalid
     * persisted sync metadata, because cache_guid is reset when sync is disabled,
     * and disabling sync is supposed to clear sync metadata.
     * </pre>
     *
     * <code>optional string cache_guid = 5;</code>
     * @return Whether the cacheGuid field is set.
     */
    @java.lang.Override
    public boolean hasCacheGuid() {
      return instance.hasCacheGuid();
    }
    /**
     * <pre>
     * A GUID that identifies the committing sync client. It's persisted within
     * the sync metadata and should be used to check the integrity of the
     * metadata. Mismatches with the guid of the running client indicates invalid
     * persisted sync metadata, because cache_guid is reset when sync is disabled,
     * and disabling sync is supposed to clear sync metadata.
     * </pre>
     *
     * <code>optional string cache_guid = 5;</code>
     * @return The cacheGuid.
     */
    @java.lang.Override
    public java.lang.String getCacheGuid() {
      return instance.getCacheGuid();
    }
    /**
     * <pre>
     * A GUID that identifies the committing sync client. It's persisted within
     * the sync metadata and should be used to check the integrity of the
     * metadata. Mismatches with the guid of the running client indicates invalid
     * persisted sync metadata, because cache_guid is reset when sync is disabled,
     * and disabling sync is supposed to clear sync metadata.
     * </pre>
     *
     * <code>optional string cache_guid = 5;</code>
     * @return The bytes for cacheGuid.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCacheGuidBytes() {
      return instance.getCacheGuidBytes();
    }
    /**
     * <pre>
     * A GUID that identifies the committing sync client. It's persisted within
     * the sync metadata and should be used to check the integrity of the
     * metadata. Mismatches with the guid of the running client indicates invalid
     * persisted sync metadata, because cache_guid is reset when sync is disabled,
     * and disabling sync is supposed to clear sync metadata.
     * </pre>
     *
     * <code>optional string cache_guid = 5;</code>
     * @param value The cacheGuid to set.
     * @return This builder for chaining.
     */
    public Builder setCacheGuid(
        java.lang.String value) {
      copyOnWrite();
      instance.setCacheGuid(value);
      return this;
    }
    /**
     * <pre>
     * A GUID that identifies the committing sync client. It's persisted within
     * the sync metadata and should be used to check the integrity of the
     * metadata. Mismatches with the guid of the running client indicates invalid
     * persisted sync metadata, because cache_guid is reset when sync is disabled,
     * and disabling sync is supposed to clear sync metadata.
     * </pre>
     *
     * <code>optional string cache_guid = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearCacheGuid() {
      copyOnWrite();
      instance.clearCacheGuid();
      return this;
    }
    /**
     * <pre>
     * A GUID that identifies the committing sync client. It's persisted within
     * the sync metadata and should be used to check the integrity of the
     * metadata. Mismatches with the guid of the running client indicates invalid
     * persisted sync metadata, because cache_guid is reset when sync is disabled,
     * and disabling sync is supposed to clear sync metadata.
     * </pre>
     *
     * <code>optional string cache_guid = 5;</code>
     * @param value The bytes for cacheGuid to set.
     * @return This builder for chaining.
     */
    public Builder setCacheGuidBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCacheGuidBytes(value);
      return this;
    }

    /**
     * <pre>
     * Syncing account ID, representing the user.
     * </pre>
     *
     * <code>optional string authenticated_account_id = 6;</code>
     * @return Whether the authenticatedAccountId field is set.
     */
    @java.lang.Override
    public boolean hasAuthenticatedAccountId() {
      return instance.hasAuthenticatedAccountId();
    }
    /**
     * <pre>
     * Syncing account ID, representing the user.
     * </pre>
     *
     * <code>optional string authenticated_account_id = 6;</code>
     * @return The authenticatedAccountId.
     */
    @java.lang.Override
    public java.lang.String getAuthenticatedAccountId() {
      return instance.getAuthenticatedAccountId();
    }
    /**
     * <pre>
     * Syncing account ID, representing the user.
     * </pre>
     *
     * <code>optional string authenticated_account_id = 6;</code>
     * @return The bytes for authenticatedAccountId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getAuthenticatedAccountIdBytes() {
      return instance.getAuthenticatedAccountIdBytes();
    }
    /**
     * <pre>
     * Syncing account ID, representing the user.
     * </pre>
     *
     * <code>optional string authenticated_account_id = 6;</code>
     * @param value The authenticatedAccountId to set.
     * @return This builder for chaining.
     */
    public Builder setAuthenticatedAccountId(
        java.lang.String value) {
      copyOnWrite();
      instance.setAuthenticatedAccountId(value);
      return this;
    }
    /**
     * <pre>
     * Syncing account ID, representing the user.
     * </pre>
     *
     * <code>optional string authenticated_account_id = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearAuthenticatedAccountId() {
      copyOnWrite();
      instance.clearAuthenticatedAccountId();
      return this;
    }
    /**
     * <pre>
     * Syncing account ID, representing the user.
     * </pre>
     *
     * <code>optional string authenticated_account_id = 6;</code>
     * @param value The bytes for authenticatedAccountId to set.
     * @return This builder for chaining.
     */
    public Builder setAuthenticatedAccountIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setAuthenticatedAccountIdBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.ModelTypeState)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.ModelTypeState();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "progressMarker_",
            "typeContext_",
            "encryptionKeyName_",
            "initialSyncDone_",
            "cacheGuid_",
            "authenticatedAccountId_",
          };
          java.lang.String info =
              "\u0001\u0006\u0000\u0001\u0001\u0006\u0006\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
              "\u1009\u0001\u0003\u1008\u0002\u0004\u1007\u0003\u0005\u1008\u0004\u0006\u1008\u0005" +
              "";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.components.sync.protocol.ModelTypeState> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.components.sync.protocol.ModelTypeState.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.ModelTypeState>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.ModelTypeState)
  private static final org.chromium.components.sync.protocol.ModelTypeState DEFAULT_INSTANCE;
  static {
    ModelTypeState defaultInstance = new ModelTypeState();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ModelTypeState.class, defaultInstance);
  }

  public static org.chromium.components.sync.protocol.ModelTypeState getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ModelTypeState> PARSER;

  public static com.google.protobuf.Parser<ModelTypeState> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

