// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/password_specifics.proto

package org.chromium.components.sync.protocol;

public interface PasswordSpecificsDataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sync_pb.PasswordSpecificsData)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
   * android credential or a password saved through Credential Manager API
   * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
   * SCHEME_BASIC(1), basic access http authentication.
   * SCHEME_DIGEST(2), digest access authentication.
   * SCHEME_OTHER(3), another access authentication.
   * </pre>
   *
   * <code>optional int32 scheme = 1;</code>
   * @return Whether the scheme field is set.
   */
  boolean hasScheme();
  /**
   * <pre>
   * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
   * android credential or a password saved through Credential Manager API
   * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
   * SCHEME_BASIC(1), basic access http authentication.
   * SCHEME_DIGEST(2), digest access authentication.
   * SCHEME_OTHER(3), another access authentication.
   * </pre>
   *
   * <code>optional int32 scheme = 1;</code>
   * @return The scheme.
   */
  int getScheme();

  /**
   * <pre>
   * For parsed web forms and normal passwords saved through Credential Manager
   * API: url-scheme://url-host[:url-port]/
   * For Android apps (local + federated):
   *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * where the hash is base64 encoded SHA512 of the app's public certificate.
   * For federated credentials:
   *     "federation://" + origin_host + "/" + federation_host
   * For proxy auth: proxy-host/auth-realm
   * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
   * </pre>
   *
   * <code>optional string signon_realm = 2;</code>
   * @return Whether the signonRealm field is set.
   */
  boolean hasSignonRealm();
  /**
   * <pre>
   * For parsed web forms and normal passwords saved through Credential Manager
   * API: url-scheme://url-host[:url-port]/
   * For Android apps (local + federated):
   *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * where the hash is base64 encoded SHA512 of the app's public certificate.
   * For federated credentials:
   *     "federation://" + origin_host + "/" + federation_host
   * For proxy auth: proxy-host/auth-realm
   * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
   * </pre>
   *
   * <code>optional string signon_realm = 2;</code>
   * @return The signonRealm.
   */
  java.lang.String getSignonRealm();
  /**
   * <pre>
   * For parsed web forms and normal passwords saved through Credential Manager
   * API: url-scheme://url-host[:url-port]/
   * For Android apps (local + federated):
   *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * where the hash is base64 encoded SHA512 of the app's public certificate.
   * For federated credentials:
   *     "federation://" + origin_host + "/" + federation_host
   * For proxy auth: proxy-host/auth-realm
   * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
   * </pre>
   *
   * <code>optional string signon_realm = 2;</code>
   * @return The bytes for signonRealm.
   */
  com.google.protobuf.ByteString
      getSignonRealmBytes();

  /**
   * <pre>
   * For parsed web forms and Credential Manager API:
   *     url-scheme://url-host[:url-port]/path
   * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string origin = 3;</code>
   * @return Whether the origin field is set.
   */
  boolean hasOrigin();
  /**
   * <pre>
   * For parsed web forms and Credential Manager API:
   *     url-scheme://url-host[:url-port]/path
   * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string origin = 3;</code>
   * @return The origin.
   */
  java.lang.String getOrigin();
  /**
   * <pre>
   * For parsed web forms and Credential Manager API:
   *     url-scheme://url-host[:url-port]/path
   * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string origin = 3;</code>
   * @return The bytes for origin.
   */
  com.google.protobuf.ByteString
      getOriginBytes();

  /**
   * <pre>
   * Only for web-parsed forms - the action target of the form:
   *     url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string action = 4;</code>
   * @return Whether the action field is set.
   */
  boolean hasAction();
  /**
   * <pre>
   * Only for web-parsed forms - the action target of the form:
   *     url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string action = 4;</code>
   * @return The action.
   */
  java.lang.String getAction();
  /**
   * <pre>
   * Only for web-parsed forms - the action target of the form:
   *     url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string action = 4;</code>
   * @return The bytes for action.
   */
  com.google.protobuf.ByteString
      getActionBytes();

  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing username.
   * </pre>
   *
   * <code>optional string username_element = 5;</code>
   * @return Whether the usernameElement field is set.
   */
  boolean hasUsernameElement();
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing username.
   * </pre>
   *
   * <code>optional string username_element = 5;</code>
   * @return The usernameElement.
   */
  java.lang.String getUsernameElement();
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing username.
   * </pre>
   *
   * <code>optional string username_element = 5;</code>
   * @return The bytes for usernameElement.
   */
  com.google.protobuf.ByteString
      getUsernameElementBytes();

  /**
   * <pre>
   * For all: the username.
   * For blacklisted forms: &lt;empty&gt;.
   * </pre>
   *
   * <code>optional string username_value = 6;</code>
   * @return Whether the usernameValue field is set.
   */
  boolean hasUsernameValue();
  /**
   * <pre>
   * For all: the username.
   * For blacklisted forms: &lt;empty&gt;.
   * </pre>
   *
   * <code>optional string username_value = 6;</code>
   * @return The usernameValue.
   */
  java.lang.String getUsernameValue();
  /**
   * <pre>
   * For all: the username.
   * For blacklisted forms: &lt;empty&gt;.
   * </pre>
   *
   * <code>optional string username_value = 6;</code>
   * @return The bytes for usernameValue.
   */
  com.google.protobuf.ByteString
      getUsernameValueBytes();

  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing password.
   * </pre>
   *
   * <code>optional string password_element = 7;</code>
   * @return Whether the passwordElement field is set.
   */
  boolean hasPasswordElement();
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing password.
   * </pre>
   *
   * <code>optional string password_element = 7;</code>
   * @return The passwordElement.
   */
  java.lang.String getPasswordElement();
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing password.
   * </pre>
   *
   * <code>optional string password_element = 7;</code>
   * @return The bytes for passwordElement.
   */
  com.google.protobuf.ByteString
      getPasswordElementBytes();

  /**
   * <pre>
   * For all: the password.
   * For federated logins and blacklisted forms: &lt;empty&gt;
   * </pre>
   *
   * <code>optional string password_value = 8;</code>
   * @return Whether the passwordValue field is set.
   */
  boolean hasPasswordValue();
  /**
   * <pre>
   * For all: the password.
   * For federated logins and blacklisted forms: &lt;empty&gt;
   * </pre>
   *
   * <code>optional string password_value = 8;</code>
   * @return The passwordValue.
   */
  java.lang.String getPasswordValue();
  /**
   * <pre>
   * For all: the password.
   * For federated logins and blacklisted forms: &lt;empty&gt;
   * </pre>
   *
   * <code>optional string password_value = 8;</code>
   * @return The bytes for passwordValue.
   */
  com.google.protobuf.ByteString
      getPasswordValueBytes();

  /**
   * <pre>
   * Deprecated: http://crbug.com/413020
   * True if the credential was saved for a HTTPS session with a valid SSL cert.
   * Ignored for Android apps.
   * </pre>
   *
   * <code>optional bool ssl_valid = 9 [deprecated = true];</code>
   * @return Whether the sslValid field is set.
   */
  @java.lang.Deprecated boolean hasSslValid();
  /**
   * <pre>
   * Deprecated: http://crbug.com/413020
   * True if the credential was saved for a HTTPS session with a valid SSL cert.
   * Ignored for Android apps.
   * </pre>
   *
   * <code>optional bool ssl_valid = 9 [deprecated = true];</code>
   * @return The sslValid.
   */
  @java.lang.Deprecated boolean getSslValid();

  /**
   * <pre>
   * True for the last credential used for logging in on a given site.
   * Deprecated in M81.
   * </pre>
   *
   * <code>optional bool preferred = 10 [deprecated = true];</code>
   * @return Whether the preferred field is set.
   */
  @java.lang.Deprecated boolean hasPreferred();
  /**
   * <pre>
   * True for the last credential used for logging in on a given site.
   * Deprecated in M81.
   * </pre>
   *
   * <code>optional bool preferred = 10 [deprecated = true];</code>
   * @return The preferred.
   */
  @java.lang.Deprecated boolean getPreferred();

  /**
   * <pre>
   * Time when the credential was created. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_created = 11;</code>
   * @return Whether the dateCreated field is set.
   */
  boolean hasDateCreated();
  /**
   * <pre>
   * Time when the credential was created. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_created = 11;</code>
   * @return The dateCreated.
   */
  long getDateCreated();

  /**
   * <pre>
   * True, if user chose permanently not to save the credentials for the form.
   * </pre>
   *
   * <code>optional bool blacklisted = 12;</code>
   * @return Whether the blacklisted field is set.
   */
  boolean hasBlacklisted();
  /**
   * <pre>
   * True, if user chose permanently not to save the credentials for the form.
   * </pre>
   *
   * <code>optional bool blacklisted = 12;</code>
   * @return The blacklisted.
   */
  boolean getBlacklisted();

  /**
   * <pre>
   * TYPE_MANUAL(0), user manually filled the username and the password.
   * TYPE_GENERATED(1), the credential was auto generated.
   * </pre>
   *
   * <code>optional int32 type = 13;</code>
   * @return Whether the type field is set.
   */
  boolean hasType();
  /**
   * <pre>
   * TYPE_MANUAL(0), user manually filled the username and the password.
   * TYPE_GENERATED(1), the credential was auto generated.
   * </pre>
   *
   * <code>optional int32 type = 13;</code>
   * @return The type.
   */
  int getType();

  /**
   * <pre>
   * Number of times this login was used for logging in. Chrome uses this field
   * to distinguish log-in and sign-up forms.
   * </pre>
   *
   * <code>optional int32 times_used = 14;</code>
   * @return Whether the timesUsed field is set.
   */
  boolean hasTimesUsed();
  /**
   * <pre>
   * Number of times this login was used for logging in. Chrome uses this field
   * to distinguish log-in and sign-up forms.
   * </pre>
   *
   * <code>optional int32 times_used = 14;</code>
   * @return The timesUsed.
   */
  int getTimesUsed();

  /**
   * <pre>
   * A human readable name of the account holder. Set by CredentialManager API
   * and Android.
   * </pre>
   *
   * <code>optional string display_name = 15;</code>
   * @return Whether the displayName field is set.
   */
  boolean hasDisplayName();
  /**
   * <pre>
   * A human readable name of the account holder. Set by CredentialManager API
   * and Android.
   * </pre>
   *
   * <code>optional string display_name = 15;</code>
   * @return The displayName.
   */
  java.lang.String getDisplayName();
  /**
   * <pre>
   * A human readable name of the account holder. Set by CredentialManager API
   * and Android.
   * </pre>
   *
   * <code>optional string display_name = 15;</code>
   * @return The bytes for displayName.
   */
  com.google.protobuf.ByteString
      getDisplayNameBytes();

  /**
   * <pre>
   * A URL of the avatar for the credential. Set by CredentialManager API and
   * Android.
   * </pre>
   *
   * <code>optional string avatar_url = 16;</code>
   * @return Whether the avatarUrl field is set.
   */
  boolean hasAvatarUrl();
  /**
   * <pre>
   * A URL of the avatar for the credential. Set by CredentialManager API and
   * Android.
   * </pre>
   *
   * <code>optional string avatar_url = 16;</code>
   * @return The avatarUrl.
   */
  java.lang.String getAvatarUrl();
  /**
   * <pre>
   * A URL of the avatar for the credential. Set by CredentialManager API and
   * Android.
   * </pre>
   *
   * <code>optional string avatar_url = 16;</code>
   * @return The bytes for avatarUrl.
   */
  com.google.protobuf.ByteString
      getAvatarUrlBytes();

  /**
   * <pre>
   * A URL of the IdP used to verify the credential. Set by Credential Manager
   * API and Android.
   * </pre>
   *
   * <code>optional string federation_url = 17;</code>
   * @return Whether the federationUrl field is set.
   */
  boolean hasFederationUrl();
  /**
   * <pre>
   * A URL of the IdP used to verify the credential. Set by Credential Manager
   * API and Android.
   * </pre>
   *
   * <code>optional string federation_url = 17;</code>
   * @return The federationUrl.
   */
  java.lang.String getFederationUrl();
  /**
   * <pre>
   * A URL of the IdP used to verify the credential. Set by Credential Manager
   * API and Android.
   * </pre>
   *
   * <code>optional string federation_url = 17;</code>
   * @return The bytes for federationUrl.
   */
  com.google.protobuf.ByteString
      getFederationUrlBytes();

  /**
   * <pre>
   * Time when the credential was last used. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_last_used = 18;</code>
   * @return Whether the dateLastUsed field is set.
   */
  boolean hasDateLastUsed();
  /**
   * <pre>
   * Time when the credential was last used. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_last_used = 18;</code>
   * @return The dateLastUsed.
   */
  long getDateLastUsed();

  /**
   * <pre>
   * Set if an issue was detected that puts this password at risk. All the
   * clients are expected to clear the field when the password value is updated.
   * 'reused' part can be additionally reset when the analysis on the entire
   * password store is completed.
   * </pre>
   *
   * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues password_issues = 19;</code>
   * @return Whether the passwordIssues field is set.
   */
  boolean hasPasswordIssues();
  /**
   * <pre>
   * Set if an issue was detected that puts this password at risk. All the
   * clients are expected to clear the field when the password value is updated.
   * 'reused' part can be additionally reset when the analysis on the entire
   * password store is completed.
   * </pre>
   *
   * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues password_issues = 19;</code>
   * @return The passwordIssues.
   */
  org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues getPasswordIssues();
}
