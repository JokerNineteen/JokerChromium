// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/sync.proto

package org.chromium.components.sync.protocol;

public interface ClientConfigParamsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sync_pb.ClientConfigParams)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * The set of data types this client has enabled. Note that this does not
   * include proxy types, as they do not have protocol field numbers and are
   * placeholder types that implicitly enable protocol types.
   * </pre>
   *
   * <code>repeated int32 enabled_type_ids = 1;</code>
   * @return A list containing the enabledTypeIds.
   */
  java.util.List<java.lang.Integer> getEnabledTypeIdsList();
  /**
   * <pre>
   * The set of data types this client has enabled. Note that this does not
   * include proxy types, as they do not have protocol field numbers and are
   * placeholder types that implicitly enable protocol types.
   * </pre>
   *
   * <code>repeated int32 enabled_type_ids = 1;</code>
   * @return The count of enabledTypeIds.
   */
  int getEnabledTypeIdsCount();
  /**
   * <pre>
   * The set of data types this client has enabled. Note that this does not
   * include proxy types, as they do not have protocol field numbers and are
   * placeholder types that implicitly enable protocol types.
   * </pre>
   *
   * <code>repeated int32 enabled_type_ids = 1;</code>
   * @param index The index of the element to return.
   * @return The enabledTypeIds at the given index.
   */
  int getEnabledTypeIds(int index);

  /**
   * <pre>
   * Whether the PROXY_TABS proxy datatype is enabled on this client.
   * </pre>
   *
   * <code>optional bool tabs_datatype_enabled = 2;</code>
   * @return Whether the tabsDatatypeEnabled field is set.
   */
  boolean hasTabsDatatypeEnabled();
  /**
   * <pre>
   * Whether the PROXY_TABS proxy datatype is enabled on this client.
   * </pre>
   *
   * <code>optional bool tabs_datatype_enabled = 2;</code>
   * @return The tabsDatatypeEnabled.
   */
  boolean getTabsDatatypeEnabled();

  /**
   * <pre>
   * Whether the account(s) present in the content area's cookie jar match the
   * chrome account. If multiple accounts are present in the cookie jar, a
   * mismatch implies all of them are different from the chrome account.
   * </pre>
   *
   * <code>optional bool cookie_jar_mismatch = 3;</code>
   * @return Whether the cookieJarMismatch field is set.
   */
  boolean hasCookieJarMismatch();
  /**
   * <pre>
   * Whether the account(s) present in the content area's cookie jar match the
   * chrome account. If multiple accounts are present in the cookie jar, a
   * mismatch implies all of them are different from the chrome account.
   * </pre>
   *
   * <code>optional bool cookie_jar_mismatch = 3;</code>
   * @return The cookieJarMismatch.
   */
  boolean getCookieJarMismatch();

  /**
   * <pre>
   * Indicates that the client is not aware of any other active clients for the
   * user. This flag shows that it is not necessary to send invalidations for
   * the committed data. The client is considered active if it's DeviceInfo has
   * updated recent enough.
   * </pre>
   *
   * <code>optional bool single_client = 4;</code>
   * @return Whether the singleClient field is set.
   */
  boolean hasSingleClient();
  /**
   * <pre>
   * Indicates that the client is not aware of any other active clients for the
   * user. This flag shows that it is not necessary to send invalidations for
   * the committed data. The client is considered active if it's DeviceInfo has
   * updated recent enough.
   * </pre>
   *
   * <code>optional bool single_client = 4;</code>
   * @return The singleClient.
   */
  boolean getSingleClient();

  /**
   * <pre>
   * A list of FCM registration tokens which are obtained from other clients.
   * This list is used by the server to send invalidations to all other clients.
   * If the list is empty, the server should treat this as "there is no
   * information about other clients". In practice, this happens by the next
   * causes:
   * 1. This is the old client which doesn't set this field.
   * 2. There are too many active devices and the list would have too many
   * items.
   * 3. An empty list could also mean that the current client is the only
   * client. This case should be covered by the |single_client| field instead
   * (otherwise it could be mixed up with older clients). The server doesn't
   * have to use this field and can ignore it.
   * </pre>
   *
   * <code>repeated string devices_fcm_registration_tokens = 5;</code>
   * @return A list containing the devicesFcmRegistrationTokens.
   */
  java.util.List<java.lang.String>
      getDevicesFcmRegistrationTokensList();
  /**
   * <pre>
   * A list of FCM registration tokens which are obtained from other clients.
   * This list is used by the server to send invalidations to all other clients.
   * If the list is empty, the server should treat this as "there is no
   * information about other clients". In practice, this happens by the next
   * causes:
   * 1. This is the old client which doesn't set this field.
   * 2. There are too many active devices and the list would have too many
   * items.
   * 3. An empty list could also mean that the current client is the only
   * client. This case should be covered by the |single_client| field instead
   * (otherwise it could be mixed up with older clients). The server doesn't
   * have to use this field and can ignore it.
   * </pre>
   *
   * <code>repeated string devices_fcm_registration_tokens = 5;</code>
   * @return The count of devicesFcmRegistrationTokens.
   */
  int getDevicesFcmRegistrationTokensCount();
  /**
   * <pre>
   * A list of FCM registration tokens which are obtained from other clients.
   * This list is used by the server to send invalidations to all other clients.
   * If the list is empty, the server should treat this as "there is no
   * information about other clients". In practice, this happens by the next
   * causes:
   * 1. This is the old client which doesn't set this field.
   * 2. There are too many active devices and the list would have too many
   * items.
   * 3. An empty list could also mean that the current client is the only
   * client. This case should be covered by the |single_client| field instead
   * (otherwise it could be mixed up with older clients). The server doesn't
   * have to use this field and can ignore it.
   * </pre>
   *
   * <code>repeated string devices_fcm_registration_tokens = 5;</code>
   * @param index The index of the element to return.
   * @return The devicesFcmRegistrationTokens at the given index.
   */
  java.lang.String getDevicesFcmRegistrationTokens(int index);
  /**
   * <pre>
   * A list of FCM registration tokens which are obtained from other clients.
   * This list is used by the server to send invalidations to all other clients.
   * If the list is empty, the server should treat this as "there is no
   * information about other clients". In practice, this happens by the next
   * causes:
   * 1. This is the old client which doesn't set this field.
   * 2. There are too many active devices and the list would have too many
   * items.
   * 3. An empty list could also mean that the current client is the only
   * client. This case should be covered by the |single_client| field instead
   * (otherwise it could be mixed up with older clients). The server doesn't
   * have to use this field and can ignore it.
   * </pre>
   *
   * <code>repeated string devices_fcm_registration_tokens = 5;</code>
   * @param index The index of the element to return.
   * @return The devicesFcmRegistrationTokens at the given index.
   */
  com.google.protobuf.ByteString
      getDevicesFcmRegistrationTokensBytes(int index);
}
