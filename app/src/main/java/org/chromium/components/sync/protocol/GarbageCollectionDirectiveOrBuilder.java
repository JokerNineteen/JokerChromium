// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/sync.proto

package org.chromium.components.sync.protocol;

public interface GarbageCollectionDirectiveOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sync_pb.GarbageCollectionDirective)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <code>optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];</code>
   * @return Whether the type field is set.
   */
  boolean hasType();
  /**
   * <code>optional .sync_pb.GarbageCollectionDirective.Type type = 1 [default = UNKNOWN];</code>
   * @return The type.
   */
  org.chromium.components.sync.protocol.GarbageCollectionDirective.Type getType();

  /**
   * <pre>
   * This field specifies the watermark for the versions which should get
   * garbage collected.  The client should purge all sync entities when
   * receiving any value of this.  This is a change from previous behavior,
   * where the client would only be required to purge items older than the
   * specified watermark.
   * TODO(crbug.com/877951): Rename this to make clear that whenever it's set,
   * the client will delete ALL data, regardless of its value.
   * </pre>
   *
   * <code>optional int64 version_watermark = 2;</code>
   * @return Whether the versionWatermark field is set.
   */
  boolean hasVersionWatermark();
  /**
   * <pre>
   * This field specifies the watermark for the versions which should get
   * garbage collected.  The client should purge all sync entities when
   * receiving any value of this.  This is a change from previous behavior,
   * where the client would only be required to purge items older than the
   * specified watermark.
   * TODO(crbug.com/877951): Rename this to make clear that whenever it's set,
   * the client will delete ALL data, regardless of its value.
   * </pre>
   *
   * <code>optional int64 version_watermark = 2;</code>
   * @return The versionWatermark.
   */
  long getVersionWatermark();

  /**
   * <pre>
   * This field specifies the watermark in terms of age in days.  The client
   * should purge all sync entities which are older than this specific value
   * based on last modified time.
   * </pre>
   *
   * <code>optional int32 age_watermark_in_days = 3;</code>
   * @return Whether the ageWatermarkInDays field is set.
   */
  boolean hasAgeWatermarkInDays();
  /**
   * <pre>
   * This field specifies the watermark in terms of age in days.  The client
   * should purge all sync entities which are older than this specific value
   * based on last modified time.
   * </pre>
   *
   * <code>optional int32 age_watermark_in_days = 3;</code>
   * @return The ageWatermarkInDays.
   */
  int getAgeWatermarkInDays();
}
