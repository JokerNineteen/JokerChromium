// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/nigori_local_data.proto

package org.chromium.components.sync.protocol;

/**
 * Protobuf type {@code sync_pb.CryptographerData}
 */
public  final class CryptographerData extends
    com.google.protobuf.GeneratedMessageLite<
        CryptographerData, CryptographerData.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.CryptographerData)
    CryptographerDataOrBuilder {
  private CryptographerData() {
    defaultKeyName_ = "";
  }
  private int bitField0_;
  public static final int KEY_BAG_FIELD_NUMBER = 1;
  private org.chromium.components.sync.protocol.NigoriKeyBag keyBag_;
  /**
   * <pre>
   * Contains all known Nigori keys.
   * </pre>
   *
   * <code>optional .sync_pb.NigoriKeyBag key_bag = 1;</code>
   */
  @java.lang.Override
  public boolean hasKeyBag() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Contains all known Nigori keys.
   * </pre>
   *
   * <code>optional .sync_pb.NigoriKeyBag key_bag = 1;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.NigoriKeyBag getKeyBag() {
    return keyBag_ == null ? org.chromium.components.sync.protocol.NigoriKeyBag.getDefaultInstance() : keyBag_;
  }
  /**
   * <pre>
   * Contains all known Nigori keys.
   * </pre>
   *
   * <code>optional .sync_pb.NigoriKeyBag key_bag = 1;</code>
   */
  private void setKeyBag(org.chromium.components.sync.protocol.NigoriKeyBag value) {
    value.getClass();
  keyBag_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * Contains all known Nigori keys.
   * </pre>
   *
   * <code>optional .sync_pb.NigoriKeyBag key_bag = 1;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeKeyBag(org.chromium.components.sync.protocol.NigoriKeyBag value) {
    value.getClass();
  if (keyBag_ != null &&
        keyBag_ != org.chromium.components.sync.protocol.NigoriKeyBag.getDefaultInstance()) {
      keyBag_ =
        org.chromium.components.sync.protocol.NigoriKeyBag.newBuilder(keyBag_).mergeFrom(value).buildPartial();
    } else {
      keyBag_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * Contains all known Nigori keys.
   * </pre>
   *
   * <code>optional .sync_pb.NigoriKeyBag key_bag = 1;</code>
   */
  private void clearKeyBag() {  keyBag_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int DEFAULT_KEY_NAME_FIELD_NUMBER = 2;
  private java.lang.String defaultKeyName_;
  /**
   * <pre>
   * Default key is the key, that should be used for encryption. Can be empty
   * in case we have pending keys (waiting for explicit passphrase, or client
   * didn't received keystore keys).
   * </pre>
   *
   * <code>optional string default_key_name = 2;</code>
   * @return Whether the defaultKeyName field is set.
   */
  @java.lang.Override
  public boolean hasDefaultKeyName() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Default key is the key, that should be used for encryption. Can be empty
   * in case we have pending keys (waiting for explicit passphrase, or client
   * didn't received keystore keys).
   * </pre>
   *
   * <code>optional string default_key_name = 2;</code>
   * @return The defaultKeyName.
   */
  @java.lang.Override
  public java.lang.String getDefaultKeyName() {
    return defaultKeyName_;
  }
  /**
   * <pre>
   * Default key is the key, that should be used for encryption. Can be empty
   * in case we have pending keys (waiting for explicit passphrase, or client
   * didn't received keystore keys).
   * </pre>
   *
   * <code>optional string default_key_name = 2;</code>
   * @return The bytes for defaultKeyName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDefaultKeyNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(defaultKeyName_);
  }
  /**
   * <pre>
   * Default key is the key, that should be used for encryption. Can be empty
   * in case we have pending keys (waiting for explicit passphrase, or client
   * didn't received keystore keys).
   * </pre>
   *
   * <code>optional string default_key_name = 2;</code>
   * @param value The defaultKeyName to set.
   */
  private void setDefaultKeyName(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000002;
    defaultKeyName_ = value;
  }
  /**
   * <pre>
   * Default key is the key, that should be used for encryption. Can be empty
   * in case we have pending keys (waiting for explicit passphrase, or client
   * didn't received keystore keys).
   * </pre>
   *
   * <code>optional string default_key_name = 2;</code>
   */
  private void clearDefaultKeyName() {
    bitField0_ = (bitField0_ & ~0x00000002);
    defaultKeyName_ = getDefaultInstance().getDefaultKeyName();
  }
  /**
   * <pre>
   * Default key is the key, that should be used for encryption. Can be empty
   * in case we have pending keys (waiting for explicit passphrase, or client
   * didn't received keystore keys).
   * </pre>
   *
   * <code>optional string default_key_name = 2;</code>
   * @param value The bytes for defaultKeyName to set.
   */
  private void setDefaultKeyNameBytes(
      com.google.protobuf.ByteString value) {
    defaultKeyName_ = value.toStringUtf8();
    bitField0_ |= 0x00000002;
  }

  public static org.chromium.components.sync.protocol.CryptographerData parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.CryptographerData parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.CryptographerData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.CryptographerData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.CryptographerData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.CryptographerData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.CryptographerData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.CryptographerData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.CryptographerData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.CryptographerData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.CryptographerData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.CryptographerData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.CryptographerData prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code sync_pb.CryptographerData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.CryptographerData, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.CryptographerData)
      org.chromium.components.sync.protocol.CryptographerDataOrBuilder {
    // Construct using org.chromium.components.sync.protocol.CryptographerData.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Contains all known Nigori keys.
     * </pre>
     *
     * <code>optional .sync_pb.NigoriKeyBag key_bag = 1;</code>
     */
    @java.lang.Override
    public boolean hasKeyBag() {
      return instance.hasKeyBag();
    }
    /**
     * <pre>
     * Contains all known Nigori keys.
     * </pre>
     *
     * <code>optional .sync_pb.NigoriKeyBag key_bag = 1;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.NigoriKeyBag getKeyBag() {
      return instance.getKeyBag();
    }
    /**
     * <pre>
     * Contains all known Nigori keys.
     * </pre>
     *
     * <code>optional .sync_pb.NigoriKeyBag key_bag = 1;</code>
     */
    public Builder setKeyBag(org.chromium.components.sync.protocol.NigoriKeyBag value) {
      copyOnWrite();
      instance.setKeyBag(value);
      return this;
      }
    /**
     * <pre>
     * Contains all known Nigori keys.
     * </pre>
     *
     * <code>optional .sync_pb.NigoriKeyBag key_bag = 1;</code>
     */
    public Builder setKeyBag(
        org.chromium.components.sync.protocol.NigoriKeyBag.Builder builderForValue) {
      copyOnWrite();
      instance.setKeyBag(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Contains all known Nigori keys.
     * </pre>
     *
     * <code>optional .sync_pb.NigoriKeyBag key_bag = 1;</code>
     */
    public Builder mergeKeyBag(org.chromium.components.sync.protocol.NigoriKeyBag value) {
      copyOnWrite();
      instance.mergeKeyBag(value);
      return this;
    }
    /**
     * <pre>
     * Contains all known Nigori keys.
     * </pre>
     *
     * <code>optional .sync_pb.NigoriKeyBag key_bag = 1;</code>
     */
    public Builder clearKeyBag() {  copyOnWrite();
      instance.clearKeyBag();
      return this;
    }

    /**
     * <pre>
     * Default key is the key, that should be used for encryption. Can be empty
     * in case we have pending keys (waiting for explicit passphrase, or client
     * didn't received keystore keys).
     * </pre>
     *
     * <code>optional string default_key_name = 2;</code>
     * @return Whether the defaultKeyName field is set.
     */
    @java.lang.Override
    public boolean hasDefaultKeyName() {
      return instance.hasDefaultKeyName();
    }
    /**
     * <pre>
     * Default key is the key, that should be used for encryption. Can be empty
     * in case we have pending keys (waiting for explicit passphrase, or client
     * didn't received keystore keys).
     * </pre>
     *
     * <code>optional string default_key_name = 2;</code>
     * @return The defaultKeyName.
     */
    @java.lang.Override
    public java.lang.String getDefaultKeyName() {
      return instance.getDefaultKeyName();
    }
    /**
     * <pre>
     * Default key is the key, that should be used for encryption. Can be empty
     * in case we have pending keys (waiting for explicit passphrase, or client
     * didn't received keystore keys).
     * </pre>
     *
     * <code>optional string default_key_name = 2;</code>
     * @return The bytes for defaultKeyName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDefaultKeyNameBytes() {
      return instance.getDefaultKeyNameBytes();
    }
    /**
     * <pre>
     * Default key is the key, that should be used for encryption. Can be empty
     * in case we have pending keys (waiting for explicit passphrase, or client
     * didn't received keystore keys).
     * </pre>
     *
     * <code>optional string default_key_name = 2;</code>
     * @param value The defaultKeyName to set.
     * @return This builder for chaining.
     */
    public Builder setDefaultKeyName(
        java.lang.String value) {
      copyOnWrite();
      instance.setDefaultKeyName(value);
      return this;
    }
    /**
     * <pre>
     * Default key is the key, that should be used for encryption. Can be empty
     * in case we have pending keys (waiting for explicit passphrase, or client
     * didn't received keystore keys).
     * </pre>
     *
     * <code>optional string default_key_name = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearDefaultKeyName() {
      copyOnWrite();
      instance.clearDefaultKeyName();
      return this;
    }
    /**
     * <pre>
     * Default key is the key, that should be used for encryption. Can be empty
     * in case we have pending keys (waiting for explicit passphrase, or client
     * didn't received keystore keys).
     * </pre>
     *
     * <code>optional string default_key_name = 2;</code>
     * @param value The bytes for defaultKeyName to set.
     * @return This builder for chaining.
     */
    public Builder setDefaultKeyNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDefaultKeyNameBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.CryptographerData)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.CryptographerData();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "keyBag_",
            "defaultKeyName_",
          };
          java.lang.String info =
              "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
              "\u1008\u0001";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.components.sync.protocol.CryptographerData> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.components.sync.protocol.CryptographerData.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.CryptographerData>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.CryptographerData)
  private static final org.chromium.components.sync.protocol.CryptographerData DEFAULT_INSTANCE;
  static {
    CryptographerData defaultInstance = new CryptographerData();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      CryptographerData.class, defaultInstance);
  }

  public static org.chromium.components.sync.protocol.CryptographerData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<CryptographerData> PARSER;

  public static com.google.protobuf.Parser<CryptographerData> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

