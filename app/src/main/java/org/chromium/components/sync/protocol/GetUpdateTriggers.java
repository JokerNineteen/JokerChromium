// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/sync.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * This message communicates additional per-type information related to
 * requests with origin GU_TRIGGER.  This message is not relevant when any
 * other origin value is used.
 * Introduced in M29.
 * </pre>
 *
 * Protobuf type {@code sync_pb.GetUpdateTriggers}
 */
public  final class GetUpdateTriggers extends
    com.google.protobuf.GeneratedMessageLite<
        GetUpdateTriggers, GetUpdateTriggers.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.GetUpdateTriggers)
    GetUpdateTriggersOrBuilder {
  private GetUpdateTriggers() {
    notificationHint_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
  }
  private int bitField0_;
  public static final int NOTIFICATION_HINT_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.ProtobufList<java.lang.String> notificationHint_;
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   * @return A list containing the notificationHint.
   */
  @java.lang.Override
  public java.util.List<java.lang.String> getNotificationHintList() {
    return notificationHint_;
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   * @return The count of notificationHint.
   */
  @java.lang.Override
  public int getNotificationHintCount() {
    return notificationHint_.size();
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   * @param index The index of the element to return.
   * @return The notificationHint at the given index.
   */
  @java.lang.Override
  public java.lang.String getNotificationHint(int index) {
    return notificationHint_.get(index);
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   * @param index The index of the value to return.
   * @return The bytes of the notificationHint at the given index.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNotificationHintBytes(int index) {
    return com.google.protobuf.ByteString.copyFromUtf8(
        notificationHint_.get(index));
  }
  private void ensureNotificationHintIsMutable() {
    com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
        notificationHint_;  if (!tmp.isModifiable()) {
      notificationHint_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   * @param index The index to set the value at.
   * @param value The notificationHint to set.
   */
  private void setNotificationHint(
      int index, java.lang.String value) {
    value.getClass();
  ensureNotificationHintIsMutable();
    notificationHint_.set(index, value);
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   * @param value The notificationHint to add.
   */
  private void addNotificationHint(
      java.lang.String value) {
    value.getClass();
  ensureNotificationHintIsMutable();
    notificationHint_.add(value);
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   * @param values The notificationHint to add.
   */
  private void addAllNotificationHint(
      java.lang.Iterable<java.lang.String> values) {
    ensureNotificationHintIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, notificationHint_);
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   */
  private void clearNotificationHint() {
    notificationHint_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
  }
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   * @param value The bytes of the notificationHint to add.
   */
  private void addNotificationHintBytes(
      com.google.protobuf.ByteString value) {
    ensureNotificationHintIsMutable();
    notificationHint_.add(value.toStringUtf8());
  }

  public static final int CLIENT_DROPPED_HINTS_FIELD_NUMBER = 2;
  private boolean clientDroppedHints_;
  /**
   * <pre>
   * This flag is set if the client was forced to drop hints because the number
   * of queued hints exceeded its limit.  The oldest hints will be discarded
   * first.  Introduced in M29.
   * </pre>
   *
   * <code>optional bool client_dropped_hints = 2;</code>
   * @return Whether the clientDroppedHints field is set.
   */
  @java.lang.Override
  public boolean hasClientDroppedHints() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * This flag is set if the client was forced to drop hints because the number
   * of queued hints exceeded its limit.  The oldest hints will be discarded
   * first.  Introduced in M29.
   * </pre>
   *
   * <code>optional bool client_dropped_hints = 2;</code>
   * @return The clientDroppedHints.
   */
  @java.lang.Override
  public boolean getClientDroppedHints() {
    return clientDroppedHints_;
  }
  /**
   * <pre>
   * This flag is set if the client was forced to drop hints because the number
   * of queued hints exceeded its limit.  The oldest hints will be discarded
   * first.  Introduced in M29.
   * </pre>
   *
   * <code>optional bool client_dropped_hints = 2;</code>
   * @param value The clientDroppedHints to set.
   */
  private void setClientDroppedHints(boolean value) {
    bitField0_ |= 0x00000001;
    clientDroppedHints_ = value;
  }
  /**
   * <pre>
   * This flag is set if the client was forced to drop hints because the number
   * of queued hints exceeded its limit.  The oldest hints will be discarded
   * first.  Introduced in M29.
   * </pre>
   *
   * <code>optional bool client_dropped_hints = 2;</code>
   */
  private void clearClientDroppedHints() {
    bitField0_ = (bitField0_ & ~0x00000001);
    clientDroppedHints_ = false;
  }

  public static final int INVALIDATIONS_OUT_OF_SYNC_FIELD_NUMBER = 3;
  private boolean invalidationsOutOfSync_;
  /**
   * <pre>
   * This flag is set when the client suspects that its list of invalidation
   * hints may be incomplete.  This may be the case if:
   * - The client is syncing for the first time.
   * - The client has just restarted and it was unable to keep track of
   *   invalidations that were received prior to the restart.
   * - The client's connection to the invalidation server is currently or
   *   was recently broken.
   * It's difficult to provide more details here.  This is implemented by
   * setting the flag to false whenever anything that might adversely affect
   * notifications happens (eg. a crash, restart on a platform that doesn't
   * support invalidation ack-tracking, transient invalidation error) and is
   * unset only after we've experienced one successful sync cycle while
   * notifications were enabled.
   * This flag was introduced in M29.
   * </pre>
   *
   * <code>optional bool invalidations_out_of_sync = 3;</code>
   * @return Whether the invalidationsOutOfSync field is set.
   */
  @java.lang.Override
  public boolean hasInvalidationsOutOfSync() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * This flag is set when the client suspects that its list of invalidation
   * hints may be incomplete.  This may be the case if:
   * - The client is syncing for the first time.
   * - The client has just restarted and it was unable to keep track of
   *   invalidations that were received prior to the restart.
   * - The client's connection to the invalidation server is currently or
   *   was recently broken.
   * It's difficult to provide more details here.  This is implemented by
   * setting the flag to false whenever anything that might adversely affect
   * notifications happens (eg. a crash, restart on a platform that doesn't
   * support invalidation ack-tracking, transient invalidation error) and is
   * unset only after we've experienced one successful sync cycle while
   * notifications were enabled.
   * This flag was introduced in M29.
   * </pre>
   *
   * <code>optional bool invalidations_out_of_sync = 3;</code>
   * @return The invalidationsOutOfSync.
   */
  @java.lang.Override
  public boolean getInvalidationsOutOfSync() {
    return invalidationsOutOfSync_;
  }
  /**
   * <pre>
   * This flag is set when the client suspects that its list of invalidation
   * hints may be incomplete.  This may be the case if:
   * - The client is syncing for the first time.
   * - The client has just restarted and it was unable to keep track of
   *   invalidations that were received prior to the restart.
   * - The client's connection to the invalidation server is currently or
   *   was recently broken.
   * It's difficult to provide more details here.  This is implemented by
   * setting the flag to false whenever anything that might adversely affect
   * notifications happens (eg. a crash, restart on a platform that doesn't
   * support invalidation ack-tracking, transient invalidation error) and is
   * unset only after we've experienced one successful sync cycle while
   * notifications were enabled.
   * This flag was introduced in M29.
   * </pre>
   *
   * <code>optional bool invalidations_out_of_sync = 3;</code>
   * @param value The invalidationsOutOfSync to set.
   */
  private void setInvalidationsOutOfSync(boolean value) {
    bitField0_ |= 0x00000002;
    invalidationsOutOfSync_ = value;
  }
  /**
   * <pre>
   * This flag is set when the client suspects that its list of invalidation
   * hints may be incomplete.  This may be the case if:
   * - The client is syncing for the first time.
   * - The client has just restarted and it was unable to keep track of
   *   invalidations that were received prior to the restart.
   * - The client's connection to the invalidation server is currently or
   *   was recently broken.
   * It's difficult to provide more details here.  This is implemented by
   * setting the flag to false whenever anything that might adversely affect
   * notifications happens (eg. a crash, restart on a platform that doesn't
   * support invalidation ack-tracking, transient invalidation error) and is
   * unset only after we've experienced one successful sync cycle while
   * notifications were enabled.
   * This flag was introduced in M29.
   * </pre>
   *
   * <code>optional bool invalidations_out_of_sync = 3;</code>
   */
  private void clearInvalidationsOutOfSync() {
    bitField0_ = (bitField0_ & ~0x00000002);
    invalidationsOutOfSync_ = false;
  }

  public static final int LOCAL_MODIFICATION_NUDGES_FIELD_NUMBER = 4;
  private long localModificationNudges_;
  /**
   * <pre>
   * This counts the number of times the syncer has been asked to commit
   * changes for this type since the last successful sync cycle.  The number of
   * nudges may not be related to the actual number of items modified.  It
   * often correlates with the number of user actions, but that's not always
   * the case.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 local_modification_nudges = 4;</code>
   * @return Whether the localModificationNudges field is set.
   */
  @java.lang.Override
  public boolean hasLocalModificationNudges() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * This counts the number of times the syncer has been asked to commit
   * changes for this type since the last successful sync cycle.  The number of
   * nudges may not be related to the actual number of items modified.  It
   * often correlates with the number of user actions, but that's not always
   * the case.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 local_modification_nudges = 4;</code>
   * @return The localModificationNudges.
   */
  @java.lang.Override
  public long getLocalModificationNudges() {
    return localModificationNudges_;
  }
  /**
   * <pre>
   * This counts the number of times the syncer has been asked to commit
   * changes for this type since the last successful sync cycle.  The number of
   * nudges may not be related to the actual number of items modified.  It
   * often correlates with the number of user actions, but that's not always
   * the case.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 local_modification_nudges = 4;</code>
   * @param value The localModificationNudges to set.
   */
  private void setLocalModificationNudges(long value) {
    bitField0_ |= 0x00000004;
    localModificationNudges_ = value;
  }
  /**
   * <pre>
   * This counts the number of times the syncer has been asked to commit
   * changes for this type since the last successful sync cycle.  The number of
   * nudges may not be related to the actual number of items modified.  It
   * often correlates with the number of user actions, but that's not always
   * the case.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 local_modification_nudges = 4;</code>
   */
  private void clearLocalModificationNudges() {
    bitField0_ = (bitField0_ & ~0x00000004);
    localModificationNudges_ = 0L;
  }

  public static final int DATATYPE_REFRESH_NUDGES_FIELD_NUMBER = 5;
  private long datatypeRefreshNudges_;
  /**
   * <pre>
   * This counts the number of times the syncer has been explicitly asked to
   * fetch updates for this type since the last successful sync cycle.  These
   * explicit refresh requests should be relatively rare on most platforms, and
   * associated with user actions.  For example, at the time of this writing
   * the most common (only?) source of refresh requests is when a user opens
   * the new tab page on a platform that does not support sessions
   * invalidations.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 datatype_refresh_nudges = 5;</code>
   * @return Whether the datatypeRefreshNudges field is set.
   */
  @java.lang.Override
  public boolean hasDatatypeRefreshNudges() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * This counts the number of times the syncer has been explicitly asked to
   * fetch updates for this type since the last successful sync cycle.  These
   * explicit refresh requests should be relatively rare on most platforms, and
   * associated with user actions.  For example, at the time of this writing
   * the most common (only?) source of refresh requests is when a user opens
   * the new tab page on a platform that does not support sessions
   * invalidations.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 datatype_refresh_nudges = 5;</code>
   * @return The datatypeRefreshNudges.
   */
  @java.lang.Override
  public long getDatatypeRefreshNudges() {
    return datatypeRefreshNudges_;
  }
  /**
   * <pre>
   * This counts the number of times the syncer has been explicitly asked to
   * fetch updates for this type since the last successful sync cycle.  These
   * explicit refresh requests should be relatively rare on most platforms, and
   * associated with user actions.  For example, at the time of this writing
   * the most common (only?) source of refresh requests is when a user opens
   * the new tab page on a platform that does not support sessions
   * invalidations.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 datatype_refresh_nudges = 5;</code>
   * @param value The datatypeRefreshNudges to set.
   */
  private void setDatatypeRefreshNudges(long value) {
    bitField0_ |= 0x00000008;
    datatypeRefreshNudges_ = value;
  }
  /**
   * <pre>
   * This counts the number of times the syncer has been explicitly asked to
   * fetch updates for this type since the last successful sync cycle.  These
   * explicit refresh requests should be relatively rare on most platforms, and
   * associated with user actions.  For example, at the time of this writing
   * the most common (only?) source of refresh requests is when a user opens
   * the new tab page on a platform that does not support sessions
   * invalidations.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 datatype_refresh_nudges = 5;</code>
   */
  private void clearDatatypeRefreshNudges() {
    bitField0_ = (bitField0_ & ~0x00000008);
    datatypeRefreshNudges_ = 0L;
  }

  public static final int SERVER_DROPPED_HINTS_FIELD_NUMBER = 6;
  private boolean serverDroppedHints_;
  /**
   * <pre>
   * This flag is set if the invalidation server reports that it may have
   * dropped some invalidations at some point.  Introduced in M33.
   * </pre>
   *
   * <code>optional bool server_dropped_hints = 6;</code>
   * @return Whether the serverDroppedHints field is set.
   */
  @java.lang.Override
  public boolean hasServerDroppedHints() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * This flag is set if the invalidation server reports that it may have
   * dropped some invalidations at some point.  Introduced in M33.
   * </pre>
   *
   * <code>optional bool server_dropped_hints = 6;</code>
   * @return The serverDroppedHints.
   */
  @java.lang.Override
  public boolean getServerDroppedHints() {
    return serverDroppedHints_;
  }
  /**
   * <pre>
   * This flag is set if the invalidation server reports that it may have
   * dropped some invalidations at some point.  Introduced in M33.
   * </pre>
   *
   * <code>optional bool server_dropped_hints = 6;</code>
   * @param value The serverDroppedHints to set.
   */
  private void setServerDroppedHints(boolean value) {
    bitField0_ |= 0x00000010;
    serverDroppedHints_ = value;
  }
  /**
   * <pre>
   * This flag is set if the invalidation server reports that it may have
   * dropped some invalidations at some point.  Introduced in M33.
   * </pre>
   *
   * <code>optional bool server_dropped_hints = 6;</code>
   */
  private void clearServerDroppedHints() {
    bitField0_ = (bitField0_ & ~0x00000010);
    serverDroppedHints_ = false;
  }

  public static final int INITIAL_SYNC_IN_PROGRESS_FIELD_NUMBER = 7;
  private boolean initialSyncInProgress_;
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due at least in part due
   * to the fact that this type has not finished initial sync yet, and the
   * client would like to initialize itself with the server data.
   * Only some types support performing an initial sync as part of a normal
   * GetUpdate request.  Many types must be in configure mode when fetching
   * initial sync data.
   * Introduced in M38.
   * </pre>
   *
   * <code>optional bool initial_sync_in_progress = 7;</code>
   * @return Whether the initialSyncInProgress field is set.
   */
  @java.lang.Override
  public boolean hasInitialSyncInProgress() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due at least in part due
   * to the fact that this type has not finished initial sync yet, and the
   * client would like to initialize itself with the server data.
   * Only some types support performing an initial sync as part of a normal
   * GetUpdate request.  Many types must be in configure mode when fetching
   * initial sync data.
   * Introduced in M38.
   * </pre>
   *
   * <code>optional bool initial_sync_in_progress = 7;</code>
   * @return The initialSyncInProgress.
   */
  @java.lang.Override
  public boolean getInitialSyncInProgress() {
    return initialSyncInProgress_;
  }
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due at least in part due
   * to the fact that this type has not finished initial sync yet, and the
   * client would like to initialize itself with the server data.
   * Only some types support performing an initial sync as part of a normal
   * GetUpdate request.  Many types must be in configure mode when fetching
   * initial sync data.
   * Introduced in M38.
   * </pre>
   *
   * <code>optional bool initial_sync_in_progress = 7;</code>
   * @param value The initialSyncInProgress to set.
   */
  private void setInitialSyncInProgress(boolean value) {
    bitField0_ |= 0x00000020;
    initialSyncInProgress_ = value;
  }
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due at least in part due
   * to the fact that this type has not finished initial sync yet, and the
   * client would like to initialize itself with the server data.
   * Only some types support performing an initial sync as part of a normal
   * GetUpdate request.  Many types must be in configure mode when fetching
   * initial sync data.
   * Introduced in M38.
   * </pre>
   *
   * <code>optional bool initial_sync_in_progress = 7;</code>
   */
  private void clearInitialSyncInProgress() {
    bitField0_ = (bitField0_ & ~0x00000020);
    initialSyncInProgress_ = false;
  }

  public static final int SYNC_FOR_RESOLVE_CONFLICT_IN_PROGRESS_FIELD_NUMBER = 8;
  private boolean syncForResolveConflictInProgress_;
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due to client receiving
   * conflict response from server, so client needs to sync and then resolve
   * conflict locally, and then commit again.
   * Introduced in M42.
   * </pre>
   *
   * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
   * @return Whether the syncForResolveConflictInProgress field is set.
   */
  @java.lang.Override
  public boolean hasSyncForResolveConflictInProgress() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due to client receiving
   * conflict response from server, so client needs to sync and then resolve
   * conflict locally, and then commit again.
   * Introduced in M42.
   * </pre>
   *
   * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
   * @return The syncForResolveConflictInProgress.
   */
  @java.lang.Override
  public boolean getSyncForResolveConflictInProgress() {
    return syncForResolveConflictInProgress_;
  }
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due to client receiving
   * conflict response from server, so client needs to sync and then resolve
   * conflict locally, and then commit again.
   * Introduced in M42.
   * </pre>
   *
   * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
   * @param value The syncForResolveConflictInProgress to set.
   */
  private void setSyncForResolveConflictInProgress(boolean value) {
    bitField0_ |= 0x00000040;
    syncForResolveConflictInProgress_ = value;
  }
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due to client receiving
   * conflict response from server, so client needs to sync and then resolve
   * conflict locally, and then commit again.
   * Introduced in M42.
   * </pre>
   *
   * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
   */
  private void clearSyncForResolveConflictInProgress() {
    bitField0_ = (bitField0_ & ~0x00000040);
    syncForResolveConflictInProgress_ = false;
  }

  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.GetUpdateTriggers parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.GetUpdateTriggers prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * This message communicates additional per-type information related to
   * requests with origin GU_TRIGGER.  This message is not relevant when any
   * other origin value is used.
   * Introduced in M29.
   * </pre>
   *
   * Protobuf type {@code sync_pb.GetUpdateTriggers}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.GetUpdateTriggers, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.GetUpdateTriggers)
      org.chromium.components.sync.protocol.GetUpdateTriggersOrBuilder {
    // Construct using org.chromium.components.sync.protocol.GetUpdateTriggers.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     * @return A list containing the notificationHint.
     */
    @java.lang.Override
    public java.util.List<java.lang.String>
        getNotificationHintList() {
      return java.util.Collections.unmodifiableList(
          instance.getNotificationHintList());
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     * @return The count of notificationHint.
     */
    @java.lang.Override
    public int getNotificationHintCount() {
      return instance.getNotificationHintCount();
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     * @param index The index of the element to return.
     * @return The notificationHint at the given index.
     */
    @java.lang.Override
    public java.lang.String getNotificationHint(int index) {
      return instance.getNotificationHint(index);
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the notificationHint at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNotificationHintBytes(int index) {
      return instance.getNotificationHintBytes(index);
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     * @param index The index to set the value at.
     * @param value The notificationHint to set.
     * @return This builder for chaining.
     */
    public Builder setNotificationHint(
        int index, java.lang.String value) {
      copyOnWrite();
      instance.setNotificationHint(index, value);
      return this;
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     * @param value The notificationHint to add.
     * @return This builder for chaining.
     */
    public Builder addNotificationHint(
        java.lang.String value) {
      copyOnWrite();
      instance.addNotificationHint(value);
      return this;
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     * @param values The notificationHint to add.
     * @return This builder for chaining.
     */
    public Builder addAllNotificationHint(
        java.lang.Iterable<java.lang.String> values) {
      copyOnWrite();
      instance.addAllNotificationHint(values);
      return this;
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearNotificationHint() {
      copyOnWrite();
      instance.clearNotificationHint();
      return this;
    }
    /**
     * <pre>
     * An opaque-to-the-client string of bytes, received through a notification,
     * that the server may interpret as a hint about the location of the latest
     * version of the data for this type.
     * Note that this will eventually replace the 'optional' field of the same
     * name defined in the progress marker, but the client and server should
     * support both until it's safe to deprecate the old one.
     * This field was introduced in M29.
     * </pre>
     *
     * <code>repeated string notification_hint = 1;</code>
     * @param value The bytes of the notificationHint to add.
     * @return This builder for chaining.
     */
    public Builder addNotificationHintBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.addNotificationHintBytes(value);
      return this;
    }

    /**
     * <pre>
     * This flag is set if the client was forced to drop hints because the number
     * of queued hints exceeded its limit.  The oldest hints will be discarded
     * first.  Introduced in M29.
     * </pre>
     *
     * <code>optional bool client_dropped_hints = 2;</code>
     * @return Whether the clientDroppedHints field is set.
     */
    @java.lang.Override
    public boolean hasClientDroppedHints() {
      return instance.hasClientDroppedHints();
    }
    /**
     * <pre>
     * This flag is set if the client was forced to drop hints because the number
     * of queued hints exceeded its limit.  The oldest hints will be discarded
     * first.  Introduced in M29.
     * </pre>
     *
     * <code>optional bool client_dropped_hints = 2;</code>
     * @return The clientDroppedHints.
     */
    @java.lang.Override
    public boolean getClientDroppedHints() {
      return instance.getClientDroppedHints();
    }
    /**
     * <pre>
     * This flag is set if the client was forced to drop hints because the number
     * of queued hints exceeded its limit.  The oldest hints will be discarded
     * first.  Introduced in M29.
     * </pre>
     *
     * <code>optional bool client_dropped_hints = 2;</code>
     * @param value The clientDroppedHints to set.
     * @return This builder for chaining.
     */
    public Builder setClientDroppedHints(boolean value) {
      copyOnWrite();
      instance.setClientDroppedHints(value);
      return this;
    }
    /**
     * <pre>
     * This flag is set if the client was forced to drop hints because the number
     * of queued hints exceeded its limit.  The oldest hints will be discarded
     * first.  Introduced in M29.
     * </pre>
     *
     * <code>optional bool client_dropped_hints = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearClientDroppedHints() {
      copyOnWrite();
      instance.clearClientDroppedHints();
      return this;
    }

    /**
     * <pre>
     * This flag is set when the client suspects that its list of invalidation
     * hints may be incomplete.  This may be the case if:
     * - The client is syncing for the first time.
     * - The client has just restarted and it was unable to keep track of
     *   invalidations that were received prior to the restart.
     * - The client's connection to the invalidation server is currently or
     *   was recently broken.
     * It's difficult to provide more details here.  This is implemented by
     * setting the flag to false whenever anything that might adversely affect
     * notifications happens (eg. a crash, restart on a platform that doesn't
     * support invalidation ack-tracking, transient invalidation error) and is
     * unset only after we've experienced one successful sync cycle while
     * notifications were enabled.
     * This flag was introduced in M29.
     * </pre>
     *
     * <code>optional bool invalidations_out_of_sync = 3;</code>
     * @return Whether the invalidationsOutOfSync field is set.
     */
    @java.lang.Override
    public boolean hasInvalidationsOutOfSync() {
      return instance.hasInvalidationsOutOfSync();
    }
    /**
     * <pre>
     * This flag is set when the client suspects that its list of invalidation
     * hints may be incomplete.  This may be the case if:
     * - The client is syncing for the first time.
     * - The client has just restarted and it was unable to keep track of
     *   invalidations that were received prior to the restart.
     * - The client's connection to the invalidation server is currently or
     *   was recently broken.
     * It's difficult to provide more details here.  This is implemented by
     * setting the flag to false whenever anything that might adversely affect
     * notifications happens (eg. a crash, restart on a platform that doesn't
     * support invalidation ack-tracking, transient invalidation error) and is
     * unset only after we've experienced one successful sync cycle while
     * notifications were enabled.
     * This flag was introduced in M29.
     * </pre>
     *
     * <code>optional bool invalidations_out_of_sync = 3;</code>
     * @return The invalidationsOutOfSync.
     */
    @java.lang.Override
    public boolean getInvalidationsOutOfSync() {
      return instance.getInvalidationsOutOfSync();
    }
    /**
     * <pre>
     * This flag is set when the client suspects that its list of invalidation
     * hints may be incomplete.  This may be the case if:
     * - The client is syncing for the first time.
     * - The client has just restarted and it was unable to keep track of
     *   invalidations that were received prior to the restart.
     * - The client's connection to the invalidation server is currently or
     *   was recently broken.
     * It's difficult to provide more details here.  This is implemented by
     * setting the flag to false whenever anything that might adversely affect
     * notifications happens (eg. a crash, restart on a platform that doesn't
     * support invalidation ack-tracking, transient invalidation error) and is
     * unset only after we've experienced one successful sync cycle while
     * notifications were enabled.
     * This flag was introduced in M29.
     * </pre>
     *
     * <code>optional bool invalidations_out_of_sync = 3;</code>
     * @param value The invalidationsOutOfSync to set.
     * @return This builder for chaining.
     */
    public Builder setInvalidationsOutOfSync(boolean value) {
      copyOnWrite();
      instance.setInvalidationsOutOfSync(value);
      return this;
    }
    /**
     * <pre>
     * This flag is set when the client suspects that its list of invalidation
     * hints may be incomplete.  This may be the case if:
     * - The client is syncing for the first time.
     * - The client has just restarted and it was unable to keep track of
     *   invalidations that were received prior to the restart.
     * - The client's connection to the invalidation server is currently or
     *   was recently broken.
     * It's difficult to provide more details here.  This is implemented by
     * setting the flag to false whenever anything that might adversely affect
     * notifications happens (eg. a crash, restart on a platform that doesn't
     * support invalidation ack-tracking, transient invalidation error) and is
     * unset only after we've experienced one successful sync cycle while
     * notifications were enabled.
     * This flag was introduced in M29.
     * </pre>
     *
     * <code>optional bool invalidations_out_of_sync = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearInvalidationsOutOfSync() {
      copyOnWrite();
      instance.clearInvalidationsOutOfSync();
      return this;
    }

    /**
     * <pre>
     * This counts the number of times the syncer has been asked to commit
     * changes for this type since the last successful sync cycle.  The number of
     * nudges may not be related to the actual number of items modified.  It
     * often correlates with the number of user actions, but that's not always
     * the case.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional int64 local_modification_nudges = 4;</code>
     * @return Whether the localModificationNudges field is set.
     */
    @java.lang.Override
    public boolean hasLocalModificationNudges() {
      return instance.hasLocalModificationNudges();
    }
    /**
     * <pre>
     * This counts the number of times the syncer has been asked to commit
     * changes for this type since the last successful sync cycle.  The number of
     * nudges may not be related to the actual number of items modified.  It
     * often correlates with the number of user actions, but that's not always
     * the case.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional int64 local_modification_nudges = 4;</code>
     * @return The localModificationNudges.
     */
    @java.lang.Override
    public long getLocalModificationNudges() {
      return instance.getLocalModificationNudges();
    }
    /**
     * <pre>
     * This counts the number of times the syncer has been asked to commit
     * changes for this type since the last successful sync cycle.  The number of
     * nudges may not be related to the actual number of items modified.  It
     * often correlates with the number of user actions, but that's not always
     * the case.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional int64 local_modification_nudges = 4;</code>
     * @param value The localModificationNudges to set.
     * @return This builder for chaining.
     */
    public Builder setLocalModificationNudges(long value) {
      copyOnWrite();
      instance.setLocalModificationNudges(value);
      return this;
    }
    /**
     * <pre>
     * This counts the number of times the syncer has been asked to commit
     * changes for this type since the last successful sync cycle.  The number of
     * nudges may not be related to the actual number of items modified.  It
     * often correlates with the number of user actions, but that's not always
     * the case.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional int64 local_modification_nudges = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearLocalModificationNudges() {
      copyOnWrite();
      instance.clearLocalModificationNudges();
      return this;
    }

    /**
     * <pre>
     * This counts the number of times the syncer has been explicitly asked to
     * fetch updates for this type since the last successful sync cycle.  These
     * explicit refresh requests should be relatively rare on most platforms, and
     * associated with user actions.  For example, at the time of this writing
     * the most common (only?) source of refresh requests is when a user opens
     * the new tab page on a platform that does not support sessions
     * invalidations.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional int64 datatype_refresh_nudges = 5;</code>
     * @return Whether the datatypeRefreshNudges field is set.
     */
    @java.lang.Override
    public boolean hasDatatypeRefreshNudges() {
      return instance.hasDatatypeRefreshNudges();
    }
    /**
     * <pre>
     * This counts the number of times the syncer has been explicitly asked to
     * fetch updates for this type since the last successful sync cycle.  These
     * explicit refresh requests should be relatively rare on most platforms, and
     * associated with user actions.  For example, at the time of this writing
     * the most common (only?) source of refresh requests is when a user opens
     * the new tab page on a platform that does not support sessions
     * invalidations.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional int64 datatype_refresh_nudges = 5;</code>
     * @return The datatypeRefreshNudges.
     */
    @java.lang.Override
    public long getDatatypeRefreshNudges() {
      return instance.getDatatypeRefreshNudges();
    }
    /**
     * <pre>
     * This counts the number of times the syncer has been explicitly asked to
     * fetch updates for this type since the last successful sync cycle.  These
     * explicit refresh requests should be relatively rare on most platforms, and
     * associated with user actions.  For example, at the time of this writing
     * the most common (only?) source of refresh requests is when a user opens
     * the new tab page on a platform that does not support sessions
     * invalidations.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional int64 datatype_refresh_nudges = 5;</code>
     * @param value The datatypeRefreshNudges to set.
     * @return This builder for chaining.
     */
    public Builder setDatatypeRefreshNudges(long value) {
      copyOnWrite();
      instance.setDatatypeRefreshNudges(value);
      return this;
    }
    /**
     * <pre>
     * This counts the number of times the syncer has been explicitly asked to
     * fetch updates for this type since the last successful sync cycle.  These
     * explicit refresh requests should be relatively rare on most platforms, and
     * associated with user actions.  For example, at the time of this writing
     * the most common (only?) source of refresh requests is when a user opens
     * the new tab page on a platform that does not support sessions
     * invalidations.
     * Introduced in M29.
     * </pre>
     *
     * <code>optional int64 datatype_refresh_nudges = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearDatatypeRefreshNudges() {
      copyOnWrite();
      instance.clearDatatypeRefreshNudges();
      return this;
    }

    /**
     * <pre>
     * This flag is set if the invalidation server reports that it may have
     * dropped some invalidations at some point.  Introduced in M33.
     * </pre>
     *
     * <code>optional bool server_dropped_hints = 6;</code>
     * @return Whether the serverDroppedHints field is set.
     */
    @java.lang.Override
    public boolean hasServerDroppedHints() {
      return instance.hasServerDroppedHints();
    }
    /**
     * <pre>
     * This flag is set if the invalidation server reports that it may have
     * dropped some invalidations at some point.  Introduced in M33.
     * </pre>
     *
     * <code>optional bool server_dropped_hints = 6;</code>
     * @return The serverDroppedHints.
     */
    @java.lang.Override
    public boolean getServerDroppedHints() {
      return instance.getServerDroppedHints();
    }
    /**
     * <pre>
     * This flag is set if the invalidation server reports that it may have
     * dropped some invalidations at some point.  Introduced in M33.
     * </pre>
     *
     * <code>optional bool server_dropped_hints = 6;</code>
     * @param value The serverDroppedHints to set.
     * @return This builder for chaining.
     */
    public Builder setServerDroppedHints(boolean value) {
      copyOnWrite();
      instance.setServerDroppedHints(value);
      return this;
    }
    /**
     * <pre>
     * This flag is set if the invalidation server reports that it may have
     * dropped some invalidations at some point.  Introduced in M33.
     * </pre>
     *
     * <code>optional bool server_dropped_hints = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearServerDroppedHints() {
      copyOnWrite();
      instance.clearServerDroppedHints();
      return this;
    }

    /**
     * <pre>
     * This flag is set if this GetUpdate request is due at least in part due
     * to the fact that this type has not finished initial sync yet, and the
     * client would like to initialize itself with the server data.
     * Only some types support performing an initial sync as part of a normal
     * GetUpdate request.  Many types must be in configure mode when fetching
     * initial sync data.
     * Introduced in M38.
     * </pre>
     *
     * <code>optional bool initial_sync_in_progress = 7;</code>
     * @return Whether the initialSyncInProgress field is set.
     */
    @java.lang.Override
    public boolean hasInitialSyncInProgress() {
      return instance.hasInitialSyncInProgress();
    }
    /**
     * <pre>
     * This flag is set if this GetUpdate request is due at least in part due
     * to the fact that this type has not finished initial sync yet, and the
     * client would like to initialize itself with the server data.
     * Only some types support performing an initial sync as part of a normal
     * GetUpdate request.  Many types must be in configure mode when fetching
     * initial sync data.
     * Introduced in M38.
     * </pre>
     *
     * <code>optional bool initial_sync_in_progress = 7;</code>
     * @return The initialSyncInProgress.
     */
    @java.lang.Override
    public boolean getInitialSyncInProgress() {
      return instance.getInitialSyncInProgress();
    }
    /**
     * <pre>
     * This flag is set if this GetUpdate request is due at least in part due
     * to the fact that this type has not finished initial sync yet, and the
     * client would like to initialize itself with the server data.
     * Only some types support performing an initial sync as part of a normal
     * GetUpdate request.  Many types must be in configure mode when fetching
     * initial sync data.
     * Introduced in M38.
     * </pre>
     *
     * <code>optional bool initial_sync_in_progress = 7;</code>
     * @param value The initialSyncInProgress to set.
     * @return This builder for chaining.
     */
    public Builder setInitialSyncInProgress(boolean value) {
      copyOnWrite();
      instance.setInitialSyncInProgress(value);
      return this;
    }
    /**
     * <pre>
     * This flag is set if this GetUpdate request is due at least in part due
     * to the fact that this type has not finished initial sync yet, and the
     * client would like to initialize itself with the server data.
     * Only some types support performing an initial sync as part of a normal
     * GetUpdate request.  Many types must be in configure mode when fetching
     * initial sync data.
     * Introduced in M38.
     * </pre>
     *
     * <code>optional bool initial_sync_in_progress = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearInitialSyncInProgress() {
      copyOnWrite();
      instance.clearInitialSyncInProgress();
      return this;
    }

    /**
     * <pre>
     * This flag is set if this GetUpdate request is due to client receiving
     * conflict response from server, so client needs to sync and then resolve
     * conflict locally, and then commit again.
     * Introduced in M42.
     * </pre>
     *
     * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
     * @return Whether the syncForResolveConflictInProgress field is set.
     */
    @java.lang.Override
    public boolean hasSyncForResolveConflictInProgress() {
      return instance.hasSyncForResolveConflictInProgress();
    }
    /**
     * <pre>
     * This flag is set if this GetUpdate request is due to client receiving
     * conflict response from server, so client needs to sync and then resolve
     * conflict locally, and then commit again.
     * Introduced in M42.
     * </pre>
     *
     * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
     * @return The syncForResolveConflictInProgress.
     */
    @java.lang.Override
    public boolean getSyncForResolveConflictInProgress() {
      return instance.getSyncForResolveConflictInProgress();
    }
    /**
     * <pre>
     * This flag is set if this GetUpdate request is due to client receiving
     * conflict response from server, so client needs to sync and then resolve
     * conflict locally, and then commit again.
     * Introduced in M42.
     * </pre>
     *
     * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
     * @param value The syncForResolveConflictInProgress to set.
     * @return This builder for chaining.
     */
    public Builder setSyncForResolveConflictInProgress(boolean value) {
      copyOnWrite();
      instance.setSyncForResolveConflictInProgress(value);
      return this;
    }
    /**
     * <pre>
     * This flag is set if this GetUpdate request is due to client receiving
     * conflict response from server, so client needs to sync and then resolve
     * conflict locally, and then commit again.
     * Introduced in M42.
     * </pre>
     *
     * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearSyncForResolveConflictInProgress() {
      copyOnWrite();
      instance.clearSyncForResolveConflictInProgress();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.GetUpdateTriggers)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.GetUpdateTriggers();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "notificationHint_",
            "clientDroppedHints_",
            "invalidationsOutOfSync_",
            "localModificationNudges_",
            "datatypeRefreshNudges_",
            "serverDroppedHints_",
            "initialSyncInProgress_",
            "syncForResolveConflictInProgress_",
          };
          java.lang.String info =
              "\u0001\b\u0000\u0001\u0001\b\b\u0000\u0001\u0000\u0001\u001a\u0002\u1007\u0000\u0003" +
              "\u1007\u0001\u0004\u1002\u0002\u0005\u1002\u0003\u0006\u1007\u0004\u0007\u1007\u0005" +
              "\b\u1007\u0006";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.components.sync.protocol.GetUpdateTriggers> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.components.sync.protocol.GetUpdateTriggers.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.GetUpdateTriggers>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.GetUpdateTriggers)
  private static final org.chromium.components.sync.protocol.GetUpdateTriggers DEFAULT_INSTANCE;
  static {
    GetUpdateTriggers defaultInstance = new GetUpdateTriggers();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      GetUpdateTriggers.class, defaultInstance);
  }

  public static org.chromium.components.sync.protocol.GetUpdateTriggers getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<GetUpdateTriggers> PARSER;

  public static com.google.protobuf.Parser<GetUpdateTriggers> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

