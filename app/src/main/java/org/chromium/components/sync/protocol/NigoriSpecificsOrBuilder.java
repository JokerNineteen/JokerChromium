// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/nigori_specifics.proto

package org.chromium.components.sync.protocol;

public interface NigoriSpecificsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sync_pb.NigoriSpecifics)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <code>optional .sync_pb.EncryptedData encryption_keybag = 1;</code>
   * @return Whether the encryptionKeybag field is set.
   */
  boolean hasEncryptionKeybag();
  /**
   * <code>optional .sync_pb.EncryptedData encryption_keybag = 1;</code>
   * @return The encryptionKeybag.
   */
  org.chromium.components.sync.protocol.EncryptedData getEncryptionKeybag();

  /**
   * <pre>
   * Once keystore migration is performed, we have to freeze the keybag so that
   * older clients (that don't support keystore encryption) do not attempt to
   * update the keybag.
   * Previously |using_explicit_passphrase|.
   * </pre>
   *
   * <code>optional bool keybag_is_frozen = 2;</code>
   * @return Whether the keybagIsFrozen field is set.
   */
  boolean hasKeybagIsFrozen();
  /**
   * <pre>
   * Once keystore migration is performed, we have to freeze the keybag so that
   * older clients (that don't support keystore encryption) do not attempt to
   * update the keybag.
   * Previously |using_explicit_passphrase|.
   * </pre>
   *
   * <code>optional bool keybag_is_frozen = 2;</code>
   * @return The keybagIsFrozen.
   */
  boolean getKeybagIsFrozen();

  /**
   * <pre>
   * Booleans corresponding to whether a datatype should be encrypted.
   * Passwords and Wi-Fi configurations are always encrypted, so we don't need
   * a field here.  History delete directives need to be consumable by the
   * server, and thus can't be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_bookmarks = 13;</code>
   * @return Whether the encryptBookmarks field is set.
   */
  boolean hasEncryptBookmarks();
  /**
   * <pre>
   * Booleans corresponding to whether a datatype should be encrypted.
   * Passwords and Wi-Fi configurations are always encrypted, so we don't need
   * a field here.  History delete directives need to be consumable by the
   * server, and thus can't be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_bookmarks = 13;</code>
   * @return The encryptBookmarks.
   */
  boolean getEncryptBookmarks();

  /**
   * <code>optional bool encrypt_preferences = 14;</code>
   * @return Whether the encryptPreferences field is set.
   */
  boolean hasEncryptPreferences();
  /**
   * <code>optional bool encrypt_preferences = 14;</code>
   * @return The encryptPreferences.
   */
  boolean getEncryptPreferences();

  /**
   * <code>optional bool encrypt_autofill_profile = 15;</code>
   * @return Whether the encryptAutofillProfile field is set.
   */
  boolean hasEncryptAutofillProfile();
  /**
   * <code>optional bool encrypt_autofill_profile = 15;</code>
   * @return The encryptAutofillProfile.
   */
  boolean getEncryptAutofillProfile();

  /**
   * <code>optional bool encrypt_autofill = 16;</code>
   * @return Whether the encryptAutofill field is set.
   */
  boolean hasEncryptAutofill();
  /**
   * <code>optional bool encrypt_autofill = 16;</code>
   * @return The encryptAutofill.
   */
  boolean getEncryptAutofill();

  /**
   * <code>optional bool encrypt_themes = 17;</code>
   * @return Whether the encryptThemes field is set.
   */
  boolean hasEncryptThemes();
  /**
   * <code>optional bool encrypt_themes = 17;</code>
   * @return The encryptThemes.
   */
  boolean getEncryptThemes();

  /**
   * <code>optional bool encrypt_typed_urls = 18;</code>
   * @return Whether the encryptTypedUrls field is set.
   */
  boolean hasEncryptTypedUrls();
  /**
   * <code>optional bool encrypt_typed_urls = 18;</code>
   * @return The encryptTypedUrls.
   */
  boolean getEncryptTypedUrls();

  /**
   * <code>optional bool encrypt_extensions = 19;</code>
   * @return Whether the encryptExtensions field is set.
   */
  boolean hasEncryptExtensions();
  /**
   * <code>optional bool encrypt_extensions = 19;</code>
   * @return The encryptExtensions.
   */
  boolean getEncryptExtensions();

  /**
   * <code>optional bool encrypt_sessions = 20;</code>
   * @return Whether the encryptSessions field is set.
   */
  boolean hasEncryptSessions();
  /**
   * <code>optional bool encrypt_sessions = 20;</code>
   * @return The encryptSessions.
   */
  boolean getEncryptSessions();

  /**
   * <code>optional bool encrypt_apps = 21;</code>
   * @return Whether the encryptApps field is set.
   */
  boolean hasEncryptApps();
  /**
   * <code>optional bool encrypt_apps = 21;</code>
   * @return The encryptApps.
   */
  boolean getEncryptApps();

  /**
   * <code>optional bool encrypt_search_engines = 22;</code>
   * @return Whether the encryptSearchEngines field is set.
   */
  boolean hasEncryptSearchEngines();
  /**
   * <code>optional bool encrypt_search_engines = 22;</code>
   * @return The encryptSearchEngines.
   */
  boolean getEncryptSearchEngines();

  /**
   * <pre>
   * If true, all current and future datatypes will be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_everything = 24;</code>
   * @return Whether the encryptEverything field is set.
   */
  boolean hasEncryptEverything();
  /**
   * <pre>
   * If true, all current and future datatypes will be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_everything = 24;</code>
   * @return The encryptEverything.
   */
  boolean getEncryptEverything();

  /**
   * <code>optional bool encrypt_extension_settings = 25;</code>
   * @return Whether the encryptExtensionSettings field is set.
   */
  boolean hasEncryptExtensionSettings();
  /**
   * <code>optional bool encrypt_extension_settings = 25;</code>
   * @return The encryptExtensionSettings.
   */
  boolean getEncryptExtensionSettings();

  /**
   * <code>optional bool encrypt_app_notifications = 26 [deprecated = true];</code>
   * @return Whether the encryptAppNotifications field is set.
   */
  @java.lang.Deprecated boolean hasEncryptAppNotifications();
  /**
   * <code>optional bool encrypt_app_notifications = 26 [deprecated = true];</code>
   * @return The encryptAppNotifications.
   */
  @java.lang.Deprecated boolean getEncryptAppNotifications();

  /**
   * <code>optional bool encrypt_app_settings = 27;</code>
   * @return Whether the encryptAppSettings field is set.
   */
  boolean hasEncryptAppSettings();
  /**
   * <code>optional bool encrypt_app_settings = 27;</code>
   * @return The encryptAppSettings.
   */
  boolean getEncryptAppSettings();

  /**
   * <pre>
   * Enable syncing favicons as part of tab sync.
   * </pre>
   *
   * <code>optional bool sync_tab_favicons = 29;</code>
   * @return Whether the syncTabFavicons field is set.
   */
  boolean hasSyncTabFavicons();
  /**
   * <pre>
   * Enable syncing favicons as part of tab sync.
   * </pre>
   *
   * <code>optional bool sync_tab_favicons = 29;</code>
   * @return The syncTabFavicons.
   */
  boolean getSyncTabFavicons();

  /**
   * <pre>
   * An |int| field is used instead of enum PassphraseType so we can better
   * handle unknown values coming from later versions. Prior to M77, this was an
   * enum so old clients will assume IMPLICIT_PASSPHRASE for values greater than
   * 4.
   * </pre>
   *
   * <code>optional int32 passphrase_type = 30 [default = 1];</code>
   * @return Whether the passphraseType field is set.
   */
  boolean hasPassphraseType();
  /**
   * <pre>
   * An |int| field is used instead of enum PassphraseType so we can better
   * handle unknown values coming from later versions. Prior to M77, this was an
   * enum so old clients will assume IMPLICIT_PASSPHRASE for values greater than
   * 4.
   * </pre>
   *
   * <code>optional int32 passphrase_type = 30 [default = 1];</code>
   * @return The passphraseType.
   */
  int getPassphraseType();

  /**
   * <pre>
   * The keystore decryptor token blob. Encrypted with the keystore key, and
   * contains the encryption key used to decrypt |encryption_keybag|.
   * Only set if passphrase_state == KEYSTORE_PASSPHRASE.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData keystore_decryptor_token = 31;</code>
   * @return Whether the keystoreDecryptorToken field is set.
   */
  boolean hasKeystoreDecryptorToken();
  /**
   * <pre>
   * The keystore decryptor token blob. Encrypted with the keystore key, and
   * contains the encryption key used to decrypt |encryption_keybag|.
   * Only set if passphrase_state == KEYSTORE_PASSPHRASE.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData keystore_decryptor_token = 31;</code>
   * @return The keystoreDecryptorToken.
   */
  org.chromium.components.sync.protocol.EncryptedData getKeystoreDecryptorToken();

  /**
   * <pre>
   * The time (in epoch milliseconds) at which the keystore migration was
   * performed.
   * </pre>
   *
   * <code>optional int64 keystore_migration_time = 32;</code>
   * @return Whether the keystoreMigrationTime field is set.
   */
  boolean hasKeystoreMigrationTime();
  /**
   * <pre>
   * The time (in epoch milliseconds) at which the keystore migration was
   * performed.
   * </pre>
   *
   * <code>optional int64 keystore_migration_time = 32;</code>
   * @return The keystoreMigrationTime.
   */
  long getKeystoreMigrationTime();

  /**
   * <pre>
   * The time (in epoch milliseconds) at which a custom passphrase was set.
   * Note: this field may not be set if the custom passphrase was applied before
   * this field was introduced.
   * </pre>
   *
   * <code>optional int64 custom_passphrase_time = 33;</code>
   * @return Whether the customPassphraseTime field is set.
   */
  boolean hasCustomPassphraseTime();
  /**
   * <pre>
   * The time (in epoch milliseconds) at which a custom passphrase was set.
   * Note: this field may not be set if the custom passphrase was applied before
   * this field was introduced.
   * </pre>
   *
   * <code>optional int64 custom_passphrase_time = 33;</code>
   * @return The customPassphraseTime.
   */
  long getCustomPassphraseTime();

  /**
   * <pre>
   * Boolean corresponding to whether custom spelling dictionary should be
   * encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_dictionary = 34;</code>
   * @return Whether the encryptDictionary field is set.
   */
  boolean hasEncryptDictionary();
  /**
   * <pre>
   * Boolean corresponding to whether custom spelling dictionary should be
   * encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_dictionary = 34;</code>
   * @return The encryptDictionary.
   */
  boolean getEncryptDictionary();

  /**
   * <pre>
   * Boolean corresponding to Whether to encrypt favicons data or not.
   * </pre>
   *
   * <code>optional bool encrypt_favicon_images = 35;</code>
   * @return Whether the encryptFaviconImages field is set.
   */
  boolean hasEncryptFaviconImages();
  /**
   * <pre>
   * Boolean corresponding to Whether to encrypt favicons data or not.
   * </pre>
   *
   * <code>optional bool encrypt_favicon_images = 35;</code>
   * @return The encryptFaviconImages.
   */
  boolean getEncryptFaviconImages();

  /**
   * <code>optional bool encrypt_favicon_tracking = 36;</code>
   * @return Whether the encryptFaviconTracking field is set.
   */
  boolean hasEncryptFaviconTracking();
  /**
   * <code>optional bool encrypt_favicon_tracking = 36;</code>
   * @return The encryptFaviconTracking.
   */
  boolean getEncryptFaviconTracking();

  /**
   * <pre>
   * Boolean corresponding to whether app list items should be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_app_list = 38;</code>
   * @return Whether the encryptAppList field is set.
   */
  boolean hasEncryptAppList();
  /**
   * <pre>
   * Boolean corresponding to whether app list items should be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_app_list = 38;</code>
   * @return The encryptAppList.
   */
  boolean getEncryptAppList();

  /**
   * <pre>
   * Boolean corresponding to whether usage count and last use date of Wallet
   * data should be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_autofill_wallet_metadata = 39;</code>
   * @return Whether the encryptAutofillWalletMetadata field is set.
   */
  boolean hasEncryptAutofillWalletMetadata();
  /**
   * <pre>
   * Boolean corresponding to whether usage count and last use date of Wallet
   * data should be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_autofill_wallet_metadata = 39;</code>
   * @return The encryptAutofillWalletMetadata.
   */
  boolean getEncryptAutofillWalletMetadata();

  /**
   * <pre>
   * Boolean indicating whether this node was originally missing a
   * |keystore_migration_time| field value, and was fixed on the server by
   * giving the field a value.
   * THIS FIELD SHOULD ONLY BE SET BY THE SERVER.
   * </pre>
   *
   * <code>optional bool server_only_was_missing_keystore_migration_time = 40;</code>
   * @return Whether the serverOnlyWasMissingKeystoreMigrationTime field is set.
   */
  boolean hasServerOnlyWasMissingKeystoreMigrationTime();
  /**
   * <pre>
   * Boolean indicating whether this node was originally missing a
   * |keystore_migration_time| field value, and was fixed on the server by
   * giving the field a value.
   * THIS FIELD SHOULD ONLY BE SET BY THE SERVER.
   * </pre>
   *
   * <code>optional bool server_only_was_missing_keystore_migration_time = 40;</code>
   * @return The serverOnlyWasMissingKeystoreMigrationTime.
   */
  boolean getServerOnlyWasMissingKeystoreMigrationTime();

  /**
   * <pre>
   * Boolean corresponding to whether arc pakcage items should be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_arc_package = 41;</code>
   * @return Whether the encryptArcPackage field is set.
   */
  boolean hasEncryptArcPackage();
  /**
   * <pre>
   * Boolean corresponding to whether arc pakcage items should be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_arc_package = 41;</code>
   * @return The encryptArcPackage.
   */
  boolean getEncryptArcPackage();

  /**
   * <pre>
   * Boolean corresponding to whether printer items should be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_printers = 42;</code>
   * @return Whether the encryptPrinters field is set.
   */
  boolean hasEncryptPrinters();
  /**
   * <pre>
   * Boolean corresponding to whether printer items should be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_printers = 42;</code>
   * @return The encryptPrinters.
   */
  boolean getEncryptPrinters();

  /**
   * <pre>
   * Boolean corresponding to whether reading list items should be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_reading_list = 43;</code>
   * @return Whether the encryptReadingList field is set.
   */
  boolean hasEncryptReadingList();
  /**
   * <pre>
   * Boolean corresponding to whether reading list items should be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_reading_list = 43;</code>
   * @return The encryptReadingList.
   */
  boolean getEncryptReadingList();

  /**
   * <pre>
   * ID of the method used to derive the encryption key from a custom
   * passphrase. Should be set only when |passphrase_type| is CUSTOM_PASSPHRASE
   * and only based on CustomPassphraseKeyDerivationMethod. This field has been
   * added in M70. All previous versions just ignore it, attempt to use
   * PBKDF2_HMAC_SHA1_1003 and, thus, reject any passphrase if a different
   * method has been used. The default corresponds to UNSPECIFIED. An |int|
   * field is used so we can detect unknown values coming from later versions.
   * </pre>
   *
   * <code>optional int32 custom_passphrase_key_derivation_method = 45 [default = 0];</code>
   * @return Whether the customPassphraseKeyDerivationMethod field is set.
   */
  boolean hasCustomPassphraseKeyDerivationMethod();
  /**
   * <pre>
   * ID of the method used to derive the encryption key from a custom
   * passphrase. Should be set only when |passphrase_type| is CUSTOM_PASSPHRASE
   * and only based on CustomPassphraseKeyDerivationMethod. This field has been
   * added in M70. All previous versions just ignore it, attempt to use
   * PBKDF2_HMAC_SHA1_1003 and, thus, reject any passphrase if a different
   * method has been used. The default corresponds to UNSPECIFIED. An |int|
   * field is used so we can detect unknown values coming from later versions.
   * </pre>
   *
   * <code>optional int32 custom_passphrase_key_derivation_method = 45 [default = 0];</code>
   * @return The customPassphraseKeyDerivationMethod.
   */
  int getCustomPassphraseKeyDerivationMethod();

  /**
   * <pre>
   * Base64-encoded salt used for the derivation of the key from the custom
   * passphrase. Valid only if custom_passphrase_key_derivation_method ==
   * SCRYPT_8192_8_11, ignored in other cases.
   * </pre>
   *
   * <code>optional string custom_passphrase_key_derivation_salt = 46;</code>
   * @return Whether the customPassphraseKeyDerivationSalt field is set.
   */
  boolean hasCustomPassphraseKeyDerivationSalt();
  /**
   * <pre>
   * Base64-encoded salt used for the derivation of the key from the custom
   * passphrase. Valid only if custom_passphrase_key_derivation_method ==
   * SCRYPT_8192_8_11, ignored in other cases.
   * </pre>
   *
   * <code>optional string custom_passphrase_key_derivation_salt = 46;</code>
   * @return The customPassphraseKeyDerivationSalt.
   */
  java.lang.String getCustomPassphraseKeyDerivationSalt();
  /**
   * <pre>
   * Base64-encoded salt used for the derivation of the key from the custom
   * passphrase. Valid only if custom_passphrase_key_derivation_method ==
   * SCRYPT_8192_8_11, ignored in other cases.
   * </pre>
   *
   * <code>optional string custom_passphrase_key_derivation_salt = 46;</code>
   * @return The bytes for customPassphraseKeyDerivationSalt.
   */
  com.google.protobuf.ByteString
      getCustomPassphraseKeyDerivationSaltBytes();

  /**
   * <pre>
   * Boolean corresponding to whether send tab should be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_send_tab_to_self = 47;</code>
   * @return Whether the encryptSendTabToSelf field is set.
   */
  boolean hasEncryptSendTabToSelf();
  /**
   * <pre>
   * Boolean corresponding to whether send tab should be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_send_tab_to_self = 47;</code>
   * @return The encryptSendTabToSelf.
   */
  boolean getEncryptSendTabToSelf();

  /**
   * <pre>
   * Boolean corresponding to whether Web Apps data should be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_web_apps = 48;</code>
   * @return Whether the encryptWebApps field is set.
   */
  boolean hasEncryptWebApps();
  /**
   * <pre>
   * Boolean corresponding to whether Web Apps data should be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_web_apps = 48;</code>
   * @return The encryptWebApps.
   */
  boolean getEncryptWebApps();

  /**
   * <pre>
   * Boolean corresponding to whether OS preferences should be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_os_preferences = 49;</code>
   * @return Whether the encryptOsPreferences field is set.
   */
  boolean hasEncryptOsPreferences();
  /**
   * <pre>
   * Boolean corresponding to whether OS preferences should be encrypted.
   * </pre>
   *
   * <code>optional bool encrypt_os_preferences = 49;</code>
   * @return The encryptOsPreferences.
   */
  boolean getEncryptOsPreferences();
}
