// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/sync.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * The client must preserve, store, and resend the chip bag with
 * every request.  The server depends on the chip bag in order
 * to precisely choreograph a client-server state machines.
 * Because the client stores and sends this data on every request,
 * the contents of the chip bag should be kept relatively small.
 * If the server does not return a chip bag, the client must assume
 * that there has been no change to the chip bag.  The client must
 * resend the bag of chips it had prior on the next request.
 * The client must make the chip bag durable if and only if it
 * processes the response from the server.
 * </pre>
 *
 * Protobuf type {@code sync_pb.ChipBag}
 */
public  final class ChipBag extends
    com.google.protobuf.GeneratedMessageLite<
        ChipBag, ChipBag.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.ChipBag)
    ChipBagOrBuilder {
  private ChipBag() {
    serverChips_ = com.google.protobuf.ByteString.EMPTY;
  }
  private int bitField0_;
  public static final int SERVER_CHIPS_FIELD_NUMBER = 1;
  private com.google.protobuf.ByteString serverChips_;
  /**
   * <pre>
   * Server chips are deliberately oqaque, allowing the server
   * to encapsulate its state machine logic.
   * </pre>
   *
   * <code>optional bytes server_chips = 1;</code>
   * @return Whether the serverChips field is set.
   */
  @java.lang.Override
  public boolean hasServerChips() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Server chips are deliberately oqaque, allowing the server
   * to encapsulate its state machine logic.
   * </pre>
   *
   * <code>optional bytes server_chips = 1;</code>
   * @return The serverChips.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getServerChips() {
    return serverChips_;
  }
  /**
   * <pre>
   * Server chips are deliberately oqaque, allowing the server
   * to encapsulate its state machine logic.
   * </pre>
   *
   * <code>optional bytes server_chips = 1;</code>
   * @param value The serverChips to set.
   */
  private void setServerChips(com.google.protobuf.ByteString value) {
    value.getClass();
  bitField0_ |= 0x00000001;
    serverChips_ = value;
  }
  /**
   * <pre>
   * Server chips are deliberately oqaque, allowing the server
   * to encapsulate its state machine logic.
   * </pre>
   *
   * <code>optional bytes server_chips = 1;</code>
   */
  private void clearServerChips() {
    bitField0_ = (bitField0_ & ~0x00000001);
    serverChips_ = getDefaultInstance().getServerChips();
  }

  public static org.chromium.components.sync.protocol.ChipBag parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.ChipBag parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ChipBag parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.ChipBag parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ChipBag parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.ChipBag parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ChipBag parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.ChipBag parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ChipBag parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.ChipBag parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ChipBag parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.ChipBag parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.ChipBag prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * The client must preserve, store, and resend the chip bag with
   * every request.  The server depends on the chip bag in order
   * to precisely choreograph a client-server state machines.
   * Because the client stores and sends this data on every request,
   * the contents of the chip bag should be kept relatively small.
   * If the server does not return a chip bag, the client must assume
   * that there has been no change to the chip bag.  The client must
   * resend the bag of chips it had prior on the next request.
   * The client must make the chip bag durable if and only if it
   * processes the response from the server.
   * </pre>
   *
   * Protobuf type {@code sync_pb.ChipBag}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.ChipBag, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.ChipBag)
      org.chromium.components.sync.protocol.ChipBagOrBuilder {
    // Construct using org.chromium.components.sync.protocol.ChipBag.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Server chips are deliberately oqaque, allowing the server
     * to encapsulate its state machine logic.
     * </pre>
     *
     * <code>optional bytes server_chips = 1;</code>
     * @return Whether the serverChips field is set.
     */
    @java.lang.Override
    public boolean hasServerChips() {
      return instance.hasServerChips();
    }
    /**
     * <pre>
     * Server chips are deliberately oqaque, allowing the server
     * to encapsulate its state machine logic.
     * </pre>
     *
     * <code>optional bytes server_chips = 1;</code>
     * @return The serverChips.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getServerChips() {
      return instance.getServerChips();
    }
    /**
     * <pre>
     * Server chips are deliberately oqaque, allowing the server
     * to encapsulate its state machine logic.
     * </pre>
     *
     * <code>optional bytes server_chips = 1;</code>
     * @param value The serverChips to set.
     * @return This builder for chaining.
     */
    public Builder setServerChips(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setServerChips(value);
      return this;
    }
    /**
     * <pre>
     * Server chips are deliberately oqaque, allowing the server
     * to encapsulate its state machine logic.
     * </pre>
     *
     * <code>optional bytes server_chips = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearServerChips() {
      copyOnWrite();
      instance.clearServerChips();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.ChipBag)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.ChipBag();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "serverChips_",
          };
          java.lang.String info =
              "\u0001\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u100a\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.components.sync.protocol.ChipBag> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.components.sync.protocol.ChipBag.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.ChipBag>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.ChipBag)
  private static final org.chromium.components.sync.protocol.ChipBag DEFAULT_INSTANCE;
  static {
    ChipBag defaultInstance = new ChipBag();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ChipBag.class, defaultInstance);
  }

  public static org.chromium.components.sync.protocol.ChipBag getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ChipBag> PARSER;

  public static com.google.protobuf.Parser<ChipBag> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

