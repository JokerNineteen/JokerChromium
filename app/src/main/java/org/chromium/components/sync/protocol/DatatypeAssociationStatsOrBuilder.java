// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/client_debug_info.proto

package org.chromium.components.sync.protocol;

public interface DatatypeAssociationStatsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sync_pb.DatatypeAssociationStats)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * The datatype that was associated.
   * </pre>
   *
   * <code>optional int32 data_type_id = 1;</code>
   * @return Whether the dataTypeId field is set.
   */
  boolean hasDataTypeId();
  /**
   * <pre>
   * The datatype that was associated.
   * </pre>
   *
   * <code>optional int32 data_type_id = 1;</code>
   * @return The dataTypeId.
   */
  int getDataTypeId();

  /**
   * <pre>
   * Waiting time before downloading starts. This measures the time between
   * receiving configuration request for a set of data types to starting
   * downloading data of this type.
   * </pre>
   *
   * <code>optional int64 download_wait_time_us = 15;</code>
   * @return Whether the downloadWaitTimeUs field is set.
   */
  boolean hasDownloadWaitTimeUs();
  /**
   * <pre>
   * Waiting time before downloading starts. This measures the time between
   * receiving configuration request for a set of data types to starting
   * downloading data of this type.
   * </pre>
   *
   * <code>optional int64 download_wait_time_us = 15;</code>
   * @return The downloadWaitTimeUs.
   */
  long getDownloadWaitTimeUs();

  /**
   * <pre>
   * Time spent on downloading sync data for first time sync.
   * Note: This measures the time between asking backend to download data to
   *       being notified of download-ready by backend. So it consists of
   *       time on data downloading and processing at sync backend. But
   *       downloading time should dominate. It's also the total time spent on
   *       downloading data of all types in the priority group of
   *       |data_type_id| instead of just one data type.
   * </pre>
   *
   * <code>optional int64 download_time_us = 13;</code>
   * @return Whether the downloadTimeUs field is set.
   */
  boolean hasDownloadTimeUs();
  /**
   * <pre>
   * Time spent on downloading sync data for first time sync.
   * Note: This measures the time between asking backend to download data to
   *       being notified of download-ready by backend. So it consists of
   *       time on data downloading and processing at sync backend. But
   *       downloading time should dominate. It's also the total time spent on
   *       downloading data of all types in the priority group of
   *       |data_type_id| instead of just one data type.
   * </pre>
   *
   * <code>optional int64 download_time_us = 13;</code>
   * @return The downloadTimeUs.
   */
  long getDownloadTimeUs();

  /**
   * <pre>
   * Higher priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 high_priority_type_configured_before = 18;</code>
   * @return A list containing the highPriorityTypeConfiguredBefore.
   */
  java.util.List<java.lang.Integer> getHighPriorityTypeConfiguredBeforeList();
  /**
   * <pre>
   * Higher priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 high_priority_type_configured_before = 18;</code>
   * @return The count of highPriorityTypeConfiguredBefore.
   */
  int getHighPriorityTypeConfiguredBeforeCount();
  /**
   * <pre>
   * Higher priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 high_priority_type_configured_before = 18;</code>
   * @param index The index of the element to return.
   * @return The highPriorityTypeConfiguredBefore at the given index.
   */
  int getHighPriorityTypeConfiguredBefore(int index);

  /**
   * <pre>
   * Same priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 same_priority_type_configured_before = 19;</code>
   * @return A list containing the samePriorityTypeConfiguredBefore.
   */
  java.util.List<java.lang.Integer> getSamePriorityTypeConfiguredBeforeList();
  /**
   * <pre>
   * Same priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 same_priority_type_configured_before = 19;</code>
   * @return The count of samePriorityTypeConfiguredBefore.
   */
  int getSamePriorityTypeConfiguredBeforeCount();
  /**
   * <pre>
   * Same priority type that's configured before this type.
   * </pre>
   *
   * <code>repeated int32 same_priority_type_configured_before = 19;</code>
   * @param index The index of the element to return.
   * @return The samePriorityTypeConfiguredBefore at the given index.
   */
  int getSamePriorityTypeConfiguredBefore(int index);
}
