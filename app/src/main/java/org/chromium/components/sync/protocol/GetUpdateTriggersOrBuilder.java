// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/sync.proto

package org.chromium.components.sync.protocol;

public interface GetUpdateTriggersOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sync_pb.GetUpdateTriggers)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   * @return A list containing the notificationHint.
   */
  java.util.List<java.lang.String>
      getNotificationHintList();
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   * @return The count of notificationHint.
   */
  int getNotificationHintCount();
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   * @param index The index of the element to return.
   * @return The notificationHint at the given index.
   */
  java.lang.String getNotificationHint(int index);
  /**
   * <pre>
   * An opaque-to-the-client string of bytes, received through a notification,
   * that the server may interpret as a hint about the location of the latest
   * version of the data for this type.
   * Note that this will eventually replace the 'optional' field of the same
   * name defined in the progress marker, but the client and server should
   * support both until it's safe to deprecate the old one.
   * This field was introduced in M29.
   * </pre>
   *
   * <code>repeated string notification_hint = 1;</code>
   * @param index The index of the element to return.
   * @return The notificationHint at the given index.
   */
  com.google.protobuf.ByteString
      getNotificationHintBytes(int index);

  /**
   * <pre>
   * This flag is set if the client was forced to drop hints because the number
   * of queued hints exceeded its limit.  The oldest hints will be discarded
   * first.  Introduced in M29.
   * </pre>
   *
   * <code>optional bool client_dropped_hints = 2;</code>
   * @return Whether the clientDroppedHints field is set.
   */
  boolean hasClientDroppedHints();
  /**
   * <pre>
   * This flag is set if the client was forced to drop hints because the number
   * of queued hints exceeded its limit.  The oldest hints will be discarded
   * first.  Introduced in M29.
   * </pre>
   *
   * <code>optional bool client_dropped_hints = 2;</code>
   * @return The clientDroppedHints.
   */
  boolean getClientDroppedHints();

  /**
   * <pre>
   * This flag is set when the client suspects that its list of invalidation
   * hints may be incomplete.  This may be the case if:
   * - The client is syncing for the first time.
   * - The client has just restarted and it was unable to keep track of
   *   invalidations that were received prior to the restart.
   * - The client's connection to the invalidation server is currently or
   *   was recently broken.
   * It's difficult to provide more details here.  This is implemented by
   * setting the flag to false whenever anything that might adversely affect
   * notifications happens (eg. a crash, restart on a platform that doesn't
   * support invalidation ack-tracking, transient invalidation error) and is
   * unset only after we've experienced one successful sync cycle while
   * notifications were enabled.
   * This flag was introduced in M29.
   * </pre>
   *
   * <code>optional bool invalidations_out_of_sync = 3;</code>
   * @return Whether the invalidationsOutOfSync field is set.
   */
  boolean hasInvalidationsOutOfSync();
  /**
   * <pre>
   * This flag is set when the client suspects that its list of invalidation
   * hints may be incomplete.  This may be the case if:
   * - The client is syncing for the first time.
   * - The client has just restarted and it was unable to keep track of
   *   invalidations that were received prior to the restart.
   * - The client's connection to the invalidation server is currently or
   *   was recently broken.
   * It's difficult to provide more details here.  This is implemented by
   * setting the flag to false whenever anything that might adversely affect
   * notifications happens (eg. a crash, restart on a platform that doesn't
   * support invalidation ack-tracking, transient invalidation error) and is
   * unset only after we've experienced one successful sync cycle while
   * notifications were enabled.
   * This flag was introduced in M29.
   * </pre>
   *
   * <code>optional bool invalidations_out_of_sync = 3;</code>
   * @return The invalidationsOutOfSync.
   */
  boolean getInvalidationsOutOfSync();

  /**
   * <pre>
   * This counts the number of times the syncer has been asked to commit
   * changes for this type since the last successful sync cycle.  The number of
   * nudges may not be related to the actual number of items modified.  It
   * often correlates with the number of user actions, but that's not always
   * the case.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 local_modification_nudges = 4;</code>
   * @return Whether the localModificationNudges field is set.
   */
  boolean hasLocalModificationNudges();
  /**
   * <pre>
   * This counts the number of times the syncer has been asked to commit
   * changes for this type since the last successful sync cycle.  The number of
   * nudges may not be related to the actual number of items modified.  It
   * often correlates with the number of user actions, but that's not always
   * the case.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 local_modification_nudges = 4;</code>
   * @return The localModificationNudges.
   */
  long getLocalModificationNudges();

  /**
   * <pre>
   * This counts the number of times the syncer has been explicitly asked to
   * fetch updates for this type since the last successful sync cycle.  These
   * explicit refresh requests should be relatively rare on most platforms, and
   * associated with user actions.  For example, at the time of this writing
   * the most common (only?) source of refresh requests is when a user opens
   * the new tab page on a platform that does not support sessions
   * invalidations.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 datatype_refresh_nudges = 5;</code>
   * @return Whether the datatypeRefreshNudges field is set.
   */
  boolean hasDatatypeRefreshNudges();
  /**
   * <pre>
   * This counts the number of times the syncer has been explicitly asked to
   * fetch updates for this type since the last successful sync cycle.  These
   * explicit refresh requests should be relatively rare on most platforms, and
   * associated with user actions.  For example, at the time of this writing
   * the most common (only?) source of refresh requests is when a user opens
   * the new tab page on a platform that does not support sessions
   * invalidations.
   * Introduced in M29.
   * </pre>
   *
   * <code>optional int64 datatype_refresh_nudges = 5;</code>
   * @return The datatypeRefreshNudges.
   */
  long getDatatypeRefreshNudges();

  /**
   * <pre>
   * This flag is set if the invalidation server reports that it may have
   * dropped some invalidations at some point.  Introduced in M33.
   * </pre>
   *
   * <code>optional bool server_dropped_hints = 6;</code>
   * @return Whether the serverDroppedHints field is set.
   */
  boolean hasServerDroppedHints();
  /**
   * <pre>
   * This flag is set if the invalidation server reports that it may have
   * dropped some invalidations at some point.  Introduced in M33.
   * </pre>
   *
   * <code>optional bool server_dropped_hints = 6;</code>
   * @return The serverDroppedHints.
   */
  boolean getServerDroppedHints();

  /**
   * <pre>
   * This flag is set if this GetUpdate request is due at least in part due
   * to the fact that this type has not finished initial sync yet, and the
   * client would like to initialize itself with the server data.
   * Only some types support performing an initial sync as part of a normal
   * GetUpdate request.  Many types must be in configure mode when fetching
   * initial sync data.
   * Introduced in M38.
   * </pre>
   *
   * <code>optional bool initial_sync_in_progress = 7;</code>
   * @return Whether the initialSyncInProgress field is set.
   */
  boolean hasInitialSyncInProgress();
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due at least in part due
   * to the fact that this type has not finished initial sync yet, and the
   * client would like to initialize itself with the server data.
   * Only some types support performing an initial sync as part of a normal
   * GetUpdate request.  Many types must be in configure mode when fetching
   * initial sync data.
   * Introduced in M38.
   * </pre>
   *
   * <code>optional bool initial_sync_in_progress = 7;</code>
   * @return The initialSyncInProgress.
   */
  boolean getInitialSyncInProgress();

  /**
   * <pre>
   * This flag is set if this GetUpdate request is due to client receiving
   * conflict response from server, so client needs to sync and then resolve
   * conflict locally, and then commit again.
   * Introduced in M42.
   * </pre>
   *
   * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
   * @return Whether the syncForResolveConflictInProgress field is set.
   */
  boolean hasSyncForResolveConflictInProgress();
  /**
   * <pre>
   * This flag is set if this GetUpdate request is due to client receiving
   * conflict response from server, so client needs to sync and then resolve
   * conflict locally, and then commit again.
   * Introduced in M42.
   * </pre>
   *
   * <code>optional bool sync_for_resolve_conflict_in_progress = 8;</code>
   * @return The syncForResolveConflictInProgress.
   */
  boolean getSyncForResolveConflictInProgress();
}
