// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/password_specifics.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * All the strings are encoded with UTF-8. URLs are encoded in Punycode.
 * </pre>
 *
 * Protobuf type {@code sync_pb.PasswordSpecificsData}
 */
public  final class PasswordSpecificsData extends
    com.google.protobuf.GeneratedMessageLite<
        PasswordSpecificsData, PasswordSpecificsData.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.PasswordSpecificsData)
    PasswordSpecificsDataOrBuilder {
  private PasswordSpecificsData() {
    signonRealm_ = "";
    origin_ = "";
    action_ = "";
    usernameElement_ = "";
    usernameValue_ = "";
    passwordElement_ = "";
    passwordValue_ = "";
    displayName_ = "";
    avatarUrl_ = "";
    federationUrl_ = "";
  }
  public interface PasswordIssuesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sync_pb.PasswordSpecificsData.PasswordIssues)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue leaked_password_issue = 1;</code>
     * @return Whether the leakedPasswordIssue field is set.
     */
    boolean hasLeakedPasswordIssue();
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue leaked_password_issue = 1;</code>
     * @return The leakedPasswordIssue.
     */
    org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue getLeakedPasswordIssue();

    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue reused_password_issue = 2;</code>
     * @return Whether the reusedPasswordIssue field is set.
     */
    boolean hasReusedPasswordIssue();
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue reused_password_issue = 2;</code>
     * @return The reusedPasswordIssue.
     */
    org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue getReusedPasswordIssue();

    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue weak_password_issue = 3;</code>
     * @return Whether the weakPasswordIssue field is set.
     */
    boolean hasWeakPasswordIssue();
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue weak_password_issue = 3;</code>
     * @return The weakPasswordIssue.
     */
    org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue getWeakPasswordIssue();

    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue phished_password_issue = 4;</code>
     * @return Whether the phishedPasswordIssue field is set.
     */
    boolean hasPhishedPasswordIssue();
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue phished_password_issue = 4;</code>
     * @return The phishedPasswordIssue.
     */
    org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue getPhishedPasswordIssue();
  }
  /**
   * Protobuf type {@code sync_pb.PasswordSpecificsData.PasswordIssues}
   */
  public  static final class PasswordIssues extends
      com.google.protobuf.GeneratedMessageLite<
          PasswordIssues, PasswordIssues.Builder> implements
      // @@protoc_insertion_point(message_implements:sync_pb.PasswordSpecificsData.PasswordIssues)
      PasswordIssuesOrBuilder {
    private PasswordIssues() {
    }
    public interface PasswordIssueOrBuilder extends
        // @@protoc_insertion_point(interface_extends:sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Timestamp set by a client detecting the issue for the first time.
       * Number of microseconds since Windows epoch (1601).
       * </pre>
       *
       * <code>optional uint64 date_first_detection_microseconds = 1;</code>
       * @return Whether the dateFirstDetectionMicroseconds field is set.
       */
      boolean hasDateFirstDetectionMicroseconds();
      /**
       * <pre>
       * Timestamp set by a client detecting the issue for the first time.
       * Number of microseconds since Windows epoch (1601).
       * </pre>
       *
       * <code>optional uint64 date_first_detection_microseconds = 1;</code>
       * @return The dateFirstDetectionMicroseconds.
       */
      long getDateFirstDetectionMicroseconds();

      /**
       * <pre>
       * Whether the issue was muted by user.
       * </pre>
       *
       * <code>optional bool is_muted = 2;</code>
       * @return Whether the isMuted field is set.
       */
      boolean hasIsMuted();
      /**
       * <pre>
       * Whether the issue was muted by user.
       * </pre>
       *
       * <code>optional bool is_muted = 2;</code>
       * @return The isMuted.
       */
      boolean getIsMuted();
    }
    /**
     * Protobuf type {@code sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue}
     */
    public  static final class PasswordIssue extends
        com.google.protobuf.GeneratedMessageLite<
            PasswordIssue, PasswordIssue.Builder> implements
        // @@protoc_insertion_point(message_implements:sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue)
        PasswordIssueOrBuilder {
      private PasswordIssue() {
      }
      private int bitField0_;
      public static final int DATE_FIRST_DETECTION_MICROSECONDS_FIELD_NUMBER = 1;
      private long dateFirstDetectionMicroseconds_;
      /**
       * <pre>
       * Timestamp set by a client detecting the issue for the first time.
       * Number of microseconds since Windows epoch (1601).
       * </pre>
       *
       * <code>optional uint64 date_first_detection_microseconds = 1;</code>
       * @return Whether the dateFirstDetectionMicroseconds field is set.
       */
      @java.lang.Override
      public boolean hasDateFirstDetectionMicroseconds() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Timestamp set by a client detecting the issue for the first time.
       * Number of microseconds since Windows epoch (1601).
       * </pre>
       *
       * <code>optional uint64 date_first_detection_microseconds = 1;</code>
       * @return The dateFirstDetectionMicroseconds.
       */
      @java.lang.Override
      public long getDateFirstDetectionMicroseconds() {
        return dateFirstDetectionMicroseconds_;
      }
      /**
       * <pre>
       * Timestamp set by a client detecting the issue for the first time.
       * Number of microseconds since Windows epoch (1601).
       * </pre>
       *
       * <code>optional uint64 date_first_detection_microseconds = 1;</code>
       * @param value The dateFirstDetectionMicroseconds to set.
       */
      private void setDateFirstDetectionMicroseconds(long value) {
        bitField0_ |= 0x00000001;
        dateFirstDetectionMicroseconds_ = value;
      }
      /**
       * <pre>
       * Timestamp set by a client detecting the issue for the first time.
       * Number of microseconds since Windows epoch (1601).
       * </pre>
       *
       * <code>optional uint64 date_first_detection_microseconds = 1;</code>
       */
      private void clearDateFirstDetectionMicroseconds() {
        bitField0_ = (bitField0_ & ~0x00000001);
        dateFirstDetectionMicroseconds_ = 0L;
      }

      public static final int IS_MUTED_FIELD_NUMBER = 2;
      private boolean isMuted_;
      /**
       * <pre>
       * Whether the issue was muted by user.
       * </pre>
       *
       * <code>optional bool is_muted = 2;</code>
       * @return Whether the isMuted field is set.
       */
      @java.lang.Override
      public boolean hasIsMuted() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Whether the issue was muted by user.
       * </pre>
       *
       * <code>optional bool is_muted = 2;</code>
       * @return The isMuted.
       */
      @java.lang.Override
      public boolean getIsMuted() {
        return isMuted_;
      }
      /**
       * <pre>
       * Whether the issue was muted by user.
       * </pre>
       *
       * <code>optional bool is_muted = 2;</code>
       * @param value The isMuted to set.
       */
      private void setIsMuted(boolean value) {
        bitField0_ |= 0x00000002;
        isMuted_ = value;
      }
      /**
       * <pre>
       * Whether the issue was muted by user.
       * </pre>
       *
       * <code>optional bool is_muted = 2;</code>
       */
      private void clearIsMuted() {
        bitField0_ = (bitField0_ & ~0x00000002);
        isMuted_ = false;
      }

      public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue, Builder> implements
          // @@protoc_insertion_point(builder_implements:sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue)
          org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssueOrBuilder {
        // Construct using org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Timestamp set by a client detecting the issue for the first time.
         * Number of microseconds since Windows epoch (1601).
         * </pre>
         *
         * <code>optional uint64 date_first_detection_microseconds = 1;</code>
         * @return Whether the dateFirstDetectionMicroseconds field is set.
         */
        @java.lang.Override
        public boolean hasDateFirstDetectionMicroseconds() {
          return instance.hasDateFirstDetectionMicroseconds();
        }
        /**
         * <pre>
         * Timestamp set by a client detecting the issue for the first time.
         * Number of microseconds since Windows epoch (1601).
         * </pre>
         *
         * <code>optional uint64 date_first_detection_microseconds = 1;</code>
         * @return The dateFirstDetectionMicroseconds.
         */
        @java.lang.Override
        public long getDateFirstDetectionMicroseconds() {
          return instance.getDateFirstDetectionMicroseconds();
        }
        /**
         * <pre>
         * Timestamp set by a client detecting the issue for the first time.
         * Number of microseconds since Windows epoch (1601).
         * </pre>
         *
         * <code>optional uint64 date_first_detection_microseconds = 1;</code>
         * @param value The dateFirstDetectionMicroseconds to set.
         * @return This builder for chaining.
         */
        public Builder setDateFirstDetectionMicroseconds(long value) {
          copyOnWrite();
          instance.setDateFirstDetectionMicroseconds(value);
          return this;
        }
        /**
         * <pre>
         * Timestamp set by a client detecting the issue for the first time.
         * Number of microseconds since Windows epoch (1601).
         * </pre>
         *
         * <code>optional uint64 date_first_detection_microseconds = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearDateFirstDetectionMicroseconds() {
          copyOnWrite();
          instance.clearDateFirstDetectionMicroseconds();
          return this;
        }

        /**
         * <pre>
         * Whether the issue was muted by user.
         * </pre>
         *
         * <code>optional bool is_muted = 2;</code>
         * @return Whether the isMuted field is set.
         */
        @java.lang.Override
        public boolean hasIsMuted() {
          return instance.hasIsMuted();
        }
        /**
         * <pre>
         * Whether the issue was muted by user.
         * </pre>
         *
         * <code>optional bool is_muted = 2;</code>
         * @return The isMuted.
         */
        @java.lang.Override
        public boolean getIsMuted() {
          return instance.getIsMuted();
        }
        /**
         * <pre>
         * Whether the issue was muted by user.
         * </pre>
         *
         * <code>optional bool is_muted = 2;</code>
         * @param value The isMuted to set.
         * @return This builder for chaining.
         */
        public Builder setIsMuted(boolean value) {
          copyOnWrite();
          instance.setIsMuted(value);
          return this;
        }
        /**
         * <pre>
         * Whether the issue was muted by user.
         * </pre>
         *
         * <code>optional bool is_muted = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearIsMuted() {
          copyOnWrite();
          instance.clearIsMuted();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "dateFirstDetectionMicroseconds_",
                "isMuted_",
              };
              java.lang.String info =
                  "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u1003\u0000\u0002" +
                  "\u1007\u0001";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue)
      private static final org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue DEFAULT_INSTANCE;
      static {
        PasswordIssue defaultInstance = new PasswordIssue();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          PasswordIssue.class, defaultInstance);
      }

      public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<PasswordIssue> PARSER;

      public static com.google.protobuf.Parser<PasswordIssue> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    public static final int LEAKED_PASSWORD_ISSUE_FIELD_NUMBER = 1;
    private org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue leakedPasswordIssue_;
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue leaked_password_issue = 1;</code>
     */
    @java.lang.Override
    public boolean hasLeakedPasswordIssue() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue leaked_password_issue = 1;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue getLeakedPasswordIssue() {
      return leakedPasswordIssue_ == null ? org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.getDefaultInstance() : leakedPasswordIssue_;
    }
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue leaked_password_issue = 1;</code>
     */
    private void setLeakedPasswordIssue(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue value) {
      value.getClass();
  leakedPasswordIssue_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue leaked_password_issue = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeLeakedPasswordIssue(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue value) {
      value.getClass();
  if (leakedPasswordIssue_ != null &&
          leakedPasswordIssue_ != org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.getDefaultInstance()) {
        leakedPasswordIssue_ =
          org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.newBuilder(leakedPasswordIssue_).mergeFrom(value).buildPartial();
      } else {
        leakedPasswordIssue_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue leaked_password_issue = 1;</code>
     */
    private void clearLeakedPasswordIssue() {  leakedPasswordIssue_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int REUSED_PASSWORD_ISSUE_FIELD_NUMBER = 2;
    private org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue reusedPasswordIssue_;
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue reused_password_issue = 2;</code>
     */
    @java.lang.Override
    public boolean hasReusedPasswordIssue() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue reused_password_issue = 2;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue getReusedPasswordIssue() {
      return reusedPasswordIssue_ == null ? org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.getDefaultInstance() : reusedPasswordIssue_;
    }
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue reused_password_issue = 2;</code>
     */
    private void setReusedPasswordIssue(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue value) {
      value.getClass();
  reusedPasswordIssue_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue reused_password_issue = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeReusedPasswordIssue(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue value) {
      value.getClass();
  if (reusedPasswordIssue_ != null &&
          reusedPasswordIssue_ != org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.getDefaultInstance()) {
        reusedPasswordIssue_ =
          org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.newBuilder(reusedPasswordIssue_).mergeFrom(value).buildPartial();
      } else {
        reusedPasswordIssue_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue reused_password_issue = 2;</code>
     */
    private void clearReusedPasswordIssue() {  reusedPasswordIssue_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int WEAK_PASSWORD_ISSUE_FIELD_NUMBER = 3;
    private org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue weakPasswordIssue_;
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue weak_password_issue = 3;</code>
     */
    @java.lang.Override
    public boolean hasWeakPasswordIssue() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue weak_password_issue = 3;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue getWeakPasswordIssue() {
      return weakPasswordIssue_ == null ? org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.getDefaultInstance() : weakPasswordIssue_;
    }
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue weak_password_issue = 3;</code>
     */
    private void setWeakPasswordIssue(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue value) {
      value.getClass();
  weakPasswordIssue_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue weak_password_issue = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeWeakPasswordIssue(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue value) {
      value.getClass();
  if (weakPasswordIssue_ != null &&
          weakPasswordIssue_ != org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.getDefaultInstance()) {
        weakPasswordIssue_ =
          org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.newBuilder(weakPasswordIssue_).mergeFrom(value).buildPartial();
      } else {
        weakPasswordIssue_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue weak_password_issue = 3;</code>
     */
    private void clearWeakPasswordIssue() {  weakPasswordIssue_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static final int PHISHED_PASSWORD_ISSUE_FIELD_NUMBER = 4;
    private org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue phishedPasswordIssue_;
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue phished_password_issue = 4;</code>
     */
    @java.lang.Override
    public boolean hasPhishedPasswordIssue() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue phished_password_issue = 4;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue getPhishedPasswordIssue() {
      return phishedPasswordIssue_ == null ? org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.getDefaultInstance() : phishedPasswordIssue_;
    }
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue phished_password_issue = 4;</code>
     */
    private void setPhishedPasswordIssue(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue value) {
      value.getClass();
  phishedPasswordIssue_ = value;
      bitField0_ |= 0x00000008;
      }
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue phished_password_issue = 4;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergePhishedPasswordIssue(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue value) {
      value.getClass();
  if (phishedPasswordIssue_ != null &&
          phishedPasswordIssue_ != org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.getDefaultInstance()) {
        phishedPasswordIssue_ =
          org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.newBuilder(phishedPasswordIssue_).mergeFrom(value).buildPartial();
      } else {
        phishedPasswordIssue_ = value;
      }
      bitField0_ |= 0x00000008;
    }
    /**
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue phished_password_issue = 4;</code>
     */
    private void clearPhishedPasswordIssue() {  phishedPasswordIssue_ = null;
      bitField0_ = (bitField0_ & ~0x00000008);
    }

    public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code sync_pb.PasswordSpecificsData.PasswordIssues}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues, Builder> implements
        // @@protoc_insertion_point(builder_implements:sync_pb.PasswordSpecificsData.PasswordIssues)
        org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssuesOrBuilder {
      // Construct using org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue leaked_password_issue = 1;</code>
       */
      @java.lang.Override
      public boolean hasLeakedPasswordIssue() {
        return instance.hasLeakedPasswordIssue();
      }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue leaked_password_issue = 1;</code>
       */
      @java.lang.Override
      public org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue getLeakedPasswordIssue() {
        return instance.getLeakedPasswordIssue();
      }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue leaked_password_issue = 1;</code>
       */
      public Builder setLeakedPasswordIssue(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue value) {
        copyOnWrite();
        instance.setLeakedPasswordIssue(value);
        return this;
        }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue leaked_password_issue = 1;</code>
       */
      public Builder setLeakedPasswordIssue(
          org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.Builder builderForValue) {
        copyOnWrite();
        instance.setLeakedPasswordIssue(builderForValue.build());
        return this;
      }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue leaked_password_issue = 1;</code>
       */
      public Builder mergeLeakedPasswordIssue(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue value) {
        copyOnWrite();
        instance.mergeLeakedPasswordIssue(value);
        return this;
      }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue leaked_password_issue = 1;</code>
       */
      public Builder clearLeakedPasswordIssue() {  copyOnWrite();
        instance.clearLeakedPasswordIssue();
        return this;
      }

      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue reused_password_issue = 2;</code>
       */
      @java.lang.Override
      public boolean hasReusedPasswordIssue() {
        return instance.hasReusedPasswordIssue();
      }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue reused_password_issue = 2;</code>
       */
      @java.lang.Override
      public org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue getReusedPasswordIssue() {
        return instance.getReusedPasswordIssue();
      }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue reused_password_issue = 2;</code>
       */
      public Builder setReusedPasswordIssue(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue value) {
        copyOnWrite();
        instance.setReusedPasswordIssue(value);
        return this;
        }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue reused_password_issue = 2;</code>
       */
      public Builder setReusedPasswordIssue(
          org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.Builder builderForValue) {
        copyOnWrite();
        instance.setReusedPasswordIssue(builderForValue.build());
        return this;
      }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue reused_password_issue = 2;</code>
       */
      public Builder mergeReusedPasswordIssue(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue value) {
        copyOnWrite();
        instance.mergeReusedPasswordIssue(value);
        return this;
      }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue reused_password_issue = 2;</code>
       */
      public Builder clearReusedPasswordIssue() {  copyOnWrite();
        instance.clearReusedPasswordIssue();
        return this;
      }

      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue weak_password_issue = 3;</code>
       */
      @java.lang.Override
      public boolean hasWeakPasswordIssue() {
        return instance.hasWeakPasswordIssue();
      }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue weak_password_issue = 3;</code>
       */
      @java.lang.Override
      public org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue getWeakPasswordIssue() {
        return instance.getWeakPasswordIssue();
      }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue weak_password_issue = 3;</code>
       */
      public Builder setWeakPasswordIssue(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue value) {
        copyOnWrite();
        instance.setWeakPasswordIssue(value);
        return this;
        }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue weak_password_issue = 3;</code>
       */
      public Builder setWeakPasswordIssue(
          org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.Builder builderForValue) {
        copyOnWrite();
        instance.setWeakPasswordIssue(builderForValue.build());
        return this;
      }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue weak_password_issue = 3;</code>
       */
      public Builder mergeWeakPasswordIssue(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue value) {
        copyOnWrite();
        instance.mergeWeakPasswordIssue(value);
        return this;
      }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue weak_password_issue = 3;</code>
       */
      public Builder clearWeakPasswordIssue() {  copyOnWrite();
        instance.clearWeakPasswordIssue();
        return this;
      }

      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue phished_password_issue = 4;</code>
       */
      @java.lang.Override
      public boolean hasPhishedPasswordIssue() {
        return instance.hasPhishedPasswordIssue();
      }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue phished_password_issue = 4;</code>
       */
      @java.lang.Override
      public org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue getPhishedPasswordIssue() {
        return instance.getPhishedPasswordIssue();
      }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue phished_password_issue = 4;</code>
       */
      public Builder setPhishedPasswordIssue(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue value) {
        copyOnWrite();
        instance.setPhishedPasswordIssue(value);
        return this;
        }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue phished_password_issue = 4;</code>
       */
      public Builder setPhishedPasswordIssue(
          org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue.Builder builderForValue) {
        copyOnWrite();
        instance.setPhishedPasswordIssue(builderForValue.build());
        return this;
      }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue phished_password_issue = 4;</code>
       */
      public Builder mergePhishedPasswordIssue(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.PasswordIssue value) {
        copyOnWrite();
        instance.mergePhishedPasswordIssue(value);
        return this;
      }
      /**
       * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues.PasswordIssue phished_password_issue = 4;</code>
       */
      public Builder clearPhishedPasswordIssue() {  copyOnWrite();
        instance.clearPhishedPasswordIssue();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sync_pb.PasswordSpecificsData.PasswordIssues)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "leakedPasswordIssue_",
              "reusedPasswordIssue_",
              "weakPasswordIssue_",
              "phishedPasswordIssue_",
            };
            java.lang.String info =
                "\u0001\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
                "\u1009\u0001\u0003\u1009\u0002\u0004\u1009\u0003";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecificsData.PasswordIssues)
    private static final org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues DEFAULT_INSTANCE;
    static {
      PasswordIssues defaultInstance = new PasswordIssues();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        PasswordIssues.class, defaultInstance);
    }

    public static org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PasswordIssues> PARSER;

    public static com.google.protobuf.Parser<PasswordIssues> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  public static final int SCHEME_FIELD_NUMBER = 1;
  private int scheme_;
  /**
   * <pre>
   * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
   * android credential or a password saved through Credential Manager API
   * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
   * SCHEME_BASIC(1), basic access http authentication.
   * SCHEME_DIGEST(2), digest access authentication.
   * SCHEME_OTHER(3), another access authentication.
   * </pre>
   *
   * <code>optional int32 scheme = 1;</code>
   * @return Whether the scheme field is set.
   */
  @java.lang.Override
  public boolean hasScheme() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
   * android credential or a password saved through Credential Manager API
   * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
   * SCHEME_BASIC(1), basic access http authentication.
   * SCHEME_DIGEST(2), digest access authentication.
   * SCHEME_OTHER(3), another access authentication.
   * </pre>
   *
   * <code>optional int32 scheme = 1;</code>
   * @return The scheme.
   */
  @java.lang.Override
  public int getScheme() {
    return scheme_;
  }
  /**
   * <pre>
   * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
   * android credential or a password saved through Credential Manager API
   * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
   * SCHEME_BASIC(1), basic access http authentication.
   * SCHEME_DIGEST(2), digest access authentication.
   * SCHEME_OTHER(3), another access authentication.
   * </pre>
   *
   * <code>optional int32 scheme = 1;</code>
   * @param value The scheme to set.
   */
  private void setScheme(int value) {
    bitField0_ |= 0x00000001;
    scheme_ = value;
  }
  /**
   * <pre>
   * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
   * android credential or a password saved through Credential Manager API
   * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
   * SCHEME_BASIC(1), basic access http authentication.
   * SCHEME_DIGEST(2), digest access authentication.
   * SCHEME_OTHER(3), another access authentication.
   * </pre>
   *
   * <code>optional int32 scheme = 1;</code>
   */
  private void clearScheme() {
    bitField0_ = (bitField0_ & ~0x00000001);
    scheme_ = 0;
  }

  public static final int SIGNON_REALM_FIELD_NUMBER = 2;
  private java.lang.String signonRealm_;
  /**
   * <pre>
   * For parsed web forms and normal passwords saved through Credential Manager
   * API: url-scheme://url-host[:url-port]/
   * For Android apps (local + federated):
   *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * where the hash is base64 encoded SHA512 of the app's public certificate.
   * For federated credentials:
   *     "federation://" + origin_host + "/" + federation_host
   * For proxy auth: proxy-host/auth-realm
   * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
   * </pre>
   *
   * <code>optional string signon_realm = 2;</code>
   * @return Whether the signonRealm field is set.
   */
  @java.lang.Override
  public boolean hasSignonRealm() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * For parsed web forms and normal passwords saved through Credential Manager
   * API: url-scheme://url-host[:url-port]/
   * For Android apps (local + federated):
   *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * where the hash is base64 encoded SHA512 of the app's public certificate.
   * For federated credentials:
   *     "federation://" + origin_host + "/" + federation_host
   * For proxy auth: proxy-host/auth-realm
   * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
   * </pre>
   *
   * <code>optional string signon_realm = 2;</code>
   * @return The signonRealm.
   */
  @java.lang.Override
  public java.lang.String getSignonRealm() {
    return signonRealm_;
  }
  /**
   * <pre>
   * For parsed web forms and normal passwords saved through Credential Manager
   * API: url-scheme://url-host[:url-port]/
   * For Android apps (local + federated):
   *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * where the hash is base64 encoded SHA512 of the app's public certificate.
   * For federated credentials:
   *     "federation://" + origin_host + "/" + federation_host
   * For proxy auth: proxy-host/auth-realm
   * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
   * </pre>
   *
   * <code>optional string signon_realm = 2;</code>
   * @return The bytes for signonRealm.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getSignonRealmBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(signonRealm_);
  }
  /**
   * <pre>
   * For parsed web forms and normal passwords saved through Credential Manager
   * API: url-scheme://url-host[:url-port]/
   * For Android apps (local + federated):
   *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * where the hash is base64 encoded SHA512 of the app's public certificate.
   * For federated credentials:
   *     "federation://" + origin_host + "/" + federation_host
   * For proxy auth: proxy-host/auth-realm
   * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
   * </pre>
   *
   * <code>optional string signon_realm = 2;</code>
   * @param value The signonRealm to set.
   */
  private void setSignonRealm(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000002;
    signonRealm_ = value;
  }
  /**
   * <pre>
   * For parsed web forms and normal passwords saved through Credential Manager
   * API: url-scheme://url-host[:url-port]/
   * For Android apps (local + federated):
   *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * where the hash is base64 encoded SHA512 of the app's public certificate.
   * For federated credentials:
   *     "federation://" + origin_host + "/" + federation_host
   * For proxy auth: proxy-host/auth-realm
   * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
   * </pre>
   *
   * <code>optional string signon_realm = 2;</code>
   */
  private void clearSignonRealm() {
    bitField0_ = (bitField0_ & ~0x00000002);
    signonRealm_ = getDefaultInstance().getSignonRealm();
  }
  /**
   * <pre>
   * For parsed web forms and normal passwords saved through Credential Manager
   * API: url-scheme://url-host[:url-port]/
   * For Android apps (local + federated):
   *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * where the hash is base64 encoded SHA512 of the app's public certificate.
   * For federated credentials:
   *     "federation://" + origin_host + "/" + federation_host
   * For proxy auth: proxy-host/auth-realm
   * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
   * </pre>
   *
   * <code>optional string signon_realm = 2;</code>
   * @param value The bytes for signonRealm to set.
   */
  private void setSignonRealmBytes(
      com.google.protobuf.ByteString value) {
    signonRealm_ = value.toStringUtf8();
    bitField0_ |= 0x00000002;
  }

  public static final int ORIGIN_FIELD_NUMBER = 3;
  private java.lang.String origin_;
  /**
   * <pre>
   * For parsed web forms and Credential Manager API:
   *     url-scheme://url-host[:url-port]/path
   * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string origin = 3;</code>
   * @return Whether the origin field is set.
   */
  @java.lang.Override
  public boolean hasOrigin() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * For parsed web forms and Credential Manager API:
   *     url-scheme://url-host[:url-port]/path
   * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string origin = 3;</code>
   * @return The origin.
   */
  @java.lang.Override
  public java.lang.String getOrigin() {
    return origin_;
  }
  /**
   * <pre>
   * For parsed web forms and Credential Manager API:
   *     url-scheme://url-host[:url-port]/path
   * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string origin = 3;</code>
   * @return The bytes for origin.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getOriginBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(origin_);
  }
  /**
   * <pre>
   * For parsed web forms and Credential Manager API:
   *     url-scheme://url-host[:url-port]/path
   * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string origin = 3;</code>
   * @param value The origin to set.
   */
  private void setOrigin(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000004;
    origin_ = value;
  }
  /**
   * <pre>
   * For parsed web forms and Credential Manager API:
   *     url-scheme://url-host[:url-port]/path
   * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string origin = 3;</code>
   */
  private void clearOrigin() {
    bitField0_ = (bitField0_ & ~0x00000004);
    origin_ = getDefaultInstance().getOrigin();
  }
  /**
   * <pre>
   * For parsed web forms and Credential Manager API:
   *     url-scheme://url-host[:url-port]/path
   * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
   * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string origin = 3;</code>
   * @param value The bytes for origin to set.
   */
  private void setOriginBytes(
      com.google.protobuf.ByteString value) {
    origin_ = value.toStringUtf8();
    bitField0_ |= 0x00000004;
  }

  public static final int ACTION_FIELD_NUMBER = 4;
  private java.lang.String action_;
  /**
   * <pre>
   * Only for web-parsed forms - the action target of the form:
   *     url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string action = 4;</code>
   * @return Whether the action field is set.
   */
  @java.lang.Override
  public boolean hasAction() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Only for web-parsed forms - the action target of the form:
   *     url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string action = 4;</code>
   * @return The action.
   */
  @java.lang.Override
  public java.lang.String getAction() {
    return action_;
  }
  /**
   * <pre>
   * Only for web-parsed forms - the action target of the form:
   *     url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string action = 4;</code>
   * @return The bytes for action.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getActionBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(action_);
  }
  /**
   * <pre>
   * Only for web-parsed forms - the action target of the form:
   *     url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string action = 4;</code>
   * @param value The action to set.
   */
  private void setAction(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000008;
    action_ = value;
  }
  /**
   * <pre>
   * Only for web-parsed forms - the action target of the form:
   *     url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string action = 4;</code>
   */
  private void clearAction() {
    bitField0_ = (bitField0_ & ~0x00000008);
    action_ = getDefaultInstance().getAction();
  }
  /**
   * <pre>
   * Only for web-parsed forms - the action target of the form:
   *     url-scheme://url-host[:url-port]/path
   * </pre>
   *
   * <code>optional string action = 4;</code>
   * @param value The bytes for action to set.
   */
  private void setActionBytes(
      com.google.protobuf.ByteString value) {
    action_ = value.toStringUtf8();
    bitField0_ |= 0x00000008;
  }

  public static final int USERNAME_ELEMENT_FIELD_NUMBER = 5;
  private java.lang.String usernameElement_;
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing username.
   * </pre>
   *
   * <code>optional string username_element = 5;</code>
   * @return Whether the usernameElement field is set.
   */
  @java.lang.Override
  public boolean hasUsernameElement() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing username.
   * </pre>
   *
   * <code>optional string username_element = 5;</code>
   * @return The usernameElement.
   */
  @java.lang.Override
  public java.lang.String getUsernameElement() {
    return usernameElement_;
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing username.
   * </pre>
   *
   * <code>optional string username_element = 5;</code>
   * @return The bytes for usernameElement.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getUsernameElementBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(usernameElement_);
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing username.
   * </pre>
   *
   * <code>optional string username_element = 5;</code>
   * @param value The usernameElement to set.
   */
  private void setUsernameElement(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000010;
    usernameElement_ = value;
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing username.
   * </pre>
   *
   * <code>optional string username_element = 5;</code>
   */
  private void clearUsernameElement() {
    bitField0_ = (bitField0_ & ~0x00000010);
    usernameElement_ = getDefaultInstance().getUsernameElement();
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing username.
   * </pre>
   *
   * <code>optional string username_element = 5;</code>
   * @param value The bytes for usernameElement to set.
   */
  private void setUsernameElementBytes(
      com.google.protobuf.ByteString value) {
    usernameElement_ = value.toStringUtf8();
    bitField0_ |= 0x00000010;
  }

  public static final int USERNAME_VALUE_FIELD_NUMBER = 6;
  private java.lang.String usernameValue_;
  /**
   * <pre>
   * For all: the username.
   * For blacklisted forms: &lt;empty&gt;.
   * </pre>
   *
   * <code>optional string username_value = 6;</code>
   * @return Whether the usernameValue field is set.
   */
  @java.lang.Override
  public boolean hasUsernameValue() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * For all: the username.
   * For blacklisted forms: &lt;empty&gt;.
   * </pre>
   *
   * <code>optional string username_value = 6;</code>
   * @return The usernameValue.
   */
  @java.lang.Override
  public java.lang.String getUsernameValue() {
    return usernameValue_;
  }
  /**
   * <pre>
   * For all: the username.
   * For blacklisted forms: &lt;empty&gt;.
   * </pre>
   *
   * <code>optional string username_value = 6;</code>
   * @return The bytes for usernameValue.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getUsernameValueBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(usernameValue_);
  }
  /**
   * <pre>
   * For all: the username.
   * For blacklisted forms: &lt;empty&gt;.
   * </pre>
   *
   * <code>optional string username_value = 6;</code>
   * @param value The usernameValue to set.
   */
  private void setUsernameValue(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000020;
    usernameValue_ = value;
  }
  /**
   * <pre>
   * For all: the username.
   * For blacklisted forms: &lt;empty&gt;.
   * </pre>
   *
   * <code>optional string username_value = 6;</code>
   */
  private void clearUsernameValue() {
    bitField0_ = (bitField0_ & ~0x00000020);
    usernameValue_ = getDefaultInstance().getUsernameValue();
  }
  /**
   * <pre>
   * For all: the username.
   * For blacklisted forms: &lt;empty&gt;.
   * </pre>
   *
   * <code>optional string username_value = 6;</code>
   * @param value The bytes for usernameValue to set.
   */
  private void setUsernameValueBytes(
      com.google.protobuf.ByteString value) {
    usernameValue_ = value.toStringUtf8();
    bitField0_ |= 0x00000020;
  }

  public static final int PASSWORD_ELEMENT_FIELD_NUMBER = 7;
  private java.lang.String passwordElement_;
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing password.
   * </pre>
   *
   * <code>optional string password_element = 7;</code>
   * @return Whether the passwordElement field is set.
   */
  @java.lang.Override
  public boolean hasPasswordElement() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing password.
   * </pre>
   *
   * <code>optional string password_element = 7;</code>
   * @return The passwordElement.
   */
  @java.lang.Override
  public java.lang.String getPasswordElement() {
    return passwordElement_;
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing password.
   * </pre>
   *
   * <code>optional string password_element = 7;</code>
   * @return The bytes for passwordElement.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPasswordElementBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(passwordElement_);
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing password.
   * </pre>
   *
   * <code>optional string password_element = 7;</code>
   * @param value The passwordElement to set.
   */
  private void setPasswordElement(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000040;
    passwordElement_ = value;
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing password.
   * </pre>
   *
   * <code>optional string password_element = 7;</code>
   */
  private void clearPasswordElement() {
    bitField0_ = (bitField0_ & ~0x00000040);
    passwordElement_ = getDefaultInstance().getPasswordElement();
  }
  /**
   * <pre>
   * Only for web-parsed forms - the name of the element containing password.
   * </pre>
   *
   * <code>optional string password_element = 7;</code>
   * @param value The bytes for passwordElement to set.
   */
  private void setPasswordElementBytes(
      com.google.protobuf.ByteString value) {
    passwordElement_ = value.toStringUtf8();
    bitField0_ |= 0x00000040;
  }

  public static final int PASSWORD_VALUE_FIELD_NUMBER = 8;
  private java.lang.String passwordValue_;
  /**
   * <pre>
   * For all: the password.
   * For federated logins and blacklisted forms: &lt;empty&gt;
   * </pre>
   *
   * <code>optional string password_value = 8;</code>
   * @return Whether the passwordValue field is set.
   */
  @java.lang.Override
  public boolean hasPasswordValue() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <pre>
   * For all: the password.
   * For federated logins and blacklisted forms: &lt;empty&gt;
   * </pre>
   *
   * <code>optional string password_value = 8;</code>
   * @return The passwordValue.
   */
  @java.lang.Override
  public java.lang.String getPasswordValue() {
    return passwordValue_;
  }
  /**
   * <pre>
   * For all: the password.
   * For federated logins and blacklisted forms: &lt;empty&gt;
   * </pre>
   *
   * <code>optional string password_value = 8;</code>
   * @return The bytes for passwordValue.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPasswordValueBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(passwordValue_);
  }
  /**
   * <pre>
   * For all: the password.
   * For federated logins and blacklisted forms: &lt;empty&gt;
   * </pre>
   *
   * <code>optional string password_value = 8;</code>
   * @param value The passwordValue to set.
   */
  private void setPasswordValue(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00000080;
    passwordValue_ = value;
  }
  /**
   * <pre>
   * For all: the password.
   * For federated logins and blacklisted forms: &lt;empty&gt;
   * </pre>
   *
   * <code>optional string password_value = 8;</code>
   */
  private void clearPasswordValue() {
    bitField0_ = (bitField0_ & ~0x00000080);
    passwordValue_ = getDefaultInstance().getPasswordValue();
  }
  /**
   * <pre>
   * For all: the password.
   * For federated logins and blacklisted forms: &lt;empty&gt;
   * </pre>
   *
   * <code>optional string password_value = 8;</code>
   * @param value The bytes for passwordValue to set.
   */
  private void setPasswordValueBytes(
      com.google.protobuf.ByteString value) {
    passwordValue_ = value.toStringUtf8();
    bitField0_ |= 0x00000080;
  }

  public static final int SSL_VALID_FIELD_NUMBER = 9;
  private boolean sslValid_;
  /**
   * <pre>
   * Deprecated: http://crbug.com/413020
   * True if the credential was saved for a HTTPS session with a valid SSL cert.
   * Ignored for Android apps.
   * </pre>
   *
   * <code>optional bool ssl_valid = 9 [deprecated = true];</code>
   * @return Whether the sslValid field is set.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean hasSslValid() {
    return ((bitField0_ & 0x00000100) != 0);
  }
  /**
   * <pre>
   * Deprecated: http://crbug.com/413020
   * True if the credential was saved for a HTTPS session with a valid SSL cert.
   * Ignored for Android apps.
   * </pre>
   *
   * <code>optional bool ssl_valid = 9 [deprecated = true];</code>
   * @return The sslValid.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean getSslValid() {
    return sslValid_;
  }
  /**
   * <pre>
   * Deprecated: http://crbug.com/413020
   * True if the credential was saved for a HTTPS session with a valid SSL cert.
   * Ignored for Android apps.
   * </pre>
   *
   * <code>optional bool ssl_valid = 9 [deprecated = true];</code>
   * @param value The sslValid to set.
   */
  private void setSslValid(boolean value) {
    bitField0_ |= 0x00000100;
    sslValid_ = value;
  }
  /**
   * <pre>
   * Deprecated: http://crbug.com/413020
   * True if the credential was saved for a HTTPS session with a valid SSL cert.
   * Ignored for Android apps.
   * </pre>
   *
   * <code>optional bool ssl_valid = 9 [deprecated = true];</code>
   */
  private void clearSslValid() {
    bitField0_ = (bitField0_ & ~0x00000100);
    sslValid_ = false;
  }

  public static final int PREFERRED_FIELD_NUMBER = 10;
  private boolean preferred_;
  /**
   * <pre>
   * True for the last credential used for logging in on a given site.
   * Deprecated in M81.
   * </pre>
   *
   * <code>optional bool preferred = 10 [deprecated = true];</code>
   * @return Whether the preferred field is set.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean hasPreferred() {
    return ((bitField0_ & 0x00000200) != 0);
  }
  /**
   * <pre>
   * True for the last credential used for logging in on a given site.
   * Deprecated in M81.
   * </pre>
   *
   * <code>optional bool preferred = 10 [deprecated = true];</code>
   * @return The preferred.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean getPreferred() {
    return preferred_;
  }
  /**
   * <pre>
   * True for the last credential used for logging in on a given site.
   * Deprecated in M81.
   * </pre>
   *
   * <code>optional bool preferred = 10 [deprecated = true];</code>
   * @param value The preferred to set.
   */
  private void setPreferred(boolean value) {
    bitField0_ |= 0x00000200;
    preferred_ = value;
  }
  /**
   * <pre>
   * True for the last credential used for logging in on a given site.
   * Deprecated in M81.
   * </pre>
   *
   * <code>optional bool preferred = 10 [deprecated = true];</code>
   */
  private void clearPreferred() {
    bitField0_ = (bitField0_ & ~0x00000200);
    preferred_ = false;
  }

  public static final int DATE_CREATED_FIELD_NUMBER = 11;
  private long dateCreated_;
  /**
   * <pre>
   * Time when the credential was created. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_created = 11;</code>
   * @return Whether the dateCreated field is set.
   */
  @java.lang.Override
  public boolean hasDateCreated() {
    return ((bitField0_ & 0x00000400) != 0);
  }
  /**
   * <pre>
   * Time when the credential was created. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_created = 11;</code>
   * @return The dateCreated.
   */
  @java.lang.Override
  public long getDateCreated() {
    return dateCreated_;
  }
  /**
   * <pre>
   * Time when the credential was created. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_created = 11;</code>
   * @param value The dateCreated to set.
   */
  private void setDateCreated(long value) {
    bitField0_ |= 0x00000400;
    dateCreated_ = value;
  }
  /**
   * <pre>
   * Time when the credential was created. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_created = 11;</code>
   */
  private void clearDateCreated() {
    bitField0_ = (bitField0_ & ~0x00000400);
    dateCreated_ = 0L;
  }

  public static final int BLACKLISTED_FIELD_NUMBER = 12;
  private boolean blacklisted_;
  /**
   * <pre>
   * True, if user chose permanently not to save the credentials for the form.
   * </pre>
   *
   * <code>optional bool blacklisted = 12;</code>
   * @return Whether the blacklisted field is set.
   */
  @java.lang.Override
  public boolean hasBlacklisted() {
    return ((bitField0_ & 0x00000800) != 0);
  }
  /**
   * <pre>
   * True, if user chose permanently not to save the credentials for the form.
   * </pre>
   *
   * <code>optional bool blacklisted = 12;</code>
   * @return The blacklisted.
   */
  @java.lang.Override
  public boolean getBlacklisted() {
    return blacklisted_;
  }
  /**
   * <pre>
   * True, if user chose permanently not to save the credentials for the form.
   * </pre>
   *
   * <code>optional bool blacklisted = 12;</code>
   * @param value The blacklisted to set.
   */
  private void setBlacklisted(boolean value) {
    bitField0_ |= 0x00000800;
    blacklisted_ = value;
  }
  /**
   * <pre>
   * True, if user chose permanently not to save the credentials for the form.
   * </pre>
   *
   * <code>optional bool blacklisted = 12;</code>
   */
  private void clearBlacklisted() {
    bitField0_ = (bitField0_ & ~0x00000800);
    blacklisted_ = false;
  }

  public static final int TYPE_FIELD_NUMBER = 13;
  private int type_;
  /**
   * <pre>
   * TYPE_MANUAL(0), user manually filled the username and the password.
   * TYPE_GENERATED(1), the credential was auto generated.
   * </pre>
   *
   * <code>optional int32 type = 13;</code>
   * @return Whether the type field is set.
   */
  @java.lang.Override
  public boolean hasType() {
    return ((bitField0_ & 0x00001000) != 0);
  }
  /**
   * <pre>
   * TYPE_MANUAL(0), user manually filled the username and the password.
   * TYPE_GENERATED(1), the credential was auto generated.
   * </pre>
   *
   * <code>optional int32 type = 13;</code>
   * @return The type.
   */
  @java.lang.Override
  public int getType() {
    return type_;
  }
  /**
   * <pre>
   * TYPE_MANUAL(0), user manually filled the username and the password.
   * TYPE_GENERATED(1), the credential was auto generated.
   * </pre>
   *
   * <code>optional int32 type = 13;</code>
   * @param value The type to set.
   */
  private void setType(int value) {
    bitField0_ |= 0x00001000;
    type_ = value;
  }
  /**
   * <pre>
   * TYPE_MANUAL(0), user manually filled the username and the password.
   * TYPE_GENERATED(1), the credential was auto generated.
   * </pre>
   *
   * <code>optional int32 type = 13;</code>
   */
  private void clearType() {
    bitField0_ = (bitField0_ & ~0x00001000);
    type_ = 0;
  }

  public static final int TIMES_USED_FIELD_NUMBER = 14;
  private int timesUsed_;
  /**
   * <pre>
   * Number of times this login was used for logging in. Chrome uses this field
   * to distinguish log-in and sign-up forms.
   * </pre>
   *
   * <code>optional int32 times_used = 14;</code>
   * @return Whether the timesUsed field is set.
   */
  @java.lang.Override
  public boolean hasTimesUsed() {
    return ((bitField0_ & 0x00002000) != 0);
  }
  /**
   * <pre>
   * Number of times this login was used for logging in. Chrome uses this field
   * to distinguish log-in and sign-up forms.
   * </pre>
   *
   * <code>optional int32 times_used = 14;</code>
   * @return The timesUsed.
   */
  @java.lang.Override
  public int getTimesUsed() {
    return timesUsed_;
  }
  /**
   * <pre>
   * Number of times this login was used for logging in. Chrome uses this field
   * to distinguish log-in and sign-up forms.
   * </pre>
   *
   * <code>optional int32 times_used = 14;</code>
   * @param value The timesUsed to set.
   */
  private void setTimesUsed(int value) {
    bitField0_ |= 0x00002000;
    timesUsed_ = value;
  }
  /**
   * <pre>
   * Number of times this login was used for logging in. Chrome uses this field
   * to distinguish log-in and sign-up forms.
   * </pre>
   *
   * <code>optional int32 times_used = 14;</code>
   */
  private void clearTimesUsed() {
    bitField0_ = (bitField0_ & ~0x00002000);
    timesUsed_ = 0;
  }

  public static final int DISPLAY_NAME_FIELD_NUMBER = 15;
  private java.lang.String displayName_;
  /**
   * <pre>
   * A human readable name of the account holder. Set by CredentialManager API
   * and Android.
   * </pre>
   *
   * <code>optional string display_name = 15;</code>
   * @return Whether the displayName field is set.
   */
  @java.lang.Override
  public boolean hasDisplayName() {
    return ((bitField0_ & 0x00004000) != 0);
  }
  /**
   * <pre>
   * A human readable name of the account holder. Set by CredentialManager API
   * and Android.
   * </pre>
   *
   * <code>optional string display_name = 15;</code>
   * @return The displayName.
   */
  @java.lang.Override
  public java.lang.String getDisplayName() {
    return displayName_;
  }
  /**
   * <pre>
   * A human readable name of the account holder. Set by CredentialManager API
   * and Android.
   * </pre>
   *
   * <code>optional string display_name = 15;</code>
   * @return The bytes for displayName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDisplayNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(displayName_);
  }
  /**
   * <pre>
   * A human readable name of the account holder. Set by CredentialManager API
   * and Android.
   * </pre>
   *
   * <code>optional string display_name = 15;</code>
   * @param value The displayName to set.
   */
  private void setDisplayName(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00004000;
    displayName_ = value;
  }
  /**
   * <pre>
   * A human readable name of the account holder. Set by CredentialManager API
   * and Android.
   * </pre>
   *
   * <code>optional string display_name = 15;</code>
   */
  private void clearDisplayName() {
    bitField0_ = (bitField0_ & ~0x00004000);
    displayName_ = getDefaultInstance().getDisplayName();
  }
  /**
   * <pre>
   * A human readable name of the account holder. Set by CredentialManager API
   * and Android.
   * </pre>
   *
   * <code>optional string display_name = 15;</code>
   * @param value The bytes for displayName to set.
   */
  private void setDisplayNameBytes(
      com.google.protobuf.ByteString value) {
    displayName_ = value.toStringUtf8();
    bitField0_ |= 0x00004000;
  }

  public static final int AVATAR_URL_FIELD_NUMBER = 16;
  private java.lang.String avatarUrl_;
  /**
   * <pre>
   * A URL of the avatar for the credential. Set by CredentialManager API and
   * Android.
   * </pre>
   *
   * <code>optional string avatar_url = 16;</code>
   * @return Whether the avatarUrl field is set.
   */
  @java.lang.Override
  public boolean hasAvatarUrl() {
    return ((bitField0_ & 0x00008000) != 0);
  }
  /**
   * <pre>
   * A URL of the avatar for the credential. Set by CredentialManager API and
   * Android.
   * </pre>
   *
   * <code>optional string avatar_url = 16;</code>
   * @return The avatarUrl.
   */
  @java.lang.Override
  public java.lang.String getAvatarUrl() {
    return avatarUrl_;
  }
  /**
   * <pre>
   * A URL of the avatar for the credential. Set by CredentialManager API and
   * Android.
   * </pre>
   *
   * <code>optional string avatar_url = 16;</code>
   * @return The bytes for avatarUrl.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAvatarUrlBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(avatarUrl_);
  }
  /**
   * <pre>
   * A URL of the avatar for the credential. Set by CredentialManager API and
   * Android.
   * </pre>
   *
   * <code>optional string avatar_url = 16;</code>
   * @param value The avatarUrl to set.
   */
  private void setAvatarUrl(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00008000;
    avatarUrl_ = value;
  }
  /**
   * <pre>
   * A URL of the avatar for the credential. Set by CredentialManager API and
   * Android.
   * </pre>
   *
   * <code>optional string avatar_url = 16;</code>
   */
  private void clearAvatarUrl() {
    bitField0_ = (bitField0_ & ~0x00008000);
    avatarUrl_ = getDefaultInstance().getAvatarUrl();
  }
  /**
   * <pre>
   * A URL of the avatar for the credential. Set by CredentialManager API and
   * Android.
   * </pre>
   *
   * <code>optional string avatar_url = 16;</code>
   * @param value The bytes for avatarUrl to set.
   */
  private void setAvatarUrlBytes(
      com.google.protobuf.ByteString value) {
    avatarUrl_ = value.toStringUtf8();
    bitField0_ |= 0x00008000;
  }

  public static final int FEDERATION_URL_FIELD_NUMBER = 17;
  private java.lang.String federationUrl_;
  /**
   * <pre>
   * A URL of the IdP used to verify the credential. Set by Credential Manager
   * API and Android.
   * </pre>
   *
   * <code>optional string federation_url = 17;</code>
   * @return Whether the federationUrl field is set.
   */
  @java.lang.Override
  public boolean hasFederationUrl() {
    return ((bitField0_ & 0x00010000) != 0);
  }
  /**
   * <pre>
   * A URL of the IdP used to verify the credential. Set by Credential Manager
   * API and Android.
   * </pre>
   *
   * <code>optional string federation_url = 17;</code>
   * @return The federationUrl.
   */
  @java.lang.Override
  public java.lang.String getFederationUrl() {
    return federationUrl_;
  }
  /**
   * <pre>
   * A URL of the IdP used to verify the credential. Set by Credential Manager
   * API and Android.
   * </pre>
   *
   * <code>optional string federation_url = 17;</code>
   * @return The bytes for federationUrl.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getFederationUrlBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(federationUrl_);
  }
  /**
   * <pre>
   * A URL of the IdP used to verify the credential. Set by Credential Manager
   * API and Android.
   * </pre>
   *
   * <code>optional string federation_url = 17;</code>
   * @param value The federationUrl to set.
   */
  private void setFederationUrl(
      java.lang.String value) {
    value.getClass();
  bitField0_ |= 0x00010000;
    federationUrl_ = value;
  }
  /**
   * <pre>
   * A URL of the IdP used to verify the credential. Set by Credential Manager
   * API and Android.
   * </pre>
   *
   * <code>optional string federation_url = 17;</code>
   */
  private void clearFederationUrl() {
    bitField0_ = (bitField0_ & ~0x00010000);
    federationUrl_ = getDefaultInstance().getFederationUrl();
  }
  /**
   * <pre>
   * A URL of the IdP used to verify the credential. Set by Credential Manager
   * API and Android.
   * </pre>
   *
   * <code>optional string federation_url = 17;</code>
   * @param value The bytes for federationUrl to set.
   */
  private void setFederationUrlBytes(
      com.google.protobuf.ByteString value) {
    federationUrl_ = value.toStringUtf8();
    bitField0_ |= 0x00010000;
  }

  public static final int DATE_LAST_USED_FIELD_NUMBER = 18;
  private long dateLastUsed_;
  /**
   * <pre>
   * Time when the credential was last used. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_last_used = 18;</code>
   * @return Whether the dateLastUsed field is set.
   */
  @java.lang.Override
  public boolean hasDateLastUsed() {
    return ((bitField0_ & 0x00020000) != 0);
  }
  /**
   * <pre>
   * Time when the credential was last used. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_last_used = 18;</code>
   * @return The dateLastUsed.
   */
  @java.lang.Override
  public long getDateLastUsed() {
    return dateLastUsed_;
  }
  /**
   * <pre>
   * Time when the credential was last used. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_last_used = 18;</code>
   * @param value The dateLastUsed to set.
   */
  private void setDateLastUsed(long value) {
    bitField0_ |= 0x00020000;
    dateLastUsed_ = value;
  }
  /**
   * <pre>
   * Time when the credential was last used. Amount of microseconds since 1601.
   * </pre>
   *
   * <code>optional int64 date_last_used = 18;</code>
   */
  private void clearDateLastUsed() {
    bitField0_ = (bitField0_ & ~0x00020000);
    dateLastUsed_ = 0L;
  }

  public static final int PASSWORD_ISSUES_FIELD_NUMBER = 19;
  private org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues passwordIssues_;
  /**
   * <pre>
   * Set if an issue was detected that puts this password at risk. All the
   * clients are expected to clear the field when the password value is updated.
   * 'reused' part can be additionally reset when the analysis on the entire
   * password store is completed.
   * </pre>
   *
   * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues password_issues = 19;</code>
   */
  @java.lang.Override
  public boolean hasPasswordIssues() {
    return ((bitField0_ & 0x00040000) != 0);
  }
  /**
   * <pre>
   * Set if an issue was detected that puts this password at risk. All the
   * clients are expected to clear the field when the password value is updated.
   * 'reused' part can be additionally reset when the analysis on the entire
   * password store is completed.
   * </pre>
   *
   * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues password_issues = 19;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues getPasswordIssues() {
    return passwordIssues_ == null ? org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.getDefaultInstance() : passwordIssues_;
  }
  /**
   * <pre>
   * Set if an issue was detected that puts this password at risk. All the
   * clients are expected to clear the field when the password value is updated.
   * 'reused' part can be additionally reset when the analysis on the entire
   * password store is completed.
   * </pre>
   *
   * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues password_issues = 19;</code>
   */
  private void setPasswordIssues(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues value) {
    value.getClass();
  passwordIssues_ = value;
    bitField0_ |= 0x00040000;
    }
  /**
   * <pre>
   * Set if an issue was detected that puts this password at risk. All the
   * clients are expected to clear the field when the password value is updated.
   * 'reused' part can be additionally reset when the analysis on the entire
   * password store is completed.
   * </pre>
   *
   * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues password_issues = 19;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergePasswordIssues(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues value) {
    value.getClass();
  if (passwordIssues_ != null &&
        passwordIssues_ != org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.getDefaultInstance()) {
      passwordIssues_ =
        org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.newBuilder(passwordIssues_).mergeFrom(value).buildPartial();
    } else {
      passwordIssues_ = value;
    }
    bitField0_ |= 0x00040000;
  }
  /**
   * <pre>
   * Set if an issue was detected that puts this password at risk. All the
   * clients are expected to clear the field when the password value is updated.
   * 'reused' part can be additionally reset when the analysis on the entire
   * password store is completed.
   * </pre>
   *
   * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues password_issues = 19;</code>
   */
  private void clearPasswordIssues() {  passwordIssues_ = null;
    bitField0_ = (bitField0_ & ~0x00040000);
  }

  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecificsData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.PasswordSpecificsData prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * All the strings are encoded with UTF-8. URLs are encoded in Punycode.
   * </pre>
   *
   * Protobuf type {@code sync_pb.PasswordSpecificsData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.PasswordSpecificsData, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.PasswordSpecificsData)
      org.chromium.components.sync.protocol.PasswordSpecificsDataOrBuilder {
    // Construct using org.chromium.components.sync.protocol.PasswordSpecificsData.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
     * android credential or a password saved through Credential Manager API
     * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
     * SCHEME_BASIC(1), basic access http authentication.
     * SCHEME_DIGEST(2), digest access authentication.
     * SCHEME_OTHER(3), another access authentication.
     * </pre>
     *
     * <code>optional int32 scheme = 1;</code>
     * @return Whether the scheme field is set.
     */
    @java.lang.Override
    public boolean hasScheme() {
      return instance.hasScheme();
    }
    /**
     * <pre>
     * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
     * android credential or a password saved through Credential Manager API
     * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
     * SCHEME_BASIC(1), basic access http authentication.
     * SCHEME_DIGEST(2), digest access authentication.
     * SCHEME_OTHER(3), another access authentication.
     * </pre>
     *
     * <code>optional int32 scheme = 1;</code>
     * @return The scheme.
     */
    @java.lang.Override
    public int getScheme() {
      return instance.getScheme();
    }
    /**
     * <pre>
     * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
     * android credential or a password saved through Credential Manager API
     * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
     * SCHEME_BASIC(1), basic access http authentication.
     * SCHEME_DIGEST(2), digest access authentication.
     * SCHEME_OTHER(3), another access authentication.
     * </pre>
     *
     * <code>optional int32 scheme = 1;</code>
     * @param value The scheme to set.
     * @return This builder for chaining.
     */
    public Builder setScheme(int value) {
      copyOnWrite();
      instance.setScheme(value);
      return this;
    }
    /**
     * <pre>
     * SCHEME_HTML(0), the credential represents either a parsed HTML form, or an
     * android credential or a password saved through Credential Manager API
     * (https://w3c.github.io/webappsec/specs/credentialmanagement/).
     * SCHEME_BASIC(1), basic access http authentication.
     * SCHEME_DIGEST(2), digest access authentication.
     * SCHEME_OTHER(3), another access authentication.
     * </pre>
     *
     * <code>optional int32 scheme = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearScheme() {
      copyOnWrite();
      instance.clearScheme();
      return this;
    }

    /**
     * <pre>
     * For parsed web forms and normal passwords saved through Credential Manager
     * API: url-scheme://url-host[:url-port]/
     * For Android apps (local + federated):
     *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * where the hash is base64 encoded SHA512 of the app's public certificate.
     * For federated credentials:
     *     "federation://" + origin_host + "/" + federation_host
     * For proxy auth: proxy-host/auth-realm
     * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
     * </pre>
     *
     * <code>optional string signon_realm = 2;</code>
     * @return Whether the signonRealm field is set.
     */
    @java.lang.Override
    public boolean hasSignonRealm() {
      return instance.hasSignonRealm();
    }
    /**
     * <pre>
     * For parsed web forms and normal passwords saved through Credential Manager
     * API: url-scheme://url-host[:url-port]/
     * For Android apps (local + federated):
     *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * where the hash is base64 encoded SHA512 of the app's public certificate.
     * For federated credentials:
     *     "federation://" + origin_host + "/" + federation_host
     * For proxy auth: proxy-host/auth-realm
     * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
     * </pre>
     *
     * <code>optional string signon_realm = 2;</code>
     * @return The signonRealm.
     */
    @java.lang.Override
    public java.lang.String getSignonRealm() {
      return instance.getSignonRealm();
    }
    /**
     * <pre>
     * For parsed web forms and normal passwords saved through Credential Manager
     * API: url-scheme://url-host[:url-port]/
     * For Android apps (local + federated):
     *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * where the hash is base64 encoded SHA512 of the app's public certificate.
     * For federated credentials:
     *     "federation://" + origin_host + "/" + federation_host
     * For proxy auth: proxy-host/auth-realm
     * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
     * </pre>
     *
     * <code>optional string signon_realm = 2;</code>
     * @return The bytes for signonRealm.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSignonRealmBytes() {
      return instance.getSignonRealmBytes();
    }
    /**
     * <pre>
     * For parsed web forms and normal passwords saved through Credential Manager
     * API: url-scheme://url-host[:url-port]/
     * For Android apps (local + federated):
     *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * where the hash is base64 encoded SHA512 of the app's public certificate.
     * For federated credentials:
     *     "federation://" + origin_host + "/" + federation_host
     * For proxy auth: proxy-host/auth-realm
     * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
     * </pre>
     *
     * <code>optional string signon_realm = 2;</code>
     * @param value The signonRealm to set.
     * @return This builder for chaining.
     */
    public Builder setSignonRealm(
        java.lang.String value) {
      copyOnWrite();
      instance.setSignonRealm(value);
      return this;
    }
    /**
     * <pre>
     * For parsed web forms and normal passwords saved through Credential Manager
     * API: url-scheme://url-host[:url-port]/
     * For Android apps (local + federated):
     *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * where the hash is base64 encoded SHA512 of the app's public certificate.
     * For federated credentials:
     *     "federation://" + origin_host + "/" + federation_host
     * For proxy auth: proxy-host/auth-realm
     * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
     * </pre>
     *
     * <code>optional string signon_realm = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearSignonRealm() {
      copyOnWrite();
      instance.clearSignonRealm();
      return this;
    }
    /**
     * <pre>
     * For parsed web forms and normal passwords saved through Credential Manager
     * API: url-scheme://url-host[:url-port]/
     * For Android apps (local + federated):
     *     "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * where the hash is base64 encoded SHA512 of the app's public certificate.
     * For federated credentials:
     *     "federation://" + origin_host + "/" + federation_host
     * For proxy auth: proxy-host/auth-realm
     * For HTTP auth: url-scheme://url-host[:url-port]/auth-realm
     * </pre>
     *
     * <code>optional string signon_realm = 2;</code>
     * @param value The bytes for signonRealm to set.
     * @return This builder for chaining.
     */
    public Builder setSignonRealmBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setSignonRealmBytes(value);
      return this;
    }

    /**
     * <pre>
     * For parsed web forms and Credential Manager API:
     *     url-scheme://url-host[:url-port]/path
     * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string origin = 3;</code>
     * @return Whether the origin field is set.
     */
    @java.lang.Override
    public boolean hasOrigin() {
      return instance.hasOrigin();
    }
    /**
     * <pre>
     * For parsed web forms and Credential Manager API:
     *     url-scheme://url-host[:url-port]/path
     * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string origin = 3;</code>
     * @return The origin.
     */
    @java.lang.Override
    public java.lang.String getOrigin() {
      return instance.getOrigin();
    }
    /**
     * <pre>
     * For parsed web forms and Credential Manager API:
     *     url-scheme://url-host[:url-port]/path
     * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string origin = 3;</code>
     * @return The bytes for origin.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOriginBytes() {
      return instance.getOriginBytes();
    }
    /**
     * <pre>
     * For parsed web forms and Credential Manager API:
     *     url-scheme://url-host[:url-port]/path
     * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string origin = 3;</code>
     * @param value The origin to set.
     * @return This builder for chaining.
     */
    public Builder setOrigin(
        java.lang.String value) {
      copyOnWrite();
      instance.setOrigin(value);
      return this;
    }
    /**
     * <pre>
     * For parsed web forms and Credential Manager API:
     *     url-scheme://url-host[:url-port]/path
     * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string origin = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearOrigin() {
      copyOnWrite();
      instance.clearOrigin();
      return this;
    }
    /**
     * <pre>
     * For parsed web forms and Credential Manager API:
     *     url-scheme://url-host[:url-port]/path
     * For Android: "android://&lt;hash of cert&gt;&#64;&lt;package name&gt;/"
     * For proxy/HTTP auth: url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string origin = 3;</code>
     * @param value The bytes for origin to set.
     * @return This builder for chaining.
     */
    public Builder setOriginBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setOriginBytes(value);
      return this;
    }

    /**
     * <pre>
     * Only for web-parsed forms - the action target of the form:
     *     url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string action = 4;</code>
     * @return Whether the action field is set.
     */
    @java.lang.Override
    public boolean hasAction() {
      return instance.hasAction();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the action target of the form:
     *     url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string action = 4;</code>
     * @return The action.
     */
    @java.lang.Override
    public java.lang.String getAction() {
      return instance.getAction();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the action target of the form:
     *     url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string action = 4;</code>
     * @return The bytes for action.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getActionBytes() {
      return instance.getActionBytes();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the action target of the form:
     *     url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string action = 4;</code>
     * @param value The action to set.
     * @return This builder for chaining.
     */
    public Builder setAction(
        java.lang.String value) {
      copyOnWrite();
      instance.setAction(value);
      return this;
    }
    /**
     * <pre>
     * Only for web-parsed forms - the action target of the form:
     *     url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string action = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearAction() {
      copyOnWrite();
      instance.clearAction();
      return this;
    }
    /**
     * <pre>
     * Only for web-parsed forms - the action target of the form:
     *     url-scheme://url-host[:url-port]/path
     * </pre>
     *
     * <code>optional string action = 4;</code>
     * @param value The bytes for action to set.
     * @return This builder for chaining.
     */
    public Builder setActionBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setActionBytes(value);
      return this;
    }

    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing username.
     * </pre>
     *
     * <code>optional string username_element = 5;</code>
     * @return Whether the usernameElement field is set.
     */
    @java.lang.Override
    public boolean hasUsernameElement() {
      return instance.hasUsernameElement();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing username.
     * </pre>
     *
     * <code>optional string username_element = 5;</code>
     * @return The usernameElement.
     */
    @java.lang.Override
    public java.lang.String getUsernameElement() {
      return instance.getUsernameElement();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing username.
     * </pre>
     *
     * <code>optional string username_element = 5;</code>
     * @return The bytes for usernameElement.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUsernameElementBytes() {
      return instance.getUsernameElementBytes();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing username.
     * </pre>
     *
     * <code>optional string username_element = 5;</code>
     * @param value The usernameElement to set.
     * @return This builder for chaining.
     */
    public Builder setUsernameElement(
        java.lang.String value) {
      copyOnWrite();
      instance.setUsernameElement(value);
      return this;
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing username.
     * </pre>
     *
     * <code>optional string username_element = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearUsernameElement() {
      copyOnWrite();
      instance.clearUsernameElement();
      return this;
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing username.
     * </pre>
     *
     * <code>optional string username_element = 5;</code>
     * @param value The bytes for usernameElement to set.
     * @return This builder for chaining.
     */
    public Builder setUsernameElementBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setUsernameElementBytes(value);
      return this;
    }

    /**
     * <pre>
     * For all: the username.
     * For blacklisted forms: &lt;empty&gt;.
     * </pre>
     *
     * <code>optional string username_value = 6;</code>
     * @return Whether the usernameValue field is set.
     */
    @java.lang.Override
    public boolean hasUsernameValue() {
      return instance.hasUsernameValue();
    }
    /**
     * <pre>
     * For all: the username.
     * For blacklisted forms: &lt;empty&gt;.
     * </pre>
     *
     * <code>optional string username_value = 6;</code>
     * @return The usernameValue.
     */
    @java.lang.Override
    public java.lang.String getUsernameValue() {
      return instance.getUsernameValue();
    }
    /**
     * <pre>
     * For all: the username.
     * For blacklisted forms: &lt;empty&gt;.
     * </pre>
     *
     * <code>optional string username_value = 6;</code>
     * @return The bytes for usernameValue.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUsernameValueBytes() {
      return instance.getUsernameValueBytes();
    }
    /**
     * <pre>
     * For all: the username.
     * For blacklisted forms: &lt;empty&gt;.
     * </pre>
     *
     * <code>optional string username_value = 6;</code>
     * @param value The usernameValue to set.
     * @return This builder for chaining.
     */
    public Builder setUsernameValue(
        java.lang.String value) {
      copyOnWrite();
      instance.setUsernameValue(value);
      return this;
    }
    /**
     * <pre>
     * For all: the username.
     * For blacklisted forms: &lt;empty&gt;.
     * </pre>
     *
     * <code>optional string username_value = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearUsernameValue() {
      copyOnWrite();
      instance.clearUsernameValue();
      return this;
    }
    /**
     * <pre>
     * For all: the username.
     * For blacklisted forms: &lt;empty&gt;.
     * </pre>
     *
     * <code>optional string username_value = 6;</code>
     * @param value The bytes for usernameValue to set.
     * @return This builder for chaining.
     */
    public Builder setUsernameValueBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setUsernameValueBytes(value);
      return this;
    }

    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing password.
     * </pre>
     *
     * <code>optional string password_element = 7;</code>
     * @return Whether the passwordElement field is set.
     */
    @java.lang.Override
    public boolean hasPasswordElement() {
      return instance.hasPasswordElement();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing password.
     * </pre>
     *
     * <code>optional string password_element = 7;</code>
     * @return The passwordElement.
     */
    @java.lang.Override
    public java.lang.String getPasswordElement() {
      return instance.getPasswordElement();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing password.
     * </pre>
     *
     * <code>optional string password_element = 7;</code>
     * @return The bytes for passwordElement.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPasswordElementBytes() {
      return instance.getPasswordElementBytes();
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing password.
     * </pre>
     *
     * <code>optional string password_element = 7;</code>
     * @param value The passwordElement to set.
     * @return This builder for chaining.
     */
    public Builder setPasswordElement(
        java.lang.String value) {
      copyOnWrite();
      instance.setPasswordElement(value);
      return this;
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing password.
     * </pre>
     *
     * <code>optional string password_element = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearPasswordElement() {
      copyOnWrite();
      instance.clearPasswordElement();
      return this;
    }
    /**
     * <pre>
     * Only for web-parsed forms - the name of the element containing password.
     * </pre>
     *
     * <code>optional string password_element = 7;</code>
     * @param value The bytes for passwordElement to set.
     * @return This builder for chaining.
     */
    public Builder setPasswordElementBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPasswordElementBytes(value);
      return this;
    }

    /**
     * <pre>
     * For all: the password.
     * For federated logins and blacklisted forms: &lt;empty&gt;
     * </pre>
     *
     * <code>optional string password_value = 8;</code>
     * @return Whether the passwordValue field is set.
     */
    @java.lang.Override
    public boolean hasPasswordValue() {
      return instance.hasPasswordValue();
    }
    /**
     * <pre>
     * For all: the password.
     * For federated logins and blacklisted forms: &lt;empty&gt;
     * </pre>
     *
     * <code>optional string password_value = 8;</code>
     * @return The passwordValue.
     */
    @java.lang.Override
    public java.lang.String getPasswordValue() {
      return instance.getPasswordValue();
    }
    /**
     * <pre>
     * For all: the password.
     * For federated logins and blacklisted forms: &lt;empty&gt;
     * </pre>
     *
     * <code>optional string password_value = 8;</code>
     * @return The bytes for passwordValue.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPasswordValueBytes() {
      return instance.getPasswordValueBytes();
    }
    /**
     * <pre>
     * For all: the password.
     * For federated logins and blacklisted forms: &lt;empty&gt;
     * </pre>
     *
     * <code>optional string password_value = 8;</code>
     * @param value The passwordValue to set.
     * @return This builder for chaining.
     */
    public Builder setPasswordValue(
        java.lang.String value) {
      copyOnWrite();
      instance.setPasswordValue(value);
      return this;
    }
    /**
     * <pre>
     * For all: the password.
     * For federated logins and blacklisted forms: &lt;empty&gt;
     * </pre>
     *
     * <code>optional string password_value = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearPasswordValue() {
      copyOnWrite();
      instance.clearPasswordValue();
      return this;
    }
    /**
     * <pre>
     * For all: the password.
     * For federated logins and blacklisted forms: &lt;empty&gt;
     * </pre>
     *
     * <code>optional string password_value = 8;</code>
     * @param value The bytes for passwordValue to set.
     * @return This builder for chaining.
     */
    public Builder setPasswordValueBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPasswordValueBytes(value);
      return this;
    }

    /**
     * <pre>
     * Deprecated: http://crbug.com/413020
     * True if the credential was saved for a HTTPS session with a valid SSL cert.
     * Ignored for Android apps.
     * </pre>
     *
     * <code>optional bool ssl_valid = 9 [deprecated = true];</code>
     * @return Whether the sslValid field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasSslValid() {
      return instance.hasSslValid();
    }
    /**
     * <pre>
     * Deprecated: http://crbug.com/413020
     * True if the credential was saved for a HTTPS session with a valid SSL cert.
     * Ignored for Android apps.
     * </pre>
     *
     * <code>optional bool ssl_valid = 9 [deprecated = true];</code>
     * @return The sslValid.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean getSslValid() {
      return instance.getSslValid();
    }
    /**
     * <pre>
     * Deprecated: http://crbug.com/413020
     * True if the credential was saved for a HTTPS session with a valid SSL cert.
     * Ignored for Android apps.
     * </pre>
     *
     * <code>optional bool ssl_valid = 9 [deprecated = true];</code>
     * @param value The sslValid to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setSslValid(boolean value) {
      copyOnWrite();
      instance.setSslValid(value);
      return this;
    }
    /**
     * <pre>
     * Deprecated: http://crbug.com/413020
     * True if the credential was saved for a HTTPS session with a valid SSL cert.
     * Ignored for Android apps.
     * </pre>
     *
     * <code>optional bool ssl_valid = 9 [deprecated = true];</code>
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearSslValid() {
      copyOnWrite();
      instance.clearSslValid();
      return this;
    }

    /**
     * <pre>
     * True for the last credential used for logging in on a given site.
     * Deprecated in M81.
     * </pre>
     *
     * <code>optional bool preferred = 10 [deprecated = true];</code>
     * @return Whether the preferred field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasPreferred() {
      return instance.hasPreferred();
    }
    /**
     * <pre>
     * True for the last credential used for logging in on a given site.
     * Deprecated in M81.
     * </pre>
     *
     * <code>optional bool preferred = 10 [deprecated = true];</code>
     * @return The preferred.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean getPreferred() {
      return instance.getPreferred();
    }
    /**
     * <pre>
     * True for the last credential used for logging in on a given site.
     * Deprecated in M81.
     * </pre>
     *
     * <code>optional bool preferred = 10 [deprecated = true];</code>
     * @param value The preferred to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setPreferred(boolean value) {
      copyOnWrite();
      instance.setPreferred(value);
      return this;
    }
    /**
     * <pre>
     * True for the last credential used for logging in on a given site.
     * Deprecated in M81.
     * </pre>
     *
     * <code>optional bool preferred = 10 [deprecated = true];</code>
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearPreferred() {
      copyOnWrite();
      instance.clearPreferred();
      return this;
    }

    /**
     * <pre>
     * Time when the credential was created. Amount of microseconds since 1601.
     * </pre>
     *
     * <code>optional int64 date_created = 11;</code>
     * @return Whether the dateCreated field is set.
     */
    @java.lang.Override
    public boolean hasDateCreated() {
      return instance.hasDateCreated();
    }
    /**
     * <pre>
     * Time when the credential was created. Amount of microseconds since 1601.
     * </pre>
     *
     * <code>optional int64 date_created = 11;</code>
     * @return The dateCreated.
     */
    @java.lang.Override
    public long getDateCreated() {
      return instance.getDateCreated();
    }
    /**
     * <pre>
     * Time when the credential was created. Amount of microseconds since 1601.
     * </pre>
     *
     * <code>optional int64 date_created = 11;</code>
     * @param value The dateCreated to set.
     * @return This builder for chaining.
     */
    public Builder setDateCreated(long value) {
      copyOnWrite();
      instance.setDateCreated(value);
      return this;
    }
    /**
     * <pre>
     * Time when the credential was created. Amount of microseconds since 1601.
     * </pre>
     *
     * <code>optional int64 date_created = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearDateCreated() {
      copyOnWrite();
      instance.clearDateCreated();
      return this;
    }

    /**
     * <pre>
     * True, if user chose permanently not to save the credentials for the form.
     * </pre>
     *
     * <code>optional bool blacklisted = 12;</code>
     * @return Whether the blacklisted field is set.
     */
    @java.lang.Override
    public boolean hasBlacklisted() {
      return instance.hasBlacklisted();
    }
    /**
     * <pre>
     * True, if user chose permanently not to save the credentials for the form.
     * </pre>
     *
     * <code>optional bool blacklisted = 12;</code>
     * @return The blacklisted.
     */
    @java.lang.Override
    public boolean getBlacklisted() {
      return instance.getBlacklisted();
    }
    /**
     * <pre>
     * True, if user chose permanently not to save the credentials for the form.
     * </pre>
     *
     * <code>optional bool blacklisted = 12;</code>
     * @param value The blacklisted to set.
     * @return This builder for chaining.
     */
    public Builder setBlacklisted(boolean value) {
      copyOnWrite();
      instance.setBlacklisted(value);
      return this;
    }
    /**
     * <pre>
     * True, if user chose permanently not to save the credentials for the form.
     * </pre>
     *
     * <code>optional bool blacklisted = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearBlacklisted() {
      copyOnWrite();
      instance.clearBlacklisted();
      return this;
    }

    /**
     * <pre>
     * TYPE_MANUAL(0), user manually filled the username and the password.
     * TYPE_GENERATED(1), the credential was auto generated.
     * </pre>
     *
     * <code>optional int32 type = 13;</code>
     * @return Whether the type field is set.
     */
    @java.lang.Override
    public boolean hasType() {
      return instance.hasType();
    }
    /**
     * <pre>
     * TYPE_MANUAL(0), user manually filled the username and the password.
     * TYPE_GENERATED(1), the credential was auto generated.
     * </pre>
     *
     * <code>optional int32 type = 13;</code>
     * @return The type.
     */
    @java.lang.Override
    public int getType() {
      return instance.getType();
    }
    /**
     * <pre>
     * TYPE_MANUAL(0), user manually filled the username and the password.
     * TYPE_GENERATED(1), the credential was auto generated.
     * </pre>
     *
     * <code>optional int32 type = 13;</code>
     * @param value The type to set.
     * @return This builder for chaining.
     */
    public Builder setType(int value) {
      copyOnWrite();
      instance.setType(value);
      return this;
    }
    /**
     * <pre>
     * TYPE_MANUAL(0), user manually filled the username and the password.
     * TYPE_GENERATED(1), the credential was auto generated.
     * </pre>
     *
     * <code>optional int32 type = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearType() {
      copyOnWrite();
      instance.clearType();
      return this;
    }

    /**
     * <pre>
     * Number of times this login was used for logging in. Chrome uses this field
     * to distinguish log-in and sign-up forms.
     * </pre>
     *
     * <code>optional int32 times_used = 14;</code>
     * @return Whether the timesUsed field is set.
     */
    @java.lang.Override
    public boolean hasTimesUsed() {
      return instance.hasTimesUsed();
    }
    /**
     * <pre>
     * Number of times this login was used for logging in. Chrome uses this field
     * to distinguish log-in and sign-up forms.
     * </pre>
     *
     * <code>optional int32 times_used = 14;</code>
     * @return The timesUsed.
     */
    @java.lang.Override
    public int getTimesUsed() {
      return instance.getTimesUsed();
    }
    /**
     * <pre>
     * Number of times this login was used for logging in. Chrome uses this field
     * to distinguish log-in and sign-up forms.
     * </pre>
     *
     * <code>optional int32 times_used = 14;</code>
     * @param value The timesUsed to set.
     * @return This builder for chaining.
     */
    public Builder setTimesUsed(int value) {
      copyOnWrite();
      instance.setTimesUsed(value);
      return this;
    }
    /**
     * <pre>
     * Number of times this login was used for logging in. Chrome uses this field
     * to distinguish log-in and sign-up forms.
     * </pre>
     *
     * <code>optional int32 times_used = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearTimesUsed() {
      copyOnWrite();
      instance.clearTimesUsed();
      return this;
    }

    /**
     * <pre>
     * A human readable name of the account holder. Set by CredentialManager API
     * and Android.
     * </pre>
     *
     * <code>optional string display_name = 15;</code>
     * @return Whether the displayName field is set.
     */
    @java.lang.Override
    public boolean hasDisplayName() {
      return instance.hasDisplayName();
    }
    /**
     * <pre>
     * A human readable name of the account holder. Set by CredentialManager API
     * and Android.
     * </pre>
     *
     * <code>optional string display_name = 15;</code>
     * @return The displayName.
     */
    @java.lang.Override
    public java.lang.String getDisplayName() {
      return instance.getDisplayName();
    }
    /**
     * <pre>
     * A human readable name of the account holder. Set by CredentialManager API
     * and Android.
     * </pre>
     *
     * <code>optional string display_name = 15;</code>
     * @return The bytes for displayName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDisplayNameBytes() {
      return instance.getDisplayNameBytes();
    }
    /**
     * <pre>
     * A human readable name of the account holder. Set by CredentialManager API
     * and Android.
     * </pre>
     *
     * <code>optional string display_name = 15;</code>
     * @param value The displayName to set.
     * @return This builder for chaining.
     */
    public Builder setDisplayName(
        java.lang.String value) {
      copyOnWrite();
      instance.setDisplayName(value);
      return this;
    }
    /**
     * <pre>
     * A human readable name of the account holder. Set by CredentialManager API
     * and Android.
     * </pre>
     *
     * <code>optional string display_name = 15;</code>
     * @return This builder for chaining.
     */
    public Builder clearDisplayName() {
      copyOnWrite();
      instance.clearDisplayName();
      return this;
    }
    /**
     * <pre>
     * A human readable name of the account holder. Set by CredentialManager API
     * and Android.
     * </pre>
     *
     * <code>optional string display_name = 15;</code>
     * @param value The bytes for displayName to set.
     * @return This builder for chaining.
     */
    public Builder setDisplayNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDisplayNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * A URL of the avatar for the credential. Set by CredentialManager API and
     * Android.
     * </pre>
     *
     * <code>optional string avatar_url = 16;</code>
     * @return Whether the avatarUrl field is set.
     */
    @java.lang.Override
    public boolean hasAvatarUrl() {
      return instance.hasAvatarUrl();
    }
    /**
     * <pre>
     * A URL of the avatar for the credential. Set by CredentialManager API and
     * Android.
     * </pre>
     *
     * <code>optional string avatar_url = 16;</code>
     * @return The avatarUrl.
     */
    @java.lang.Override
    public java.lang.String getAvatarUrl() {
      return instance.getAvatarUrl();
    }
    /**
     * <pre>
     * A URL of the avatar for the credential. Set by CredentialManager API and
     * Android.
     * </pre>
     *
     * <code>optional string avatar_url = 16;</code>
     * @return The bytes for avatarUrl.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getAvatarUrlBytes() {
      return instance.getAvatarUrlBytes();
    }
    /**
     * <pre>
     * A URL of the avatar for the credential. Set by CredentialManager API and
     * Android.
     * </pre>
     *
     * <code>optional string avatar_url = 16;</code>
     * @param value The avatarUrl to set.
     * @return This builder for chaining.
     */
    public Builder setAvatarUrl(
        java.lang.String value) {
      copyOnWrite();
      instance.setAvatarUrl(value);
      return this;
    }
    /**
     * <pre>
     * A URL of the avatar for the credential. Set by CredentialManager API and
     * Android.
     * </pre>
     *
     * <code>optional string avatar_url = 16;</code>
     * @return This builder for chaining.
     */
    public Builder clearAvatarUrl() {
      copyOnWrite();
      instance.clearAvatarUrl();
      return this;
    }
    /**
     * <pre>
     * A URL of the avatar for the credential. Set by CredentialManager API and
     * Android.
     * </pre>
     *
     * <code>optional string avatar_url = 16;</code>
     * @param value The bytes for avatarUrl to set.
     * @return This builder for chaining.
     */
    public Builder setAvatarUrlBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setAvatarUrlBytes(value);
      return this;
    }

    /**
     * <pre>
     * A URL of the IdP used to verify the credential. Set by Credential Manager
     * API and Android.
     * </pre>
     *
     * <code>optional string federation_url = 17;</code>
     * @return Whether the federationUrl field is set.
     */
    @java.lang.Override
    public boolean hasFederationUrl() {
      return instance.hasFederationUrl();
    }
    /**
     * <pre>
     * A URL of the IdP used to verify the credential. Set by Credential Manager
     * API and Android.
     * </pre>
     *
     * <code>optional string federation_url = 17;</code>
     * @return The federationUrl.
     */
    @java.lang.Override
    public java.lang.String getFederationUrl() {
      return instance.getFederationUrl();
    }
    /**
     * <pre>
     * A URL of the IdP used to verify the credential. Set by Credential Manager
     * API and Android.
     * </pre>
     *
     * <code>optional string federation_url = 17;</code>
     * @return The bytes for federationUrl.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFederationUrlBytes() {
      return instance.getFederationUrlBytes();
    }
    /**
     * <pre>
     * A URL of the IdP used to verify the credential. Set by Credential Manager
     * API and Android.
     * </pre>
     *
     * <code>optional string federation_url = 17;</code>
     * @param value The federationUrl to set.
     * @return This builder for chaining.
     */
    public Builder setFederationUrl(
        java.lang.String value) {
      copyOnWrite();
      instance.setFederationUrl(value);
      return this;
    }
    /**
     * <pre>
     * A URL of the IdP used to verify the credential. Set by Credential Manager
     * API and Android.
     * </pre>
     *
     * <code>optional string federation_url = 17;</code>
     * @return This builder for chaining.
     */
    public Builder clearFederationUrl() {
      copyOnWrite();
      instance.clearFederationUrl();
      return this;
    }
    /**
     * <pre>
     * A URL of the IdP used to verify the credential. Set by Credential Manager
     * API and Android.
     * </pre>
     *
     * <code>optional string federation_url = 17;</code>
     * @param value The bytes for federationUrl to set.
     * @return This builder for chaining.
     */
    public Builder setFederationUrlBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setFederationUrlBytes(value);
      return this;
    }

    /**
     * <pre>
     * Time when the credential was last used. Amount of microseconds since 1601.
     * </pre>
     *
     * <code>optional int64 date_last_used = 18;</code>
     * @return Whether the dateLastUsed field is set.
     */
    @java.lang.Override
    public boolean hasDateLastUsed() {
      return instance.hasDateLastUsed();
    }
    /**
     * <pre>
     * Time when the credential was last used. Amount of microseconds since 1601.
     * </pre>
     *
     * <code>optional int64 date_last_used = 18;</code>
     * @return The dateLastUsed.
     */
    @java.lang.Override
    public long getDateLastUsed() {
      return instance.getDateLastUsed();
    }
    /**
     * <pre>
     * Time when the credential was last used. Amount of microseconds since 1601.
     * </pre>
     *
     * <code>optional int64 date_last_used = 18;</code>
     * @param value The dateLastUsed to set.
     * @return This builder for chaining.
     */
    public Builder setDateLastUsed(long value) {
      copyOnWrite();
      instance.setDateLastUsed(value);
      return this;
    }
    /**
     * <pre>
     * Time when the credential was last used. Amount of microseconds since 1601.
     * </pre>
     *
     * <code>optional int64 date_last_used = 18;</code>
     * @return This builder for chaining.
     */
    public Builder clearDateLastUsed() {
      copyOnWrite();
      instance.clearDateLastUsed();
      return this;
    }

    /**
     * <pre>
     * Set if an issue was detected that puts this password at risk. All the
     * clients are expected to clear the field when the password value is updated.
     * 'reused' part can be additionally reset when the analysis on the entire
     * password store is completed.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues password_issues = 19;</code>
     */
    @java.lang.Override
    public boolean hasPasswordIssues() {
      return instance.hasPasswordIssues();
    }
    /**
     * <pre>
     * Set if an issue was detected that puts this password at risk. All the
     * clients are expected to clear the field when the password value is updated.
     * 'reused' part can be additionally reset when the analysis on the entire
     * password store is completed.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues password_issues = 19;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues getPasswordIssues() {
      return instance.getPasswordIssues();
    }
    /**
     * <pre>
     * Set if an issue was detected that puts this password at risk. All the
     * clients are expected to clear the field when the password value is updated.
     * 'reused' part can be additionally reset when the analysis on the entire
     * password store is completed.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues password_issues = 19;</code>
     */
    public Builder setPasswordIssues(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues value) {
      copyOnWrite();
      instance.setPasswordIssues(value);
      return this;
      }
    /**
     * <pre>
     * Set if an issue was detected that puts this password at risk. All the
     * clients are expected to clear the field when the password value is updated.
     * 'reused' part can be additionally reset when the analysis on the entire
     * password store is completed.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues password_issues = 19;</code>
     */
    public Builder setPasswordIssues(
        org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues.Builder builderForValue) {
      copyOnWrite();
      instance.setPasswordIssues(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Set if an issue was detected that puts this password at risk. All the
     * clients are expected to clear the field when the password value is updated.
     * 'reused' part can be additionally reset when the analysis on the entire
     * password store is completed.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues password_issues = 19;</code>
     */
    public Builder mergePasswordIssues(org.chromium.components.sync.protocol.PasswordSpecificsData.PasswordIssues value) {
      copyOnWrite();
      instance.mergePasswordIssues(value);
      return this;
    }
    /**
     * <pre>
     * Set if an issue was detected that puts this password at risk. All the
     * clients are expected to clear the field when the password value is updated.
     * 'reused' part can be additionally reset when the analysis on the entire
     * password store is completed.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsData.PasswordIssues password_issues = 19;</code>
     */
    public Builder clearPasswordIssues() {  copyOnWrite();
      instance.clearPasswordIssues();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.PasswordSpecificsData)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.PasswordSpecificsData();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "scheme_",
            "signonRealm_",
            "origin_",
            "action_",
            "usernameElement_",
            "usernameValue_",
            "passwordElement_",
            "passwordValue_",
            "sslValid_",
            "preferred_",
            "dateCreated_",
            "blacklisted_",
            "type_",
            "timesUsed_",
            "displayName_",
            "avatarUrl_",
            "federationUrl_",
            "dateLastUsed_",
            "passwordIssues_",
          };
          java.lang.String info =
              "\u0001\u0013\u0000\u0001\u0001\u0013\u0013\u0000\u0000\u0000\u0001\u1004\u0000\u0002" +
              "\u1008\u0001\u0003\u1008\u0002\u0004\u1008\u0003\u0005\u1008\u0004\u0006\u1008\u0005" +
              "\u0007\u1008\u0006\b\u1008\u0007\t\u1007\b\n\u1007\t\u000b\u1002\n\f\u1007\u000b" +
              "\r\u1004\f\u000e\u1004\r\u000f\u1008\u000e\u0010\u1008\u000f\u0011\u1008\u0010\u0012" +
              "\u1002\u0011\u0013\u1009\u0012";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.components.sync.protocol.PasswordSpecificsData> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.components.sync.protocol.PasswordSpecificsData.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.PasswordSpecificsData>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecificsData)
  private static final org.chromium.components.sync.protocol.PasswordSpecificsData DEFAULT_INSTANCE;
  static {
    PasswordSpecificsData defaultInstance = new PasswordSpecificsData();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      PasswordSpecificsData.class, defaultInstance);
  }

  public static org.chromium.components.sync.protocol.PasswordSpecificsData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<PasswordSpecificsData> PARSER;

  public static com.google.protobuf.Parser<PasswordSpecificsData> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

