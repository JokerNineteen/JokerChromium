// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/gaia_password_reuse.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * User reused their GAIA password on another website.
 * </pre>
 *
 * Protobuf type {@code sync_pb.GaiaPasswordReuse}
 */
public  final class GaiaPasswordReuse extends
    com.google.protobuf.GeneratedMessageLite<
        GaiaPasswordReuse, GaiaPasswordReuse.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.GaiaPasswordReuse)
    GaiaPasswordReuseOrBuilder {
  private GaiaPasswordReuse() {
  }
  public interface PasswordReuseDetectedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
     * @return Whether the status field is set.
     */
    boolean hasStatus();
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
     * @return The status.
     */
    org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus getStatus();
  }
  /**
   * <pre>
   * Logged when we detect a password re-use event on a non-GAIA site.
   * If the user hasnâ€™t enabled SafeBrowsing, this will be the last event.
   * </pre>
   *
   * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordReuseDetected}
   */
  public  static final class PasswordReuseDetected extends
      com.google.protobuf.GeneratedMessageLite<
          PasswordReuseDetected, PasswordReuseDetected.Builder> implements
      // @@protoc_insertion_point(message_implements:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
      PasswordReuseDetectedOrBuilder {
    private PasswordReuseDetected() {
    }
    public interface SafeBrowsingStatusOrBuilder extends
        // @@protoc_insertion_point(interface_extends:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Is SafeBrowsing enabled?
       * </pre>
       *
       * <code>optional bool enabled = 1;</code>
       * @return Whether the enabled field is set.
       */
      boolean hasEnabled();
      /**
       * <pre>
       * Is SafeBrowsing enabled?
       * </pre>
       *
       * <code>optional bool enabled = 1;</code>
       * @return The enabled.
       */
      boolean getEnabled();

      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
       * @return Whether the safeBrowsingReportingPopulation field is set.
       */
      boolean hasSafeBrowsingReportingPopulation();
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
       * @return The safeBrowsingReportingPopulation.
       */
      org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation getSafeBrowsingReportingPopulation();
    }
    /**
     * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus}
     */
    public  static final class SafeBrowsingStatus extends
        com.google.protobuf.GeneratedMessageLite<
            SafeBrowsingStatus, SafeBrowsingStatus.Builder> implements
        // @@protoc_insertion_point(message_implements:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
        SafeBrowsingStatusOrBuilder {
      private SafeBrowsingStatus() {
      }
      /**
       * <pre>
       * If SafeBrowsing is enabled, is the user opted-in to extended
       * reporting or Scout?
       * </pre>
       *
       * Protobuf enum {@code sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation}
       */
      public enum ReportingPopulation
          implements com.google.protobuf.Internal.EnumLite {
        /**
         * <code>REPORTING_POPULATION_UNSPECIFIED = 0;</code>
         */
        REPORTING_POPULATION_UNSPECIFIED(0),
        /**
         * <code>NONE = 1;</code>
         */
        NONE(1),
        /**
         * <code>EXTENDED_REPORTING = 2;</code>
         */
        EXTENDED_REPORTING(2),
        /**
         * <code>SCOUT = 3;</code>
         */
        SCOUT(3),
        ;

        /**
         * <code>REPORTING_POPULATION_UNSPECIFIED = 0;</code>
         */
        public static final int REPORTING_POPULATION_UNSPECIFIED_VALUE = 0;
        /**
         * <code>NONE = 1;</code>
         */
        public static final int NONE_VALUE = 1;
        /**
         * <code>EXTENDED_REPORTING = 2;</code>
         */
        public static final int EXTENDED_REPORTING_VALUE = 2;
        /**
         * <code>SCOUT = 3;</code>
         */
        public static final int SCOUT_VALUE = 3;


        @java.lang.Override
        public final int getNumber() {
          return value;
        }

        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static ReportingPopulation valueOf(int value) {
          return forNumber(value);
        }

        public static ReportingPopulation forNumber(int value) {
          switch (value) {
            case 0: return REPORTING_POPULATION_UNSPECIFIED;
            case 1: return NONE;
            case 2: return EXTENDED_REPORTING;
            case 3: return SCOUT;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ReportingPopulation>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            ReportingPopulation> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<ReportingPopulation>() {
                @java.lang.Override
                public ReportingPopulation findValueByNumber(int number) {
                  return ReportingPopulation.forNumber(number);
                }
              };

        public static com.google.protobuf.Internal.EnumVerifier 
            internalGetVerifier() {
          return ReportingPopulationVerifier.INSTANCE;
        }

        private static final class ReportingPopulationVerifier implements 
             com.google.protobuf.Internal.EnumVerifier { 
                static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new ReportingPopulationVerifier();
                @java.lang.Override
                public boolean isInRange(int number) {
                  return ReportingPopulation.forNumber(number) != null;
                }
              };

        private final int value;

        private ReportingPopulation(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation)
      }

      private int bitField0_;
      public static final int ENABLED_FIELD_NUMBER = 1;
      private boolean enabled_;
      /**
       * <pre>
       * Is SafeBrowsing enabled?
       * </pre>
       *
       * <code>optional bool enabled = 1;</code>
       * @return Whether the enabled field is set.
       */
      @java.lang.Override
      public boolean hasEnabled() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Is SafeBrowsing enabled?
       * </pre>
       *
       * <code>optional bool enabled = 1;</code>
       * @return The enabled.
       */
      @java.lang.Override
      public boolean getEnabled() {
        return enabled_;
      }
      /**
       * <pre>
       * Is SafeBrowsing enabled?
       * </pre>
       *
       * <code>optional bool enabled = 1;</code>
       * @param value The enabled to set.
       */
      private void setEnabled(boolean value) {
        bitField0_ |= 0x00000001;
        enabled_ = value;
      }
      /**
       * <pre>
       * Is SafeBrowsing enabled?
       * </pre>
       *
       * <code>optional bool enabled = 1;</code>
       */
      private void clearEnabled() {
        bitField0_ = (bitField0_ & ~0x00000001);
        enabled_ = false;
      }

      public static final int SAFE_BROWSING_REPORTING_POPULATION_FIELD_NUMBER = 2;
      private int safeBrowsingReportingPopulation_;
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
       * @return Whether the safeBrowsingReportingPopulation field is set.
       */
      @java.lang.Override
      public boolean hasSafeBrowsingReportingPopulation() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
       * @return The safeBrowsingReportingPopulation.
       */
      @java.lang.Override
      public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation getSafeBrowsingReportingPopulation() {
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation result = org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation.forNumber(safeBrowsingReportingPopulation_);
        return result == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation.REPORTING_POPULATION_UNSPECIFIED : result;
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
       * @param value The safeBrowsingReportingPopulation to set.
       */
      private void setSafeBrowsingReportingPopulation(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation value) {
        safeBrowsingReportingPopulation_ = value.getNumber();
        bitField0_ |= 0x00000002;
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
       */
      private void clearSafeBrowsingReportingPopulation() {
        bitField0_ = (bitField0_ & ~0x00000002);
        safeBrowsingReportingPopulation_ = 0;
      }

      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus, Builder> implements
          // @@protoc_insertion_point(builder_implements:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatusOrBuilder {
        // Construct using org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Is SafeBrowsing enabled?
         * </pre>
         *
         * <code>optional bool enabled = 1;</code>
         * @return Whether the enabled field is set.
         */
        @java.lang.Override
        public boolean hasEnabled() {
          return instance.hasEnabled();
        }
        /**
         * <pre>
         * Is SafeBrowsing enabled?
         * </pre>
         *
         * <code>optional bool enabled = 1;</code>
         * @return The enabled.
         */
        @java.lang.Override
        public boolean getEnabled() {
          return instance.getEnabled();
        }
        /**
         * <pre>
         * Is SafeBrowsing enabled?
         * </pre>
         *
         * <code>optional bool enabled = 1;</code>
         * @param value The enabled to set.
         * @return This builder for chaining.
         */
        public Builder setEnabled(boolean value) {
          copyOnWrite();
          instance.setEnabled(value);
          return this;
        }
        /**
         * <pre>
         * Is SafeBrowsing enabled?
         * </pre>
         *
         * <code>optional bool enabled = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearEnabled() {
          copyOnWrite();
          instance.clearEnabled();
          return this;
        }

        /**
         * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
         * @return Whether the safeBrowsingReportingPopulation field is set.
         */
        @java.lang.Override
        public boolean hasSafeBrowsingReportingPopulation() {
          return instance.hasSafeBrowsingReportingPopulation();
        }
        /**
         * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
         * @return The safeBrowsingReportingPopulation.
         */
        @java.lang.Override
        public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation getSafeBrowsingReportingPopulation() {
          return instance.getSafeBrowsingReportingPopulation();
        }
        /**
         * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
         * @param value The enum numeric value on the wire for safeBrowsingReportingPopulation to set.
         * @return This builder for chaining.
         */
        public Builder setSafeBrowsingReportingPopulation(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation value) {
          copyOnWrite();
          instance.setSafeBrowsingReportingPopulation(value);
          return this;
        }
        /**
         * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation safe_browsing_reporting_population = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearSafeBrowsingReportingPopulation() {
          copyOnWrite();
          instance.clearSafeBrowsingReportingPopulation();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "enabled_",
                "safeBrowsingReportingPopulation_",
                org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.ReportingPopulation.internalGetVerifier(),
              };
              java.lang.String info =
                  "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u1007\u0000\u0002" +
                  "\u100c\u0001";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus)
      private static final org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus DEFAULT_INSTANCE;
      static {
        SafeBrowsingStatus defaultInstance = new SafeBrowsingStatus();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          SafeBrowsingStatus.class, defaultInstance);
      }

      public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<SafeBrowsingStatus> PARSER;

      public static com.google.protobuf.Parser<SafeBrowsingStatus> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    public static final int STATUS_FIELD_NUMBER = 1;
    private org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status_;
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
     */
    @java.lang.Override
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus getStatus() {
      return status_ == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.getDefaultInstance() : status_;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
     */
    private void setStatus(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus value) {
      value.getClass();
  status_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeStatus(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus value) {
      value.getClass();
  if (status_ != null &&
          status_ != org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.getDefaultInstance()) {
        status_ =
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.newBuilder(status_).mergeFrom(value).buildPartial();
      } else {
        status_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
     */
    private void clearStatus() {  status_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Logged when we detect a password re-use event on a non-GAIA site.
     * If the user hasnâ€™t enabled SafeBrowsing, this will be the last event.
     * </pre>
     *
     * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordReuseDetected}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected, Builder> implements
        // @@protoc_insertion_point(builder_implements:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetectedOrBuilder {
      // Construct using org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
       */
      @java.lang.Override
      public boolean hasStatus() {
        return instance.hasStatus();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
       */
      @java.lang.Override
      public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus getStatus() {
        return instance.getStatus();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
       */
      public Builder setStatus(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus value) {
        copyOnWrite();
        instance.setStatus(value);
        return this;
        }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
       */
      public Builder setStatus(
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus.Builder builderForValue) {
        copyOnWrite();
        instance.setStatus(builderForValue.build());
        return this;
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
       */
      public Builder mergeStatus(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus value) {
        copyOnWrite();
        instance.mergeStatus(value);
        return this;
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected.SafeBrowsingStatus status = 1;</code>
       */
      public Builder clearStatus() {  copyOnWrite();
        instance.clearStatus();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "status_",
            };
            java.lang.String info =
                "\u0001\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u1009\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDetected)
    private static final org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected DEFAULT_INSTANCE;
    static {
      PasswordReuseDetected defaultInstance = new PasswordReuseDetected();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        PasswordReuseDetected.class, defaultInstance);
    }

    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PasswordReuseDetected> PARSER;

    public static com.google.protobuf.Parser<PasswordReuseDetected> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PasswordReuseLookupOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
     * @return Whether the lookupResult field is set.
     */
    boolean hasLookupResult();
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
     * @return The lookupResult.
     */
    org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult getLookupResult();

    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
     * @return Whether the verdict field is set.
     */
    boolean hasVerdict();
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
     * @return The verdict.
     */
    org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict getVerdict();

    /**
     * <pre>
     * PhishGuard token that identifies the verdict on the server.
     * </pre>
     *
     * <code>optional bytes verdict_token = 3;</code>
     * @return Whether the verdictToken field is set.
     */
    boolean hasVerdictToken();
    /**
     * <pre>
     * PhishGuard token that identifies the verdict on the server.
     * </pre>
     *
     * <code>optional bytes verdict_token = 3;</code>
     * @return The verdictToken.
     */
    com.google.protobuf.ByteString getVerdictToken();
  }
  /**
   * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordReuseLookup}
   */
  public  static final class PasswordReuseLookup extends
      com.google.protobuf.GeneratedMessageLite<
          PasswordReuseLookup, PasswordReuseLookup.Builder> implements
      // @@protoc_insertion_point(message_implements:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
      PasswordReuseLookupOrBuilder {
    private PasswordReuseLookup() {
      verdictToken_ = com.google.protobuf.ByteString.EMPTY;
    }
    /**
     * Protobuf enum {@code sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult}
     */
    public enum LookupResult
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNSPECIFIED = 0;</code>
       */
      UNSPECIFIED(0),
      /**
       * <pre>
       * URL did match the password reuse whitelist.
       * No further action required related to this re-use event.
       * </pre>
       *
       * <code>WHITELIST_HIT = 1;</code>
       */
      WHITELIST_HIT(1),
      /**
       * <pre>
       * The URL exists in the clientâ€™s cache.
       * No further action required related to this re-use event.
       * This event also logs the ReputationVerdict.
       * </pre>
       *
       * <code>CACHE_HIT = 2;</code>
       */
      CACHE_HIT(2),
      /**
       * <pre>
       * A valid response received from the SafeBrowsing service.
       * This event also logs the ReputationVerdict.
       * </pre>
       *
       * <code>REQUEST_SUCCESS = 3;</code>
       */
      REQUEST_SUCCESS(3),
      /**
       * <pre>
       * Unable to get a valid response from the SafeBrowsing service.
       * </pre>
       *
       * <code>REQUEST_FAILURE = 4;</code>
       */
      REQUEST_FAILURE(4),
      /**
       * <pre>
       * We won't be able to compute reputation for the URL e.g. local IP
       * address, localhost, not-yet-assigned by ICANN gTLD, etc.
       * </pre>
       *
       * <code>URL_UNSUPPORTED = 5;</code>
       */
      URL_UNSUPPORTED(5),
      /**
       * <pre>
       * URL did match enterprise whitelist.
       * No further action required related to this re-use event.
       * </pre>
       *
       * <code>ENTERPRISE_WHITELIST_HIT = 6;</code>
       */
      ENTERPRISE_WHITELIST_HIT(6),
      /**
       * <pre>
       * Password reuse lookup is turned off by enterprise policy.
       * No further action required related to this re-use event.
       * </pre>
       *
       * <code>TURNED_OFF_BY_POLICY = 7;</code>
       */
      TURNED_OFF_BY_POLICY(7),
      ;

      /**
       * <code>UNSPECIFIED = 0;</code>
       */
      public static final int UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * URL did match the password reuse whitelist.
       * No further action required related to this re-use event.
       * </pre>
       *
       * <code>WHITELIST_HIT = 1;</code>
       */
      public static final int WHITELIST_HIT_VALUE = 1;
      /**
       * <pre>
       * The URL exists in the clientâ€™s cache.
       * No further action required related to this re-use event.
       * This event also logs the ReputationVerdict.
       * </pre>
       *
       * <code>CACHE_HIT = 2;</code>
       */
      public static final int CACHE_HIT_VALUE = 2;
      /**
       * <pre>
       * A valid response received from the SafeBrowsing service.
       * This event also logs the ReputationVerdict.
       * </pre>
       *
       * <code>REQUEST_SUCCESS = 3;</code>
       */
      public static final int REQUEST_SUCCESS_VALUE = 3;
      /**
       * <pre>
       * Unable to get a valid response from the SafeBrowsing service.
       * </pre>
       *
       * <code>REQUEST_FAILURE = 4;</code>
       */
      public static final int REQUEST_FAILURE_VALUE = 4;
      /**
       * <pre>
       * We won't be able to compute reputation for the URL e.g. local IP
       * address, localhost, not-yet-assigned by ICANN gTLD, etc.
       * </pre>
       *
       * <code>URL_UNSUPPORTED = 5;</code>
       */
      public static final int URL_UNSUPPORTED_VALUE = 5;
      /**
       * <pre>
       * URL did match enterprise whitelist.
       * No further action required related to this re-use event.
       * </pre>
       *
       * <code>ENTERPRISE_WHITELIST_HIT = 6;</code>
       */
      public static final int ENTERPRISE_WHITELIST_HIT_VALUE = 6;
      /**
       * <pre>
       * Password reuse lookup is turned off by enterprise policy.
       * No further action required related to this re-use event.
       * </pre>
       *
       * <code>TURNED_OFF_BY_POLICY = 7;</code>
       */
      public static final int TURNED_OFF_BY_POLICY_VALUE = 7;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LookupResult valueOf(int value) {
        return forNumber(value);
      }

      public static LookupResult forNumber(int value) {
        switch (value) {
          case 0: return UNSPECIFIED;
          case 1: return WHITELIST_HIT;
          case 2: return CACHE_HIT;
          case 3: return REQUEST_SUCCESS;
          case 4: return REQUEST_FAILURE;
          case 5: return URL_UNSUPPORTED;
          case 6: return ENTERPRISE_WHITELIST_HIT;
          case 7: return TURNED_OFF_BY_POLICY;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LookupResult>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          LookupResult> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LookupResult>() {
              @java.lang.Override
              public LookupResult findValueByNumber(int number) {
                return LookupResult.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return LookupResultVerifier.INSTANCE;
      }

      private static final class LookupResultVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new LookupResultVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return LookupResult.forNumber(number) != null;
              }
            };

      private final int value;

      private LookupResult(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult)
    }

    /**
     * <pre>
     * The following two are only present for CACHE_HIT and REQUEST_SUCCESS.
     * The verdict received from the Reputation service. This is set only
     * if the user has SafeBrowsing enabled and we fetch the verdict from the
     * cache or by sending a verdict request.
     * </pre>
     *
     * Protobuf enum {@code sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict}
     */
    public enum ReputationVerdict
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>VERDICT_UNSPECIFIED = 0;</code>
       */
      VERDICT_UNSPECIFIED(0),
      /**
       * <code>SAFE = 1;</code>
       */
      SAFE(1),
      /**
       * <code>LOW_REPUTATION = 2;</code>
       */
      LOW_REPUTATION(2),
      /**
       * <code>PHISHING = 3;</code>
       */
      PHISHING(3),
      ;

      /**
       * <code>VERDICT_UNSPECIFIED = 0;</code>
       */
      public static final int VERDICT_UNSPECIFIED_VALUE = 0;
      /**
       * <code>SAFE = 1;</code>
       */
      public static final int SAFE_VALUE = 1;
      /**
       * <code>LOW_REPUTATION = 2;</code>
       */
      public static final int LOW_REPUTATION_VALUE = 2;
      /**
       * <code>PHISHING = 3;</code>
       */
      public static final int PHISHING_VALUE = 3;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ReputationVerdict valueOf(int value) {
        return forNumber(value);
      }

      public static ReputationVerdict forNumber(int value) {
        switch (value) {
          case 0: return VERDICT_UNSPECIFIED;
          case 1: return SAFE;
          case 2: return LOW_REPUTATION;
          case 3: return PHISHING;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ReputationVerdict>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ReputationVerdict> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ReputationVerdict>() {
              @java.lang.Override
              public ReputationVerdict findValueByNumber(int number) {
                return ReputationVerdict.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return ReputationVerdictVerifier.INSTANCE;
      }

      private static final class ReputationVerdictVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new ReputationVerdictVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return ReputationVerdict.forNumber(number) != null;
              }
            };

      private final int value;

      private ReputationVerdict(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict)
    }

    private int bitField0_;
    public static final int LOOKUP_RESULT_FIELD_NUMBER = 1;
    private int lookupResult_;
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
     * @return Whether the lookupResult field is set.
     */
    @java.lang.Override
    public boolean hasLookupResult() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
     * @return The lookupResult.
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult getLookupResult() {
      org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult result = org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult.forNumber(lookupResult_);
      return result == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult.UNSPECIFIED : result;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
     * @param value The lookupResult to set.
     */
    private void setLookupResult(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult value) {
      lookupResult_ = value.getNumber();
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
     */
    private void clearLookupResult() {
      bitField0_ = (bitField0_ & ~0x00000001);
      lookupResult_ = 0;
    }

    public static final int VERDICT_FIELD_NUMBER = 2;
    private int verdict_;
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
     * @return Whether the verdict field is set.
     */
    @java.lang.Override
    public boolean hasVerdict() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
     * @return The verdict.
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict getVerdict() {
      org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict result = org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict.forNumber(verdict_);
      return result == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict.VERDICT_UNSPECIFIED : result;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
     * @param value The verdict to set.
     */
    private void setVerdict(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict value) {
      verdict_ = value.getNumber();
      bitField0_ |= 0x00000002;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
     */
    private void clearVerdict() {
      bitField0_ = (bitField0_ & ~0x00000002);
      verdict_ = 0;
    }

    public static final int VERDICT_TOKEN_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString verdictToken_;
    /**
     * <pre>
     * PhishGuard token that identifies the verdict on the server.
     * </pre>
     *
     * <code>optional bytes verdict_token = 3;</code>
     * @return Whether the verdictToken field is set.
     */
    @java.lang.Override
    public boolean hasVerdictToken() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * PhishGuard token that identifies the verdict on the server.
     * </pre>
     *
     * <code>optional bytes verdict_token = 3;</code>
     * @return The verdictToken.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getVerdictToken() {
      return verdictToken_;
    }
    /**
     * <pre>
     * PhishGuard token that identifies the verdict on the server.
     * </pre>
     *
     * <code>optional bytes verdict_token = 3;</code>
     * @param value The verdictToken to set.
     */
    private void setVerdictToken(com.google.protobuf.ByteString value) {
      value.getClass();
  bitField0_ |= 0x00000004;
      verdictToken_ = value;
    }
    /**
     * <pre>
     * PhishGuard token that identifies the verdict on the server.
     * </pre>
     *
     * <code>optional bytes verdict_token = 3;</code>
     */
    private void clearVerdictToken() {
      bitField0_ = (bitField0_ & ~0x00000004);
      verdictToken_ = getDefaultInstance().getVerdictToken();
    }

    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordReuseLookup}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup, Builder> implements
        // @@protoc_insertion_point(builder_implements:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookupOrBuilder {
      // Construct using org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
       * @return Whether the lookupResult field is set.
       */
      @java.lang.Override
      public boolean hasLookupResult() {
        return instance.hasLookupResult();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
       * @return The lookupResult.
       */
      @java.lang.Override
      public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult getLookupResult() {
        return instance.getLookupResult();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
       * @param value The enum numeric value on the wire for lookupResult to set.
       * @return This builder for chaining.
       */
      public Builder setLookupResult(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult value) {
        copyOnWrite();
        instance.setLookupResult(value);
        return this;
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.LookupResult lookup_result = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearLookupResult() {
        copyOnWrite();
        instance.clearLookupResult();
        return this;
      }

      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
       * @return Whether the verdict field is set.
       */
      @java.lang.Override
      public boolean hasVerdict() {
        return instance.hasVerdict();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
       * @return The verdict.
       */
      @java.lang.Override
      public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict getVerdict() {
        return instance.getVerdict();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
       * @param value The enum numeric value on the wire for verdict to set.
       * @return This builder for chaining.
       */
      public Builder setVerdict(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict value) {
        copyOnWrite();
        instance.setVerdict(value);
        return this;
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict verdict = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearVerdict() {
        copyOnWrite();
        instance.clearVerdict();
        return this;
      }

      /**
       * <pre>
       * PhishGuard token that identifies the verdict on the server.
       * </pre>
       *
       * <code>optional bytes verdict_token = 3;</code>
       * @return Whether the verdictToken field is set.
       */
      @java.lang.Override
      public boolean hasVerdictToken() {
        return instance.hasVerdictToken();
      }
      /**
       * <pre>
       * PhishGuard token that identifies the verdict on the server.
       * </pre>
       *
       * <code>optional bytes verdict_token = 3;</code>
       * @return The verdictToken.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getVerdictToken() {
        return instance.getVerdictToken();
      }
      /**
       * <pre>
       * PhishGuard token that identifies the verdict on the server.
       * </pre>
       *
       * <code>optional bytes verdict_token = 3;</code>
       * @param value The verdictToken to set.
       * @return This builder for chaining.
       */
      public Builder setVerdictToken(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setVerdictToken(value);
        return this;
      }
      /**
       * <pre>
       * PhishGuard token that identifies the verdict on the server.
       * </pre>
       *
       * <code>optional bytes verdict_token = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearVerdictToken() {
        copyOnWrite();
        instance.clearVerdictToken();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "lookupResult_",
              org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.LookupResult.internalGetVerifier(),
              "verdict_",
              org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.ReputationVerdict.internalGetVerifier(),
              "verdictToken_",
            };
            java.lang.String info =
                "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u100c\u0000\u0002" +
                "\u100c\u0001\u0003\u100a\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse.PasswordReuseLookup)
    private static final org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup DEFAULT_INSTANCE;
    static {
      PasswordReuseLookup defaultInstance = new PasswordReuseLookup();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        PasswordReuseLookup.class, defaultInstance);
    }

    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PasswordReuseLookup> PARSER;

    public static com.google.protobuf.Parser<PasswordReuseLookup> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PasswordReuseDialogInteractionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
     * @return Whether the interactionResult field is set.
     */
    boolean hasInteractionResult();
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
     * @return The interactionResult.
     */
    org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult getInteractionResult();
  }
  /**
   * <pre>
   * Logged when the user interacts with the warning UI shown to encourage
   * password change if the site is Phishing or Low-reputation.
   * </pre>
   *
   * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction}
   */
  public  static final class PasswordReuseDialogInteraction extends
      com.google.protobuf.GeneratedMessageLite<
          PasswordReuseDialogInteraction, PasswordReuseDialogInteraction.Builder> implements
      // @@protoc_insertion_point(message_implements:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
      PasswordReuseDialogInteractionOrBuilder {
    private PasswordReuseDialogInteraction() {
    }
    /**
     * Protobuf enum {@code sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult}
     */
    public enum InteractionResult
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNSPECIFIED = 0;</code>
       */
      UNSPECIFIED(0),
      /**
       * <pre>
       * The user took the action suggested by the warning prompt.
       * </pre>
       *
       * <code>WARNING_ACTION_TAKEN = 1;</code>
       */
      WARNING_ACTION_TAKEN(1),
      /**
       * <pre>
       * The user clicked ignore in the warning prompt.
       * </pre>
       *
       * <code>WARNING_ACTION_IGNORED = 2;</code>
       */
      WARNING_ACTION_IGNORED(2),
      /**
       * <pre>
       * The warning UI was ignored, i.e. not interacted with by the user.
       * This could happen if the user navigates away from the page.
       * </pre>
       *
       * <code>WARNING_UI_IGNORED = 3;</code>
       */
      WARNING_UI_IGNORED(3),
      /**
       * <pre>
       * The user clicked "Change Password" on chrome://settings page.
       * </pre>
       *
       * <code>WARNING_ACTION_TAKEN_ON_SETTINGS = 4;</code>
       */
      WARNING_ACTION_TAKEN_ON_SETTINGS(4),
      ;

      /**
       * <code>UNSPECIFIED = 0;</code>
       */
      public static final int UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * The user took the action suggested by the warning prompt.
       * </pre>
       *
       * <code>WARNING_ACTION_TAKEN = 1;</code>
       */
      public static final int WARNING_ACTION_TAKEN_VALUE = 1;
      /**
       * <pre>
       * The user clicked ignore in the warning prompt.
       * </pre>
       *
       * <code>WARNING_ACTION_IGNORED = 2;</code>
       */
      public static final int WARNING_ACTION_IGNORED_VALUE = 2;
      /**
       * <pre>
       * The warning UI was ignored, i.e. not interacted with by the user.
       * This could happen if the user navigates away from the page.
       * </pre>
       *
       * <code>WARNING_UI_IGNORED = 3;</code>
       */
      public static final int WARNING_UI_IGNORED_VALUE = 3;
      /**
       * <pre>
       * The user clicked "Change Password" on chrome://settings page.
       * </pre>
       *
       * <code>WARNING_ACTION_TAKEN_ON_SETTINGS = 4;</code>
       */
      public static final int WARNING_ACTION_TAKEN_ON_SETTINGS_VALUE = 4;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static InteractionResult valueOf(int value) {
        return forNumber(value);
      }

      public static InteractionResult forNumber(int value) {
        switch (value) {
          case 0: return UNSPECIFIED;
          case 1: return WARNING_ACTION_TAKEN;
          case 2: return WARNING_ACTION_IGNORED;
          case 3: return WARNING_UI_IGNORED;
          case 4: return WARNING_ACTION_TAKEN_ON_SETTINGS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<InteractionResult>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          InteractionResult> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<InteractionResult>() {
              @java.lang.Override
              public InteractionResult findValueByNumber(int number) {
                return InteractionResult.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return InteractionResultVerifier.INSTANCE;
      }

      private static final class InteractionResultVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new InteractionResultVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return InteractionResult.forNumber(number) != null;
              }
            };

      private final int value;

      private InteractionResult(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult)
    }

    private int bitField0_;
    public static final int INTERACTION_RESULT_FIELD_NUMBER = 1;
    private int interactionResult_;
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
     * @return Whether the interactionResult field is set.
     */
    @java.lang.Override
    public boolean hasInteractionResult() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
     * @return The interactionResult.
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult getInteractionResult() {
      org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult result = org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult.forNumber(interactionResult_);
      return result == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult.UNSPECIFIED : result;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
     * @param value The interactionResult to set.
     */
    private void setInteractionResult(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult value) {
      interactionResult_ = value.getNumber();
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
     */
    private void clearInteractionResult() {
      bitField0_ = (bitField0_ & ~0x00000001);
      interactionResult_ = 0;
    }

    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Logged when the user interacts with the warning UI shown to encourage
     * password change if the site is Phishing or Low-reputation.
     * </pre>
     *
     * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction, Builder> implements
        // @@protoc_insertion_point(builder_implements:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteractionOrBuilder {
      // Construct using org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
       * @return Whether the interactionResult field is set.
       */
      @java.lang.Override
      public boolean hasInteractionResult() {
        return instance.hasInteractionResult();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
       * @return The interactionResult.
       */
      @java.lang.Override
      public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult getInteractionResult() {
        return instance.getInteractionResult();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
       * @param value The enum numeric value on the wire for interactionResult to set.
       * @return This builder for chaining.
       */
      public Builder setInteractionResult(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult value) {
        copyOnWrite();
        instance.setInteractionResult(value);
        return this;
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult interaction_result = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearInteractionResult() {
        copyOnWrite();
        instance.clearInteractionResult();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "interactionResult_",
              org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.InteractionResult.internalGetVerifier(),
            };
            java.lang.String info =
                "\u0001\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u100c\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction)
    private static final org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction DEFAULT_INSTANCE;
    static {
      PasswordReuseDialogInteraction defaultInstance = new PasswordReuseDialogInteraction();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        PasswordReuseDialogInteraction.class, defaultInstance);
    }

    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PasswordReuseDialogInteraction> PARSER;

    public static com.google.protobuf.Parser<PasswordReuseDialogInteraction> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PasswordCapturedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sync_pb.GaiaPasswordReuse.PasswordCaptured)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
     * @return Whether the eventTrigger field is set.
     */
    boolean hasEventTrigger();
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
     * @return The eventTrigger.
     */
    org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger getEventTrigger();
  }
  /**
   * <pre>
   * TODO(markusheintz): Remove
   * DEPRECATED: DO NOT USE!
   * Logged when the user logs into Google, and at least once per 28d.
   * </pre>
   *
   * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordCaptured}
   */
  public  static final class PasswordCaptured extends
      com.google.protobuf.GeneratedMessageLite<
          PasswordCaptured, PasswordCaptured.Builder> implements
      // @@protoc_insertion_point(message_implements:sync_pb.GaiaPasswordReuse.PasswordCaptured)
      PasswordCapturedOrBuilder {
    private PasswordCaptured() {
    }
    /**
     * Protobuf enum {@code sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger}
     */
    public enum EventTrigger
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNSPECIFIED = 0;</code>
       */
      UNSPECIFIED(0),
      /**
       * <pre>
       * Event added because user logged in.
       * </pre>
       *
       * <code>USER_LOGGED_IN = 1;</code>
       */
      USER_LOGGED_IN(1),
      /**
       * <pre>
       * Event added because 28d timer fired.
       * </pre>
       *
       * <code>EXPIRED_28D_TIMER = 2;</code>
       */
      EXPIRED_28D_TIMER(2),
      ;

      /**
       * <code>UNSPECIFIED = 0;</code>
       */
      public static final int UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * Event added because user logged in.
       * </pre>
       *
       * <code>USER_LOGGED_IN = 1;</code>
       */
      public static final int USER_LOGGED_IN_VALUE = 1;
      /**
       * <pre>
       * Event added because 28d timer fired.
       * </pre>
       *
       * <code>EXPIRED_28D_TIMER = 2;</code>
       */
      public static final int EXPIRED_28D_TIMER_VALUE = 2;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static EventTrigger valueOf(int value) {
        return forNumber(value);
      }

      public static EventTrigger forNumber(int value) {
        switch (value) {
          case 0: return UNSPECIFIED;
          case 1: return USER_LOGGED_IN;
          case 2: return EXPIRED_28D_TIMER;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<EventTrigger>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          EventTrigger> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<EventTrigger>() {
              @java.lang.Override
              public EventTrigger findValueByNumber(int number) {
                return EventTrigger.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return EventTriggerVerifier.INSTANCE;
      }

      private static final class EventTriggerVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new EventTriggerVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return EventTrigger.forNumber(number) != null;
              }
            };

      private final int value;

      private EventTrigger(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger)
    }

    private int bitField0_;
    public static final int EVENT_TRIGGER_FIELD_NUMBER = 1;
    private int eventTrigger_;
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
     * @return Whether the eventTrigger field is set.
     */
    @java.lang.Override
    public boolean hasEventTrigger() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
     * @return The eventTrigger.
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger getEventTrigger() {
      org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger result = org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger.forNumber(eventTrigger_);
      return result == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger.UNSPECIFIED : result;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
     * @param value The eventTrigger to set.
     */
    private void setEventTrigger(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger value) {
      eventTrigger_ = value.getNumber();
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
     */
    private void clearEventTrigger() {
      bitField0_ = (bitField0_ & ~0x00000001);
      eventTrigger_ = 0;
    }

    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * TODO(markusheintz): Remove
     * DEPRECATED: DO NOT USE!
     * Logged when the user logs into Google, and at least once per 28d.
     * </pre>
     *
     * Protobuf type {@code sync_pb.GaiaPasswordReuse.PasswordCaptured}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured, Builder> implements
        // @@protoc_insertion_point(builder_implements:sync_pb.GaiaPasswordReuse.PasswordCaptured)
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCapturedOrBuilder {
      // Construct using org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
       * @return Whether the eventTrigger field is set.
       */
      @java.lang.Override
      public boolean hasEventTrigger() {
        return instance.hasEventTrigger();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
       * @return The eventTrigger.
       */
      @java.lang.Override
      public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger getEventTrigger() {
        return instance.getEventTrigger();
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
       * @param value The enum numeric value on the wire for eventTrigger to set.
       * @return This builder for chaining.
       */
      public Builder setEventTrigger(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger value) {
        copyOnWrite();
        instance.setEventTrigger(value);
        return this;
      }
      /**
       * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured.EventTrigger event_trigger = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearEventTrigger() {
        copyOnWrite();
        instance.clearEventTrigger();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:sync_pb.GaiaPasswordReuse.PasswordCaptured)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "eventTrigger_",
              org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.EventTrigger.internalGetVerifier(),
            };
            java.lang.String info =
                "\u0001\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u100c\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse.PasswordCaptured)
    private static final org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured DEFAULT_INSTANCE;
    static {
      PasswordCaptured defaultInstance = new PasswordCaptured();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        PasswordCaptured.class, defaultInstance);
    }

    public static org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PasswordCaptured> PARSER;

    public static com.google.protobuf.Parser<PasswordCaptured> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  public static final int REUSE_DETECTED_FIELD_NUMBER = 1;
  private org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected reuseDetected_;
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
   */
  @java.lang.Override
  public boolean hasReuseDetected() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected getReuseDetected() {
    return reuseDetected_ == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.getDefaultInstance() : reuseDetected_;
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
   */
  private void setReuseDetected(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected value) {
    value.getClass();
  reuseDetected_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeReuseDetected(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected value) {
    value.getClass();
  if (reuseDetected_ != null &&
        reuseDetected_ != org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.getDefaultInstance()) {
      reuseDetected_ =
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.newBuilder(reuseDetected_).mergeFrom(value).buildPartial();
    } else {
      reuseDetected_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
   */
  private void clearReuseDetected() {  reuseDetected_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int REUSE_LOOKUP_FIELD_NUMBER = 2;
  private org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup reuseLookup_;
  /**
   * <pre>
   * Logged when we try to detect whether the password was reused on a
   * Phishing or a Low-reputation site.
   * </pre>
   *
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
   */
  @java.lang.Override
  public boolean hasReuseLookup() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Logged when we try to detect whether the password was reused on a
   * Phishing or a Low-reputation site.
   * </pre>
   *
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup getReuseLookup() {
    return reuseLookup_ == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.getDefaultInstance() : reuseLookup_;
  }
  /**
   * <pre>
   * Logged when we try to detect whether the password was reused on a
   * Phishing or a Low-reputation site.
   * </pre>
   *
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
   */
  private void setReuseLookup(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup value) {
    value.getClass();
  reuseLookup_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <pre>
   * Logged when we try to detect whether the password was reused on a
   * Phishing or a Low-reputation site.
   * </pre>
   *
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeReuseLookup(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup value) {
    value.getClass();
  if (reuseLookup_ != null &&
        reuseLookup_ != org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.getDefaultInstance()) {
      reuseLookup_ =
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.newBuilder(reuseLookup_).mergeFrom(value).buildPartial();
    } else {
      reuseLookup_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * Logged when we try to detect whether the password was reused on a
   * Phishing or a Low-reputation site.
   * </pre>
   *
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
   */
  private void clearReuseLookup() {  reuseLookup_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int DIALOG_INTERACTION_FIELD_NUMBER = 3;
  private org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction dialogInteraction_;
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
   */
  @java.lang.Override
  public boolean hasDialogInteraction() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction getDialogInteraction() {
    return dialogInteraction_ == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.getDefaultInstance() : dialogInteraction_;
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
   */
  private void setDialogInteraction(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction value) {
    value.getClass();
  dialogInteraction_ = value;
    bitField0_ |= 0x00000004;
    }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeDialogInteraction(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction value) {
    value.getClass();
  if (dialogInteraction_ != null &&
        dialogInteraction_ != org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.getDefaultInstance()) {
      dialogInteraction_ =
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.newBuilder(dialogInteraction_).mergeFrom(value).buildPartial();
    } else {
      dialogInteraction_ = value;
    }
    bitField0_ |= 0x00000004;
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
   */
  private void clearDialogInteraction() {  dialogInteraction_ = null;
    bitField0_ = (bitField0_ & ~0x00000004);
  }

  public static final int PASSWORD_CAPTURED_FIELD_NUMBER = 4;
  private org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured passwordCaptured_;
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean hasPasswordCaptured() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured getPasswordCaptured() {
    return passwordCaptured_ == null ? org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.getDefaultInstance() : passwordCaptured_;
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4 [deprecated = true];</code>
   */
  private void setPasswordCaptured(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured value) {
    value.getClass();
  passwordCaptured_ = value;
    bitField0_ |= 0x00000008;
    }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4 [deprecated = true];</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergePasswordCaptured(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured value) {
    value.getClass();
  if (passwordCaptured_ != null &&
        passwordCaptured_ != org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.getDefaultInstance()) {
      passwordCaptured_ =
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.newBuilder(passwordCaptured_).mergeFrom(value).buildPartial();
    } else {
      passwordCaptured_ = value;
    }
    bitField0_ |= 0x00000008;
  }
  /**
   * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4 [deprecated = true];</code>
   */
  private void clearPasswordCaptured() {  passwordCaptured_ = null;
    bitField0_ = (bitField0_ & ~0x00000008);
  }

  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.GaiaPasswordReuse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.GaiaPasswordReuse prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * User reused their GAIA password on another website.
   * </pre>
   *
   * Protobuf type {@code sync_pb.GaiaPasswordReuse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.GaiaPasswordReuse, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.GaiaPasswordReuse)
      org.chromium.components.sync.protocol.GaiaPasswordReuseOrBuilder {
    // Construct using org.chromium.components.sync.protocol.GaiaPasswordReuse.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
     */
    @java.lang.Override
    public boolean hasReuseDetected() {
      return instance.hasReuseDetected();
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected getReuseDetected() {
      return instance.getReuseDetected();
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
     */
    public Builder setReuseDetected(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected value) {
      copyOnWrite();
      instance.setReuseDetected(value);
      return this;
      }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
     */
    public Builder setReuseDetected(
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected.Builder builderForValue) {
      copyOnWrite();
      instance.setReuseDetected(builderForValue.build());
      return this;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
     */
    public Builder mergeReuseDetected(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDetected value) {
      copyOnWrite();
      instance.mergeReuseDetected(value);
      return this;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDetected reuse_detected = 1;</code>
     */
    public Builder clearReuseDetected() {  copyOnWrite();
      instance.clearReuseDetected();
      return this;
    }

    /**
     * <pre>
     * Logged when we try to detect whether the password was reused on a
     * Phishing or a Low-reputation site.
     * </pre>
     *
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
     */
    @java.lang.Override
    public boolean hasReuseLookup() {
      return instance.hasReuseLookup();
    }
    /**
     * <pre>
     * Logged when we try to detect whether the password was reused on a
     * Phishing or a Low-reputation site.
     * </pre>
     *
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup getReuseLookup() {
      return instance.getReuseLookup();
    }
    /**
     * <pre>
     * Logged when we try to detect whether the password was reused on a
     * Phishing or a Low-reputation site.
     * </pre>
     *
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
     */
    public Builder setReuseLookup(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup value) {
      copyOnWrite();
      instance.setReuseLookup(value);
      return this;
      }
    /**
     * <pre>
     * Logged when we try to detect whether the password was reused on a
     * Phishing or a Low-reputation site.
     * </pre>
     *
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
     */
    public Builder setReuseLookup(
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup.Builder builderForValue) {
      copyOnWrite();
      instance.setReuseLookup(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Logged when we try to detect whether the password was reused on a
     * Phishing or a Low-reputation site.
     * </pre>
     *
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
     */
    public Builder mergeReuseLookup(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseLookup value) {
      copyOnWrite();
      instance.mergeReuseLookup(value);
      return this;
    }
    /**
     * <pre>
     * Logged when we try to detect whether the password was reused on a
     * Phishing or a Low-reputation site.
     * </pre>
     *
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseLookup reuse_lookup = 2;</code>
     */
    public Builder clearReuseLookup() {  copyOnWrite();
      instance.clearReuseLookup();
      return this;
    }

    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
     */
    @java.lang.Override
    public boolean hasDialogInteraction() {
      return instance.hasDialogInteraction();
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction getDialogInteraction() {
      return instance.getDialogInteraction();
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
     */
    public Builder setDialogInteraction(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction value) {
      copyOnWrite();
      instance.setDialogInteraction(value);
      return this;
      }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
     */
    public Builder setDialogInteraction(
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction.Builder builderForValue) {
      copyOnWrite();
      instance.setDialogInteraction(builderForValue.build());
      return this;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
     */
    public Builder mergeDialogInteraction(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordReuseDialogInteraction value) {
      copyOnWrite();
      instance.mergeDialogInteraction(value);
      return this;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordReuseDialogInteraction dialog_interaction = 3;</code>
     */
    public Builder clearDialogInteraction() {  copyOnWrite();
      instance.clearDialogInteraction();
      return this;
    }

    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasPasswordCaptured() {
      return instance.hasPasswordCaptured();
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured getPasswordCaptured() {
      return instance.getPasswordCaptured();
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setPasswordCaptured(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured value) {
      copyOnWrite();
      instance.setPasswordCaptured(value);
      return this;
      }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setPasswordCaptured(
        org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured.Builder builderForValue) {
      copyOnWrite();
      instance.setPasswordCaptured(builderForValue.build());
      return this;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder mergePasswordCaptured(org.chromium.components.sync.protocol.GaiaPasswordReuse.PasswordCaptured value) {
      copyOnWrite();
      instance.mergePasswordCaptured(value);
      return this;
    }
    /**
     * <code>optional .sync_pb.GaiaPasswordReuse.PasswordCaptured password_captured = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearPasswordCaptured() {  copyOnWrite();
      instance.clearPasswordCaptured();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.GaiaPasswordReuse)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.GaiaPasswordReuse();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "reuseDetected_",
            "reuseLookup_",
            "dialogInteraction_",
            "passwordCaptured_",
          };
          java.lang.String info =
              "\u0001\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
              "\u1009\u0001\u0003\u1009\u0002\u0004\u1009\u0003";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.components.sync.protocol.GaiaPasswordReuse> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.components.sync.protocol.GaiaPasswordReuse.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.GaiaPasswordReuse>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.GaiaPasswordReuse)
  private static final org.chromium.components.sync.protocol.GaiaPasswordReuse DEFAULT_INSTANCE;
  static {
    GaiaPasswordReuse defaultInstance = new GaiaPasswordReuse();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      GaiaPasswordReuse.class, defaultInstance);
  }

  public static org.chromium.components.sync.protocol.GaiaPasswordReuse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<GaiaPasswordReuse> PARSER;

  public static com.google.protobuf.Parser<GaiaPasswordReuse> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

