// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/password_specifics.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * Properties of password sync objects.
 * </pre>
 *
 * Protobuf type {@code sync_pb.PasswordSpecifics}
 */
public  final class PasswordSpecifics extends
    com.google.protobuf.GeneratedMessageLite<
        PasswordSpecifics, PasswordSpecifics.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.PasswordSpecifics)
    PasswordSpecificsOrBuilder {
  private PasswordSpecifics() {
  }
  private int bitField0_;
  public static final int ENCRYPTED_FIELD_NUMBER = 1;
  private org.chromium.components.sync.protocol.EncryptedData encrypted_;
  /**
   * <pre>
   * The actual password data. Contains an encrypted PasswordSpecificsData
   * message.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData encrypted = 1;</code>
   */
  @java.lang.Override
  public boolean hasEncrypted() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The actual password data. Contains an encrypted PasswordSpecificsData
   * message.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData encrypted = 1;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.EncryptedData getEncrypted() {
    return encrypted_ == null ? org.chromium.components.sync.protocol.EncryptedData.getDefaultInstance() : encrypted_;
  }
  /**
   * <pre>
   * The actual password data. Contains an encrypted PasswordSpecificsData
   * message.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData encrypted = 1;</code>
   */
  private void setEncrypted(org.chromium.components.sync.protocol.EncryptedData value) {
    value.getClass();
  encrypted_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * The actual password data. Contains an encrypted PasswordSpecificsData
   * message.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData encrypted = 1;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeEncrypted(org.chromium.components.sync.protocol.EncryptedData value) {
    value.getClass();
  if (encrypted_ != null &&
        encrypted_ != org.chromium.components.sync.protocol.EncryptedData.getDefaultInstance()) {
      encrypted_ =
        org.chromium.components.sync.protocol.EncryptedData.newBuilder(encrypted_).mergeFrom(value).buildPartial();
    } else {
      encrypted_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * The actual password data. Contains an encrypted PasswordSpecificsData
   * message.
   * </pre>
   *
   * <code>optional .sync_pb.EncryptedData encrypted = 1;</code>
   */
  private void clearEncrypted() {  encrypted_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int CLIENT_ONLY_ENCRYPTED_DATA_FIELD_NUMBER = 2;
  private org.chromium.components.sync.protocol.PasswordSpecificsData clientOnlyEncryptedData_;
  /**
   * <pre>
   * An unsynced field for use internally on the client. This field should
   * never be set in any network-based communications because it contains
   * unencrypted material.
   * </pre>
   *
   * <code>optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;</code>
   */
  @java.lang.Override
  public boolean hasClientOnlyEncryptedData() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * An unsynced field for use internally on the client. This field should
   * never be set in any network-based communications because it contains
   * unencrypted material.
   * </pre>
   *
   * <code>optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.PasswordSpecificsData getClientOnlyEncryptedData() {
    return clientOnlyEncryptedData_ == null ? org.chromium.components.sync.protocol.PasswordSpecificsData.getDefaultInstance() : clientOnlyEncryptedData_;
  }
  /**
   * <pre>
   * An unsynced field for use internally on the client. This field should
   * never be set in any network-based communications because it contains
   * unencrypted material.
   * </pre>
   *
   * <code>optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;</code>
   */
  private void setClientOnlyEncryptedData(org.chromium.components.sync.protocol.PasswordSpecificsData value) {
    value.getClass();
  clientOnlyEncryptedData_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <pre>
   * An unsynced field for use internally on the client. This field should
   * never be set in any network-based communications because it contains
   * unencrypted material.
   * </pre>
   *
   * <code>optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeClientOnlyEncryptedData(org.chromium.components.sync.protocol.PasswordSpecificsData value) {
    value.getClass();
  if (clientOnlyEncryptedData_ != null &&
        clientOnlyEncryptedData_ != org.chromium.components.sync.protocol.PasswordSpecificsData.getDefaultInstance()) {
      clientOnlyEncryptedData_ =
        org.chromium.components.sync.protocol.PasswordSpecificsData.newBuilder(clientOnlyEncryptedData_).mergeFrom(value).buildPartial();
    } else {
      clientOnlyEncryptedData_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * An unsynced field for use internally on the client. This field should
   * never be set in any network-based communications because it contains
   * unencrypted material.
   * </pre>
   *
   * <code>optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;</code>
   */
  private void clearClientOnlyEncryptedData() {  clientOnlyEncryptedData_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int UNENCRYPTED_METADATA_FIELD_NUMBER = 3;
  private org.chromium.components.sync.protocol.PasswordSpecificsMetadata unencryptedMetadata_;
  /**
   * <pre>
   * Password related metadata, which is sent to the server side. The field
   * should never be set for full encryption users. If encryption is enabled,
   * this field must be cleared.
   * </pre>
   *
   * <code>optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;</code>
   */
  @java.lang.Override
  public boolean hasUnencryptedMetadata() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Password related metadata, which is sent to the server side. The field
   * should never be set for full encryption users. If encryption is enabled,
   * this field must be cleared.
   * </pre>
   *
   * <code>optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;</code>
   */
  @java.lang.Override
  public org.chromium.components.sync.protocol.PasswordSpecificsMetadata getUnencryptedMetadata() {
    return unencryptedMetadata_ == null ? org.chromium.components.sync.protocol.PasswordSpecificsMetadata.getDefaultInstance() : unencryptedMetadata_;
  }
  /**
   * <pre>
   * Password related metadata, which is sent to the server side. The field
   * should never be set for full encryption users. If encryption is enabled,
   * this field must be cleared.
   * </pre>
   *
   * <code>optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;</code>
   */
  private void setUnencryptedMetadata(org.chromium.components.sync.protocol.PasswordSpecificsMetadata value) {
    value.getClass();
  unencryptedMetadata_ = value;
    bitField0_ |= 0x00000004;
    }
  /**
   * <pre>
   * Password related metadata, which is sent to the server side. The field
   * should never be set for full encryption users. If encryption is enabled,
   * this field must be cleared.
   * </pre>
   *
   * <code>optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeUnencryptedMetadata(org.chromium.components.sync.protocol.PasswordSpecificsMetadata value) {
    value.getClass();
  if (unencryptedMetadata_ != null &&
        unencryptedMetadata_ != org.chromium.components.sync.protocol.PasswordSpecificsMetadata.getDefaultInstance()) {
      unencryptedMetadata_ =
        org.chromium.components.sync.protocol.PasswordSpecificsMetadata.newBuilder(unencryptedMetadata_).mergeFrom(value).buildPartial();
    } else {
      unencryptedMetadata_ = value;
    }
    bitField0_ |= 0x00000004;
  }
  /**
   * <pre>
   * Password related metadata, which is sent to the server side. The field
   * should never be set for full encryption users. If encryption is enabled,
   * this field must be cleared.
   * </pre>
   *
   * <code>optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;</code>
   */
  private void clearUnencryptedMetadata() {  unencryptedMetadata_ = null;
    bitField0_ = (bitField0_ & ~0x00000004);
  }

  public static org.chromium.components.sync.protocol.PasswordSpecifics parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecifics parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecifics parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecifics parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecifics parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecifics parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecifics parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecifics parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecifics parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecifics parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecifics parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.PasswordSpecifics parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.PasswordSpecifics prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Properties of password sync objects.
   * </pre>
   *
   * Protobuf type {@code sync_pb.PasswordSpecifics}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.PasswordSpecifics, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.PasswordSpecifics)
      org.chromium.components.sync.protocol.PasswordSpecificsOrBuilder {
    // Construct using org.chromium.components.sync.protocol.PasswordSpecifics.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The actual password data. Contains an encrypted PasswordSpecificsData
     * message.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData encrypted = 1;</code>
     */
    @java.lang.Override
    public boolean hasEncrypted() {
      return instance.hasEncrypted();
    }
    /**
     * <pre>
     * The actual password data. Contains an encrypted PasswordSpecificsData
     * message.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData encrypted = 1;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.EncryptedData getEncrypted() {
      return instance.getEncrypted();
    }
    /**
     * <pre>
     * The actual password data. Contains an encrypted PasswordSpecificsData
     * message.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData encrypted = 1;</code>
     */
    public Builder setEncrypted(org.chromium.components.sync.protocol.EncryptedData value) {
      copyOnWrite();
      instance.setEncrypted(value);
      return this;
      }
    /**
     * <pre>
     * The actual password data. Contains an encrypted PasswordSpecificsData
     * message.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData encrypted = 1;</code>
     */
    public Builder setEncrypted(
        org.chromium.components.sync.protocol.EncryptedData.Builder builderForValue) {
      copyOnWrite();
      instance.setEncrypted(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The actual password data. Contains an encrypted PasswordSpecificsData
     * message.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData encrypted = 1;</code>
     */
    public Builder mergeEncrypted(org.chromium.components.sync.protocol.EncryptedData value) {
      copyOnWrite();
      instance.mergeEncrypted(value);
      return this;
    }
    /**
     * <pre>
     * The actual password data. Contains an encrypted PasswordSpecificsData
     * message.
     * </pre>
     *
     * <code>optional .sync_pb.EncryptedData encrypted = 1;</code>
     */
    public Builder clearEncrypted() {  copyOnWrite();
      instance.clearEncrypted();
      return this;
    }

    /**
     * <pre>
     * An unsynced field for use internally on the client. This field should
     * never be set in any network-based communications because it contains
     * unencrypted material.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;</code>
     */
    @java.lang.Override
    public boolean hasClientOnlyEncryptedData() {
      return instance.hasClientOnlyEncryptedData();
    }
    /**
     * <pre>
     * An unsynced field for use internally on the client. This field should
     * never be set in any network-based communications because it contains
     * unencrypted material.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.PasswordSpecificsData getClientOnlyEncryptedData() {
      return instance.getClientOnlyEncryptedData();
    }
    /**
     * <pre>
     * An unsynced field for use internally on the client. This field should
     * never be set in any network-based communications because it contains
     * unencrypted material.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;</code>
     */
    public Builder setClientOnlyEncryptedData(org.chromium.components.sync.protocol.PasswordSpecificsData value) {
      copyOnWrite();
      instance.setClientOnlyEncryptedData(value);
      return this;
      }
    /**
     * <pre>
     * An unsynced field for use internally on the client. This field should
     * never be set in any network-based communications because it contains
     * unencrypted material.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;</code>
     */
    public Builder setClientOnlyEncryptedData(
        org.chromium.components.sync.protocol.PasswordSpecificsData.Builder builderForValue) {
      copyOnWrite();
      instance.setClientOnlyEncryptedData(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * An unsynced field for use internally on the client. This field should
     * never be set in any network-based communications because it contains
     * unencrypted material.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;</code>
     */
    public Builder mergeClientOnlyEncryptedData(org.chromium.components.sync.protocol.PasswordSpecificsData value) {
      copyOnWrite();
      instance.mergeClientOnlyEncryptedData(value);
      return this;
    }
    /**
     * <pre>
     * An unsynced field for use internally on the client. This field should
     * never be set in any network-based communications because it contains
     * unencrypted material.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsData client_only_encrypted_data = 2;</code>
     */
    public Builder clearClientOnlyEncryptedData() {  copyOnWrite();
      instance.clearClientOnlyEncryptedData();
      return this;
    }

    /**
     * <pre>
     * Password related metadata, which is sent to the server side. The field
     * should never be set for full encryption users. If encryption is enabled,
     * this field must be cleared.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;</code>
     */
    @java.lang.Override
    public boolean hasUnencryptedMetadata() {
      return instance.hasUnencryptedMetadata();
    }
    /**
     * <pre>
     * Password related metadata, which is sent to the server side. The field
     * should never be set for full encryption users. If encryption is enabled,
     * this field must be cleared.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;</code>
     */
    @java.lang.Override
    public org.chromium.components.sync.protocol.PasswordSpecificsMetadata getUnencryptedMetadata() {
      return instance.getUnencryptedMetadata();
    }
    /**
     * <pre>
     * Password related metadata, which is sent to the server side. The field
     * should never be set for full encryption users. If encryption is enabled,
     * this field must be cleared.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;</code>
     */
    public Builder setUnencryptedMetadata(org.chromium.components.sync.protocol.PasswordSpecificsMetadata value) {
      copyOnWrite();
      instance.setUnencryptedMetadata(value);
      return this;
      }
    /**
     * <pre>
     * Password related metadata, which is sent to the server side. The field
     * should never be set for full encryption users. If encryption is enabled,
     * this field must be cleared.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;</code>
     */
    public Builder setUnencryptedMetadata(
        org.chromium.components.sync.protocol.PasswordSpecificsMetadata.Builder builderForValue) {
      copyOnWrite();
      instance.setUnencryptedMetadata(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Password related metadata, which is sent to the server side. The field
     * should never be set for full encryption users. If encryption is enabled,
     * this field must be cleared.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;</code>
     */
    public Builder mergeUnencryptedMetadata(org.chromium.components.sync.protocol.PasswordSpecificsMetadata value) {
      copyOnWrite();
      instance.mergeUnencryptedMetadata(value);
      return this;
    }
    /**
     * <pre>
     * Password related metadata, which is sent to the server side. The field
     * should never be set for full encryption users. If encryption is enabled,
     * this field must be cleared.
     * </pre>
     *
     * <code>optional .sync_pb.PasswordSpecificsMetadata unencrypted_metadata = 3;</code>
     */
    public Builder clearUnencryptedMetadata() {  copyOnWrite();
      instance.clearUnencryptedMetadata();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.PasswordSpecifics)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.PasswordSpecifics();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "bitField0_",
            "encrypted_",
            "clientOnlyEncryptedData_",
            "unencryptedMetadata_",
          };
          java.lang.String info =
              "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
              "\u1009\u0001\u0003\u1009\u0002";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<org.chromium.components.sync.protocol.PasswordSpecifics> parser = PARSER;
        if (parser == null) {
          synchronized (org.chromium.components.sync.protocol.PasswordSpecifics.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<org.chromium.components.sync.protocol.PasswordSpecifics>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.PasswordSpecifics)
  private static final org.chromium.components.sync.protocol.PasswordSpecifics DEFAULT_INSTANCE;
  static {
    PasswordSpecifics defaultInstance = new PasswordSpecifics();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      PasswordSpecifics.class, defaultInstance);
  }

  public static org.chromium.components.sync.protocol.PasswordSpecifics getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<PasswordSpecifics> PARSER;

  public static com.google.protobuf.Parser<PasswordSpecifics> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

