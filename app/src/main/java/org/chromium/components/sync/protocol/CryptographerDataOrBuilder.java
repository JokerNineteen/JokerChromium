// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/nigori_local_data.proto

package org.chromium.components.sync.protocol;

public interface CryptographerDataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sync_pb.CryptographerData)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * Contains all known Nigori keys.
   * </pre>
   *
   * <code>optional .sync_pb.NigoriKeyBag key_bag = 1;</code>
   * @return Whether the keyBag field is set.
   */
  boolean hasKeyBag();
  /**
   * <pre>
   * Contains all known Nigori keys.
   * </pre>
   *
   * <code>optional .sync_pb.NigoriKeyBag key_bag = 1;</code>
   * @return The keyBag.
   */
  org.chromium.components.sync.protocol.NigoriKeyBag getKeyBag();

  /**
   * <pre>
   * Default key is the key, that should be used for encryption. Can be empty
   * in case we have pending keys (waiting for explicit passphrase, or client
   * didn't received keystore keys).
   * </pre>
   *
   * <code>optional string default_key_name = 2;</code>
   * @return Whether the defaultKeyName field is set.
   */
  boolean hasDefaultKeyName();
  /**
   * <pre>
   * Default key is the key, that should be used for encryption. Can be empty
   * in case we have pending keys (waiting for explicit passphrase, or client
   * didn't received keystore keys).
   * </pre>
   *
   * <code>optional string default_key_name = 2;</code>
   * @return The defaultKeyName.
   */
  java.lang.String getDefaultKeyName();
  /**
   * <pre>
   * Default key is the key, that should be used for encryption. Can be empty
   * in case we have pending keys (waiting for explicit passphrase, or client
   * didn't received keystore keys).
   * </pre>
   *
   * <code>optional string default_key_name = 2;</code>
   * @return The bytes for defaultKeyName.
   */
  com.google.protobuf.ByteString
      getDefaultKeyNameBytes();
}
