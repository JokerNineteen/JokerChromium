// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perf_stat.proto

package org.chromium.components.metrics;

public final class PerfStat {
  private PerfStat() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface PerfStatProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:metrics.PerfStatProto)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * All lines printed by "perf stat".
     * </pre>
     *
     * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
     */
    java.util.List<org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine> 
        getLineList();
    /**
     * <pre>
     * All lines printed by "perf stat".
     * </pre>
     *
     * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
     */
    org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine getLine(int index);
    /**
     * <pre>
     * All lines printed by "perf stat".
     * </pre>
     *
     * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
     */
    int getLineCount();

    /**
     * <pre>
     * The command line used to run "perf stat".
     * </pre>
     *
     * <code>optional string command_line = 2;</code>
     * @return Whether the commandLine field is set.
     */
    boolean hasCommandLine();
    /**
     * <pre>
     * The command line used to run "perf stat".
     * </pre>
     *
     * <code>optional string command_line = 2;</code>
     * @return The commandLine.
     */
    java.lang.String getCommandLine();
    /**
     * <pre>
     * The command line used to run "perf stat".
     * </pre>
     *
     * <code>optional string command_line = 2;</code>
     * @return The bytes for commandLine.
     */
    com.google.protobuf.ByteString
        getCommandLineBytes();
  }
  /**
   * <pre>
   * Next tag: 3
   * </pre>
   *
   * Protobuf type {@code metrics.PerfStatProto}
   */
  public  static final class PerfStatProto extends
      com.google.protobuf.GeneratedMessageLite<
          PerfStatProto, PerfStatProto.Builder> implements
      // @@protoc_insertion_point(message_implements:metrics.PerfStatProto)
      PerfStatProtoOrBuilder {
    private PerfStatProto() {
      line_ = emptyProtobufList();
      commandLine_ = "";
    }
    public interface PerfStatLineOrBuilder extends
        // @@protoc_insertion_point(interface_extends:metrics.PerfStatProto.PerfStatLine)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Time since the start of the "perf stat" command, in milliseconds.
       * When running "perf stat" and printing the counters at the end, this is
       * the total time taken by the run.
       * Alternatively, "perf stat" can print its stats at regular intervals until
       * the end of the run. For example, if "perf stat" runs for one second and
       * prints at 200-ms intervals, it will print counter values for each event
       * a total of five times. According to "perf stat" usage instructions, the
       * printing interval should be no less than 100 ms.
       * </pre>
       *
       * <code>optional uint64 time_ms = 1;</code>
       * @return Whether the timeMs field is set.
       */
      boolean hasTimeMs();
      /**
       * <pre>
       * Time since the start of the "perf stat" command, in milliseconds.
       * When running "perf stat" and printing the counters at the end, this is
       * the total time taken by the run.
       * Alternatively, "perf stat" can print its stats at regular intervals until
       * the end of the run. For example, if "perf stat" runs for one second and
       * prints at 200-ms intervals, it will print counter values for each event
       * a total of five times. According to "perf stat" usage instructions, the
       * printing interval should be no less than 100 ms.
       * </pre>
       *
       * <code>optional uint64 time_ms = 1;</code>
       * @return The timeMs.
       */
      long getTimeMs();

      /**
       * <pre>
       * Current count value of the event being counted. May be different from the
       * nominal counter value reported by "perf stat", depending on the event.
       * For example, memory access counters are in units of 64 bytes. A counter
       * value of 1024 would represent 65536 bytes, and we would set this field to
       * 65536.
       * </pre>
       *
       * <code>optional uint64 count = 2;</code>
       * @return Whether the count field is set.
       */
      boolean hasCount();
      /**
       * <pre>
       * Current count value of the event being counted. May be different from the
       * nominal counter value reported by "perf stat", depending on the event.
       * For example, memory access counters are in units of 64 bytes. A counter
       * value of 1024 would represent 65536 bytes, and we would set this field to
       * 65536.
       * </pre>
       *
       * <code>optional uint64 count = 2;</code>
       * @return The count.
       */
      long getCount();

      /**
       * <pre>
       * Name of event whose counter is listed on this line.
       * This string should also appear as part of |PerfStatProto::command_line|.
       * "perf stat" will preserve the event name exactly as it is passed in via
       * the command line.
       * </pre>
       *
       * <code>optional string event_name = 3;</code>
       * @return Whether the eventName field is set.
       */
      boolean hasEventName();
      /**
       * <pre>
       * Name of event whose counter is listed on this line.
       * This string should also appear as part of |PerfStatProto::command_line|.
       * "perf stat" will preserve the event name exactly as it is passed in via
       * the command line.
       * </pre>
       *
       * <code>optional string event_name = 3;</code>
       * @return The eventName.
       */
      java.lang.String getEventName();
      /**
       * <pre>
       * Name of event whose counter is listed on this line.
       * This string should also appear as part of |PerfStatProto::command_line|.
       * "perf stat" will preserve the event name exactly as it is passed in via
       * the command line.
       * </pre>
       *
       * <code>optional string event_name = 3;</code>
       * @return The bytes for eventName.
       */
      com.google.protobuf.ByteString
          getEventNameBytes();
    }
    /**
     * <pre>
     * Represents one line of "perf stat" output.
     * Next tag: 4
     * </pre>
     *
     * Protobuf type {@code metrics.PerfStatProto.PerfStatLine}
     */
    public  static final class PerfStatLine extends
        com.google.protobuf.GeneratedMessageLite<
            PerfStatLine, PerfStatLine.Builder> implements
        // @@protoc_insertion_point(message_implements:metrics.PerfStatProto.PerfStatLine)
        PerfStatLineOrBuilder {
      private PerfStatLine() {
        eventName_ = "";
      }
      private int bitField0_;
      public static final int TIME_MS_FIELD_NUMBER = 1;
      private long timeMs_;
      /**
       * <pre>
       * Time since the start of the "perf stat" command, in milliseconds.
       * When running "perf stat" and printing the counters at the end, this is
       * the total time taken by the run.
       * Alternatively, "perf stat" can print its stats at regular intervals until
       * the end of the run. For example, if "perf stat" runs for one second and
       * prints at 200-ms intervals, it will print counter values for each event
       * a total of five times. According to "perf stat" usage instructions, the
       * printing interval should be no less than 100 ms.
       * </pre>
       *
       * <code>optional uint64 time_ms = 1;</code>
       * @return Whether the timeMs field is set.
       */
      @java.lang.Override
      public boolean hasTimeMs() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Time since the start of the "perf stat" command, in milliseconds.
       * When running "perf stat" and printing the counters at the end, this is
       * the total time taken by the run.
       * Alternatively, "perf stat" can print its stats at regular intervals until
       * the end of the run. For example, if "perf stat" runs for one second and
       * prints at 200-ms intervals, it will print counter values for each event
       * a total of five times. According to "perf stat" usage instructions, the
       * printing interval should be no less than 100 ms.
       * </pre>
       *
       * <code>optional uint64 time_ms = 1;</code>
       * @return The timeMs.
       */
      @java.lang.Override
      public long getTimeMs() {
        return timeMs_;
      }
      /**
       * <pre>
       * Time since the start of the "perf stat" command, in milliseconds.
       * When running "perf stat" and printing the counters at the end, this is
       * the total time taken by the run.
       * Alternatively, "perf stat" can print its stats at regular intervals until
       * the end of the run. For example, if "perf stat" runs for one second and
       * prints at 200-ms intervals, it will print counter values for each event
       * a total of five times. According to "perf stat" usage instructions, the
       * printing interval should be no less than 100 ms.
       * </pre>
       *
       * <code>optional uint64 time_ms = 1;</code>
       * @param value The timeMs to set.
       */
      private void setTimeMs(long value) {
        bitField0_ |= 0x00000001;
        timeMs_ = value;
      }
      /**
       * <pre>
       * Time since the start of the "perf stat" command, in milliseconds.
       * When running "perf stat" and printing the counters at the end, this is
       * the total time taken by the run.
       * Alternatively, "perf stat" can print its stats at regular intervals until
       * the end of the run. For example, if "perf stat" runs for one second and
       * prints at 200-ms intervals, it will print counter values for each event
       * a total of five times. According to "perf stat" usage instructions, the
       * printing interval should be no less than 100 ms.
       * </pre>
       *
       * <code>optional uint64 time_ms = 1;</code>
       */
      private void clearTimeMs() {
        bitField0_ = (bitField0_ & ~0x00000001);
        timeMs_ = 0L;
      }

      public static final int COUNT_FIELD_NUMBER = 2;
      private long count_;
      /**
       * <pre>
       * Current count value of the event being counted. May be different from the
       * nominal counter value reported by "perf stat", depending on the event.
       * For example, memory access counters are in units of 64 bytes. A counter
       * value of 1024 would represent 65536 bytes, and we would set this field to
       * 65536.
       * </pre>
       *
       * <code>optional uint64 count = 2;</code>
       * @return Whether the count field is set.
       */
      @java.lang.Override
      public boolean hasCount() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Current count value of the event being counted. May be different from the
       * nominal counter value reported by "perf stat", depending on the event.
       * For example, memory access counters are in units of 64 bytes. A counter
       * value of 1024 would represent 65536 bytes, and we would set this field to
       * 65536.
       * </pre>
       *
       * <code>optional uint64 count = 2;</code>
       * @return The count.
       */
      @java.lang.Override
      public long getCount() {
        return count_;
      }
      /**
       * <pre>
       * Current count value of the event being counted. May be different from the
       * nominal counter value reported by "perf stat", depending on the event.
       * For example, memory access counters are in units of 64 bytes. A counter
       * value of 1024 would represent 65536 bytes, and we would set this field to
       * 65536.
       * </pre>
       *
       * <code>optional uint64 count = 2;</code>
       * @param value The count to set.
       */
      private void setCount(long value) {
        bitField0_ |= 0x00000002;
        count_ = value;
      }
      /**
       * <pre>
       * Current count value of the event being counted. May be different from the
       * nominal counter value reported by "perf stat", depending on the event.
       * For example, memory access counters are in units of 64 bytes. A counter
       * value of 1024 would represent 65536 bytes, and we would set this field to
       * 65536.
       * </pre>
       *
       * <code>optional uint64 count = 2;</code>
       */
      private void clearCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        count_ = 0L;
      }

      public static final int EVENT_NAME_FIELD_NUMBER = 3;
      private java.lang.String eventName_;
      /**
       * <pre>
       * Name of event whose counter is listed on this line.
       * This string should also appear as part of |PerfStatProto::command_line|.
       * "perf stat" will preserve the event name exactly as it is passed in via
       * the command line.
       * </pre>
       *
       * <code>optional string event_name = 3;</code>
       * @return Whether the eventName field is set.
       */
      @java.lang.Override
      public boolean hasEventName() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Name of event whose counter is listed on this line.
       * This string should also appear as part of |PerfStatProto::command_line|.
       * "perf stat" will preserve the event name exactly as it is passed in via
       * the command line.
       * </pre>
       *
       * <code>optional string event_name = 3;</code>
       * @return The eventName.
       */
      @java.lang.Override
      public java.lang.String getEventName() {
        return eventName_;
      }
      /**
       * <pre>
       * Name of event whose counter is listed on this line.
       * This string should also appear as part of |PerfStatProto::command_line|.
       * "perf stat" will preserve the event name exactly as it is passed in via
       * the command line.
       * </pre>
       *
       * <code>optional string event_name = 3;</code>
       * @return The bytes for eventName.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getEventNameBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(eventName_);
      }
      /**
       * <pre>
       * Name of event whose counter is listed on this line.
       * This string should also appear as part of |PerfStatProto::command_line|.
       * "perf stat" will preserve the event name exactly as it is passed in via
       * the command line.
       * </pre>
       *
       * <code>optional string event_name = 3;</code>
       * @param value The eventName to set.
       */
      private void setEventName(
          java.lang.String value) {
        value.getClass();
  bitField0_ |= 0x00000004;
        eventName_ = value;
      }
      /**
       * <pre>
       * Name of event whose counter is listed on this line.
       * This string should also appear as part of |PerfStatProto::command_line|.
       * "perf stat" will preserve the event name exactly as it is passed in via
       * the command line.
       * </pre>
       *
       * <code>optional string event_name = 3;</code>
       */
      private void clearEventName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        eventName_ = getDefaultInstance().getEventName();
      }
      /**
       * <pre>
       * Name of event whose counter is listed on this line.
       * This string should also appear as part of |PerfStatProto::command_line|.
       * "perf stat" will preserve the event name exactly as it is passed in via
       * the command line.
       * </pre>
       *
       * <code>optional string event_name = 3;</code>
       * @param value The bytes for eventName to set.
       */
      private void setEventNameBytes(
          com.google.protobuf.ByteString value) {
        eventName_ = value.toStringUtf8();
        bitField0_ |= 0x00000004;
      }

      public static org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Represents one line of "perf stat" output.
       * Next tag: 4
       * </pre>
       *
       * Protobuf type {@code metrics.PerfStatProto.PerfStatLine}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine, Builder> implements
          // @@protoc_insertion_point(builder_implements:metrics.PerfStatProto.PerfStatLine)
          org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLineOrBuilder {
        // Construct using org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Time since the start of the "perf stat" command, in milliseconds.
         * When running "perf stat" and printing the counters at the end, this is
         * the total time taken by the run.
         * Alternatively, "perf stat" can print its stats at regular intervals until
         * the end of the run. For example, if "perf stat" runs for one second and
         * prints at 200-ms intervals, it will print counter values for each event
         * a total of five times. According to "perf stat" usage instructions, the
         * printing interval should be no less than 100 ms.
         * </pre>
         *
         * <code>optional uint64 time_ms = 1;</code>
         * @return Whether the timeMs field is set.
         */
        @java.lang.Override
        public boolean hasTimeMs() {
          return instance.hasTimeMs();
        }
        /**
         * <pre>
         * Time since the start of the "perf stat" command, in milliseconds.
         * When running "perf stat" and printing the counters at the end, this is
         * the total time taken by the run.
         * Alternatively, "perf stat" can print its stats at regular intervals until
         * the end of the run. For example, if "perf stat" runs for one second and
         * prints at 200-ms intervals, it will print counter values for each event
         * a total of five times. According to "perf stat" usage instructions, the
         * printing interval should be no less than 100 ms.
         * </pre>
         *
         * <code>optional uint64 time_ms = 1;</code>
         * @return The timeMs.
         */
        @java.lang.Override
        public long getTimeMs() {
          return instance.getTimeMs();
        }
        /**
         * <pre>
         * Time since the start of the "perf stat" command, in milliseconds.
         * When running "perf stat" and printing the counters at the end, this is
         * the total time taken by the run.
         * Alternatively, "perf stat" can print its stats at regular intervals until
         * the end of the run. For example, if "perf stat" runs for one second and
         * prints at 200-ms intervals, it will print counter values for each event
         * a total of five times. According to "perf stat" usage instructions, the
         * printing interval should be no less than 100 ms.
         * </pre>
         *
         * <code>optional uint64 time_ms = 1;</code>
         * @param value The timeMs to set.
         * @return This builder for chaining.
         */
        public Builder setTimeMs(long value) {
          copyOnWrite();
          instance.setTimeMs(value);
          return this;
        }
        /**
         * <pre>
         * Time since the start of the "perf stat" command, in milliseconds.
         * When running "perf stat" and printing the counters at the end, this is
         * the total time taken by the run.
         * Alternatively, "perf stat" can print its stats at regular intervals until
         * the end of the run. For example, if "perf stat" runs for one second and
         * prints at 200-ms intervals, it will print counter values for each event
         * a total of five times. According to "perf stat" usage instructions, the
         * printing interval should be no less than 100 ms.
         * </pre>
         *
         * <code>optional uint64 time_ms = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearTimeMs() {
          copyOnWrite();
          instance.clearTimeMs();
          return this;
        }

        /**
         * <pre>
         * Current count value of the event being counted. May be different from the
         * nominal counter value reported by "perf stat", depending on the event.
         * For example, memory access counters are in units of 64 bytes. A counter
         * value of 1024 would represent 65536 bytes, and we would set this field to
         * 65536.
         * </pre>
         *
         * <code>optional uint64 count = 2;</code>
         * @return Whether the count field is set.
         */
        @java.lang.Override
        public boolean hasCount() {
          return instance.hasCount();
        }
        /**
         * <pre>
         * Current count value of the event being counted. May be different from the
         * nominal counter value reported by "perf stat", depending on the event.
         * For example, memory access counters are in units of 64 bytes. A counter
         * value of 1024 would represent 65536 bytes, and we would set this field to
         * 65536.
         * </pre>
         *
         * <code>optional uint64 count = 2;</code>
         * @return The count.
         */
        @java.lang.Override
        public long getCount() {
          return instance.getCount();
        }
        /**
         * <pre>
         * Current count value of the event being counted. May be different from the
         * nominal counter value reported by "perf stat", depending on the event.
         * For example, memory access counters are in units of 64 bytes. A counter
         * value of 1024 would represent 65536 bytes, and we would set this field to
         * 65536.
         * </pre>
         *
         * <code>optional uint64 count = 2;</code>
         * @param value The count to set.
         * @return This builder for chaining.
         */
        public Builder setCount(long value) {
          copyOnWrite();
          instance.setCount(value);
          return this;
        }
        /**
         * <pre>
         * Current count value of the event being counted. May be different from the
         * nominal counter value reported by "perf stat", depending on the event.
         * For example, memory access counters are in units of 64 bytes. A counter
         * value of 1024 would represent 65536 bytes, and we would set this field to
         * 65536.
         * </pre>
         *
         * <code>optional uint64 count = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearCount() {
          copyOnWrite();
          instance.clearCount();
          return this;
        }

        /**
         * <pre>
         * Name of event whose counter is listed on this line.
         * This string should also appear as part of |PerfStatProto::command_line|.
         * "perf stat" will preserve the event name exactly as it is passed in via
         * the command line.
         * </pre>
         *
         * <code>optional string event_name = 3;</code>
         * @return Whether the eventName field is set.
         */
        @java.lang.Override
        public boolean hasEventName() {
          return instance.hasEventName();
        }
        /**
         * <pre>
         * Name of event whose counter is listed on this line.
         * This string should also appear as part of |PerfStatProto::command_line|.
         * "perf stat" will preserve the event name exactly as it is passed in via
         * the command line.
         * </pre>
         *
         * <code>optional string event_name = 3;</code>
         * @return The eventName.
         */
        @java.lang.Override
        public java.lang.String getEventName() {
          return instance.getEventName();
        }
        /**
         * <pre>
         * Name of event whose counter is listed on this line.
         * This string should also appear as part of |PerfStatProto::command_line|.
         * "perf stat" will preserve the event name exactly as it is passed in via
         * the command line.
         * </pre>
         *
         * <code>optional string event_name = 3;</code>
         * @return The bytes for eventName.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getEventNameBytes() {
          return instance.getEventNameBytes();
        }
        /**
         * <pre>
         * Name of event whose counter is listed on this line.
         * This string should also appear as part of |PerfStatProto::command_line|.
         * "perf stat" will preserve the event name exactly as it is passed in via
         * the command line.
         * </pre>
         *
         * <code>optional string event_name = 3;</code>
         * @param value The eventName to set.
         * @return This builder for chaining.
         */
        public Builder setEventName(
            java.lang.String value) {
          copyOnWrite();
          instance.setEventName(value);
          return this;
        }
        /**
         * <pre>
         * Name of event whose counter is listed on this line.
         * This string should also appear as part of |PerfStatProto::command_line|.
         * "perf stat" will preserve the event name exactly as it is passed in via
         * the command line.
         * </pre>
         *
         * <code>optional string event_name = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearEventName() {
          copyOnWrite();
          instance.clearEventName();
          return this;
        }
        /**
         * <pre>
         * Name of event whose counter is listed on this line.
         * This string should also appear as part of |PerfStatProto::command_line|.
         * "perf stat" will preserve the event name exactly as it is passed in via
         * the command line.
         * </pre>
         *
         * <code>optional string event_name = 3;</code>
         * @param value The bytes for eventName to set.
         * @return This builder for chaining.
         */
        public Builder setEventNameBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setEventNameBytes(value);
          return this;
        }

        // @@protoc_insertion_point(builder_scope:metrics.PerfStatProto.PerfStatLine)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "timeMs_",
                "count_",
                "eventName_",
              };
              java.lang.String info =
                  "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u1003\u0000\u0002" +
                  "\u1003\u0001\u0003\u1008\u0002";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:metrics.PerfStatProto.PerfStatLine)
      private static final org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine DEFAULT_INSTANCE;
      static {
        PerfStatLine defaultInstance = new PerfStatLine();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          PerfStatLine.class, defaultInstance);
      }

      public static org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<PerfStatLine> PARSER;

      public static com.google.protobuf.Parser<PerfStatLine> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    public static final int LINE_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine> line_;
    /**
     * <pre>
     * All lines printed by "perf stat".
     * </pre>
     *
     * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine> getLineList() {
      return line_;
    }
    /**
     * <pre>
     * All lines printed by "perf stat".
     * </pre>
     *
     * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
     */
    public java.util.List<? extends org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLineOrBuilder> 
        getLineOrBuilderList() {
      return line_;
    }
    /**
     * <pre>
     * All lines printed by "perf stat".
     * </pre>
     *
     * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
     */
    @java.lang.Override
    public int getLineCount() {
      return line_.size();
    }
    /**
     * <pre>
     * All lines printed by "perf stat".
     * </pre>
     *
     * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
     */
    @java.lang.Override
    public org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine getLine(int index) {
      return line_.get(index);
    }
    /**
     * <pre>
     * All lines printed by "perf stat".
     * </pre>
     *
     * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
     */
    public org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLineOrBuilder getLineOrBuilder(
        int index) {
      return line_.get(index);
    }
    private void ensureLineIsMutable() {
      com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine> tmp = line_;
      if (!tmp.isModifiable()) {
        line_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * All lines printed by "perf stat".
     * </pre>
     *
     * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
     */
    private void setLine(
        int index, org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine value) {
      value.getClass();
  ensureLineIsMutable();
      line_.set(index, value);
    }
    /**
     * <pre>
     * All lines printed by "perf stat".
     * </pre>
     *
     * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
     */
    private void addLine(org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine value) {
      value.getClass();
  ensureLineIsMutable();
      line_.add(value);
    }
    /**
     * <pre>
     * All lines printed by "perf stat".
     * </pre>
     *
     * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
     */
    private void addLine(
        int index, org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine value) {
      value.getClass();
  ensureLineIsMutable();
      line_.add(index, value);
    }
    /**
     * <pre>
     * All lines printed by "perf stat".
     * </pre>
     *
     * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
     */
    private void addAllLine(
        java.lang.Iterable<? extends org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine> values) {
      ensureLineIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, line_);
    }
    /**
     * <pre>
     * All lines printed by "perf stat".
     * </pre>
     *
     * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
     */
    private void clearLine() {
      line_ = emptyProtobufList();
    }
    /**
     * <pre>
     * All lines printed by "perf stat".
     * </pre>
     *
     * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
     */
    private void removeLine(int index) {
      ensureLineIsMutable();
      line_.remove(index);
    }

    public static final int COMMAND_LINE_FIELD_NUMBER = 2;
    private java.lang.String commandLine_;
    /**
     * <pre>
     * The command line used to run "perf stat".
     * </pre>
     *
     * <code>optional string command_line = 2;</code>
     * @return Whether the commandLine field is set.
     */
    @java.lang.Override
    public boolean hasCommandLine() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The command line used to run "perf stat".
     * </pre>
     *
     * <code>optional string command_line = 2;</code>
     * @return The commandLine.
     */
    @java.lang.Override
    public java.lang.String getCommandLine() {
      return commandLine_;
    }
    /**
     * <pre>
     * The command line used to run "perf stat".
     * </pre>
     *
     * <code>optional string command_line = 2;</code>
     * @return The bytes for commandLine.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCommandLineBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(commandLine_);
    }
    /**
     * <pre>
     * The command line used to run "perf stat".
     * </pre>
     *
     * <code>optional string command_line = 2;</code>
     * @param value The commandLine to set.
     */
    private void setCommandLine(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000001;
      commandLine_ = value;
    }
    /**
     * <pre>
     * The command line used to run "perf stat".
     * </pre>
     *
     * <code>optional string command_line = 2;</code>
     */
    private void clearCommandLine() {
      bitField0_ = (bitField0_ & ~0x00000001);
      commandLine_ = getDefaultInstance().getCommandLine();
    }
    /**
     * <pre>
     * The command line used to run "perf stat".
     * </pre>
     *
     * <code>optional string command_line = 2;</code>
     * @param value The bytes for commandLine to set.
     */
    private void setCommandLineBytes(
        com.google.protobuf.ByteString value) {
      commandLine_ = value.toStringUtf8();
      bitField0_ |= 0x00000001;
    }

    public static org.chromium.components.metrics.PerfStat.PerfStatProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.metrics.PerfStat.PerfStatProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.metrics.PerfStat.PerfStatProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.metrics.PerfStat.PerfStatProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.metrics.PerfStat.PerfStatProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.metrics.PerfStat.PerfStatProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.metrics.PerfStat.PerfStatProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.metrics.PerfStat.PerfStatProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.metrics.PerfStat.PerfStatProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.metrics.PerfStat.PerfStatProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.metrics.PerfStat.PerfStatProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.metrics.PerfStat.PerfStatProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.metrics.PerfStat.PerfStatProto prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Next tag: 3
     * </pre>
     *
     * Protobuf type {@code metrics.PerfStatProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.metrics.PerfStat.PerfStatProto, Builder> implements
        // @@protoc_insertion_point(builder_implements:metrics.PerfStatProto)
        org.chromium.components.metrics.PerfStat.PerfStatProtoOrBuilder {
      // Construct using org.chromium.components.metrics.PerfStat.PerfStatProto.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * All lines printed by "perf stat".
       * </pre>
       *
       * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine> getLineList() {
        return java.util.Collections.unmodifiableList(
            instance.getLineList());
      }
      /**
       * <pre>
       * All lines printed by "perf stat".
       * </pre>
       *
       * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
       */
      @java.lang.Override
      public int getLineCount() {
        return instance.getLineCount();
      }/**
       * <pre>
       * All lines printed by "perf stat".
       * </pre>
       *
       * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine getLine(int index) {
        return instance.getLine(index);
      }
      /**
       * <pre>
       * All lines printed by "perf stat".
       * </pre>
       *
       * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
       */
      public Builder setLine(
          int index, org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine value) {
        copyOnWrite();
        instance.setLine(index, value);
        return this;
      }
      /**
       * <pre>
       * All lines printed by "perf stat".
       * </pre>
       *
       * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
       */
      public Builder setLine(
          int index, org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine.Builder builderForValue) {
        copyOnWrite();
        instance.setLine(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * All lines printed by "perf stat".
       * </pre>
       *
       * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
       */
      public Builder addLine(org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine value) {
        copyOnWrite();
        instance.addLine(value);
        return this;
      }
      /**
       * <pre>
       * All lines printed by "perf stat".
       * </pre>
       *
       * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
       */
      public Builder addLine(
          int index, org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine value) {
        copyOnWrite();
        instance.addLine(index, value);
        return this;
      }
      /**
       * <pre>
       * All lines printed by "perf stat".
       * </pre>
       *
       * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
       */
      public Builder addLine(
          org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine.Builder builderForValue) {
        copyOnWrite();
        instance.addLine(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * All lines printed by "perf stat".
       * </pre>
       *
       * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
       */
      public Builder addLine(
          int index, org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine.Builder builderForValue) {
        copyOnWrite();
        instance.addLine(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * All lines printed by "perf stat".
       * </pre>
       *
       * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
       */
      public Builder addAllLine(
          java.lang.Iterable<? extends org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine> values) {
        copyOnWrite();
        instance.addAllLine(values);
        return this;
      }
      /**
       * <pre>
       * All lines printed by "perf stat".
       * </pre>
       *
       * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
       */
      public Builder clearLine() {
        copyOnWrite();
        instance.clearLine();
        return this;
      }
      /**
       * <pre>
       * All lines printed by "perf stat".
       * </pre>
       *
       * <code>repeated .metrics.PerfStatProto.PerfStatLine line = 1;</code>
       */
      public Builder removeLine(int index) {
        copyOnWrite();
        instance.removeLine(index);
        return this;
      }

      /**
       * <pre>
       * The command line used to run "perf stat".
       * </pre>
       *
       * <code>optional string command_line = 2;</code>
       * @return Whether the commandLine field is set.
       */
      @java.lang.Override
      public boolean hasCommandLine() {
        return instance.hasCommandLine();
      }
      /**
       * <pre>
       * The command line used to run "perf stat".
       * </pre>
       *
       * <code>optional string command_line = 2;</code>
       * @return The commandLine.
       */
      @java.lang.Override
      public java.lang.String getCommandLine() {
        return instance.getCommandLine();
      }
      /**
       * <pre>
       * The command line used to run "perf stat".
       * </pre>
       *
       * <code>optional string command_line = 2;</code>
       * @return The bytes for commandLine.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getCommandLineBytes() {
        return instance.getCommandLineBytes();
      }
      /**
       * <pre>
       * The command line used to run "perf stat".
       * </pre>
       *
       * <code>optional string command_line = 2;</code>
       * @param value The commandLine to set.
       * @return This builder for chaining.
       */
      public Builder setCommandLine(
          java.lang.String value) {
        copyOnWrite();
        instance.setCommandLine(value);
        return this;
      }
      /**
       * <pre>
       * The command line used to run "perf stat".
       * </pre>
       *
       * <code>optional string command_line = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCommandLine() {
        copyOnWrite();
        instance.clearCommandLine();
        return this;
      }
      /**
       * <pre>
       * The command line used to run "perf stat".
       * </pre>
       *
       * <code>optional string command_line = 2;</code>
       * @param value The bytes for commandLine to set.
       * @return This builder for chaining.
       */
      public Builder setCommandLineBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setCommandLineBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:metrics.PerfStatProto)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.metrics.PerfStat.PerfStatProto();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "line_",
              org.chromium.components.metrics.PerfStat.PerfStatProto.PerfStatLine.class,
              "commandLine_",
            };
            java.lang.String info =
                "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0001\u0000\u0001\u001b\u0002\u1008" +
                "\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.metrics.PerfStat.PerfStatProto> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.metrics.PerfStat.PerfStatProto.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfStat.PerfStatProto>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:metrics.PerfStatProto)
    private static final org.chromium.components.metrics.PerfStat.PerfStatProto DEFAULT_INSTANCE;
    static {
      PerfStatProto defaultInstance = new PerfStatProto();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        PerfStatProto.class, defaultInstance);
    }

    public static org.chromium.components.metrics.PerfStat.PerfStatProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PerfStatProto> PARSER;

    public static com.google.protobuf.Parser<PerfStatProto> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
