// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: histogram_event.proto

package org.chromium.components.metrics;

public final class HistogramEventProtos {
  private HistogramEventProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface HistogramEventProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:metrics.HistogramEventProto)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The name of the histogram, hashed.
     * </pre>
     *
     * <code>optional fixed64 name_hash = 1;</code>
     * @return Whether the nameHash field is set.
     */
    boolean hasNameHash();
    /**
     * <pre>
     * The name of the histogram, hashed.
     * </pre>
     *
     * <code>optional fixed64 name_hash = 1;</code>
     * @return The nameHash.
     */
    long getNameHash();

    /**
     * <pre>
     * The sum of all the sample values.
     * Together with the total count of the sample values, this allows us to
     * compute the average value.  The count of all sample values is just the sum
     * of the counts of all the buckets.  As of M51, when the value of this field
     * would be 0, the field will be omitted instead.
     * </pre>
     *
     * <code>optional int64 sum = 2;</code>
     * @return Whether the sum field is set.
     */
    boolean hasSum();
    /**
     * <pre>
     * The sum of all the sample values.
     * Together with the total count of the sample values, this allows us to
     * compute the average value.  The count of all sample values is just the sum
     * of the counts of all the buckets.  As of M51, when the value of this field
     * would be 0, the field will be omitted instead.
     * </pre>
     *
     * <code>optional int64 sum = 2;</code>
     * @return The sum.
     */
    long getSum();

    /**
     * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
     */
    java.util.List<org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket> 
        getBucketList();
    /**
     * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
     */
    org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket getBucket(int index);
    /**
     * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
     */
    int getBucketCount();
  }
  /**
   * <pre>
   * Histogram-collected metrics.
   * Next tag: 4
   * </pre>
   *
   * Protobuf type {@code metrics.HistogramEventProto}
   */
  public  static final class HistogramEventProto extends
      com.google.protobuf.GeneratedMessageLite<
          HistogramEventProto, HistogramEventProto.Builder> implements
      // @@protoc_insertion_point(message_implements:metrics.HistogramEventProto)
      HistogramEventProtoOrBuilder {
    private HistogramEventProto() {
      bucket_ = emptyProtobufList();
    }
    public interface BucketOrBuilder extends
        // @@protoc_insertion_point(interface_extends:metrics.HistogramEventProto.Bucket)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Each bucket's range is bounded by min &lt;= x &lt; max.
       * It is valid to omit one of these two fields in a bucket, but not both.
       * If the min field is omitted, its value is assumed to be equal to max - 1.
       * If the max field is omitted, its value is assumed to be equal to the next
       * bucket's min value (possibly computed per above).  The last bucket in a
       * histogram should always include the max field.
       * </pre>
       *
       * <code>optional int64 min = 1;</code>
       * @return Whether the min field is set.
       */
      boolean hasMin();
      /**
       * <pre>
       * Each bucket's range is bounded by min &lt;= x &lt; max.
       * It is valid to omit one of these two fields in a bucket, but not both.
       * If the min field is omitted, its value is assumed to be equal to max - 1.
       * If the max field is omitted, its value is assumed to be equal to the next
       * bucket's min value (possibly computed per above).  The last bucket in a
       * histogram should always include the max field.
       * </pre>
       *
       * <code>optional int64 min = 1;</code>
       * @return The min.
       */
      long getMin();

      /**
       * <code>optional int64 max = 2;</code>
       * @return Whether the max field is set.
       */
      boolean hasMax();
      /**
       * <code>optional int64 max = 2;</code>
       * @return The max.
       */
      long getMax();

      /**
       * <pre>
       * The number of entries in this bucket.  As of M51, when the value of this
       * field would be 1, the field will be omitted instead.
       * </pre>
       *
       * <code>optional int64 count = 4 [default = 1];</code>
       * @return Whether the count field is set.
       */
      boolean hasCount();
      /**
       * <pre>
       * The number of entries in this bucket.  As of M51, when the value of this
       * field would be 1, the field will be omitted instead.
       * </pre>
       *
       * <code>optional int64 count = 4 [default = 1];</code>
       * @return The count.
       */
      long getCount();
    }
    /**
     * <pre>
     * The per-bucket data.
     * Next tag: 5
     * </pre>
     *
     * Protobuf type {@code metrics.HistogramEventProto.Bucket}
     */
    public  static final class Bucket extends
        com.google.protobuf.GeneratedMessageLite<
            Bucket, Bucket.Builder> implements
        // @@protoc_insertion_point(message_implements:metrics.HistogramEventProto.Bucket)
        BucketOrBuilder {
      private Bucket() {
        count_ = 1L;
      }
      private int bitField0_;
      public static final int MIN_FIELD_NUMBER = 1;
      private long min_;
      /**
       * <pre>
       * Each bucket's range is bounded by min &lt;= x &lt; max.
       * It is valid to omit one of these two fields in a bucket, but not both.
       * If the min field is omitted, its value is assumed to be equal to max - 1.
       * If the max field is omitted, its value is assumed to be equal to the next
       * bucket's min value (possibly computed per above).  The last bucket in a
       * histogram should always include the max field.
       * </pre>
       *
       * <code>optional int64 min = 1;</code>
       * @return Whether the min field is set.
       */
      @java.lang.Override
      public boolean hasMin() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Each bucket's range is bounded by min &lt;= x &lt; max.
       * It is valid to omit one of these two fields in a bucket, but not both.
       * If the min field is omitted, its value is assumed to be equal to max - 1.
       * If the max field is omitted, its value is assumed to be equal to the next
       * bucket's min value (possibly computed per above).  The last bucket in a
       * histogram should always include the max field.
       * </pre>
       *
       * <code>optional int64 min = 1;</code>
       * @return The min.
       */
      @java.lang.Override
      public long getMin() {
        return min_;
      }
      /**
       * <pre>
       * Each bucket's range is bounded by min &lt;= x &lt; max.
       * It is valid to omit one of these two fields in a bucket, but not both.
       * If the min field is omitted, its value is assumed to be equal to max - 1.
       * If the max field is omitted, its value is assumed to be equal to the next
       * bucket's min value (possibly computed per above).  The last bucket in a
       * histogram should always include the max field.
       * </pre>
       *
       * <code>optional int64 min = 1;</code>
       * @param value The min to set.
       */
      private void setMin(long value) {
        bitField0_ |= 0x00000001;
        min_ = value;
      }
      /**
       * <pre>
       * Each bucket's range is bounded by min &lt;= x &lt; max.
       * It is valid to omit one of these two fields in a bucket, but not both.
       * If the min field is omitted, its value is assumed to be equal to max - 1.
       * If the max field is omitted, its value is assumed to be equal to the next
       * bucket's min value (possibly computed per above).  The last bucket in a
       * histogram should always include the max field.
       * </pre>
       *
       * <code>optional int64 min = 1;</code>
       */
      private void clearMin() {
        bitField0_ = (bitField0_ & ~0x00000001);
        min_ = 0L;
      }

      public static final int MAX_FIELD_NUMBER = 2;
      private long max_;
      /**
       * <code>optional int64 max = 2;</code>
       * @return Whether the max field is set.
       */
      @java.lang.Override
      public boolean hasMax() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional int64 max = 2;</code>
       * @return The max.
       */
      @java.lang.Override
      public long getMax() {
        return max_;
      }
      /**
       * <code>optional int64 max = 2;</code>
       * @param value The max to set.
       */
      private void setMax(long value) {
        bitField0_ |= 0x00000002;
        max_ = value;
      }
      /**
       * <code>optional int64 max = 2;</code>
       */
      private void clearMax() {
        bitField0_ = (bitField0_ & ~0x00000002);
        max_ = 0L;
      }

      public static final int COUNT_FIELD_NUMBER = 4;
      private long count_;
      /**
       * <pre>
       * The number of entries in this bucket.  As of M51, when the value of this
       * field would be 1, the field will be omitted instead.
       * </pre>
       *
       * <code>optional int64 count = 4 [default = 1];</code>
       * @return Whether the count field is set.
       */
      @java.lang.Override
      public boolean hasCount() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The number of entries in this bucket.  As of M51, when the value of this
       * field would be 1, the field will be omitted instead.
       * </pre>
       *
       * <code>optional int64 count = 4 [default = 1];</code>
       * @return The count.
       */
      @java.lang.Override
      public long getCount() {
        return count_;
      }
      /**
       * <pre>
       * The number of entries in this bucket.  As of M51, when the value of this
       * field would be 1, the field will be omitted instead.
       * </pre>
       *
       * <code>optional int64 count = 4 [default = 1];</code>
       * @param value The count to set.
       */
      private void setCount(long value) {
        bitField0_ |= 0x00000004;
        count_ = value;
      }
      /**
       * <pre>
       * The number of entries in this bucket.  As of M51, when the value of this
       * field would be 1, the field will be omitted instead.
       * </pre>
       *
       * <code>optional int64 count = 4 [default = 1];</code>
       */
      private void clearCount() {
        bitField0_ = (bitField0_ & ~0x00000004);
        count_ = 1L;
      }

      public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * The per-bucket data.
       * Next tag: 5
       * </pre>
       *
       * Protobuf type {@code metrics.HistogramEventProto.Bucket}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket, Builder> implements
          // @@protoc_insertion_point(builder_implements:metrics.HistogramEventProto.Bucket)
          org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.BucketOrBuilder {
        // Construct using org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Each bucket's range is bounded by min &lt;= x &lt; max.
         * It is valid to omit one of these two fields in a bucket, but not both.
         * If the min field is omitted, its value is assumed to be equal to max - 1.
         * If the max field is omitted, its value is assumed to be equal to the next
         * bucket's min value (possibly computed per above).  The last bucket in a
         * histogram should always include the max field.
         * </pre>
         *
         * <code>optional int64 min = 1;</code>
         * @return Whether the min field is set.
         */
        @java.lang.Override
        public boolean hasMin() {
          return instance.hasMin();
        }
        /**
         * <pre>
         * Each bucket's range is bounded by min &lt;= x &lt; max.
         * It is valid to omit one of these two fields in a bucket, but not both.
         * If the min field is omitted, its value is assumed to be equal to max - 1.
         * If the max field is omitted, its value is assumed to be equal to the next
         * bucket's min value (possibly computed per above).  The last bucket in a
         * histogram should always include the max field.
         * </pre>
         *
         * <code>optional int64 min = 1;</code>
         * @return The min.
         */
        @java.lang.Override
        public long getMin() {
          return instance.getMin();
        }
        /**
         * <pre>
         * Each bucket's range is bounded by min &lt;= x &lt; max.
         * It is valid to omit one of these two fields in a bucket, but not both.
         * If the min field is omitted, its value is assumed to be equal to max - 1.
         * If the max field is omitted, its value is assumed to be equal to the next
         * bucket's min value (possibly computed per above).  The last bucket in a
         * histogram should always include the max field.
         * </pre>
         *
         * <code>optional int64 min = 1;</code>
         * @param value The min to set.
         * @return This builder for chaining.
         */
        public Builder setMin(long value) {
          copyOnWrite();
          instance.setMin(value);
          return this;
        }
        /**
         * <pre>
         * Each bucket's range is bounded by min &lt;= x &lt; max.
         * It is valid to omit one of these two fields in a bucket, but not both.
         * If the min field is omitted, its value is assumed to be equal to max - 1.
         * If the max field is omitted, its value is assumed to be equal to the next
         * bucket's min value (possibly computed per above).  The last bucket in a
         * histogram should always include the max field.
         * </pre>
         *
         * <code>optional int64 min = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearMin() {
          copyOnWrite();
          instance.clearMin();
          return this;
        }

        /**
         * <code>optional int64 max = 2;</code>
         * @return Whether the max field is set.
         */
        @java.lang.Override
        public boolean hasMax() {
          return instance.hasMax();
        }
        /**
         * <code>optional int64 max = 2;</code>
         * @return The max.
         */
        @java.lang.Override
        public long getMax() {
          return instance.getMax();
        }
        /**
         * <code>optional int64 max = 2;</code>
         * @param value The max to set.
         * @return This builder for chaining.
         */
        public Builder setMax(long value) {
          copyOnWrite();
          instance.setMax(value);
          return this;
        }
        /**
         * <code>optional int64 max = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearMax() {
          copyOnWrite();
          instance.clearMax();
          return this;
        }

        /**
         * <pre>
         * The number of entries in this bucket.  As of M51, when the value of this
         * field would be 1, the field will be omitted instead.
         * </pre>
         *
         * <code>optional int64 count = 4 [default = 1];</code>
         * @return Whether the count field is set.
         */
        @java.lang.Override
        public boolean hasCount() {
          return instance.hasCount();
        }
        /**
         * <pre>
         * The number of entries in this bucket.  As of M51, when the value of this
         * field would be 1, the field will be omitted instead.
         * </pre>
         *
         * <code>optional int64 count = 4 [default = 1];</code>
         * @return The count.
         */
        @java.lang.Override
        public long getCount() {
          return instance.getCount();
        }
        /**
         * <pre>
         * The number of entries in this bucket.  As of M51, when the value of this
         * field would be 1, the field will be omitted instead.
         * </pre>
         *
         * <code>optional int64 count = 4 [default = 1];</code>
         * @param value The count to set.
         * @return This builder for chaining.
         */
        public Builder setCount(long value) {
          copyOnWrite();
          instance.setCount(value);
          return this;
        }
        /**
         * <pre>
         * The number of entries in this bucket.  As of M51, when the value of this
         * field would be 1, the field will be omitted instead.
         * </pre>
         *
         * <code>optional int64 count = 4 [default = 1];</code>
         * @return This builder for chaining.
         */
        public Builder clearCount() {
          copyOnWrite();
          instance.clearCount();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:metrics.HistogramEventProto.Bucket)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "min_",
                "max_",
                "count_",
              };
              java.lang.String info =
                  "\u0001\u0003\u0000\u0001\u0001\u0004\u0003\u0000\u0000\u0000\u0001\u1002\u0000\u0002" +
                  "\u1002\u0001\u0004\u1002\u0002";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:metrics.HistogramEventProto.Bucket)
      private static final org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket DEFAULT_INSTANCE;
      static {
        Bucket defaultInstance = new Bucket();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          Bucket.class, defaultInstance);
      }

      public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<Bucket> PARSER;

      public static com.google.protobuf.Parser<Bucket> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    public static final int NAME_HASH_FIELD_NUMBER = 1;
    private long nameHash_;
    /**
     * <pre>
     * The name of the histogram, hashed.
     * </pre>
     *
     * <code>optional fixed64 name_hash = 1;</code>
     * @return Whether the nameHash field is set.
     */
    @java.lang.Override
    public boolean hasNameHash() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The name of the histogram, hashed.
     * </pre>
     *
     * <code>optional fixed64 name_hash = 1;</code>
     * @return The nameHash.
     */
    @java.lang.Override
    public long getNameHash() {
      return nameHash_;
    }
    /**
     * <pre>
     * The name of the histogram, hashed.
     * </pre>
     *
     * <code>optional fixed64 name_hash = 1;</code>
     * @param value The nameHash to set.
     */
    private void setNameHash(long value) {
      bitField0_ |= 0x00000001;
      nameHash_ = value;
    }
    /**
     * <pre>
     * The name of the histogram, hashed.
     * </pre>
     *
     * <code>optional fixed64 name_hash = 1;</code>
     */
    private void clearNameHash() {
      bitField0_ = (bitField0_ & ~0x00000001);
      nameHash_ = 0L;
    }

    public static final int SUM_FIELD_NUMBER = 2;
    private long sum_;
    /**
     * <pre>
     * The sum of all the sample values.
     * Together with the total count of the sample values, this allows us to
     * compute the average value.  The count of all sample values is just the sum
     * of the counts of all the buckets.  As of M51, when the value of this field
     * would be 0, the field will be omitted instead.
     * </pre>
     *
     * <code>optional int64 sum = 2;</code>
     * @return Whether the sum field is set.
     */
    @java.lang.Override
    public boolean hasSum() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The sum of all the sample values.
     * Together with the total count of the sample values, this allows us to
     * compute the average value.  The count of all sample values is just the sum
     * of the counts of all the buckets.  As of M51, when the value of this field
     * would be 0, the field will be omitted instead.
     * </pre>
     *
     * <code>optional int64 sum = 2;</code>
     * @return The sum.
     */
    @java.lang.Override
    public long getSum() {
      return sum_;
    }
    /**
     * <pre>
     * The sum of all the sample values.
     * Together with the total count of the sample values, this allows us to
     * compute the average value.  The count of all sample values is just the sum
     * of the counts of all the buckets.  As of M51, when the value of this field
     * would be 0, the field will be omitted instead.
     * </pre>
     *
     * <code>optional int64 sum = 2;</code>
     * @param value The sum to set.
     */
    private void setSum(long value) {
      bitField0_ |= 0x00000002;
      sum_ = value;
    }
    /**
     * <pre>
     * The sum of all the sample values.
     * Together with the total count of the sample values, this allows us to
     * compute the average value.  The count of all sample values is just the sum
     * of the counts of all the buckets.  As of M51, when the value of this field
     * would be 0, the field will be omitted instead.
     * </pre>
     *
     * <code>optional int64 sum = 2;</code>
     */
    private void clearSum() {
      bitField0_ = (bitField0_ & ~0x00000002);
      sum_ = 0L;
    }

    public static final int BUCKET_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket> bucket_;
    /**
     * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket> getBucketList() {
      return bucket_;
    }
    /**
     * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
     */
    public java.util.List<? extends org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.BucketOrBuilder> 
        getBucketOrBuilderList() {
      return bucket_;
    }
    /**
     * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
     */
    @java.lang.Override
    public int getBucketCount() {
      return bucket_.size();
    }
    /**
     * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
     */
    @java.lang.Override
    public org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket getBucket(int index) {
      return bucket_.get(index);
    }
    /**
     * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
     */
    public org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.BucketOrBuilder getBucketOrBuilder(
        int index) {
      return bucket_.get(index);
    }
    private void ensureBucketIsMutable() {
      com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket> tmp = bucket_;
      if (!tmp.isModifiable()) {
        bucket_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
     */
    private void setBucket(
        int index, org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket value) {
      value.getClass();
  ensureBucketIsMutable();
      bucket_.set(index, value);
    }
    /**
     * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
     */
    private void addBucket(org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket value) {
      value.getClass();
  ensureBucketIsMutable();
      bucket_.add(value);
    }
    /**
     * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
     */
    private void addBucket(
        int index, org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket value) {
      value.getClass();
  ensureBucketIsMutable();
      bucket_.add(index, value);
    }
    /**
     * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
     */
    private void addAllBucket(
        java.lang.Iterable<? extends org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket> values) {
      ensureBucketIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, bucket_);
    }
    /**
     * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
     */
    private void clearBucket() {
      bucket_ = emptyProtobufList();
    }
    /**
     * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
     */
    private void removeBucket(int index) {
      ensureBucketIsMutable();
      bucket_.remove(index);
    }

    public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Histogram-collected metrics.
     * Next tag: 4
     * </pre>
     *
     * Protobuf type {@code metrics.HistogramEventProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto, Builder> implements
        // @@protoc_insertion_point(builder_implements:metrics.HistogramEventProto)
        org.chromium.components.metrics.HistogramEventProtos.HistogramEventProtoOrBuilder {
      // Construct using org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The name of the histogram, hashed.
       * </pre>
       *
       * <code>optional fixed64 name_hash = 1;</code>
       * @return Whether the nameHash field is set.
       */
      @java.lang.Override
      public boolean hasNameHash() {
        return instance.hasNameHash();
      }
      /**
       * <pre>
       * The name of the histogram, hashed.
       * </pre>
       *
       * <code>optional fixed64 name_hash = 1;</code>
       * @return The nameHash.
       */
      @java.lang.Override
      public long getNameHash() {
        return instance.getNameHash();
      }
      /**
       * <pre>
       * The name of the histogram, hashed.
       * </pre>
       *
       * <code>optional fixed64 name_hash = 1;</code>
       * @param value The nameHash to set.
       * @return This builder for chaining.
       */
      public Builder setNameHash(long value) {
        copyOnWrite();
        instance.setNameHash(value);
        return this;
      }
      /**
       * <pre>
       * The name of the histogram, hashed.
       * </pre>
       *
       * <code>optional fixed64 name_hash = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearNameHash() {
        copyOnWrite();
        instance.clearNameHash();
        return this;
      }

      /**
       * <pre>
       * The sum of all the sample values.
       * Together with the total count of the sample values, this allows us to
       * compute the average value.  The count of all sample values is just the sum
       * of the counts of all the buckets.  As of M51, when the value of this field
       * would be 0, the field will be omitted instead.
       * </pre>
       *
       * <code>optional int64 sum = 2;</code>
       * @return Whether the sum field is set.
       */
      @java.lang.Override
      public boolean hasSum() {
        return instance.hasSum();
      }
      /**
       * <pre>
       * The sum of all the sample values.
       * Together with the total count of the sample values, this allows us to
       * compute the average value.  The count of all sample values is just the sum
       * of the counts of all the buckets.  As of M51, when the value of this field
       * would be 0, the field will be omitted instead.
       * </pre>
       *
       * <code>optional int64 sum = 2;</code>
       * @return The sum.
       */
      @java.lang.Override
      public long getSum() {
        return instance.getSum();
      }
      /**
       * <pre>
       * The sum of all the sample values.
       * Together with the total count of the sample values, this allows us to
       * compute the average value.  The count of all sample values is just the sum
       * of the counts of all the buckets.  As of M51, when the value of this field
       * would be 0, the field will be omitted instead.
       * </pre>
       *
       * <code>optional int64 sum = 2;</code>
       * @param value The sum to set.
       * @return This builder for chaining.
       */
      public Builder setSum(long value) {
        copyOnWrite();
        instance.setSum(value);
        return this;
      }
      /**
       * <pre>
       * The sum of all the sample values.
       * Together with the total count of the sample values, this allows us to
       * compute the average value.  The count of all sample values is just the sum
       * of the counts of all the buckets.  As of M51, when the value of this field
       * would be 0, the field will be omitted instead.
       * </pre>
       *
       * <code>optional int64 sum = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSum() {
        copyOnWrite();
        instance.clearSum();
        return this;
      }

      /**
       * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
       */
      @java.lang.Override
      public java.util.List<org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket> getBucketList() {
        return java.util.Collections.unmodifiableList(
            instance.getBucketList());
      }
      /**
       * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
       */
      @java.lang.Override
      public int getBucketCount() {
        return instance.getBucketCount();
      }/**
       * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket getBucket(int index) {
        return instance.getBucket(index);
      }
      /**
       * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
       */
      public Builder setBucket(
          int index, org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket value) {
        copyOnWrite();
        instance.setBucket(index, value);
        return this;
      }
      /**
       * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
       */
      public Builder setBucket(
          int index, org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket.Builder builderForValue) {
        copyOnWrite();
        instance.setBucket(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
       */
      public Builder addBucket(org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket value) {
        copyOnWrite();
        instance.addBucket(value);
        return this;
      }
      /**
       * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
       */
      public Builder addBucket(
          int index, org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket value) {
        copyOnWrite();
        instance.addBucket(index, value);
        return this;
      }
      /**
       * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
       */
      public Builder addBucket(
          org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket.Builder builderForValue) {
        copyOnWrite();
        instance.addBucket(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
       */
      public Builder addBucket(
          int index, org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket.Builder builderForValue) {
        copyOnWrite();
        instance.addBucket(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
       */
      public Builder addAllBucket(
          java.lang.Iterable<? extends org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket> values) {
        copyOnWrite();
        instance.addAllBucket(values);
        return this;
      }
      /**
       * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
       */
      public Builder clearBucket() {
        copyOnWrite();
        instance.clearBucket();
        return this;
      }
      /**
       * <code>repeated .metrics.HistogramEventProto.Bucket bucket = 3;</code>
       */
      public Builder removeBucket(int index) {
        copyOnWrite();
        instance.removeBucket(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:metrics.HistogramEventProto)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "nameHash_",
              "sum_",
              "bucket_",
              org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.Bucket.class,
            };
            java.lang.String info =
                "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0001\u0000\u0001\u1005\u0000\u0002" +
                "\u1002\u0001\u0003\u001b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:metrics.HistogramEventProto)
    private static final org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto DEFAULT_INSTANCE;
    static {
      HistogramEventProto defaultInstance = new HistogramEventProto();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        HistogramEventProto.class, defaultInstance);
    }

    public static org.chromium.components.metrics.HistogramEventProtos.HistogramEventProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<HistogramEventProto> PARSER;

    public static com.google.protobuf.Parser<HistogramEventProto> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
