// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perf_data.proto

package org.chromium.components.metrics;

public final class PerfDataProtos {
  private PerfDataProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface PerfDataProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:metrics.PerfDataProto)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
     */
    java.util.List<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr> 
        getFileAttrsList();
    /**
     * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
     */
    org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr getFileAttrs(int index);
    /**
     * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
     */
    int getFileAttrsCount();

    /**
     * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
     */
    java.util.List<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent> 
        getEventsList();
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
     */
    org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent getEvents(int index);
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
     */
    int getEventsCount();

    /**
     * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
     */
    java.util.List<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType> 
        getEventTypesList();
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
     */
    org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType getEventTypes(int index);
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
     */
    int getEventTypesCount();

    /**
     * <pre>
     * Time when quipper generated this perf data / protobuf, given as seconds
     * since the epoch.
     * </pre>
     *
     * <code>optional uint64 timestamp_sec = 3;</code>
     * @return Whether the timestampSec field is set.
     */
    boolean hasTimestampSec();
    /**
     * <pre>
     * Time when quipper generated this perf data / protobuf, given as seconds
     * since the epoch.
     * </pre>
     *
     * <code>optional uint64 timestamp_sec = 3;</code>
     * @return The timestampSec.
     */
    long getTimestampSec();

    /**
     * <pre>
     * Records some stats about the serialized perf events.
     * </pre>
     *
     * <code>optional .metrics.PerfDataProto.PerfEventStats stats = 4;</code>
     * @return Whether the stats field is set.
     */
    boolean hasStats();
    /**
     * <pre>
     * Records some stats about the serialized perf events.
     * </pre>
     *
     * <code>optional .metrics.PerfDataProto.PerfEventStats stats = 4;</code>
     * @return The stats.
     */
    org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats getStats();

    /**
     * <pre>
     * Build ID metadata.
     * </pre>
     *
     * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
     */
    java.util.List<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID> 
        getBuildIdsList();
    /**
     * <pre>
     * Build ID metadata.
     * </pre>
     *
     * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
     */
    org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID getBuildIds(int index);
    /**
     * <pre>
     * Build ID metadata.
     * </pre>
     *
     * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
     */
    int getBuildIdsCount();

    /**
     * <pre>
     * All the string metadata from the perf data file.
     * </pre>
     *
     * <code>optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;</code>
     * @return Whether the stringMetadata field is set.
     */
    boolean hasStringMetadata();
    /**
     * <pre>
     * All the string metadata from the perf data file.
     * </pre>
     *
     * <code>optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;</code>
     * @return The stringMetadata.
     */
    org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata getStringMetadata();
  }
  /**
   * <pre>
   * Please do not modify this protobuf directly, except to mirror the upstream
   * version found here:
   * https://github.com/google/perf_data_converter/blob/master/src/quipper/perf_data.proto
   * with some fields omitted for privacy reasons. Because it is a read-only copy
   * of the upstream protobuf, "Next tag:" comments are also absent.
   * </pre>
   *
   * Protobuf type {@code metrics.PerfDataProto}
   */
  public  static final class PerfDataProto extends
      com.google.protobuf.GeneratedMessageLite<
          PerfDataProto, PerfDataProto.Builder> implements
      // @@protoc_insertion_point(message_implements:metrics.PerfDataProto)
      PerfDataProtoOrBuilder {
    private PerfDataProto() {
      fileAttrs_ = emptyProtobufList();
      events_ = emptyProtobufList();
      eventTypes_ = emptyProtobufList();
      buildIds_ = emptyProtobufList();
    }
    public interface PerfEventAttrOrBuilder extends
        // @@protoc_insertion_point(interface_extends:metrics.PerfDataProto.PerfEventAttr)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Type of the event. Type is an enumeration and can be one of the values
       * described at: $kernel/include/linux/perf_event.h.
       * Example types are:
       * PERF_TYPE_HARDWARE
       * PERF_TYPE_SOFTWARE, etc.
       * </pre>
       *
       * <code>optional uint32 type = 1;</code>
       * @return Whether the type field is set.
       */
      boolean hasType();
      /**
       * <pre>
       * Type of the event. Type is an enumeration and can be one of the values
       * described at: $kernel/include/linux/perf_event.h.
       * Example types are:
       * PERF_TYPE_HARDWARE
       * PERF_TYPE_SOFTWARE, etc.
       * </pre>
       *
       * <code>optional uint32 type = 1;</code>
       * @return The type.
       */
      int getType();

      /**
       * <pre>
       * Size of the event data in bytes.
       * </pre>
       *
       * <code>optional uint32 size = 2;</code>
       * @return Whether the size field is set.
       */
      boolean hasSize();
      /**
       * <pre>
       * Size of the event data in bytes.
       * </pre>
       *
       * <code>optional uint32 size = 2;</code>
       * @return The size.
       */
      int getSize();

      /**
       * <pre>
       * The config stores the CPU-specific counter information.
       * </pre>
       *
       * <code>optional uint64 config = 3;</code>
       * @return Whether the config field is set.
       */
      boolean hasConfig();
      /**
       * <pre>
       * The config stores the CPU-specific counter information.
       * </pre>
       *
       * <code>optional uint64 config = 3;</code>
       * @return The config.
       */
      long getConfig();

      /**
       * <pre>
       * Sample period of the event. Indicates how often the event is
       * triggered in terms of # of events. After |sample_period| events, an event
       * will be recorded and stored.
       * </pre>
       *
       * <code>optional uint64 sample_period = 4;</code>
       * @return Whether the samplePeriod field is set.
       */
      boolean hasSamplePeriod();
      /**
       * <pre>
       * Sample period of the event. Indicates how often the event is
       * triggered in terms of # of events. After |sample_period| events, an event
       * will be recorded and stored.
       * </pre>
       *
       * <code>optional uint64 sample_period = 4;</code>
       * @return The samplePeriod.
       */
      long getSamplePeriod();

      /**
       * <pre>
       * Sample frequency of the event. Indicates how often the event is
       * triggered in terms of # per second. The kernel will try to record
       * |sample_freq| events per second.
       * </pre>
       *
       * <code>optional uint64 sample_freq = 5;</code>
       * @return Whether the sampleFreq field is set.
       */
      boolean hasSampleFreq();
      /**
       * <pre>
       * Sample frequency of the event. Indicates how often the event is
       * triggered in terms of # per second. The kernel will try to record
       * |sample_freq| events per second.
       * </pre>
       *
       * <code>optional uint64 sample_freq = 5;</code>
       * @return The sampleFreq.
       */
      long getSampleFreq();

      /**
       * <pre>
       * Sample type is a bitfield that records attributes of the sample. Example,
       * whether an entire callchain was recorded, etc.
       * </pre>
       *
       * <code>optional uint64 sample_type = 6;</code>
       * @return Whether the sampleType field is set.
       */
      boolean hasSampleType();
      /**
       * <pre>
       * Sample type is a bitfield that records attributes of the sample. Example,
       * whether an entire callchain was recorded, etc.
       * </pre>
       *
       * <code>optional uint64 sample_type = 6;</code>
       * @return The sampleType.
       */
      long getSampleType();

      /**
       * <pre>
       * Bitfield that indicates whether reads on the counter will return the
       * total time enabled and total time running.
       * </pre>
       *
       * <code>optional uint64 read_format = 7;</code>
       * @return Whether the readFormat field is set.
       */
      boolean hasReadFormat();
      /**
       * <pre>
       * Bitfield that indicates whether reads on the counter will return the
       * total time enabled and total time running.
       * </pre>
       *
       * <code>optional uint64 read_format = 7;</code>
       * @return The readFormat.
       */
      long getReadFormat();

      /**
       * <pre>
       * Indicates whether the counter starts off disabled.
       * </pre>
       *
       * <code>optional bool disabled = 8;</code>
       * @return Whether the disabled field is set.
       */
      boolean hasDisabled();
      /**
       * <pre>
       * Indicates whether the counter starts off disabled.
       * </pre>
       *
       * <code>optional bool disabled = 8;</code>
       * @return The disabled.
       */
      boolean getDisabled();

      /**
       * <pre>
       * Indicates whether child processes inherit the counter.
       * </pre>
       *
       * <code>optional bool inherit = 9;</code>
       * @return Whether the inherit field is set.
       */
      boolean hasInherit();
      /**
       * <pre>
       * Indicates whether child processes inherit the counter.
       * </pre>
       *
       * <code>optional bool inherit = 9;</code>
       * @return The inherit.
       */
      boolean getInherit();

      /**
       * <pre>
       * Indicates whether the counter is pinned to a particular CPU.
       * </pre>
       *
       * <code>optional bool pinned = 10;</code>
       * @return Whether the pinned field is set.
       */
      boolean hasPinned();
      /**
       * <pre>
       * Indicates whether the counter is pinned to a particular CPU.
       * </pre>
       *
       * <code>optional bool pinned = 10;</code>
       * @return The pinned.
       */
      boolean getPinned();

      /**
       * <pre>
       * Indicates whether this counter's group has exclusive access to the CPU's
       * counters.
       * </pre>
       *
       * <code>optional bool exclusive = 11;</code>
       * @return Whether the exclusive field is set.
       */
      boolean hasExclusive();
      /**
       * <pre>
       * Indicates whether this counter's group has exclusive access to the CPU's
       * counters.
       * </pre>
       *
       * <code>optional bool exclusive = 11;</code>
       * @return The exclusive.
       */
      boolean getExclusive();

      /**
       * <pre>
       * The following bits restrict events to be counted when the CPU is in user,
       * kernel, hypervisor or idle modes.
       * </pre>
       *
       * <code>optional bool exclude_user = 12;</code>
       * @return Whether the excludeUser field is set.
       */
      boolean hasExcludeUser();
      /**
       * <pre>
       * The following bits restrict events to be counted when the CPU is in user,
       * kernel, hypervisor or idle modes.
       * </pre>
       *
       * <code>optional bool exclude_user = 12;</code>
       * @return The excludeUser.
       */
      boolean getExcludeUser();

      /**
       * <code>optional bool exclude_kernel = 13;</code>
       * @return Whether the excludeKernel field is set.
       */
      boolean hasExcludeKernel();
      /**
       * <code>optional bool exclude_kernel = 13;</code>
       * @return The excludeKernel.
       */
      boolean getExcludeKernel();

      /**
       * <code>optional bool exclude_hv = 14;</code>
       * @return Whether the excludeHv field is set.
       */
      boolean hasExcludeHv();
      /**
       * <code>optional bool exclude_hv = 14;</code>
       * @return The excludeHv.
       */
      boolean getExcludeHv();

      /**
       * <code>optional bool exclude_idle = 15;</code>
       * @return Whether the excludeIdle field is set.
       */
      boolean hasExcludeIdle();
      /**
       * <code>optional bool exclude_idle = 15;</code>
       * @return The excludeIdle.
       */
      boolean getExcludeIdle();

      /**
       * <pre>
       * Indicates whether mmap events should be recorded.
       * </pre>
       *
       * <code>optional bool mmap = 16;</code>
       * @return Whether the mmap field is set.
       */
      boolean hasMmap();
      /**
       * <pre>
       * Indicates whether mmap events should be recorded.
       * </pre>
       *
       * <code>optional bool mmap = 16;</code>
       * @return The mmap.
       */
      boolean getMmap();

      /**
       * <pre>
       * Indicates whether process comm information should be recorded upon
       * process creation.
       * </pre>
       *
       * <code>optional bool comm = 17;</code>
       * @return Whether the comm field is set.
       */
      boolean hasComm();
      /**
       * <pre>
       * Indicates whether process comm information should be recorded upon
       * process creation.
       * </pre>
       *
       * <code>optional bool comm = 17;</code>
       * @return The comm.
       */
      boolean getComm();

      /**
       * <pre>
       * Indicates that we are in frequency mode, not period mode.
       * </pre>
       *
       * <code>optional bool freq = 18;</code>
       * @return Whether the freq field is set.
       */
      boolean hasFreq();
      /**
       * <pre>
       * Indicates that we are in frequency mode, not period mode.
       * </pre>
       *
       * <code>optional bool freq = 18;</code>
       * @return The freq.
       */
      boolean getFreq();

      /**
       * <pre>
       * Indicates whether we have per-task counts.
       * </pre>
       *
       * <code>optional bool inherit_stat = 19;</code>
       * @return Whether the inheritStat field is set.
       */
      boolean hasInheritStat();
      /**
       * <pre>
       * Indicates whether we have per-task counts.
       * </pre>
       *
       * <code>optional bool inherit_stat = 19;</code>
       * @return The inheritStat.
       */
      boolean getInheritStat();

      /**
       * <pre>
       * Indicates whether we enable perf events after an exec() function call.
       * </pre>
       *
       * <code>optional bool enable_on_exec = 20;</code>
       * @return Whether the enableOnExec field is set.
       */
      boolean hasEnableOnExec();
      /**
       * <pre>
       * Indicates whether we enable perf events after an exec() function call.
       * </pre>
       *
       * <code>optional bool enable_on_exec = 20;</code>
       * @return The enableOnExec.
       */
      boolean getEnableOnExec();

      /**
       * <pre>
       * Indicates whether we trace fork/exit.
       * </pre>
       *
       * <code>optional bool task = 21;</code>
       * @return Whether the task field is set.
       */
      boolean hasTask();
      /**
       * <pre>
       * Indicates whether we trace fork/exit.
       * </pre>
       *
       * <code>optional bool task = 21;</code>
       * @return The task.
       */
      boolean getTask();

      /**
       * <pre>
       * Indicates whether we are using a watermark to wake up.
       * </pre>
       *
       * <code>optional bool watermark = 22;</code>
       * @return Whether the watermark field is set.
       */
      boolean hasWatermark();
      /**
       * <pre>
       * Indicates whether we are using a watermark to wake up.
       * </pre>
       *
       * <code>optional bool watermark = 22;</code>
       * @return The watermark.
       */
      boolean getWatermark();

      /**
       * <pre>
       * CPUs often "skid" when recording events. That means the instruction
       * pointer may not be the same as the one that caused the counter overflow.
       * Indicates the capabilities of the CPU in terms of recording precise
       * instruction pointer.
       * </pre>
       *
       * <code>optional uint32 precise_ip = 23;</code>
       * @return Whether the preciseIp field is set.
       */
      boolean hasPreciseIp();
      /**
       * <pre>
       * CPUs often "skid" when recording events. That means the instruction
       * pointer may not be the same as the one that caused the counter overflow.
       * Indicates the capabilities of the CPU in terms of recording precise
       * instruction pointer.
       * </pre>
       *
       * <code>optional uint32 precise_ip = 23;</code>
       * @return The preciseIp.
       */
      int getPreciseIp();

      /**
       * <pre>
       * Indicates whether we have non-exec mmap data.
       * </pre>
       *
       * <code>optional bool mmap_data = 24;</code>
       * @return Whether the mmapData field is set.
       */
      boolean hasMmapData();
      /**
       * <pre>
       * Indicates whether we have non-exec mmap data.
       * </pre>
       *
       * <code>optional bool mmap_data = 24;</code>
       * @return The mmapData.
       */
      boolean getMmapData();

      /**
       * <pre>
       * If set, all the event types will have the same sample_type.
       * </pre>
       *
       * <code>optional bool sample_id_all = 25;</code>
       * @return Whether the sampleIdAll field is set.
       */
      boolean hasSampleIdAll();
      /**
       * <pre>
       * If set, all the event types will have the same sample_type.
       * </pre>
       *
       * <code>optional bool sample_id_all = 25;</code>
       * @return The sampleIdAll.
       */
      boolean getSampleIdAll();

      /**
       * <pre>
       * Indicates whether we are counting events from the host (when running a
       * VM).
       * </pre>
       *
       * <code>optional bool exclude_host = 26;</code>
       * @return Whether the excludeHost field is set.
       */
      boolean hasExcludeHost();
      /**
       * <pre>
       * Indicates whether we are counting events from the host (when running a
       * VM).
       * </pre>
       *
       * <code>optional bool exclude_host = 26;</code>
       * @return The excludeHost.
       */
      boolean getExcludeHost();

      /**
       * <pre>
       * Exclude events that happen on a guest OS.
       * </pre>
       *
       * <code>optional bool exclude_guest = 27;</code>
       * @return Whether the excludeGuest field is set.
       */
      boolean hasExcludeGuest();
      /**
       * <pre>
       * Exclude events that happen on a guest OS.
       * </pre>
       *
       * <code>optional bool exclude_guest = 27;</code>
       * @return The excludeGuest.
       */
      boolean getExcludeGuest();

      /**
       * <pre>
       * Contains the number of events after which we wake up.
       * </pre>
       *
       * <code>optional uint32 wakeup_events = 28;</code>
       * @return Whether the wakeupEvents field is set.
       */
      boolean hasWakeupEvents();
      /**
       * <pre>
       * Contains the number of events after which we wake up.
       * </pre>
       *
       * <code>optional uint32 wakeup_events = 28;</code>
       * @return The wakeupEvents.
       */
      int getWakeupEvents();

      /**
       * <pre>
       * Contains the number of bytes after which we wake up.
       * </pre>
       *
       * <code>optional uint32 wakeup_watermark = 29;</code>
       * @return Whether the wakeupWatermark field is set.
       */
      boolean hasWakeupWatermark();
      /**
       * <pre>
       * Contains the number of bytes after which we wake up.
       * </pre>
       *
       * <code>optional uint32 wakeup_watermark = 29;</code>
       * @return The wakeupWatermark.
       */
      int getWakeupWatermark();

      /**
       * <pre>
       * Information about the type of the breakpoint.
       * </pre>
       *
       * <code>optional uint32 bp_type = 30;</code>
       * @return Whether the bpType field is set.
       */
      boolean hasBpType();
      /**
       * <pre>
       * Information about the type of the breakpoint.
       * </pre>
       *
       * <code>optional uint32 bp_type = 30;</code>
       * @return The bpType.
       */
      int getBpType();

      /**
       * <pre>
       * Contains the breakpoint address.
       * </pre>
       *
       * <code>optional uint64 bp_addr = 31;</code>
       * @return Whether the bpAddr field is set.
       */
      boolean hasBpAddr();
      /**
       * <pre>
       * Contains the breakpoint address.
       * </pre>
       *
       * <code>optional uint64 bp_addr = 31;</code>
       * @return The bpAddr.
       */
      long getBpAddr();

      /**
       * <pre>
       * This is an extension of config (see above).
       * </pre>
       *
       * <code>optional uint64 config1 = 32;</code>
       * @return Whether the config1 field is set.
       */
      boolean hasConfig1();
      /**
       * <pre>
       * This is an extension of config (see above).
       * </pre>
       *
       * <code>optional uint64 config1 = 32;</code>
       * @return The config1.
       */
      long getConfig1();

      /**
       * <pre>
       * The length of the breakpoint data in bytes.
       * </pre>
       *
       * <code>optional uint64 bp_len = 33;</code>
       * @return Whether the bpLen field is set.
       */
      boolean hasBpLen();
      /**
       * <pre>
       * The length of the breakpoint data in bytes.
       * </pre>
       *
       * <code>optional uint64 bp_len = 33;</code>
       * @return The bpLen.
       */
      long getBpLen();

      /**
       * <pre>
       * This is an extension of config (see above).
       * </pre>
       *
       * <code>optional uint64 config2 = 34;</code>
       * @return Whether the config2 field is set.
       */
      boolean hasConfig2();
      /**
       * <pre>
       * This is an extension of config (see above).
       * </pre>
       *
       * <code>optional uint64 config2 = 34;</code>
       * @return The config2.
       */
      long getConfig2();

      /**
       * <pre>
       * Contains the type of branch, example: user, kernel, call, return, etc.
       * </pre>
       *
       * <code>optional uint64 branch_sample_type = 35;</code>
       * @return Whether the branchSampleType field is set.
       */
      boolean hasBranchSampleType();
      /**
       * <pre>
       * Contains the type of branch, example: user, kernel, call, return, etc.
       * </pre>
       *
       * <code>optional uint64 branch_sample_type = 35;</code>
       * @return The branchSampleType.
       */
      long getBranchSampleType();
    }
    /**
     * <pre>
     * Perf event attribute. Stores the event description.
     * This data structure is defined in the linux kernel:
     * $kernel/include/uapi/linux/perf_event.h.
     * </pre>
     *
     * Protobuf type {@code metrics.PerfDataProto.PerfEventAttr}
     */
    public  static final class PerfEventAttr extends
        com.google.protobuf.GeneratedMessageLite<
            PerfEventAttr, PerfEventAttr.Builder> implements
        // @@protoc_insertion_point(message_implements:metrics.PerfDataProto.PerfEventAttr)
        PerfEventAttrOrBuilder {
      private PerfEventAttr() {
      }
      private int bitField0_;
      private int bitField1_;
      public static final int TYPE_FIELD_NUMBER = 1;
      private int type_;
      /**
       * <pre>
       * Type of the event. Type is an enumeration and can be one of the values
       * described at: $kernel/include/linux/perf_event.h.
       * Example types are:
       * PERF_TYPE_HARDWARE
       * PERF_TYPE_SOFTWARE, etc.
       * </pre>
       *
       * <code>optional uint32 type = 1;</code>
       * @return Whether the type field is set.
       */
      @java.lang.Override
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Type of the event. Type is an enumeration and can be one of the values
       * described at: $kernel/include/linux/perf_event.h.
       * Example types are:
       * PERF_TYPE_HARDWARE
       * PERF_TYPE_SOFTWARE, etc.
       * </pre>
       *
       * <code>optional uint32 type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public int getType() {
        return type_;
      }
      /**
       * <pre>
       * Type of the event. Type is an enumeration and can be one of the values
       * described at: $kernel/include/linux/perf_event.h.
       * Example types are:
       * PERF_TYPE_HARDWARE
       * PERF_TYPE_SOFTWARE, etc.
       * </pre>
       *
       * <code>optional uint32 type = 1;</code>
       * @param value The type to set.
       */
      private void setType(int value) {
        bitField0_ |= 0x00000001;
        type_ = value;
      }
      /**
       * <pre>
       * Type of the event. Type is an enumeration and can be one of the values
       * described at: $kernel/include/linux/perf_event.h.
       * Example types are:
       * PERF_TYPE_HARDWARE
       * PERF_TYPE_SOFTWARE, etc.
       * </pre>
       *
       * <code>optional uint32 type = 1;</code>
       */
      private void clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
      }

      public static final int SIZE_FIELD_NUMBER = 2;
      private int size_;
      /**
       * <pre>
       * Size of the event data in bytes.
       * </pre>
       *
       * <code>optional uint32 size = 2;</code>
       * @return Whether the size field is set.
       */
      @java.lang.Override
      public boolean hasSize() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Size of the event data in bytes.
       * </pre>
       *
       * <code>optional uint32 size = 2;</code>
       * @return The size.
       */
      @java.lang.Override
      public int getSize() {
        return size_;
      }
      /**
       * <pre>
       * Size of the event data in bytes.
       * </pre>
       *
       * <code>optional uint32 size = 2;</code>
       * @param value The size to set.
       */
      private void setSize(int value) {
        bitField0_ |= 0x00000002;
        size_ = value;
      }
      /**
       * <pre>
       * Size of the event data in bytes.
       * </pre>
       *
       * <code>optional uint32 size = 2;</code>
       */
      private void clearSize() {
        bitField0_ = (bitField0_ & ~0x00000002);
        size_ = 0;
      }

      public static final int CONFIG_FIELD_NUMBER = 3;
      private long config_;
      /**
       * <pre>
       * The config stores the CPU-specific counter information.
       * </pre>
       *
       * <code>optional uint64 config = 3;</code>
       * @return Whether the config field is set.
       */
      @java.lang.Override
      public boolean hasConfig() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The config stores the CPU-specific counter information.
       * </pre>
       *
       * <code>optional uint64 config = 3;</code>
       * @return The config.
       */
      @java.lang.Override
      public long getConfig() {
        return config_;
      }
      /**
       * <pre>
       * The config stores the CPU-specific counter information.
       * </pre>
       *
       * <code>optional uint64 config = 3;</code>
       * @param value The config to set.
       */
      private void setConfig(long value) {
        bitField0_ |= 0x00000004;
        config_ = value;
      }
      /**
       * <pre>
       * The config stores the CPU-specific counter information.
       * </pre>
       *
       * <code>optional uint64 config = 3;</code>
       */
      private void clearConfig() {
        bitField0_ = (bitField0_ & ~0x00000004);
        config_ = 0L;
      }

      public static final int SAMPLE_PERIOD_FIELD_NUMBER = 4;
      private long samplePeriod_;
      /**
       * <pre>
       * Sample period of the event. Indicates how often the event is
       * triggered in terms of # of events. After |sample_period| events, an event
       * will be recorded and stored.
       * </pre>
       *
       * <code>optional uint64 sample_period = 4;</code>
       * @return Whether the samplePeriod field is set.
       */
      @java.lang.Override
      public boolean hasSamplePeriod() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Sample period of the event. Indicates how often the event is
       * triggered in terms of # of events. After |sample_period| events, an event
       * will be recorded and stored.
       * </pre>
       *
       * <code>optional uint64 sample_period = 4;</code>
       * @return The samplePeriod.
       */
      @java.lang.Override
      public long getSamplePeriod() {
        return samplePeriod_;
      }
      /**
       * <pre>
       * Sample period of the event. Indicates how often the event is
       * triggered in terms of # of events. After |sample_period| events, an event
       * will be recorded and stored.
       * </pre>
       *
       * <code>optional uint64 sample_period = 4;</code>
       * @param value The samplePeriod to set.
       */
      private void setSamplePeriod(long value) {
        bitField0_ |= 0x00000008;
        samplePeriod_ = value;
      }
      /**
       * <pre>
       * Sample period of the event. Indicates how often the event is
       * triggered in terms of # of events. After |sample_period| events, an event
       * will be recorded and stored.
       * </pre>
       *
       * <code>optional uint64 sample_period = 4;</code>
       */
      private void clearSamplePeriod() {
        bitField0_ = (bitField0_ & ~0x00000008);
        samplePeriod_ = 0L;
      }

      public static final int SAMPLE_FREQ_FIELD_NUMBER = 5;
      private long sampleFreq_;
      /**
       * <pre>
       * Sample frequency of the event. Indicates how often the event is
       * triggered in terms of # per second. The kernel will try to record
       * |sample_freq| events per second.
       * </pre>
       *
       * <code>optional uint64 sample_freq = 5;</code>
       * @return Whether the sampleFreq field is set.
       */
      @java.lang.Override
      public boolean hasSampleFreq() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Sample frequency of the event. Indicates how often the event is
       * triggered in terms of # per second. The kernel will try to record
       * |sample_freq| events per second.
       * </pre>
       *
       * <code>optional uint64 sample_freq = 5;</code>
       * @return The sampleFreq.
       */
      @java.lang.Override
      public long getSampleFreq() {
        return sampleFreq_;
      }
      /**
       * <pre>
       * Sample frequency of the event. Indicates how often the event is
       * triggered in terms of # per second. The kernel will try to record
       * |sample_freq| events per second.
       * </pre>
       *
       * <code>optional uint64 sample_freq = 5;</code>
       * @param value The sampleFreq to set.
       */
      private void setSampleFreq(long value) {
        bitField0_ |= 0x00000010;
        sampleFreq_ = value;
      }
      /**
       * <pre>
       * Sample frequency of the event. Indicates how often the event is
       * triggered in terms of # per second. The kernel will try to record
       * |sample_freq| events per second.
       * </pre>
       *
       * <code>optional uint64 sample_freq = 5;</code>
       */
      private void clearSampleFreq() {
        bitField0_ = (bitField0_ & ~0x00000010);
        sampleFreq_ = 0L;
      }

      public static final int SAMPLE_TYPE_FIELD_NUMBER = 6;
      private long sampleType_;
      /**
       * <pre>
       * Sample type is a bitfield that records attributes of the sample. Example,
       * whether an entire callchain was recorded, etc.
       * </pre>
       *
       * <code>optional uint64 sample_type = 6;</code>
       * @return Whether the sampleType field is set.
       */
      @java.lang.Override
      public boolean hasSampleType() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Sample type is a bitfield that records attributes of the sample. Example,
       * whether an entire callchain was recorded, etc.
       * </pre>
       *
       * <code>optional uint64 sample_type = 6;</code>
       * @return The sampleType.
       */
      @java.lang.Override
      public long getSampleType() {
        return sampleType_;
      }
      /**
       * <pre>
       * Sample type is a bitfield that records attributes of the sample. Example,
       * whether an entire callchain was recorded, etc.
       * </pre>
       *
       * <code>optional uint64 sample_type = 6;</code>
       * @param value The sampleType to set.
       */
      private void setSampleType(long value) {
        bitField0_ |= 0x00000020;
        sampleType_ = value;
      }
      /**
       * <pre>
       * Sample type is a bitfield that records attributes of the sample. Example,
       * whether an entire callchain was recorded, etc.
       * </pre>
       *
       * <code>optional uint64 sample_type = 6;</code>
       */
      private void clearSampleType() {
        bitField0_ = (bitField0_ & ~0x00000020);
        sampleType_ = 0L;
      }

      public static final int READ_FORMAT_FIELD_NUMBER = 7;
      private long readFormat_;
      /**
       * <pre>
       * Bitfield that indicates whether reads on the counter will return the
       * total time enabled and total time running.
       * </pre>
       *
       * <code>optional uint64 read_format = 7;</code>
       * @return Whether the readFormat field is set.
       */
      @java.lang.Override
      public boolean hasReadFormat() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * Bitfield that indicates whether reads on the counter will return the
       * total time enabled and total time running.
       * </pre>
       *
       * <code>optional uint64 read_format = 7;</code>
       * @return The readFormat.
       */
      @java.lang.Override
      public long getReadFormat() {
        return readFormat_;
      }
      /**
       * <pre>
       * Bitfield that indicates whether reads on the counter will return the
       * total time enabled and total time running.
       * </pre>
       *
       * <code>optional uint64 read_format = 7;</code>
       * @param value The readFormat to set.
       */
      private void setReadFormat(long value) {
        bitField0_ |= 0x00000040;
        readFormat_ = value;
      }
      /**
       * <pre>
       * Bitfield that indicates whether reads on the counter will return the
       * total time enabled and total time running.
       * </pre>
       *
       * <code>optional uint64 read_format = 7;</code>
       */
      private void clearReadFormat() {
        bitField0_ = (bitField0_ & ~0x00000040);
        readFormat_ = 0L;
      }

      public static final int DISABLED_FIELD_NUMBER = 8;
      private boolean disabled_;
      /**
       * <pre>
       * Indicates whether the counter starts off disabled.
       * </pre>
       *
       * <code>optional bool disabled = 8;</code>
       * @return Whether the disabled field is set.
       */
      @java.lang.Override
      public boolean hasDisabled() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * Indicates whether the counter starts off disabled.
       * </pre>
       *
       * <code>optional bool disabled = 8;</code>
       * @return The disabled.
       */
      @java.lang.Override
      public boolean getDisabled() {
        return disabled_;
      }
      /**
       * <pre>
       * Indicates whether the counter starts off disabled.
       * </pre>
       *
       * <code>optional bool disabled = 8;</code>
       * @param value The disabled to set.
       */
      private void setDisabled(boolean value) {
        bitField0_ |= 0x00000080;
        disabled_ = value;
      }
      /**
       * <pre>
       * Indicates whether the counter starts off disabled.
       * </pre>
       *
       * <code>optional bool disabled = 8;</code>
       */
      private void clearDisabled() {
        bitField0_ = (bitField0_ & ~0x00000080);
        disabled_ = false;
      }

      public static final int INHERIT_FIELD_NUMBER = 9;
      private boolean inherit_;
      /**
       * <pre>
       * Indicates whether child processes inherit the counter.
       * </pre>
       *
       * <code>optional bool inherit = 9;</code>
       * @return Whether the inherit field is set.
       */
      @java.lang.Override
      public boolean hasInherit() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * Indicates whether child processes inherit the counter.
       * </pre>
       *
       * <code>optional bool inherit = 9;</code>
       * @return The inherit.
       */
      @java.lang.Override
      public boolean getInherit() {
        return inherit_;
      }
      /**
       * <pre>
       * Indicates whether child processes inherit the counter.
       * </pre>
       *
       * <code>optional bool inherit = 9;</code>
       * @param value The inherit to set.
       */
      private void setInherit(boolean value) {
        bitField0_ |= 0x00000100;
        inherit_ = value;
      }
      /**
       * <pre>
       * Indicates whether child processes inherit the counter.
       * </pre>
       *
       * <code>optional bool inherit = 9;</code>
       */
      private void clearInherit() {
        bitField0_ = (bitField0_ & ~0x00000100);
        inherit_ = false;
      }

      public static final int PINNED_FIELD_NUMBER = 10;
      private boolean pinned_;
      /**
       * <pre>
       * Indicates whether the counter is pinned to a particular CPU.
       * </pre>
       *
       * <code>optional bool pinned = 10;</code>
       * @return Whether the pinned field is set.
       */
      @java.lang.Override
      public boolean hasPinned() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       * Indicates whether the counter is pinned to a particular CPU.
       * </pre>
       *
       * <code>optional bool pinned = 10;</code>
       * @return The pinned.
       */
      @java.lang.Override
      public boolean getPinned() {
        return pinned_;
      }
      /**
       * <pre>
       * Indicates whether the counter is pinned to a particular CPU.
       * </pre>
       *
       * <code>optional bool pinned = 10;</code>
       * @param value The pinned to set.
       */
      private void setPinned(boolean value) {
        bitField0_ |= 0x00000200;
        pinned_ = value;
      }
      /**
       * <pre>
       * Indicates whether the counter is pinned to a particular CPU.
       * </pre>
       *
       * <code>optional bool pinned = 10;</code>
       */
      private void clearPinned() {
        bitField0_ = (bitField0_ & ~0x00000200);
        pinned_ = false;
      }

      public static final int EXCLUSIVE_FIELD_NUMBER = 11;
      private boolean exclusive_;
      /**
       * <pre>
       * Indicates whether this counter's group has exclusive access to the CPU's
       * counters.
       * </pre>
       *
       * <code>optional bool exclusive = 11;</code>
       * @return Whether the exclusive field is set.
       */
      @java.lang.Override
      public boolean hasExclusive() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       * Indicates whether this counter's group has exclusive access to the CPU's
       * counters.
       * </pre>
       *
       * <code>optional bool exclusive = 11;</code>
       * @return The exclusive.
       */
      @java.lang.Override
      public boolean getExclusive() {
        return exclusive_;
      }
      /**
       * <pre>
       * Indicates whether this counter's group has exclusive access to the CPU's
       * counters.
       * </pre>
       *
       * <code>optional bool exclusive = 11;</code>
       * @param value The exclusive to set.
       */
      private void setExclusive(boolean value) {
        bitField0_ |= 0x00000400;
        exclusive_ = value;
      }
      /**
       * <pre>
       * Indicates whether this counter's group has exclusive access to the CPU's
       * counters.
       * </pre>
       *
       * <code>optional bool exclusive = 11;</code>
       */
      private void clearExclusive() {
        bitField0_ = (bitField0_ & ~0x00000400);
        exclusive_ = false;
      }

      public static final int EXCLUDE_USER_FIELD_NUMBER = 12;
      private boolean excludeUser_;
      /**
       * <pre>
       * The following bits restrict events to be counted when the CPU is in user,
       * kernel, hypervisor or idle modes.
       * </pre>
       *
       * <code>optional bool exclude_user = 12;</code>
       * @return Whether the excludeUser field is set.
       */
      @java.lang.Override
      public boolean hasExcludeUser() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <pre>
       * The following bits restrict events to be counted when the CPU is in user,
       * kernel, hypervisor or idle modes.
       * </pre>
       *
       * <code>optional bool exclude_user = 12;</code>
       * @return The excludeUser.
       */
      @java.lang.Override
      public boolean getExcludeUser() {
        return excludeUser_;
      }
      /**
       * <pre>
       * The following bits restrict events to be counted when the CPU is in user,
       * kernel, hypervisor or idle modes.
       * </pre>
       *
       * <code>optional bool exclude_user = 12;</code>
       * @param value The excludeUser to set.
       */
      private void setExcludeUser(boolean value) {
        bitField0_ |= 0x00000800;
        excludeUser_ = value;
      }
      /**
       * <pre>
       * The following bits restrict events to be counted when the CPU is in user,
       * kernel, hypervisor or idle modes.
       * </pre>
       *
       * <code>optional bool exclude_user = 12;</code>
       */
      private void clearExcludeUser() {
        bitField0_ = (bitField0_ & ~0x00000800);
        excludeUser_ = false;
      }

      public static final int EXCLUDE_KERNEL_FIELD_NUMBER = 13;
      private boolean excludeKernel_;
      /**
       * <code>optional bool exclude_kernel = 13;</code>
       * @return Whether the excludeKernel field is set.
       */
      @java.lang.Override
      public boolean hasExcludeKernel() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <code>optional bool exclude_kernel = 13;</code>
       * @return The excludeKernel.
       */
      @java.lang.Override
      public boolean getExcludeKernel() {
        return excludeKernel_;
      }
      /**
       * <code>optional bool exclude_kernel = 13;</code>
       * @param value The excludeKernel to set.
       */
      private void setExcludeKernel(boolean value) {
        bitField0_ |= 0x00001000;
        excludeKernel_ = value;
      }
      /**
       * <code>optional bool exclude_kernel = 13;</code>
       */
      private void clearExcludeKernel() {
        bitField0_ = (bitField0_ & ~0x00001000);
        excludeKernel_ = false;
      }

      public static final int EXCLUDE_HV_FIELD_NUMBER = 14;
      private boolean excludeHv_;
      /**
       * <code>optional bool exclude_hv = 14;</code>
       * @return Whether the excludeHv field is set.
       */
      @java.lang.Override
      public boolean hasExcludeHv() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <code>optional bool exclude_hv = 14;</code>
       * @return The excludeHv.
       */
      @java.lang.Override
      public boolean getExcludeHv() {
        return excludeHv_;
      }
      /**
       * <code>optional bool exclude_hv = 14;</code>
       * @param value The excludeHv to set.
       */
      private void setExcludeHv(boolean value) {
        bitField0_ |= 0x00002000;
        excludeHv_ = value;
      }
      /**
       * <code>optional bool exclude_hv = 14;</code>
       */
      private void clearExcludeHv() {
        bitField0_ = (bitField0_ & ~0x00002000);
        excludeHv_ = false;
      }

      public static final int EXCLUDE_IDLE_FIELD_NUMBER = 15;
      private boolean excludeIdle_;
      /**
       * <code>optional bool exclude_idle = 15;</code>
       * @return Whether the excludeIdle field is set.
       */
      @java.lang.Override
      public boolean hasExcludeIdle() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <code>optional bool exclude_idle = 15;</code>
       * @return The excludeIdle.
       */
      @java.lang.Override
      public boolean getExcludeIdle() {
        return excludeIdle_;
      }
      /**
       * <code>optional bool exclude_idle = 15;</code>
       * @param value The excludeIdle to set.
       */
      private void setExcludeIdle(boolean value) {
        bitField0_ |= 0x00004000;
        excludeIdle_ = value;
      }
      /**
       * <code>optional bool exclude_idle = 15;</code>
       */
      private void clearExcludeIdle() {
        bitField0_ = (bitField0_ & ~0x00004000);
        excludeIdle_ = false;
      }

      public static final int MMAP_FIELD_NUMBER = 16;
      private boolean mmap_;
      /**
       * <pre>
       * Indicates whether mmap events should be recorded.
       * </pre>
       *
       * <code>optional bool mmap = 16;</code>
       * @return Whether the mmap field is set.
       */
      @java.lang.Override
      public boolean hasMmap() {
        return ((bitField0_ & 0x00008000) != 0);
      }
      /**
       * <pre>
       * Indicates whether mmap events should be recorded.
       * </pre>
       *
       * <code>optional bool mmap = 16;</code>
       * @return The mmap.
       */
      @java.lang.Override
      public boolean getMmap() {
        return mmap_;
      }
      /**
       * <pre>
       * Indicates whether mmap events should be recorded.
       * </pre>
       *
       * <code>optional bool mmap = 16;</code>
       * @param value The mmap to set.
       */
      private void setMmap(boolean value) {
        bitField0_ |= 0x00008000;
        mmap_ = value;
      }
      /**
       * <pre>
       * Indicates whether mmap events should be recorded.
       * </pre>
       *
       * <code>optional bool mmap = 16;</code>
       */
      private void clearMmap() {
        bitField0_ = (bitField0_ & ~0x00008000);
        mmap_ = false;
      }

      public static final int COMM_FIELD_NUMBER = 17;
      private boolean comm_;
      /**
       * <pre>
       * Indicates whether process comm information should be recorded upon
       * process creation.
       * </pre>
       *
       * <code>optional bool comm = 17;</code>
       * @return Whether the comm field is set.
       */
      @java.lang.Override
      public boolean hasComm() {
        return ((bitField0_ & 0x00010000) != 0);
      }
      /**
       * <pre>
       * Indicates whether process comm information should be recorded upon
       * process creation.
       * </pre>
       *
       * <code>optional bool comm = 17;</code>
       * @return The comm.
       */
      @java.lang.Override
      public boolean getComm() {
        return comm_;
      }
      /**
       * <pre>
       * Indicates whether process comm information should be recorded upon
       * process creation.
       * </pre>
       *
       * <code>optional bool comm = 17;</code>
       * @param value The comm to set.
       */
      private void setComm(boolean value) {
        bitField0_ |= 0x00010000;
        comm_ = value;
      }
      /**
       * <pre>
       * Indicates whether process comm information should be recorded upon
       * process creation.
       * </pre>
       *
       * <code>optional bool comm = 17;</code>
       */
      private void clearComm() {
        bitField0_ = (bitField0_ & ~0x00010000);
        comm_ = false;
      }

      public static final int FREQ_FIELD_NUMBER = 18;
      private boolean freq_;
      /**
       * <pre>
       * Indicates that we are in frequency mode, not period mode.
       * </pre>
       *
       * <code>optional bool freq = 18;</code>
       * @return Whether the freq field is set.
       */
      @java.lang.Override
      public boolean hasFreq() {
        return ((bitField0_ & 0x00020000) != 0);
      }
      /**
       * <pre>
       * Indicates that we are in frequency mode, not period mode.
       * </pre>
       *
       * <code>optional bool freq = 18;</code>
       * @return The freq.
       */
      @java.lang.Override
      public boolean getFreq() {
        return freq_;
      }
      /**
       * <pre>
       * Indicates that we are in frequency mode, not period mode.
       * </pre>
       *
       * <code>optional bool freq = 18;</code>
       * @param value The freq to set.
       */
      private void setFreq(boolean value) {
        bitField0_ |= 0x00020000;
        freq_ = value;
      }
      /**
       * <pre>
       * Indicates that we are in frequency mode, not period mode.
       * </pre>
       *
       * <code>optional bool freq = 18;</code>
       */
      private void clearFreq() {
        bitField0_ = (bitField0_ & ~0x00020000);
        freq_ = false;
      }

      public static final int INHERIT_STAT_FIELD_NUMBER = 19;
      private boolean inheritStat_;
      /**
       * <pre>
       * Indicates whether we have per-task counts.
       * </pre>
       *
       * <code>optional bool inherit_stat = 19;</code>
       * @return Whether the inheritStat field is set.
       */
      @java.lang.Override
      public boolean hasInheritStat() {
        return ((bitField0_ & 0x00040000) != 0);
      }
      /**
       * <pre>
       * Indicates whether we have per-task counts.
       * </pre>
       *
       * <code>optional bool inherit_stat = 19;</code>
       * @return The inheritStat.
       */
      @java.lang.Override
      public boolean getInheritStat() {
        return inheritStat_;
      }
      /**
       * <pre>
       * Indicates whether we have per-task counts.
       * </pre>
       *
       * <code>optional bool inherit_stat = 19;</code>
       * @param value The inheritStat to set.
       */
      private void setInheritStat(boolean value) {
        bitField0_ |= 0x00040000;
        inheritStat_ = value;
      }
      /**
       * <pre>
       * Indicates whether we have per-task counts.
       * </pre>
       *
       * <code>optional bool inherit_stat = 19;</code>
       */
      private void clearInheritStat() {
        bitField0_ = (bitField0_ & ~0x00040000);
        inheritStat_ = false;
      }

      public static final int ENABLE_ON_EXEC_FIELD_NUMBER = 20;
      private boolean enableOnExec_;
      /**
       * <pre>
       * Indicates whether we enable perf events after an exec() function call.
       * </pre>
       *
       * <code>optional bool enable_on_exec = 20;</code>
       * @return Whether the enableOnExec field is set.
       */
      @java.lang.Override
      public boolean hasEnableOnExec() {
        return ((bitField0_ & 0x00080000) != 0);
      }
      /**
       * <pre>
       * Indicates whether we enable perf events after an exec() function call.
       * </pre>
       *
       * <code>optional bool enable_on_exec = 20;</code>
       * @return The enableOnExec.
       */
      @java.lang.Override
      public boolean getEnableOnExec() {
        return enableOnExec_;
      }
      /**
       * <pre>
       * Indicates whether we enable perf events after an exec() function call.
       * </pre>
       *
       * <code>optional bool enable_on_exec = 20;</code>
       * @param value The enableOnExec to set.
       */
      private void setEnableOnExec(boolean value) {
        bitField0_ |= 0x00080000;
        enableOnExec_ = value;
      }
      /**
       * <pre>
       * Indicates whether we enable perf events after an exec() function call.
       * </pre>
       *
       * <code>optional bool enable_on_exec = 20;</code>
       */
      private void clearEnableOnExec() {
        bitField0_ = (bitField0_ & ~0x00080000);
        enableOnExec_ = false;
      }

      public static final int TASK_FIELD_NUMBER = 21;
      private boolean task_;
      /**
       * <pre>
       * Indicates whether we trace fork/exit.
       * </pre>
       *
       * <code>optional bool task = 21;</code>
       * @return Whether the task field is set.
       */
      @java.lang.Override
      public boolean hasTask() {
        return ((bitField0_ & 0x00100000) != 0);
      }
      /**
       * <pre>
       * Indicates whether we trace fork/exit.
       * </pre>
       *
       * <code>optional bool task = 21;</code>
       * @return The task.
       */
      @java.lang.Override
      public boolean getTask() {
        return task_;
      }
      /**
       * <pre>
       * Indicates whether we trace fork/exit.
       * </pre>
       *
       * <code>optional bool task = 21;</code>
       * @param value The task to set.
       */
      private void setTask(boolean value) {
        bitField0_ |= 0x00100000;
        task_ = value;
      }
      /**
       * <pre>
       * Indicates whether we trace fork/exit.
       * </pre>
       *
       * <code>optional bool task = 21;</code>
       */
      private void clearTask() {
        bitField0_ = (bitField0_ & ~0x00100000);
        task_ = false;
      }

      public static final int WATERMARK_FIELD_NUMBER = 22;
      private boolean watermark_;
      /**
       * <pre>
       * Indicates whether we are using a watermark to wake up.
       * </pre>
       *
       * <code>optional bool watermark = 22;</code>
       * @return Whether the watermark field is set.
       */
      @java.lang.Override
      public boolean hasWatermark() {
        return ((bitField0_ & 0x00200000) != 0);
      }
      /**
       * <pre>
       * Indicates whether we are using a watermark to wake up.
       * </pre>
       *
       * <code>optional bool watermark = 22;</code>
       * @return The watermark.
       */
      @java.lang.Override
      public boolean getWatermark() {
        return watermark_;
      }
      /**
       * <pre>
       * Indicates whether we are using a watermark to wake up.
       * </pre>
       *
       * <code>optional bool watermark = 22;</code>
       * @param value The watermark to set.
       */
      private void setWatermark(boolean value) {
        bitField0_ |= 0x00200000;
        watermark_ = value;
      }
      /**
       * <pre>
       * Indicates whether we are using a watermark to wake up.
       * </pre>
       *
       * <code>optional bool watermark = 22;</code>
       */
      private void clearWatermark() {
        bitField0_ = (bitField0_ & ~0x00200000);
        watermark_ = false;
      }

      public static final int PRECISE_IP_FIELD_NUMBER = 23;
      private int preciseIp_;
      /**
       * <pre>
       * CPUs often "skid" when recording events. That means the instruction
       * pointer may not be the same as the one that caused the counter overflow.
       * Indicates the capabilities of the CPU in terms of recording precise
       * instruction pointer.
       * </pre>
       *
       * <code>optional uint32 precise_ip = 23;</code>
       * @return Whether the preciseIp field is set.
       */
      @java.lang.Override
      public boolean hasPreciseIp() {
        return ((bitField0_ & 0x00400000) != 0);
      }
      /**
       * <pre>
       * CPUs often "skid" when recording events. That means the instruction
       * pointer may not be the same as the one that caused the counter overflow.
       * Indicates the capabilities of the CPU in terms of recording precise
       * instruction pointer.
       * </pre>
       *
       * <code>optional uint32 precise_ip = 23;</code>
       * @return The preciseIp.
       */
      @java.lang.Override
      public int getPreciseIp() {
        return preciseIp_;
      }
      /**
       * <pre>
       * CPUs often "skid" when recording events. That means the instruction
       * pointer may not be the same as the one that caused the counter overflow.
       * Indicates the capabilities of the CPU in terms of recording precise
       * instruction pointer.
       * </pre>
       *
       * <code>optional uint32 precise_ip = 23;</code>
       * @param value The preciseIp to set.
       */
      private void setPreciseIp(int value) {
        bitField0_ |= 0x00400000;
        preciseIp_ = value;
      }
      /**
       * <pre>
       * CPUs often "skid" when recording events. That means the instruction
       * pointer may not be the same as the one that caused the counter overflow.
       * Indicates the capabilities of the CPU in terms of recording precise
       * instruction pointer.
       * </pre>
       *
       * <code>optional uint32 precise_ip = 23;</code>
       */
      private void clearPreciseIp() {
        bitField0_ = (bitField0_ & ~0x00400000);
        preciseIp_ = 0;
      }

      public static final int MMAP_DATA_FIELD_NUMBER = 24;
      private boolean mmapData_;
      /**
       * <pre>
       * Indicates whether we have non-exec mmap data.
       * </pre>
       *
       * <code>optional bool mmap_data = 24;</code>
       * @return Whether the mmapData field is set.
       */
      @java.lang.Override
      public boolean hasMmapData() {
        return ((bitField0_ & 0x00800000) != 0);
      }
      /**
       * <pre>
       * Indicates whether we have non-exec mmap data.
       * </pre>
       *
       * <code>optional bool mmap_data = 24;</code>
       * @return The mmapData.
       */
      @java.lang.Override
      public boolean getMmapData() {
        return mmapData_;
      }
      /**
       * <pre>
       * Indicates whether we have non-exec mmap data.
       * </pre>
       *
       * <code>optional bool mmap_data = 24;</code>
       * @param value The mmapData to set.
       */
      private void setMmapData(boolean value) {
        bitField0_ |= 0x00800000;
        mmapData_ = value;
      }
      /**
       * <pre>
       * Indicates whether we have non-exec mmap data.
       * </pre>
       *
       * <code>optional bool mmap_data = 24;</code>
       */
      private void clearMmapData() {
        bitField0_ = (bitField0_ & ~0x00800000);
        mmapData_ = false;
      }

      public static final int SAMPLE_ID_ALL_FIELD_NUMBER = 25;
      private boolean sampleIdAll_;
      /**
       * <pre>
       * If set, all the event types will have the same sample_type.
       * </pre>
       *
       * <code>optional bool sample_id_all = 25;</code>
       * @return Whether the sampleIdAll field is set.
       */
      @java.lang.Override
      public boolean hasSampleIdAll() {
        return ((bitField0_ & 0x01000000) != 0);
      }
      /**
       * <pre>
       * If set, all the event types will have the same sample_type.
       * </pre>
       *
       * <code>optional bool sample_id_all = 25;</code>
       * @return The sampleIdAll.
       */
      @java.lang.Override
      public boolean getSampleIdAll() {
        return sampleIdAll_;
      }
      /**
       * <pre>
       * If set, all the event types will have the same sample_type.
       * </pre>
       *
       * <code>optional bool sample_id_all = 25;</code>
       * @param value The sampleIdAll to set.
       */
      private void setSampleIdAll(boolean value) {
        bitField0_ |= 0x01000000;
        sampleIdAll_ = value;
      }
      /**
       * <pre>
       * If set, all the event types will have the same sample_type.
       * </pre>
       *
       * <code>optional bool sample_id_all = 25;</code>
       */
      private void clearSampleIdAll() {
        bitField0_ = (bitField0_ & ~0x01000000);
        sampleIdAll_ = false;
      }

      public static final int EXCLUDE_HOST_FIELD_NUMBER = 26;
      private boolean excludeHost_;
      /**
       * <pre>
       * Indicates whether we are counting events from the host (when running a
       * VM).
       * </pre>
       *
       * <code>optional bool exclude_host = 26;</code>
       * @return Whether the excludeHost field is set.
       */
      @java.lang.Override
      public boolean hasExcludeHost() {
        return ((bitField0_ & 0x02000000) != 0);
      }
      /**
       * <pre>
       * Indicates whether we are counting events from the host (when running a
       * VM).
       * </pre>
       *
       * <code>optional bool exclude_host = 26;</code>
       * @return The excludeHost.
       */
      @java.lang.Override
      public boolean getExcludeHost() {
        return excludeHost_;
      }
      /**
       * <pre>
       * Indicates whether we are counting events from the host (when running a
       * VM).
       * </pre>
       *
       * <code>optional bool exclude_host = 26;</code>
       * @param value The excludeHost to set.
       */
      private void setExcludeHost(boolean value) {
        bitField0_ |= 0x02000000;
        excludeHost_ = value;
      }
      /**
       * <pre>
       * Indicates whether we are counting events from the host (when running a
       * VM).
       * </pre>
       *
       * <code>optional bool exclude_host = 26;</code>
       */
      private void clearExcludeHost() {
        bitField0_ = (bitField0_ & ~0x02000000);
        excludeHost_ = false;
      }

      public static final int EXCLUDE_GUEST_FIELD_NUMBER = 27;
      private boolean excludeGuest_;
      /**
       * <pre>
       * Exclude events that happen on a guest OS.
       * </pre>
       *
       * <code>optional bool exclude_guest = 27;</code>
       * @return Whether the excludeGuest field is set.
       */
      @java.lang.Override
      public boolean hasExcludeGuest() {
        return ((bitField0_ & 0x04000000) != 0);
      }
      /**
       * <pre>
       * Exclude events that happen on a guest OS.
       * </pre>
       *
       * <code>optional bool exclude_guest = 27;</code>
       * @return The excludeGuest.
       */
      @java.lang.Override
      public boolean getExcludeGuest() {
        return excludeGuest_;
      }
      /**
       * <pre>
       * Exclude events that happen on a guest OS.
       * </pre>
       *
       * <code>optional bool exclude_guest = 27;</code>
       * @param value The excludeGuest to set.
       */
      private void setExcludeGuest(boolean value) {
        bitField0_ |= 0x04000000;
        excludeGuest_ = value;
      }
      /**
       * <pre>
       * Exclude events that happen on a guest OS.
       * </pre>
       *
       * <code>optional bool exclude_guest = 27;</code>
       */
      private void clearExcludeGuest() {
        bitField0_ = (bitField0_ & ~0x04000000);
        excludeGuest_ = false;
      }

      public static final int WAKEUP_EVENTS_FIELD_NUMBER = 28;
      private int wakeupEvents_;
      /**
       * <pre>
       * Contains the number of events after which we wake up.
       * </pre>
       *
       * <code>optional uint32 wakeup_events = 28;</code>
       * @return Whether the wakeupEvents field is set.
       */
      @java.lang.Override
      public boolean hasWakeupEvents() {
        return ((bitField0_ & 0x08000000) != 0);
      }
      /**
       * <pre>
       * Contains the number of events after which we wake up.
       * </pre>
       *
       * <code>optional uint32 wakeup_events = 28;</code>
       * @return The wakeupEvents.
       */
      @java.lang.Override
      public int getWakeupEvents() {
        return wakeupEvents_;
      }
      /**
       * <pre>
       * Contains the number of events after which we wake up.
       * </pre>
       *
       * <code>optional uint32 wakeup_events = 28;</code>
       * @param value The wakeupEvents to set.
       */
      private void setWakeupEvents(int value) {
        bitField0_ |= 0x08000000;
        wakeupEvents_ = value;
      }
      /**
       * <pre>
       * Contains the number of events after which we wake up.
       * </pre>
       *
       * <code>optional uint32 wakeup_events = 28;</code>
       */
      private void clearWakeupEvents() {
        bitField0_ = (bitField0_ & ~0x08000000);
        wakeupEvents_ = 0;
      }

      public static final int WAKEUP_WATERMARK_FIELD_NUMBER = 29;
      private int wakeupWatermark_;
      /**
       * <pre>
       * Contains the number of bytes after which we wake up.
       * </pre>
       *
       * <code>optional uint32 wakeup_watermark = 29;</code>
       * @return Whether the wakeupWatermark field is set.
       */
      @java.lang.Override
      public boolean hasWakeupWatermark() {
        return ((bitField0_ & 0x10000000) != 0);
      }
      /**
       * <pre>
       * Contains the number of bytes after which we wake up.
       * </pre>
       *
       * <code>optional uint32 wakeup_watermark = 29;</code>
       * @return The wakeupWatermark.
       */
      @java.lang.Override
      public int getWakeupWatermark() {
        return wakeupWatermark_;
      }
      /**
       * <pre>
       * Contains the number of bytes after which we wake up.
       * </pre>
       *
       * <code>optional uint32 wakeup_watermark = 29;</code>
       * @param value The wakeupWatermark to set.
       */
      private void setWakeupWatermark(int value) {
        bitField0_ |= 0x10000000;
        wakeupWatermark_ = value;
      }
      /**
       * <pre>
       * Contains the number of bytes after which we wake up.
       * </pre>
       *
       * <code>optional uint32 wakeup_watermark = 29;</code>
       */
      private void clearWakeupWatermark() {
        bitField0_ = (bitField0_ & ~0x10000000);
        wakeupWatermark_ = 0;
      }

      public static final int BP_TYPE_FIELD_NUMBER = 30;
      private int bpType_;
      /**
       * <pre>
       * Information about the type of the breakpoint.
       * </pre>
       *
       * <code>optional uint32 bp_type = 30;</code>
       * @return Whether the bpType field is set.
       */
      @java.lang.Override
      public boolean hasBpType() {
        return ((bitField0_ & 0x20000000) != 0);
      }
      /**
       * <pre>
       * Information about the type of the breakpoint.
       * </pre>
       *
       * <code>optional uint32 bp_type = 30;</code>
       * @return The bpType.
       */
      @java.lang.Override
      public int getBpType() {
        return bpType_;
      }
      /**
       * <pre>
       * Information about the type of the breakpoint.
       * </pre>
       *
       * <code>optional uint32 bp_type = 30;</code>
       * @param value The bpType to set.
       */
      private void setBpType(int value) {
        bitField0_ |= 0x20000000;
        bpType_ = value;
      }
      /**
       * <pre>
       * Information about the type of the breakpoint.
       * </pre>
       *
       * <code>optional uint32 bp_type = 30;</code>
       */
      private void clearBpType() {
        bitField0_ = (bitField0_ & ~0x20000000);
        bpType_ = 0;
      }

      public static final int BP_ADDR_FIELD_NUMBER = 31;
      private long bpAddr_;
      /**
       * <pre>
       * Contains the breakpoint address.
       * </pre>
       *
       * <code>optional uint64 bp_addr = 31;</code>
       * @return Whether the bpAddr field is set.
       */
      @java.lang.Override
      public boolean hasBpAddr() {
        return ((bitField0_ & 0x40000000) != 0);
      }
      /**
       * <pre>
       * Contains the breakpoint address.
       * </pre>
       *
       * <code>optional uint64 bp_addr = 31;</code>
       * @return The bpAddr.
       */
      @java.lang.Override
      public long getBpAddr() {
        return bpAddr_;
      }
      /**
       * <pre>
       * Contains the breakpoint address.
       * </pre>
       *
       * <code>optional uint64 bp_addr = 31;</code>
       * @param value The bpAddr to set.
       */
      private void setBpAddr(long value) {
        bitField0_ |= 0x40000000;
        bpAddr_ = value;
      }
      /**
       * <pre>
       * Contains the breakpoint address.
       * </pre>
       *
       * <code>optional uint64 bp_addr = 31;</code>
       */
      private void clearBpAddr() {
        bitField0_ = (bitField0_ & ~0x40000000);
        bpAddr_ = 0L;
      }

      public static final int CONFIG1_FIELD_NUMBER = 32;
      private long config1_;
      /**
       * <pre>
       * This is an extension of config (see above).
       * </pre>
       *
       * <code>optional uint64 config1 = 32;</code>
       * @return Whether the config1 field is set.
       */
      @java.lang.Override
      public boolean hasConfig1() {
        return ((bitField0_ & 0x80000000) != 0);
      }
      /**
       * <pre>
       * This is an extension of config (see above).
       * </pre>
       *
       * <code>optional uint64 config1 = 32;</code>
       * @return The config1.
       */
      @java.lang.Override
      public long getConfig1() {
        return config1_;
      }
      /**
       * <pre>
       * This is an extension of config (see above).
       * </pre>
       *
       * <code>optional uint64 config1 = 32;</code>
       * @param value The config1 to set.
       */
      private void setConfig1(long value) {
        bitField0_ |= 0x80000000;
        config1_ = value;
      }
      /**
       * <pre>
       * This is an extension of config (see above).
       * </pre>
       *
       * <code>optional uint64 config1 = 32;</code>
       */
      private void clearConfig1() {
        bitField0_ = (bitField0_ & ~0x80000000);
        config1_ = 0L;
      }

      public static final int BP_LEN_FIELD_NUMBER = 33;
      private long bpLen_;
      /**
       * <pre>
       * The length of the breakpoint data in bytes.
       * </pre>
       *
       * <code>optional uint64 bp_len = 33;</code>
       * @return Whether the bpLen field is set.
       */
      @java.lang.Override
      public boolean hasBpLen() {
        return ((bitField1_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The length of the breakpoint data in bytes.
       * </pre>
       *
       * <code>optional uint64 bp_len = 33;</code>
       * @return The bpLen.
       */
      @java.lang.Override
      public long getBpLen() {
        return bpLen_;
      }
      /**
       * <pre>
       * The length of the breakpoint data in bytes.
       * </pre>
       *
       * <code>optional uint64 bp_len = 33;</code>
       * @param value The bpLen to set.
       */
      private void setBpLen(long value) {
        bitField1_ |= 0x00000001;
        bpLen_ = value;
      }
      /**
       * <pre>
       * The length of the breakpoint data in bytes.
       * </pre>
       *
       * <code>optional uint64 bp_len = 33;</code>
       */
      private void clearBpLen() {
        bitField1_ = (bitField1_ & ~0x00000001);
        bpLen_ = 0L;
      }

      public static final int CONFIG2_FIELD_NUMBER = 34;
      private long config2_;
      /**
       * <pre>
       * This is an extension of config (see above).
       * </pre>
       *
       * <code>optional uint64 config2 = 34;</code>
       * @return Whether the config2 field is set.
       */
      @java.lang.Override
      public boolean hasConfig2() {
        return ((bitField1_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * This is an extension of config (see above).
       * </pre>
       *
       * <code>optional uint64 config2 = 34;</code>
       * @return The config2.
       */
      @java.lang.Override
      public long getConfig2() {
        return config2_;
      }
      /**
       * <pre>
       * This is an extension of config (see above).
       * </pre>
       *
       * <code>optional uint64 config2 = 34;</code>
       * @param value The config2 to set.
       */
      private void setConfig2(long value) {
        bitField1_ |= 0x00000002;
        config2_ = value;
      }
      /**
       * <pre>
       * This is an extension of config (see above).
       * </pre>
       *
       * <code>optional uint64 config2 = 34;</code>
       */
      private void clearConfig2() {
        bitField1_ = (bitField1_ & ~0x00000002);
        config2_ = 0L;
      }

      public static final int BRANCH_SAMPLE_TYPE_FIELD_NUMBER = 35;
      private long branchSampleType_;
      /**
       * <pre>
       * Contains the type of branch, example: user, kernel, call, return, etc.
       * </pre>
       *
       * <code>optional uint64 branch_sample_type = 35;</code>
       * @return Whether the branchSampleType field is set.
       */
      @java.lang.Override
      public boolean hasBranchSampleType() {
        return ((bitField1_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Contains the type of branch, example: user, kernel, call, return, etc.
       * </pre>
       *
       * <code>optional uint64 branch_sample_type = 35;</code>
       * @return The branchSampleType.
       */
      @java.lang.Override
      public long getBranchSampleType() {
        return branchSampleType_;
      }
      /**
       * <pre>
       * Contains the type of branch, example: user, kernel, call, return, etc.
       * </pre>
       *
       * <code>optional uint64 branch_sample_type = 35;</code>
       * @param value The branchSampleType to set.
       */
      private void setBranchSampleType(long value) {
        bitField1_ |= 0x00000004;
        branchSampleType_ = value;
      }
      /**
       * <pre>
       * Contains the type of branch, example: user, kernel, call, return, etc.
       * </pre>
       *
       * <code>optional uint64 branch_sample_type = 35;</code>
       */
      private void clearBranchSampleType() {
        bitField1_ = (bitField1_ & ~0x00000004);
        branchSampleType_ = 0L;
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Perf event attribute. Stores the event description.
       * This data structure is defined in the linux kernel:
       * $kernel/include/uapi/linux/perf_event.h.
       * </pre>
       *
       * Protobuf type {@code metrics.PerfDataProto.PerfEventAttr}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr, Builder> implements
          // @@protoc_insertion_point(builder_implements:metrics.PerfDataProto.PerfEventAttr)
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttrOrBuilder {
        // Construct using org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Type of the event. Type is an enumeration and can be one of the values
         * described at: $kernel/include/linux/perf_event.h.
         * Example types are:
         * PERF_TYPE_HARDWARE
         * PERF_TYPE_SOFTWARE, etc.
         * </pre>
         *
         * <code>optional uint32 type = 1;</code>
         * @return Whether the type field is set.
         */
        @java.lang.Override
        public boolean hasType() {
          return instance.hasType();
        }
        /**
         * <pre>
         * Type of the event. Type is an enumeration and can be one of the values
         * described at: $kernel/include/linux/perf_event.h.
         * Example types are:
         * PERF_TYPE_HARDWARE
         * PERF_TYPE_SOFTWARE, etc.
         * </pre>
         *
         * <code>optional uint32 type = 1;</code>
         * @return The type.
         */
        @java.lang.Override
        public int getType() {
          return instance.getType();
        }
        /**
         * <pre>
         * Type of the event. Type is an enumeration and can be one of the values
         * described at: $kernel/include/linux/perf_event.h.
         * Example types are:
         * PERF_TYPE_HARDWARE
         * PERF_TYPE_SOFTWARE, etc.
         * </pre>
         *
         * <code>optional uint32 type = 1;</code>
         * @param value The type to set.
         * @return This builder for chaining.
         */
        public Builder setType(int value) {
          copyOnWrite();
          instance.setType(value);
          return this;
        }
        /**
         * <pre>
         * Type of the event. Type is an enumeration and can be one of the values
         * described at: $kernel/include/linux/perf_event.h.
         * Example types are:
         * PERF_TYPE_HARDWARE
         * PERF_TYPE_SOFTWARE, etc.
         * </pre>
         *
         * <code>optional uint32 type = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearType() {
          copyOnWrite();
          instance.clearType();
          return this;
        }

        /**
         * <pre>
         * Size of the event data in bytes.
         * </pre>
         *
         * <code>optional uint32 size = 2;</code>
         * @return Whether the size field is set.
         */
        @java.lang.Override
        public boolean hasSize() {
          return instance.hasSize();
        }
        /**
         * <pre>
         * Size of the event data in bytes.
         * </pre>
         *
         * <code>optional uint32 size = 2;</code>
         * @return The size.
         */
        @java.lang.Override
        public int getSize() {
          return instance.getSize();
        }
        /**
         * <pre>
         * Size of the event data in bytes.
         * </pre>
         *
         * <code>optional uint32 size = 2;</code>
         * @param value The size to set.
         * @return This builder for chaining.
         */
        public Builder setSize(int value) {
          copyOnWrite();
          instance.setSize(value);
          return this;
        }
        /**
         * <pre>
         * Size of the event data in bytes.
         * </pre>
         *
         * <code>optional uint32 size = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearSize() {
          copyOnWrite();
          instance.clearSize();
          return this;
        }

        /**
         * <pre>
         * The config stores the CPU-specific counter information.
         * </pre>
         *
         * <code>optional uint64 config = 3;</code>
         * @return Whether the config field is set.
         */
        @java.lang.Override
        public boolean hasConfig() {
          return instance.hasConfig();
        }
        /**
         * <pre>
         * The config stores the CPU-specific counter information.
         * </pre>
         *
         * <code>optional uint64 config = 3;</code>
         * @return The config.
         */
        @java.lang.Override
        public long getConfig() {
          return instance.getConfig();
        }
        /**
         * <pre>
         * The config stores the CPU-specific counter information.
         * </pre>
         *
         * <code>optional uint64 config = 3;</code>
         * @param value The config to set.
         * @return This builder for chaining.
         */
        public Builder setConfig(long value) {
          copyOnWrite();
          instance.setConfig(value);
          return this;
        }
        /**
         * <pre>
         * The config stores the CPU-specific counter information.
         * </pre>
         *
         * <code>optional uint64 config = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearConfig() {
          copyOnWrite();
          instance.clearConfig();
          return this;
        }

        /**
         * <pre>
         * Sample period of the event. Indicates how often the event is
         * triggered in terms of # of events. After |sample_period| events, an event
         * will be recorded and stored.
         * </pre>
         *
         * <code>optional uint64 sample_period = 4;</code>
         * @return Whether the samplePeriod field is set.
         */
        @java.lang.Override
        public boolean hasSamplePeriod() {
          return instance.hasSamplePeriod();
        }
        /**
         * <pre>
         * Sample period of the event. Indicates how often the event is
         * triggered in terms of # of events. After |sample_period| events, an event
         * will be recorded and stored.
         * </pre>
         *
         * <code>optional uint64 sample_period = 4;</code>
         * @return The samplePeriod.
         */
        @java.lang.Override
        public long getSamplePeriod() {
          return instance.getSamplePeriod();
        }
        /**
         * <pre>
         * Sample period of the event. Indicates how often the event is
         * triggered in terms of # of events. After |sample_period| events, an event
         * will be recorded and stored.
         * </pre>
         *
         * <code>optional uint64 sample_period = 4;</code>
         * @param value The samplePeriod to set.
         * @return This builder for chaining.
         */
        public Builder setSamplePeriod(long value) {
          copyOnWrite();
          instance.setSamplePeriod(value);
          return this;
        }
        /**
         * <pre>
         * Sample period of the event. Indicates how often the event is
         * triggered in terms of # of events. After |sample_period| events, an event
         * will be recorded and stored.
         * </pre>
         *
         * <code>optional uint64 sample_period = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearSamplePeriod() {
          copyOnWrite();
          instance.clearSamplePeriod();
          return this;
        }

        /**
         * <pre>
         * Sample frequency of the event. Indicates how often the event is
         * triggered in terms of # per second. The kernel will try to record
         * |sample_freq| events per second.
         * </pre>
         *
         * <code>optional uint64 sample_freq = 5;</code>
         * @return Whether the sampleFreq field is set.
         */
        @java.lang.Override
        public boolean hasSampleFreq() {
          return instance.hasSampleFreq();
        }
        /**
         * <pre>
         * Sample frequency of the event. Indicates how often the event is
         * triggered in terms of # per second. The kernel will try to record
         * |sample_freq| events per second.
         * </pre>
         *
         * <code>optional uint64 sample_freq = 5;</code>
         * @return The sampleFreq.
         */
        @java.lang.Override
        public long getSampleFreq() {
          return instance.getSampleFreq();
        }
        /**
         * <pre>
         * Sample frequency of the event. Indicates how often the event is
         * triggered in terms of # per second. The kernel will try to record
         * |sample_freq| events per second.
         * </pre>
         *
         * <code>optional uint64 sample_freq = 5;</code>
         * @param value The sampleFreq to set.
         * @return This builder for chaining.
         */
        public Builder setSampleFreq(long value) {
          copyOnWrite();
          instance.setSampleFreq(value);
          return this;
        }
        /**
         * <pre>
         * Sample frequency of the event. Indicates how often the event is
         * triggered in terms of # per second. The kernel will try to record
         * |sample_freq| events per second.
         * </pre>
         *
         * <code>optional uint64 sample_freq = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearSampleFreq() {
          copyOnWrite();
          instance.clearSampleFreq();
          return this;
        }

        /**
         * <pre>
         * Sample type is a bitfield that records attributes of the sample. Example,
         * whether an entire callchain was recorded, etc.
         * </pre>
         *
         * <code>optional uint64 sample_type = 6;</code>
         * @return Whether the sampleType field is set.
         */
        @java.lang.Override
        public boolean hasSampleType() {
          return instance.hasSampleType();
        }
        /**
         * <pre>
         * Sample type is a bitfield that records attributes of the sample. Example,
         * whether an entire callchain was recorded, etc.
         * </pre>
         *
         * <code>optional uint64 sample_type = 6;</code>
         * @return The sampleType.
         */
        @java.lang.Override
        public long getSampleType() {
          return instance.getSampleType();
        }
        /**
         * <pre>
         * Sample type is a bitfield that records attributes of the sample. Example,
         * whether an entire callchain was recorded, etc.
         * </pre>
         *
         * <code>optional uint64 sample_type = 6;</code>
         * @param value The sampleType to set.
         * @return This builder for chaining.
         */
        public Builder setSampleType(long value) {
          copyOnWrite();
          instance.setSampleType(value);
          return this;
        }
        /**
         * <pre>
         * Sample type is a bitfield that records attributes of the sample. Example,
         * whether an entire callchain was recorded, etc.
         * </pre>
         *
         * <code>optional uint64 sample_type = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearSampleType() {
          copyOnWrite();
          instance.clearSampleType();
          return this;
        }

        /**
         * <pre>
         * Bitfield that indicates whether reads on the counter will return the
         * total time enabled and total time running.
         * </pre>
         *
         * <code>optional uint64 read_format = 7;</code>
         * @return Whether the readFormat field is set.
         */
        @java.lang.Override
        public boolean hasReadFormat() {
          return instance.hasReadFormat();
        }
        /**
         * <pre>
         * Bitfield that indicates whether reads on the counter will return the
         * total time enabled and total time running.
         * </pre>
         *
         * <code>optional uint64 read_format = 7;</code>
         * @return The readFormat.
         */
        @java.lang.Override
        public long getReadFormat() {
          return instance.getReadFormat();
        }
        /**
         * <pre>
         * Bitfield that indicates whether reads on the counter will return the
         * total time enabled and total time running.
         * </pre>
         *
         * <code>optional uint64 read_format = 7;</code>
         * @param value The readFormat to set.
         * @return This builder for chaining.
         */
        public Builder setReadFormat(long value) {
          copyOnWrite();
          instance.setReadFormat(value);
          return this;
        }
        /**
         * <pre>
         * Bitfield that indicates whether reads on the counter will return the
         * total time enabled and total time running.
         * </pre>
         *
         * <code>optional uint64 read_format = 7;</code>
         * @return This builder for chaining.
         */
        public Builder clearReadFormat() {
          copyOnWrite();
          instance.clearReadFormat();
          return this;
        }

        /**
         * <pre>
         * Indicates whether the counter starts off disabled.
         * </pre>
         *
         * <code>optional bool disabled = 8;</code>
         * @return Whether the disabled field is set.
         */
        @java.lang.Override
        public boolean hasDisabled() {
          return instance.hasDisabled();
        }
        /**
         * <pre>
         * Indicates whether the counter starts off disabled.
         * </pre>
         *
         * <code>optional bool disabled = 8;</code>
         * @return The disabled.
         */
        @java.lang.Override
        public boolean getDisabled() {
          return instance.getDisabled();
        }
        /**
         * <pre>
         * Indicates whether the counter starts off disabled.
         * </pre>
         *
         * <code>optional bool disabled = 8;</code>
         * @param value The disabled to set.
         * @return This builder for chaining.
         */
        public Builder setDisabled(boolean value) {
          copyOnWrite();
          instance.setDisabled(value);
          return this;
        }
        /**
         * <pre>
         * Indicates whether the counter starts off disabled.
         * </pre>
         *
         * <code>optional bool disabled = 8;</code>
         * @return This builder for chaining.
         */
        public Builder clearDisabled() {
          copyOnWrite();
          instance.clearDisabled();
          return this;
        }

        /**
         * <pre>
         * Indicates whether child processes inherit the counter.
         * </pre>
         *
         * <code>optional bool inherit = 9;</code>
         * @return Whether the inherit field is set.
         */
        @java.lang.Override
        public boolean hasInherit() {
          return instance.hasInherit();
        }
        /**
         * <pre>
         * Indicates whether child processes inherit the counter.
         * </pre>
         *
         * <code>optional bool inherit = 9;</code>
         * @return The inherit.
         */
        @java.lang.Override
        public boolean getInherit() {
          return instance.getInherit();
        }
        /**
         * <pre>
         * Indicates whether child processes inherit the counter.
         * </pre>
         *
         * <code>optional bool inherit = 9;</code>
         * @param value The inherit to set.
         * @return This builder for chaining.
         */
        public Builder setInherit(boolean value) {
          copyOnWrite();
          instance.setInherit(value);
          return this;
        }
        /**
         * <pre>
         * Indicates whether child processes inherit the counter.
         * </pre>
         *
         * <code>optional bool inherit = 9;</code>
         * @return This builder for chaining.
         */
        public Builder clearInherit() {
          copyOnWrite();
          instance.clearInherit();
          return this;
        }

        /**
         * <pre>
         * Indicates whether the counter is pinned to a particular CPU.
         * </pre>
         *
         * <code>optional bool pinned = 10;</code>
         * @return Whether the pinned field is set.
         */
        @java.lang.Override
        public boolean hasPinned() {
          return instance.hasPinned();
        }
        /**
         * <pre>
         * Indicates whether the counter is pinned to a particular CPU.
         * </pre>
         *
         * <code>optional bool pinned = 10;</code>
         * @return The pinned.
         */
        @java.lang.Override
        public boolean getPinned() {
          return instance.getPinned();
        }
        /**
         * <pre>
         * Indicates whether the counter is pinned to a particular CPU.
         * </pre>
         *
         * <code>optional bool pinned = 10;</code>
         * @param value The pinned to set.
         * @return This builder for chaining.
         */
        public Builder setPinned(boolean value) {
          copyOnWrite();
          instance.setPinned(value);
          return this;
        }
        /**
         * <pre>
         * Indicates whether the counter is pinned to a particular CPU.
         * </pre>
         *
         * <code>optional bool pinned = 10;</code>
         * @return This builder for chaining.
         */
        public Builder clearPinned() {
          copyOnWrite();
          instance.clearPinned();
          return this;
        }

        /**
         * <pre>
         * Indicates whether this counter's group has exclusive access to the CPU's
         * counters.
         * </pre>
         *
         * <code>optional bool exclusive = 11;</code>
         * @return Whether the exclusive field is set.
         */
        @java.lang.Override
        public boolean hasExclusive() {
          return instance.hasExclusive();
        }
        /**
         * <pre>
         * Indicates whether this counter's group has exclusive access to the CPU's
         * counters.
         * </pre>
         *
         * <code>optional bool exclusive = 11;</code>
         * @return The exclusive.
         */
        @java.lang.Override
        public boolean getExclusive() {
          return instance.getExclusive();
        }
        /**
         * <pre>
         * Indicates whether this counter's group has exclusive access to the CPU's
         * counters.
         * </pre>
         *
         * <code>optional bool exclusive = 11;</code>
         * @param value The exclusive to set.
         * @return This builder for chaining.
         */
        public Builder setExclusive(boolean value) {
          copyOnWrite();
          instance.setExclusive(value);
          return this;
        }
        /**
         * <pre>
         * Indicates whether this counter's group has exclusive access to the CPU's
         * counters.
         * </pre>
         *
         * <code>optional bool exclusive = 11;</code>
         * @return This builder for chaining.
         */
        public Builder clearExclusive() {
          copyOnWrite();
          instance.clearExclusive();
          return this;
        }

        /**
         * <pre>
         * The following bits restrict events to be counted when the CPU is in user,
         * kernel, hypervisor or idle modes.
         * </pre>
         *
         * <code>optional bool exclude_user = 12;</code>
         * @return Whether the excludeUser field is set.
         */
        @java.lang.Override
        public boolean hasExcludeUser() {
          return instance.hasExcludeUser();
        }
        /**
         * <pre>
         * The following bits restrict events to be counted when the CPU is in user,
         * kernel, hypervisor or idle modes.
         * </pre>
         *
         * <code>optional bool exclude_user = 12;</code>
         * @return The excludeUser.
         */
        @java.lang.Override
        public boolean getExcludeUser() {
          return instance.getExcludeUser();
        }
        /**
         * <pre>
         * The following bits restrict events to be counted when the CPU is in user,
         * kernel, hypervisor or idle modes.
         * </pre>
         *
         * <code>optional bool exclude_user = 12;</code>
         * @param value The excludeUser to set.
         * @return This builder for chaining.
         */
        public Builder setExcludeUser(boolean value) {
          copyOnWrite();
          instance.setExcludeUser(value);
          return this;
        }
        /**
         * <pre>
         * The following bits restrict events to be counted when the CPU is in user,
         * kernel, hypervisor or idle modes.
         * </pre>
         *
         * <code>optional bool exclude_user = 12;</code>
         * @return This builder for chaining.
         */
        public Builder clearExcludeUser() {
          copyOnWrite();
          instance.clearExcludeUser();
          return this;
        }

        /**
         * <code>optional bool exclude_kernel = 13;</code>
         * @return Whether the excludeKernel field is set.
         */
        @java.lang.Override
        public boolean hasExcludeKernel() {
          return instance.hasExcludeKernel();
        }
        /**
         * <code>optional bool exclude_kernel = 13;</code>
         * @return The excludeKernel.
         */
        @java.lang.Override
        public boolean getExcludeKernel() {
          return instance.getExcludeKernel();
        }
        /**
         * <code>optional bool exclude_kernel = 13;</code>
         * @param value The excludeKernel to set.
         * @return This builder for chaining.
         */
        public Builder setExcludeKernel(boolean value) {
          copyOnWrite();
          instance.setExcludeKernel(value);
          return this;
        }
        /**
         * <code>optional bool exclude_kernel = 13;</code>
         * @return This builder for chaining.
         */
        public Builder clearExcludeKernel() {
          copyOnWrite();
          instance.clearExcludeKernel();
          return this;
        }

        /**
         * <code>optional bool exclude_hv = 14;</code>
         * @return Whether the excludeHv field is set.
         */
        @java.lang.Override
        public boolean hasExcludeHv() {
          return instance.hasExcludeHv();
        }
        /**
         * <code>optional bool exclude_hv = 14;</code>
         * @return The excludeHv.
         */
        @java.lang.Override
        public boolean getExcludeHv() {
          return instance.getExcludeHv();
        }
        /**
         * <code>optional bool exclude_hv = 14;</code>
         * @param value The excludeHv to set.
         * @return This builder for chaining.
         */
        public Builder setExcludeHv(boolean value) {
          copyOnWrite();
          instance.setExcludeHv(value);
          return this;
        }
        /**
         * <code>optional bool exclude_hv = 14;</code>
         * @return This builder for chaining.
         */
        public Builder clearExcludeHv() {
          copyOnWrite();
          instance.clearExcludeHv();
          return this;
        }

        /**
         * <code>optional bool exclude_idle = 15;</code>
         * @return Whether the excludeIdle field is set.
         */
        @java.lang.Override
        public boolean hasExcludeIdle() {
          return instance.hasExcludeIdle();
        }
        /**
         * <code>optional bool exclude_idle = 15;</code>
         * @return The excludeIdle.
         */
        @java.lang.Override
        public boolean getExcludeIdle() {
          return instance.getExcludeIdle();
        }
        /**
         * <code>optional bool exclude_idle = 15;</code>
         * @param value The excludeIdle to set.
         * @return This builder for chaining.
         */
        public Builder setExcludeIdle(boolean value) {
          copyOnWrite();
          instance.setExcludeIdle(value);
          return this;
        }
        /**
         * <code>optional bool exclude_idle = 15;</code>
         * @return This builder for chaining.
         */
        public Builder clearExcludeIdle() {
          copyOnWrite();
          instance.clearExcludeIdle();
          return this;
        }

        /**
         * <pre>
         * Indicates whether mmap events should be recorded.
         * </pre>
         *
         * <code>optional bool mmap = 16;</code>
         * @return Whether the mmap field is set.
         */
        @java.lang.Override
        public boolean hasMmap() {
          return instance.hasMmap();
        }
        /**
         * <pre>
         * Indicates whether mmap events should be recorded.
         * </pre>
         *
         * <code>optional bool mmap = 16;</code>
         * @return The mmap.
         */
        @java.lang.Override
        public boolean getMmap() {
          return instance.getMmap();
        }
        /**
         * <pre>
         * Indicates whether mmap events should be recorded.
         * </pre>
         *
         * <code>optional bool mmap = 16;</code>
         * @param value The mmap to set.
         * @return This builder for chaining.
         */
        public Builder setMmap(boolean value) {
          copyOnWrite();
          instance.setMmap(value);
          return this;
        }
        /**
         * <pre>
         * Indicates whether mmap events should be recorded.
         * </pre>
         *
         * <code>optional bool mmap = 16;</code>
         * @return This builder for chaining.
         */
        public Builder clearMmap() {
          copyOnWrite();
          instance.clearMmap();
          return this;
        }

        /**
         * <pre>
         * Indicates whether process comm information should be recorded upon
         * process creation.
         * </pre>
         *
         * <code>optional bool comm = 17;</code>
         * @return Whether the comm field is set.
         */
        @java.lang.Override
        public boolean hasComm() {
          return instance.hasComm();
        }
        /**
         * <pre>
         * Indicates whether process comm information should be recorded upon
         * process creation.
         * </pre>
         *
         * <code>optional bool comm = 17;</code>
         * @return The comm.
         */
        @java.lang.Override
        public boolean getComm() {
          return instance.getComm();
        }
        /**
         * <pre>
         * Indicates whether process comm information should be recorded upon
         * process creation.
         * </pre>
         *
         * <code>optional bool comm = 17;</code>
         * @param value The comm to set.
         * @return This builder for chaining.
         */
        public Builder setComm(boolean value) {
          copyOnWrite();
          instance.setComm(value);
          return this;
        }
        /**
         * <pre>
         * Indicates whether process comm information should be recorded upon
         * process creation.
         * </pre>
         *
         * <code>optional bool comm = 17;</code>
         * @return This builder for chaining.
         */
        public Builder clearComm() {
          copyOnWrite();
          instance.clearComm();
          return this;
        }

        /**
         * <pre>
         * Indicates that we are in frequency mode, not period mode.
         * </pre>
         *
         * <code>optional bool freq = 18;</code>
         * @return Whether the freq field is set.
         */
        @java.lang.Override
        public boolean hasFreq() {
          return instance.hasFreq();
        }
        /**
         * <pre>
         * Indicates that we are in frequency mode, not period mode.
         * </pre>
         *
         * <code>optional bool freq = 18;</code>
         * @return The freq.
         */
        @java.lang.Override
        public boolean getFreq() {
          return instance.getFreq();
        }
        /**
         * <pre>
         * Indicates that we are in frequency mode, not period mode.
         * </pre>
         *
         * <code>optional bool freq = 18;</code>
         * @param value The freq to set.
         * @return This builder for chaining.
         */
        public Builder setFreq(boolean value) {
          copyOnWrite();
          instance.setFreq(value);
          return this;
        }
        /**
         * <pre>
         * Indicates that we are in frequency mode, not period mode.
         * </pre>
         *
         * <code>optional bool freq = 18;</code>
         * @return This builder for chaining.
         */
        public Builder clearFreq() {
          copyOnWrite();
          instance.clearFreq();
          return this;
        }

        /**
         * <pre>
         * Indicates whether we have per-task counts.
         * </pre>
         *
         * <code>optional bool inherit_stat = 19;</code>
         * @return Whether the inheritStat field is set.
         */
        @java.lang.Override
        public boolean hasInheritStat() {
          return instance.hasInheritStat();
        }
        /**
         * <pre>
         * Indicates whether we have per-task counts.
         * </pre>
         *
         * <code>optional bool inherit_stat = 19;</code>
         * @return The inheritStat.
         */
        @java.lang.Override
        public boolean getInheritStat() {
          return instance.getInheritStat();
        }
        /**
         * <pre>
         * Indicates whether we have per-task counts.
         * </pre>
         *
         * <code>optional bool inherit_stat = 19;</code>
         * @param value The inheritStat to set.
         * @return This builder for chaining.
         */
        public Builder setInheritStat(boolean value) {
          copyOnWrite();
          instance.setInheritStat(value);
          return this;
        }
        /**
         * <pre>
         * Indicates whether we have per-task counts.
         * </pre>
         *
         * <code>optional bool inherit_stat = 19;</code>
         * @return This builder for chaining.
         */
        public Builder clearInheritStat() {
          copyOnWrite();
          instance.clearInheritStat();
          return this;
        }

        /**
         * <pre>
         * Indicates whether we enable perf events after an exec() function call.
         * </pre>
         *
         * <code>optional bool enable_on_exec = 20;</code>
         * @return Whether the enableOnExec field is set.
         */
        @java.lang.Override
        public boolean hasEnableOnExec() {
          return instance.hasEnableOnExec();
        }
        /**
         * <pre>
         * Indicates whether we enable perf events after an exec() function call.
         * </pre>
         *
         * <code>optional bool enable_on_exec = 20;</code>
         * @return The enableOnExec.
         */
        @java.lang.Override
        public boolean getEnableOnExec() {
          return instance.getEnableOnExec();
        }
        /**
         * <pre>
         * Indicates whether we enable perf events after an exec() function call.
         * </pre>
         *
         * <code>optional bool enable_on_exec = 20;</code>
         * @param value The enableOnExec to set.
         * @return This builder for chaining.
         */
        public Builder setEnableOnExec(boolean value) {
          copyOnWrite();
          instance.setEnableOnExec(value);
          return this;
        }
        /**
         * <pre>
         * Indicates whether we enable perf events after an exec() function call.
         * </pre>
         *
         * <code>optional bool enable_on_exec = 20;</code>
         * @return This builder for chaining.
         */
        public Builder clearEnableOnExec() {
          copyOnWrite();
          instance.clearEnableOnExec();
          return this;
        }

        /**
         * <pre>
         * Indicates whether we trace fork/exit.
         * </pre>
         *
         * <code>optional bool task = 21;</code>
         * @return Whether the task field is set.
         */
        @java.lang.Override
        public boolean hasTask() {
          return instance.hasTask();
        }
        /**
         * <pre>
         * Indicates whether we trace fork/exit.
         * </pre>
         *
         * <code>optional bool task = 21;</code>
         * @return The task.
         */
        @java.lang.Override
        public boolean getTask() {
          return instance.getTask();
        }
        /**
         * <pre>
         * Indicates whether we trace fork/exit.
         * </pre>
         *
         * <code>optional bool task = 21;</code>
         * @param value The task to set.
         * @return This builder for chaining.
         */
        public Builder setTask(boolean value) {
          copyOnWrite();
          instance.setTask(value);
          return this;
        }
        /**
         * <pre>
         * Indicates whether we trace fork/exit.
         * </pre>
         *
         * <code>optional bool task = 21;</code>
         * @return This builder for chaining.
         */
        public Builder clearTask() {
          copyOnWrite();
          instance.clearTask();
          return this;
        }

        /**
         * <pre>
         * Indicates whether we are using a watermark to wake up.
         * </pre>
         *
         * <code>optional bool watermark = 22;</code>
         * @return Whether the watermark field is set.
         */
        @java.lang.Override
        public boolean hasWatermark() {
          return instance.hasWatermark();
        }
        /**
         * <pre>
         * Indicates whether we are using a watermark to wake up.
         * </pre>
         *
         * <code>optional bool watermark = 22;</code>
         * @return The watermark.
         */
        @java.lang.Override
        public boolean getWatermark() {
          return instance.getWatermark();
        }
        /**
         * <pre>
         * Indicates whether we are using a watermark to wake up.
         * </pre>
         *
         * <code>optional bool watermark = 22;</code>
         * @param value The watermark to set.
         * @return This builder for chaining.
         */
        public Builder setWatermark(boolean value) {
          copyOnWrite();
          instance.setWatermark(value);
          return this;
        }
        /**
         * <pre>
         * Indicates whether we are using a watermark to wake up.
         * </pre>
         *
         * <code>optional bool watermark = 22;</code>
         * @return This builder for chaining.
         */
        public Builder clearWatermark() {
          copyOnWrite();
          instance.clearWatermark();
          return this;
        }

        /**
         * <pre>
         * CPUs often "skid" when recording events. That means the instruction
         * pointer may not be the same as the one that caused the counter overflow.
         * Indicates the capabilities of the CPU in terms of recording precise
         * instruction pointer.
         * </pre>
         *
         * <code>optional uint32 precise_ip = 23;</code>
         * @return Whether the preciseIp field is set.
         */
        @java.lang.Override
        public boolean hasPreciseIp() {
          return instance.hasPreciseIp();
        }
        /**
         * <pre>
         * CPUs often "skid" when recording events. That means the instruction
         * pointer may not be the same as the one that caused the counter overflow.
         * Indicates the capabilities of the CPU in terms of recording precise
         * instruction pointer.
         * </pre>
         *
         * <code>optional uint32 precise_ip = 23;</code>
         * @return The preciseIp.
         */
        @java.lang.Override
        public int getPreciseIp() {
          return instance.getPreciseIp();
        }
        /**
         * <pre>
         * CPUs often "skid" when recording events. That means the instruction
         * pointer may not be the same as the one that caused the counter overflow.
         * Indicates the capabilities of the CPU in terms of recording precise
         * instruction pointer.
         * </pre>
         *
         * <code>optional uint32 precise_ip = 23;</code>
         * @param value The preciseIp to set.
         * @return This builder for chaining.
         */
        public Builder setPreciseIp(int value) {
          copyOnWrite();
          instance.setPreciseIp(value);
          return this;
        }
        /**
         * <pre>
         * CPUs often "skid" when recording events. That means the instruction
         * pointer may not be the same as the one that caused the counter overflow.
         * Indicates the capabilities of the CPU in terms of recording precise
         * instruction pointer.
         * </pre>
         *
         * <code>optional uint32 precise_ip = 23;</code>
         * @return This builder for chaining.
         */
        public Builder clearPreciseIp() {
          copyOnWrite();
          instance.clearPreciseIp();
          return this;
        }

        /**
         * <pre>
         * Indicates whether we have non-exec mmap data.
         * </pre>
         *
         * <code>optional bool mmap_data = 24;</code>
         * @return Whether the mmapData field is set.
         */
        @java.lang.Override
        public boolean hasMmapData() {
          return instance.hasMmapData();
        }
        /**
         * <pre>
         * Indicates whether we have non-exec mmap data.
         * </pre>
         *
         * <code>optional bool mmap_data = 24;</code>
         * @return The mmapData.
         */
        @java.lang.Override
        public boolean getMmapData() {
          return instance.getMmapData();
        }
        /**
         * <pre>
         * Indicates whether we have non-exec mmap data.
         * </pre>
         *
         * <code>optional bool mmap_data = 24;</code>
         * @param value The mmapData to set.
         * @return This builder for chaining.
         */
        public Builder setMmapData(boolean value) {
          copyOnWrite();
          instance.setMmapData(value);
          return this;
        }
        /**
         * <pre>
         * Indicates whether we have non-exec mmap data.
         * </pre>
         *
         * <code>optional bool mmap_data = 24;</code>
         * @return This builder for chaining.
         */
        public Builder clearMmapData() {
          copyOnWrite();
          instance.clearMmapData();
          return this;
        }

        /**
         * <pre>
         * If set, all the event types will have the same sample_type.
         * </pre>
         *
         * <code>optional bool sample_id_all = 25;</code>
         * @return Whether the sampleIdAll field is set.
         */
        @java.lang.Override
        public boolean hasSampleIdAll() {
          return instance.hasSampleIdAll();
        }
        /**
         * <pre>
         * If set, all the event types will have the same sample_type.
         * </pre>
         *
         * <code>optional bool sample_id_all = 25;</code>
         * @return The sampleIdAll.
         */
        @java.lang.Override
        public boolean getSampleIdAll() {
          return instance.getSampleIdAll();
        }
        /**
         * <pre>
         * If set, all the event types will have the same sample_type.
         * </pre>
         *
         * <code>optional bool sample_id_all = 25;</code>
         * @param value The sampleIdAll to set.
         * @return This builder for chaining.
         */
        public Builder setSampleIdAll(boolean value) {
          copyOnWrite();
          instance.setSampleIdAll(value);
          return this;
        }
        /**
         * <pre>
         * If set, all the event types will have the same sample_type.
         * </pre>
         *
         * <code>optional bool sample_id_all = 25;</code>
         * @return This builder for chaining.
         */
        public Builder clearSampleIdAll() {
          copyOnWrite();
          instance.clearSampleIdAll();
          return this;
        }

        /**
         * <pre>
         * Indicates whether we are counting events from the host (when running a
         * VM).
         * </pre>
         *
         * <code>optional bool exclude_host = 26;</code>
         * @return Whether the excludeHost field is set.
         */
        @java.lang.Override
        public boolean hasExcludeHost() {
          return instance.hasExcludeHost();
        }
        /**
         * <pre>
         * Indicates whether we are counting events from the host (when running a
         * VM).
         * </pre>
         *
         * <code>optional bool exclude_host = 26;</code>
         * @return The excludeHost.
         */
        @java.lang.Override
        public boolean getExcludeHost() {
          return instance.getExcludeHost();
        }
        /**
         * <pre>
         * Indicates whether we are counting events from the host (when running a
         * VM).
         * </pre>
         *
         * <code>optional bool exclude_host = 26;</code>
         * @param value The excludeHost to set.
         * @return This builder for chaining.
         */
        public Builder setExcludeHost(boolean value) {
          copyOnWrite();
          instance.setExcludeHost(value);
          return this;
        }
        /**
         * <pre>
         * Indicates whether we are counting events from the host (when running a
         * VM).
         * </pre>
         *
         * <code>optional bool exclude_host = 26;</code>
         * @return This builder for chaining.
         */
        public Builder clearExcludeHost() {
          copyOnWrite();
          instance.clearExcludeHost();
          return this;
        }

        /**
         * <pre>
         * Exclude events that happen on a guest OS.
         * </pre>
         *
         * <code>optional bool exclude_guest = 27;</code>
         * @return Whether the excludeGuest field is set.
         */
        @java.lang.Override
        public boolean hasExcludeGuest() {
          return instance.hasExcludeGuest();
        }
        /**
         * <pre>
         * Exclude events that happen on a guest OS.
         * </pre>
         *
         * <code>optional bool exclude_guest = 27;</code>
         * @return The excludeGuest.
         */
        @java.lang.Override
        public boolean getExcludeGuest() {
          return instance.getExcludeGuest();
        }
        /**
         * <pre>
         * Exclude events that happen on a guest OS.
         * </pre>
         *
         * <code>optional bool exclude_guest = 27;</code>
         * @param value The excludeGuest to set.
         * @return This builder for chaining.
         */
        public Builder setExcludeGuest(boolean value) {
          copyOnWrite();
          instance.setExcludeGuest(value);
          return this;
        }
        /**
         * <pre>
         * Exclude events that happen on a guest OS.
         * </pre>
         *
         * <code>optional bool exclude_guest = 27;</code>
         * @return This builder for chaining.
         */
        public Builder clearExcludeGuest() {
          copyOnWrite();
          instance.clearExcludeGuest();
          return this;
        }

        /**
         * <pre>
         * Contains the number of events after which we wake up.
         * </pre>
         *
         * <code>optional uint32 wakeup_events = 28;</code>
         * @return Whether the wakeupEvents field is set.
         */
        @java.lang.Override
        public boolean hasWakeupEvents() {
          return instance.hasWakeupEvents();
        }
        /**
         * <pre>
         * Contains the number of events after which we wake up.
         * </pre>
         *
         * <code>optional uint32 wakeup_events = 28;</code>
         * @return The wakeupEvents.
         */
        @java.lang.Override
        public int getWakeupEvents() {
          return instance.getWakeupEvents();
        }
        /**
         * <pre>
         * Contains the number of events after which we wake up.
         * </pre>
         *
         * <code>optional uint32 wakeup_events = 28;</code>
         * @param value The wakeupEvents to set.
         * @return This builder for chaining.
         */
        public Builder setWakeupEvents(int value) {
          copyOnWrite();
          instance.setWakeupEvents(value);
          return this;
        }
        /**
         * <pre>
         * Contains the number of events after which we wake up.
         * </pre>
         *
         * <code>optional uint32 wakeup_events = 28;</code>
         * @return This builder for chaining.
         */
        public Builder clearWakeupEvents() {
          copyOnWrite();
          instance.clearWakeupEvents();
          return this;
        }

        /**
         * <pre>
         * Contains the number of bytes after which we wake up.
         * </pre>
         *
         * <code>optional uint32 wakeup_watermark = 29;</code>
         * @return Whether the wakeupWatermark field is set.
         */
        @java.lang.Override
        public boolean hasWakeupWatermark() {
          return instance.hasWakeupWatermark();
        }
        /**
         * <pre>
         * Contains the number of bytes after which we wake up.
         * </pre>
         *
         * <code>optional uint32 wakeup_watermark = 29;</code>
         * @return The wakeupWatermark.
         */
        @java.lang.Override
        public int getWakeupWatermark() {
          return instance.getWakeupWatermark();
        }
        /**
         * <pre>
         * Contains the number of bytes after which we wake up.
         * </pre>
         *
         * <code>optional uint32 wakeup_watermark = 29;</code>
         * @param value The wakeupWatermark to set.
         * @return This builder for chaining.
         */
        public Builder setWakeupWatermark(int value) {
          copyOnWrite();
          instance.setWakeupWatermark(value);
          return this;
        }
        /**
         * <pre>
         * Contains the number of bytes after which we wake up.
         * </pre>
         *
         * <code>optional uint32 wakeup_watermark = 29;</code>
         * @return This builder for chaining.
         */
        public Builder clearWakeupWatermark() {
          copyOnWrite();
          instance.clearWakeupWatermark();
          return this;
        }

        /**
         * <pre>
         * Information about the type of the breakpoint.
         * </pre>
         *
         * <code>optional uint32 bp_type = 30;</code>
         * @return Whether the bpType field is set.
         */
        @java.lang.Override
        public boolean hasBpType() {
          return instance.hasBpType();
        }
        /**
         * <pre>
         * Information about the type of the breakpoint.
         * </pre>
         *
         * <code>optional uint32 bp_type = 30;</code>
         * @return The bpType.
         */
        @java.lang.Override
        public int getBpType() {
          return instance.getBpType();
        }
        /**
         * <pre>
         * Information about the type of the breakpoint.
         * </pre>
         *
         * <code>optional uint32 bp_type = 30;</code>
         * @param value The bpType to set.
         * @return This builder for chaining.
         */
        public Builder setBpType(int value) {
          copyOnWrite();
          instance.setBpType(value);
          return this;
        }
        /**
         * <pre>
         * Information about the type of the breakpoint.
         * </pre>
         *
         * <code>optional uint32 bp_type = 30;</code>
         * @return This builder for chaining.
         */
        public Builder clearBpType() {
          copyOnWrite();
          instance.clearBpType();
          return this;
        }

        /**
         * <pre>
         * Contains the breakpoint address.
         * </pre>
         *
         * <code>optional uint64 bp_addr = 31;</code>
         * @return Whether the bpAddr field is set.
         */
        @java.lang.Override
        public boolean hasBpAddr() {
          return instance.hasBpAddr();
        }
        /**
         * <pre>
         * Contains the breakpoint address.
         * </pre>
         *
         * <code>optional uint64 bp_addr = 31;</code>
         * @return The bpAddr.
         */
        @java.lang.Override
        public long getBpAddr() {
          return instance.getBpAddr();
        }
        /**
         * <pre>
         * Contains the breakpoint address.
         * </pre>
         *
         * <code>optional uint64 bp_addr = 31;</code>
         * @param value The bpAddr to set.
         * @return This builder for chaining.
         */
        public Builder setBpAddr(long value) {
          copyOnWrite();
          instance.setBpAddr(value);
          return this;
        }
        /**
         * <pre>
         * Contains the breakpoint address.
         * </pre>
         *
         * <code>optional uint64 bp_addr = 31;</code>
         * @return This builder for chaining.
         */
        public Builder clearBpAddr() {
          copyOnWrite();
          instance.clearBpAddr();
          return this;
        }

        /**
         * <pre>
         * This is an extension of config (see above).
         * </pre>
         *
         * <code>optional uint64 config1 = 32;</code>
         * @return Whether the config1 field is set.
         */
        @java.lang.Override
        public boolean hasConfig1() {
          return instance.hasConfig1();
        }
        /**
         * <pre>
         * This is an extension of config (see above).
         * </pre>
         *
         * <code>optional uint64 config1 = 32;</code>
         * @return The config1.
         */
        @java.lang.Override
        public long getConfig1() {
          return instance.getConfig1();
        }
        /**
         * <pre>
         * This is an extension of config (see above).
         * </pre>
         *
         * <code>optional uint64 config1 = 32;</code>
         * @param value The config1 to set.
         * @return This builder for chaining.
         */
        public Builder setConfig1(long value) {
          copyOnWrite();
          instance.setConfig1(value);
          return this;
        }
        /**
         * <pre>
         * This is an extension of config (see above).
         * </pre>
         *
         * <code>optional uint64 config1 = 32;</code>
         * @return This builder for chaining.
         */
        public Builder clearConfig1() {
          copyOnWrite();
          instance.clearConfig1();
          return this;
        }

        /**
         * <pre>
         * The length of the breakpoint data in bytes.
         * </pre>
         *
         * <code>optional uint64 bp_len = 33;</code>
         * @return Whether the bpLen field is set.
         */
        @java.lang.Override
        public boolean hasBpLen() {
          return instance.hasBpLen();
        }
        /**
         * <pre>
         * The length of the breakpoint data in bytes.
         * </pre>
         *
         * <code>optional uint64 bp_len = 33;</code>
         * @return The bpLen.
         */
        @java.lang.Override
        public long getBpLen() {
          return instance.getBpLen();
        }
        /**
         * <pre>
         * The length of the breakpoint data in bytes.
         * </pre>
         *
         * <code>optional uint64 bp_len = 33;</code>
         * @param value The bpLen to set.
         * @return This builder for chaining.
         */
        public Builder setBpLen(long value) {
          copyOnWrite();
          instance.setBpLen(value);
          return this;
        }
        /**
         * <pre>
         * The length of the breakpoint data in bytes.
         * </pre>
         *
         * <code>optional uint64 bp_len = 33;</code>
         * @return This builder for chaining.
         */
        public Builder clearBpLen() {
          copyOnWrite();
          instance.clearBpLen();
          return this;
        }

        /**
         * <pre>
         * This is an extension of config (see above).
         * </pre>
         *
         * <code>optional uint64 config2 = 34;</code>
         * @return Whether the config2 field is set.
         */
        @java.lang.Override
        public boolean hasConfig2() {
          return instance.hasConfig2();
        }
        /**
         * <pre>
         * This is an extension of config (see above).
         * </pre>
         *
         * <code>optional uint64 config2 = 34;</code>
         * @return The config2.
         */
        @java.lang.Override
        public long getConfig2() {
          return instance.getConfig2();
        }
        /**
         * <pre>
         * This is an extension of config (see above).
         * </pre>
         *
         * <code>optional uint64 config2 = 34;</code>
         * @param value The config2 to set.
         * @return This builder for chaining.
         */
        public Builder setConfig2(long value) {
          copyOnWrite();
          instance.setConfig2(value);
          return this;
        }
        /**
         * <pre>
         * This is an extension of config (see above).
         * </pre>
         *
         * <code>optional uint64 config2 = 34;</code>
         * @return This builder for chaining.
         */
        public Builder clearConfig2() {
          copyOnWrite();
          instance.clearConfig2();
          return this;
        }

        /**
         * <pre>
         * Contains the type of branch, example: user, kernel, call, return, etc.
         * </pre>
         *
         * <code>optional uint64 branch_sample_type = 35;</code>
         * @return Whether the branchSampleType field is set.
         */
        @java.lang.Override
        public boolean hasBranchSampleType() {
          return instance.hasBranchSampleType();
        }
        /**
         * <pre>
         * Contains the type of branch, example: user, kernel, call, return, etc.
         * </pre>
         *
         * <code>optional uint64 branch_sample_type = 35;</code>
         * @return The branchSampleType.
         */
        @java.lang.Override
        public long getBranchSampleType() {
          return instance.getBranchSampleType();
        }
        /**
         * <pre>
         * Contains the type of branch, example: user, kernel, call, return, etc.
         * </pre>
         *
         * <code>optional uint64 branch_sample_type = 35;</code>
         * @param value The branchSampleType to set.
         * @return This builder for chaining.
         */
        public Builder setBranchSampleType(long value) {
          copyOnWrite();
          instance.setBranchSampleType(value);
          return this;
        }
        /**
         * <pre>
         * Contains the type of branch, example: user, kernel, call, return, etc.
         * </pre>
         *
         * <code>optional uint64 branch_sample_type = 35;</code>
         * @return This builder for chaining.
         */
        public Builder clearBranchSampleType() {
          copyOnWrite();
          instance.clearBranchSampleType();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:metrics.PerfDataProto.PerfEventAttr)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "bitField1_",
                "type_",
                "size_",
                "config_",
                "samplePeriod_",
                "sampleFreq_",
                "sampleType_",
                "readFormat_",
                "disabled_",
                "inherit_",
                "pinned_",
                "exclusive_",
                "excludeUser_",
                "excludeKernel_",
                "excludeHv_",
                "excludeIdle_",
                "mmap_",
                "comm_",
                "freq_",
                "inheritStat_",
                "enableOnExec_",
                "task_",
                "watermark_",
                "preciseIp_",
                "mmapData_",
                "sampleIdAll_",
                "excludeHost_",
                "excludeGuest_",
                "wakeupEvents_",
                "wakeupWatermark_",
                "bpType_",
                "bpAddr_",
                "config1_",
                "bpLen_",
                "config2_",
                "branchSampleType_",
              };
              java.lang.String info =
                  "\u0001#\u0000\u0002\u0001##\u0000\u0000\u0000\u0001\u100b\u0000\u0002\u100b\u0001" +
                  "\u0003\u1003\u0002\u0004\u1003\u0003\u0005\u1003\u0004\u0006\u1003\u0005\u0007\u1003" +
                  "\u0006\b\u1007\u0007\t\u1007\b\n\u1007\t\u000b\u1007\n\f\u1007\u000b\r\u1007\f\u000e" +
                  "\u1007\r\u000f\u1007\u000e\u0010\u1007\u000f\u0011\u1007\u0010\u0012\u1007\u0011" +
                  "\u0013\u1007\u0012\u0014\u1007\u0013\u0015\u1007\u0014\u0016\u1007\u0015\u0017\u100b" +
                  "\u0016\u0018\u1007\u0017\u0019\u1007\u0018\u001a\u1007\u0019\u001b\u1007\u001a\u001c" +
                  "\u100b\u001b\u001d\u100b\u001c\u001e\u100b\u001d\u001f\u1003\u001e \u1003\u001f!" +
                  "\u1003 \"\u1003!#\u1003\"";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfEventAttr)
      private static final org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr DEFAULT_INSTANCE;
      static {
        PerfEventAttr defaultInstance = new PerfEventAttr();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          PerfEventAttr.class, defaultInstance);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<PerfEventAttr> PARSER;

      public static com.google.protobuf.Parser<PerfEventAttr> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface PerfFileAttrOrBuilder extends
        // @@protoc_insertion_point(interface_extends:metrics.PerfDataProto.PerfFileAttr)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <code>optional .metrics.PerfDataProto.PerfEventAttr attr = 1;</code>
       * @return Whether the attr field is set.
       */
      boolean hasAttr();
      /**
       * <code>optional .metrics.PerfDataProto.PerfEventAttr attr = 1;</code>
       * @return The attr.
       */
      org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr getAttr();

      /**
       * <pre>
       * List of perf file attribute ids. Each id describes an event.
       * </pre>
       *
       * <code>repeated uint64 ids = 2;</code>
       * @return A list containing the ids.
       */
      java.util.List<java.lang.Long> getIdsList();
      /**
       * <pre>
       * List of perf file attribute ids. Each id describes an event.
       * </pre>
       *
       * <code>repeated uint64 ids = 2;</code>
       * @return The count of ids.
       */
      int getIdsCount();
      /**
       * <pre>
       * List of perf file attribute ids. Each id describes an event.
       * </pre>
       *
       * <code>repeated uint64 ids = 2;</code>
       * @param index The index of the element to return.
       * @return The ids at the given index.
       */
      long getIds(int index);
    }
    /**
     * <pre>
     * Describes a perf.data file attribute.
     * </pre>
     *
     * Protobuf type {@code metrics.PerfDataProto.PerfFileAttr}
     */
    public  static final class PerfFileAttr extends
        com.google.protobuf.GeneratedMessageLite<
            PerfFileAttr, PerfFileAttr.Builder> implements
        // @@protoc_insertion_point(message_implements:metrics.PerfDataProto.PerfFileAttr)
        PerfFileAttrOrBuilder {
      private PerfFileAttr() {
        ids_ = emptyLongList();
      }
      private int bitField0_;
      public static final int ATTR_FIELD_NUMBER = 1;
      private org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr attr_;
      /**
       * <code>optional .metrics.PerfDataProto.PerfEventAttr attr = 1;</code>
       */
      @java.lang.Override
      public boolean hasAttr() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .metrics.PerfDataProto.PerfEventAttr attr = 1;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr getAttr() {
        return attr_ == null ? org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr.getDefaultInstance() : attr_;
      }
      /**
       * <code>optional .metrics.PerfDataProto.PerfEventAttr attr = 1;</code>
       */
      private void setAttr(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr value) {
        value.getClass();
  attr_ = value;
        bitField0_ |= 0x00000001;
        }
      /**
       * <code>optional .metrics.PerfDataProto.PerfEventAttr attr = 1;</code>
       */
      @java.lang.SuppressWarnings({"ReferenceEquality"})
      private void mergeAttr(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr value) {
        value.getClass();
  if (attr_ != null &&
            attr_ != org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr.getDefaultInstance()) {
          attr_ =
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr.newBuilder(attr_).mergeFrom(value).buildPartial();
        } else {
          attr_ = value;
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <code>optional .metrics.PerfDataProto.PerfEventAttr attr = 1;</code>
       */
      private void clearAttr() {  attr_ = null;
        bitField0_ = (bitField0_ & ~0x00000001);
      }

      public static final int IDS_FIELD_NUMBER = 2;
      private com.google.protobuf.Internal.LongList ids_;
      /**
       * <pre>
       * List of perf file attribute ids. Each id describes an event.
       * </pre>
       *
       * <code>repeated uint64 ids = 2;</code>
       * @return A list containing the ids.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getIdsList() {
        return ids_;
      }
      /**
       * <pre>
       * List of perf file attribute ids. Each id describes an event.
       * </pre>
       *
       * <code>repeated uint64 ids = 2;</code>
       * @return The count of ids.
       */
      @java.lang.Override
      public int getIdsCount() {
        return ids_.size();
      }
      /**
       * <pre>
       * List of perf file attribute ids. Each id describes an event.
       * </pre>
       *
       * <code>repeated uint64 ids = 2;</code>
       * @param index The index of the element to return.
       * @return The ids at the given index.
       */
      @java.lang.Override
      public long getIds(int index) {
        return ids_.getLong(index);
      }
      private void ensureIdsIsMutable() {
        com.google.protobuf.Internal.LongList tmp = ids_;
        if (!tmp.isModifiable()) {
          ids_ =
              com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
         }
      }
      /**
       * <pre>
       * List of perf file attribute ids. Each id describes an event.
       * </pre>
       *
       * <code>repeated uint64 ids = 2;</code>
       * @param index The index to set the value at.
       * @param value The ids to set.
       */
      private void setIds(
          int index, long value) {
        ensureIdsIsMutable();
        ids_.setLong(index, value);
      }
      /**
       * <pre>
       * List of perf file attribute ids. Each id describes an event.
       * </pre>
       *
       * <code>repeated uint64 ids = 2;</code>
       * @param value The ids to add.
       */
      private void addIds(long value) {
        ensureIdsIsMutable();
        ids_.addLong(value);
      }
      /**
       * <pre>
       * List of perf file attribute ids. Each id describes an event.
       * </pre>
       *
       * <code>repeated uint64 ids = 2;</code>
       * @param values The ids to add.
       */
      private void addAllIds(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.addAll(
            values, ids_);
      }
      /**
       * <pre>
       * List of perf file attribute ids. Each id describes an event.
       * </pre>
       *
       * <code>repeated uint64 ids = 2;</code>
       */
      private void clearIds() {
        ids_ = emptyLongList();
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Describes a perf.data file attribute.
       * </pre>
       *
       * Protobuf type {@code metrics.PerfDataProto.PerfFileAttr}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr, Builder> implements
          // @@protoc_insertion_point(builder_implements:metrics.PerfDataProto.PerfFileAttr)
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttrOrBuilder {
        // Construct using org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <code>optional .metrics.PerfDataProto.PerfEventAttr attr = 1;</code>
         */
        @java.lang.Override
        public boolean hasAttr() {
          return instance.hasAttr();
        }
        /**
         * <code>optional .metrics.PerfDataProto.PerfEventAttr attr = 1;</code>
         */
        @java.lang.Override
        public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr getAttr() {
          return instance.getAttr();
        }
        /**
         * <code>optional .metrics.PerfDataProto.PerfEventAttr attr = 1;</code>
         */
        public Builder setAttr(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr value) {
          copyOnWrite();
          instance.setAttr(value);
          return this;
          }
        /**
         * <code>optional .metrics.PerfDataProto.PerfEventAttr attr = 1;</code>
         */
        public Builder setAttr(
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr.Builder builderForValue) {
          copyOnWrite();
          instance.setAttr(builderForValue.build());
          return this;
        }
        /**
         * <code>optional .metrics.PerfDataProto.PerfEventAttr attr = 1;</code>
         */
        public Builder mergeAttr(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventAttr value) {
          copyOnWrite();
          instance.mergeAttr(value);
          return this;
        }
        /**
         * <code>optional .metrics.PerfDataProto.PerfEventAttr attr = 1;</code>
         */
        public Builder clearAttr() {  copyOnWrite();
          instance.clearAttr();
          return this;
        }

        /**
         * <pre>
         * List of perf file attribute ids. Each id describes an event.
         * </pre>
         *
         * <code>repeated uint64 ids = 2;</code>
         * @return A list containing the ids.
         */
        @java.lang.Override
        public java.util.List<java.lang.Long>
            getIdsList() {
          return java.util.Collections.unmodifiableList(
              instance.getIdsList());
        }
        /**
         * <pre>
         * List of perf file attribute ids. Each id describes an event.
         * </pre>
         *
         * <code>repeated uint64 ids = 2;</code>
         * @return The count of ids.
         */
        @java.lang.Override
        public int getIdsCount() {
          return instance.getIdsCount();
        }
        /**
         * <pre>
         * List of perf file attribute ids. Each id describes an event.
         * </pre>
         *
         * <code>repeated uint64 ids = 2;</code>
         * @param index The index of the element to return.
         * @return The ids at the given index.
         */
        @java.lang.Override
        public long getIds(int index) {
          return instance.getIds(index);
        }
        /**
         * <pre>
         * List of perf file attribute ids. Each id describes an event.
         * </pre>
         *
         * <code>repeated uint64 ids = 2;</code>
         * @param value The ids to set.
         * @return This builder for chaining.
         */
        public Builder setIds(
            int index, long value) {
          copyOnWrite();
          instance.setIds(index, value);
          return this;
        }
        /**
         * <pre>
         * List of perf file attribute ids. Each id describes an event.
         * </pre>
         *
         * <code>repeated uint64 ids = 2;</code>
         * @param value The ids to add.
         * @return This builder for chaining.
         */
        public Builder addIds(long value) {
          copyOnWrite();
          instance.addIds(value);
          return this;
        }
        /**
         * <pre>
         * List of perf file attribute ids. Each id describes an event.
         * </pre>
         *
         * <code>repeated uint64 ids = 2;</code>
         * @param values The ids to add.
         * @return This builder for chaining.
         */
        public Builder addAllIds(
            java.lang.Iterable<? extends java.lang.Long> values) {
          copyOnWrite();
          instance.addAllIds(values);
          return this;
        }
        /**
         * <pre>
         * List of perf file attribute ids. Each id describes an event.
         * </pre>
         *
         * <code>repeated uint64 ids = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearIds() {
          copyOnWrite();
          instance.clearIds();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:metrics.PerfDataProto.PerfFileAttr)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "attr_",
                "ids_",
              };
              java.lang.String info =
                  "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0001\u0000\u0001\u1009\u0000\u0002" +
                  "\u0015";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfFileAttr)
      private static final org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr DEFAULT_INSTANCE;
      static {
        PerfFileAttr defaultInstance = new PerfFileAttr();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          PerfFileAttr.class, defaultInstance);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<PerfFileAttr> PARSER;

      public static com.google.protobuf.Parser<PerfFileAttr> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface PerfEventTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:metrics.PerfDataProto.PerfEventType)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Event id.  This is not unique across event types.
       * The combination of the event id and the type field in PerfEventAttr is
       * unique across event types.
       * </pre>
       *
       * <code>optional uint64 id = 1;</code>
       * @return Whether the id field is set.
       */
      boolean hasId();
      /**
       * <pre>
       * Event id.  This is not unique across event types.
       * The combination of the event id and the type field in PerfEventAttr is
       * unique across event types.
       * </pre>
       *
       * <code>optional uint64 id = 1;</code>
       * @return The id.
       */
      long getId();

      /**
       * <pre>
       * Event name's md5 prefix.
       * The event name string was field 2 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 name_md5_prefix = 3;</code>
       * @return Whether the nameMd5Prefix field is set.
       */
      boolean hasNameMd5Prefix();
      /**
       * <pre>
       * Event name's md5 prefix.
       * The event name string was field 2 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 name_md5_prefix = 3;</code>
       * @return The nameMd5Prefix.
       */
      long getNameMd5Prefix();
    }
    /**
     * <pre>
     * Protobuf version of the perf_event_type struct found in perf/util/event.h.
     * Contains the name of the event (such as "cycles" or "branch-misses") and
     * the event id (which is not unique).
     * </pre>
     *
     * Protobuf type {@code metrics.PerfDataProto.PerfEventType}
     */
    public  static final class PerfEventType extends
        com.google.protobuf.GeneratedMessageLite<
            PerfEventType, PerfEventType.Builder> implements
        // @@protoc_insertion_point(message_implements:metrics.PerfDataProto.PerfEventType)
        PerfEventTypeOrBuilder {
      private PerfEventType() {
      }
      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private long id_;
      /**
       * <pre>
       * Event id.  This is not unique across event types.
       * The combination of the event id and the type field in PerfEventAttr is
       * unique across event types.
       * </pre>
       *
       * <code>optional uint64 id = 1;</code>
       * @return Whether the id field is set.
       */
      @java.lang.Override
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Event id.  This is not unique across event types.
       * The combination of the event id and the type field in PerfEventAttr is
       * unique across event types.
       * </pre>
       *
       * <code>optional uint64 id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public long getId() {
        return id_;
      }
      /**
       * <pre>
       * Event id.  This is not unique across event types.
       * The combination of the event id and the type field in PerfEventAttr is
       * unique across event types.
       * </pre>
       *
       * <code>optional uint64 id = 1;</code>
       * @param value The id to set.
       */
      private void setId(long value) {
        bitField0_ |= 0x00000001;
        id_ = value;
      }
      /**
       * <pre>
       * Event id.  This is not unique across event types.
       * The combination of the event id and the type field in PerfEventAttr is
       * unique across event types.
       * </pre>
       *
       * <code>optional uint64 id = 1;</code>
       */
      private void clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0L;
      }

      public static final int NAME_MD5_PREFIX_FIELD_NUMBER = 3;
      private long nameMd5Prefix_;
      /**
       * <pre>
       * Event name's md5 prefix.
       * The event name string was field 2 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 name_md5_prefix = 3;</code>
       * @return Whether the nameMd5Prefix field is set.
       */
      @java.lang.Override
      public boolean hasNameMd5Prefix() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Event name's md5 prefix.
       * The event name string was field 2 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 name_md5_prefix = 3;</code>
       * @return The nameMd5Prefix.
       */
      @java.lang.Override
      public long getNameMd5Prefix() {
        return nameMd5Prefix_;
      }
      /**
       * <pre>
       * Event name's md5 prefix.
       * The event name string was field 2 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 name_md5_prefix = 3;</code>
       * @param value The nameMd5Prefix to set.
       */
      private void setNameMd5Prefix(long value) {
        bitField0_ |= 0x00000002;
        nameMd5Prefix_ = value;
      }
      /**
       * <pre>
       * Event name's md5 prefix.
       * The event name string was field 2 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 name_md5_prefix = 3;</code>
       */
      private void clearNameMd5Prefix() {
        bitField0_ = (bitField0_ & ~0x00000002);
        nameMd5Prefix_ = 0L;
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Protobuf version of the perf_event_type struct found in perf/util/event.h.
       * Contains the name of the event (such as "cycles" or "branch-misses") and
       * the event id (which is not unique).
       * </pre>
       *
       * Protobuf type {@code metrics.PerfDataProto.PerfEventType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType, Builder> implements
          // @@protoc_insertion_point(builder_implements:metrics.PerfDataProto.PerfEventType)
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventTypeOrBuilder {
        // Construct using org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Event id.  This is not unique across event types.
         * The combination of the event id and the type field in PerfEventAttr is
         * unique across event types.
         * </pre>
         *
         * <code>optional uint64 id = 1;</code>
         * @return Whether the id field is set.
         */
        @java.lang.Override
        public boolean hasId() {
          return instance.hasId();
        }
        /**
         * <pre>
         * Event id.  This is not unique across event types.
         * The combination of the event id and the type field in PerfEventAttr is
         * unique across event types.
         * </pre>
         *
         * <code>optional uint64 id = 1;</code>
         * @return The id.
         */
        @java.lang.Override
        public long getId() {
          return instance.getId();
        }
        /**
         * <pre>
         * Event id.  This is not unique across event types.
         * The combination of the event id and the type field in PerfEventAttr is
         * unique across event types.
         * </pre>
         *
         * <code>optional uint64 id = 1;</code>
         * @param value The id to set.
         * @return This builder for chaining.
         */
        public Builder setId(long value) {
          copyOnWrite();
          instance.setId(value);
          return this;
        }
        /**
         * <pre>
         * Event id.  This is not unique across event types.
         * The combination of the event id and the type field in PerfEventAttr is
         * unique across event types.
         * </pre>
         *
         * <code>optional uint64 id = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearId() {
          copyOnWrite();
          instance.clearId();
          return this;
        }

        /**
         * <pre>
         * Event name's md5 prefix.
         * The event name string was field 2 and has been intentionally left out.
         * </pre>
         *
         * <code>optional uint64 name_md5_prefix = 3;</code>
         * @return Whether the nameMd5Prefix field is set.
         */
        @java.lang.Override
        public boolean hasNameMd5Prefix() {
          return instance.hasNameMd5Prefix();
        }
        /**
         * <pre>
         * Event name's md5 prefix.
         * The event name string was field 2 and has been intentionally left out.
         * </pre>
         *
         * <code>optional uint64 name_md5_prefix = 3;</code>
         * @return The nameMd5Prefix.
         */
        @java.lang.Override
        public long getNameMd5Prefix() {
          return instance.getNameMd5Prefix();
        }
        /**
         * <pre>
         * Event name's md5 prefix.
         * The event name string was field 2 and has been intentionally left out.
         * </pre>
         *
         * <code>optional uint64 name_md5_prefix = 3;</code>
         * @param value The nameMd5Prefix to set.
         * @return This builder for chaining.
         */
        public Builder setNameMd5Prefix(long value) {
          copyOnWrite();
          instance.setNameMd5Prefix(value);
          return this;
        }
        /**
         * <pre>
         * Event name's md5 prefix.
         * The event name string was field 2 and has been intentionally left out.
         * </pre>
         *
         * <code>optional uint64 name_md5_prefix = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearNameMd5Prefix() {
          copyOnWrite();
          instance.clearNameMd5Prefix();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:metrics.PerfDataProto.PerfEventType)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "id_",
                "nameMd5Prefix_",
              };
              java.lang.String info =
                  "\u0001\u0002\u0000\u0001\u0001\u0003\u0002\u0000\u0000\u0000\u0001\u1003\u0000\u0003" +
                  "\u1003\u0001";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfEventType)
      private static final org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType DEFAULT_INSTANCE;
      static {
        PerfEventType defaultInstance = new PerfEventType();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          PerfEventType.class, defaultInstance);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<PerfEventType> PARSER;

      public static com.google.protobuf.Parser<PerfEventType> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface SampleInfoOrBuilder extends
        // @@protoc_insertion_point(interface_extends:metrics.PerfDataProto.SampleInfo)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Process ID / thread ID from which this sample was taken.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @return Whether the pid field is set.
       */
      boolean hasPid();
      /**
       * <pre>
       * Process ID / thread ID from which this sample was taken.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @return The pid.
       */
      int getPid();

      /**
       * <code>optional uint32 tid = 2;</code>
       * @return Whether the tid field is set.
       */
      boolean hasTid();
      /**
       * <code>optional uint32 tid = 2;</code>
       * @return The tid.
       */
      int getTid();

      /**
       * <pre>
       * Time this sample was taken (NOT the same as an event time).
       * It is the number of nanoseconds since bootup.
       * </pre>
       *
       * <code>optional uint64 sample_time_ns = 3;</code>
       * @return Whether the sampleTimeNs field is set.
       */
      boolean hasSampleTimeNs();
      /**
       * <pre>
       * Time this sample was taken (NOT the same as an event time).
       * It is the number of nanoseconds since bootup.
       * </pre>
       *
       * <code>optional uint64 sample_time_ns = 3;</code>
       * @return The sampleTimeNs.
       */
      long getSampleTimeNs();

      /**
       * <pre>
       * The ID of the sample's event type (cycles, instructions, etc).
       * The event type IDs are defined in PerfFileAttr.
       * </pre>
       *
       * <code>optional uint64 id = 4;</code>
       * @return Whether the id field is set.
       */
      boolean hasId();
      /**
       * <pre>
       * The ID of the sample's event type (cycles, instructions, etc).
       * The event type IDs are defined in PerfFileAttr.
       * </pre>
       *
       * <code>optional uint64 id = 4;</code>
       * @return The id.
       */
      long getId();

      /**
       * <pre>
       * The CPU on which this sample was taken.
       * </pre>
       *
       * <code>optional uint32 cpu = 5;</code>
       * @return Whether the cpu field is set.
       */
      boolean hasCpu();
      /**
       * <pre>
       * The CPU on which this sample was taken.
       * </pre>
       *
       * <code>optional uint32 cpu = 5;</code>
       * @return The cpu.
       */
      int getCpu();
    }
    /**
     * <pre>
     * This message contains information about a perf sample itself, as opposed to
     * a perf event captured by a sample.
     * </pre>
     *
     * Protobuf type {@code metrics.PerfDataProto.SampleInfo}
     */
    public  static final class SampleInfo extends
        com.google.protobuf.GeneratedMessageLite<
            SampleInfo, SampleInfo.Builder> implements
        // @@protoc_insertion_point(message_implements:metrics.PerfDataProto.SampleInfo)
        SampleInfoOrBuilder {
      private SampleInfo() {
      }
      private int bitField0_;
      public static final int PID_FIELD_NUMBER = 1;
      private int pid_;
      /**
       * <pre>
       * Process ID / thread ID from which this sample was taken.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @return Whether the pid field is set.
       */
      @java.lang.Override
      public boolean hasPid() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Process ID / thread ID from which this sample was taken.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @return The pid.
       */
      @java.lang.Override
      public int getPid() {
        return pid_;
      }
      /**
       * <pre>
       * Process ID / thread ID from which this sample was taken.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @param value The pid to set.
       */
      private void setPid(int value) {
        bitField0_ |= 0x00000001;
        pid_ = value;
      }
      /**
       * <pre>
       * Process ID / thread ID from which this sample was taken.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       */
      private void clearPid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pid_ = 0;
      }

      public static final int TID_FIELD_NUMBER = 2;
      private int tid_;
      /**
       * <code>optional uint32 tid = 2;</code>
       * @return Whether the tid field is set.
       */
      @java.lang.Override
      public boolean hasTid() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional uint32 tid = 2;</code>
       * @return The tid.
       */
      @java.lang.Override
      public int getTid() {
        return tid_;
      }
      /**
       * <code>optional uint32 tid = 2;</code>
       * @param value The tid to set.
       */
      private void setTid(int value) {
        bitField0_ |= 0x00000002;
        tid_ = value;
      }
      /**
       * <code>optional uint32 tid = 2;</code>
       */
      private void clearTid() {
        bitField0_ = (bitField0_ & ~0x00000002);
        tid_ = 0;
      }

      public static final int SAMPLE_TIME_NS_FIELD_NUMBER = 3;
      private long sampleTimeNs_;
      /**
       * <pre>
       * Time this sample was taken (NOT the same as an event time).
       * It is the number of nanoseconds since bootup.
       * </pre>
       *
       * <code>optional uint64 sample_time_ns = 3;</code>
       * @return Whether the sampleTimeNs field is set.
       */
      @java.lang.Override
      public boolean hasSampleTimeNs() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Time this sample was taken (NOT the same as an event time).
       * It is the number of nanoseconds since bootup.
       * </pre>
       *
       * <code>optional uint64 sample_time_ns = 3;</code>
       * @return The sampleTimeNs.
       */
      @java.lang.Override
      public long getSampleTimeNs() {
        return sampleTimeNs_;
      }
      /**
       * <pre>
       * Time this sample was taken (NOT the same as an event time).
       * It is the number of nanoseconds since bootup.
       * </pre>
       *
       * <code>optional uint64 sample_time_ns = 3;</code>
       * @param value The sampleTimeNs to set.
       */
      private void setSampleTimeNs(long value) {
        bitField0_ |= 0x00000004;
        sampleTimeNs_ = value;
      }
      /**
       * <pre>
       * Time this sample was taken (NOT the same as an event time).
       * It is the number of nanoseconds since bootup.
       * </pre>
       *
       * <code>optional uint64 sample_time_ns = 3;</code>
       */
      private void clearSampleTimeNs() {
        bitField0_ = (bitField0_ & ~0x00000004);
        sampleTimeNs_ = 0L;
      }

      public static final int ID_FIELD_NUMBER = 4;
      private long id_;
      /**
       * <pre>
       * The ID of the sample's event type (cycles, instructions, etc).
       * The event type IDs are defined in PerfFileAttr.
       * </pre>
       *
       * <code>optional uint64 id = 4;</code>
       * @return Whether the id field is set.
       */
      @java.lang.Override
      public boolean hasId() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * The ID of the sample's event type (cycles, instructions, etc).
       * The event type IDs are defined in PerfFileAttr.
       * </pre>
       *
       * <code>optional uint64 id = 4;</code>
       * @return The id.
       */
      @java.lang.Override
      public long getId() {
        return id_;
      }
      /**
       * <pre>
       * The ID of the sample's event type (cycles, instructions, etc).
       * The event type IDs are defined in PerfFileAttr.
       * </pre>
       *
       * <code>optional uint64 id = 4;</code>
       * @param value The id to set.
       */
      private void setId(long value) {
        bitField0_ |= 0x00000008;
        id_ = value;
      }
      /**
       * <pre>
       * The ID of the sample's event type (cycles, instructions, etc).
       * The event type IDs are defined in PerfFileAttr.
       * </pre>
       *
       * <code>optional uint64 id = 4;</code>
       */
      private void clearId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        id_ = 0L;
      }

      public static final int CPU_FIELD_NUMBER = 5;
      private int cpu_;
      /**
       * <pre>
       * The CPU on which this sample was taken.
       * </pre>
       *
       * <code>optional uint32 cpu = 5;</code>
       * @return Whether the cpu field is set.
       */
      @java.lang.Override
      public boolean hasCpu() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * The CPU on which this sample was taken.
       * </pre>
       *
       * <code>optional uint32 cpu = 5;</code>
       * @return The cpu.
       */
      @java.lang.Override
      public int getCpu() {
        return cpu_;
      }
      /**
       * <pre>
       * The CPU on which this sample was taken.
       * </pre>
       *
       * <code>optional uint32 cpu = 5;</code>
       * @param value The cpu to set.
       */
      private void setCpu(int value) {
        bitField0_ |= 0x00000010;
        cpu_ = value;
      }
      /**
       * <pre>
       * The CPU on which this sample was taken.
       * </pre>
       *
       * <code>optional uint32 cpu = 5;</code>
       */
      private void clearCpu() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cpu_ = 0;
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * This message contains information about a perf sample itself, as opposed to
       * a perf event captured by a sample.
       * </pre>
       *
       * Protobuf type {@code metrics.PerfDataProto.SampleInfo}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo, Builder> implements
          // @@protoc_insertion_point(builder_implements:metrics.PerfDataProto.SampleInfo)
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfoOrBuilder {
        // Construct using org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Process ID / thread ID from which this sample was taken.
         * </pre>
         *
         * <code>optional uint32 pid = 1;</code>
         * @return Whether the pid field is set.
         */
        @java.lang.Override
        public boolean hasPid() {
          return instance.hasPid();
        }
        /**
         * <pre>
         * Process ID / thread ID from which this sample was taken.
         * </pre>
         *
         * <code>optional uint32 pid = 1;</code>
         * @return The pid.
         */
        @java.lang.Override
        public int getPid() {
          return instance.getPid();
        }
        /**
         * <pre>
         * Process ID / thread ID from which this sample was taken.
         * </pre>
         *
         * <code>optional uint32 pid = 1;</code>
         * @param value The pid to set.
         * @return This builder for chaining.
         */
        public Builder setPid(int value) {
          copyOnWrite();
          instance.setPid(value);
          return this;
        }
        /**
         * <pre>
         * Process ID / thread ID from which this sample was taken.
         * </pre>
         *
         * <code>optional uint32 pid = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPid() {
          copyOnWrite();
          instance.clearPid();
          return this;
        }

        /**
         * <code>optional uint32 tid = 2;</code>
         * @return Whether the tid field is set.
         */
        @java.lang.Override
        public boolean hasTid() {
          return instance.hasTid();
        }
        /**
         * <code>optional uint32 tid = 2;</code>
         * @return The tid.
         */
        @java.lang.Override
        public int getTid() {
          return instance.getTid();
        }
        /**
         * <code>optional uint32 tid = 2;</code>
         * @param value The tid to set.
         * @return This builder for chaining.
         */
        public Builder setTid(int value) {
          copyOnWrite();
          instance.setTid(value);
          return this;
        }
        /**
         * <code>optional uint32 tid = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearTid() {
          copyOnWrite();
          instance.clearTid();
          return this;
        }

        /**
         * <pre>
         * Time this sample was taken (NOT the same as an event time).
         * It is the number of nanoseconds since bootup.
         * </pre>
         *
         * <code>optional uint64 sample_time_ns = 3;</code>
         * @return Whether the sampleTimeNs field is set.
         */
        @java.lang.Override
        public boolean hasSampleTimeNs() {
          return instance.hasSampleTimeNs();
        }
        /**
         * <pre>
         * Time this sample was taken (NOT the same as an event time).
         * It is the number of nanoseconds since bootup.
         * </pre>
         *
         * <code>optional uint64 sample_time_ns = 3;</code>
         * @return The sampleTimeNs.
         */
        @java.lang.Override
        public long getSampleTimeNs() {
          return instance.getSampleTimeNs();
        }
        /**
         * <pre>
         * Time this sample was taken (NOT the same as an event time).
         * It is the number of nanoseconds since bootup.
         * </pre>
         *
         * <code>optional uint64 sample_time_ns = 3;</code>
         * @param value The sampleTimeNs to set.
         * @return This builder for chaining.
         */
        public Builder setSampleTimeNs(long value) {
          copyOnWrite();
          instance.setSampleTimeNs(value);
          return this;
        }
        /**
         * <pre>
         * Time this sample was taken (NOT the same as an event time).
         * It is the number of nanoseconds since bootup.
         * </pre>
         *
         * <code>optional uint64 sample_time_ns = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearSampleTimeNs() {
          copyOnWrite();
          instance.clearSampleTimeNs();
          return this;
        }

        /**
         * <pre>
         * The ID of the sample's event type (cycles, instructions, etc).
         * The event type IDs are defined in PerfFileAttr.
         * </pre>
         *
         * <code>optional uint64 id = 4;</code>
         * @return Whether the id field is set.
         */
        @java.lang.Override
        public boolean hasId() {
          return instance.hasId();
        }
        /**
         * <pre>
         * The ID of the sample's event type (cycles, instructions, etc).
         * The event type IDs are defined in PerfFileAttr.
         * </pre>
         *
         * <code>optional uint64 id = 4;</code>
         * @return The id.
         */
        @java.lang.Override
        public long getId() {
          return instance.getId();
        }
        /**
         * <pre>
         * The ID of the sample's event type (cycles, instructions, etc).
         * The event type IDs are defined in PerfFileAttr.
         * </pre>
         *
         * <code>optional uint64 id = 4;</code>
         * @param value The id to set.
         * @return This builder for chaining.
         */
        public Builder setId(long value) {
          copyOnWrite();
          instance.setId(value);
          return this;
        }
        /**
         * <pre>
         * The ID of the sample's event type (cycles, instructions, etc).
         * The event type IDs are defined in PerfFileAttr.
         * </pre>
         *
         * <code>optional uint64 id = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearId() {
          copyOnWrite();
          instance.clearId();
          return this;
        }

        /**
         * <pre>
         * The CPU on which this sample was taken.
         * </pre>
         *
         * <code>optional uint32 cpu = 5;</code>
         * @return Whether the cpu field is set.
         */
        @java.lang.Override
        public boolean hasCpu() {
          return instance.hasCpu();
        }
        /**
         * <pre>
         * The CPU on which this sample was taken.
         * </pre>
         *
         * <code>optional uint32 cpu = 5;</code>
         * @return The cpu.
         */
        @java.lang.Override
        public int getCpu() {
          return instance.getCpu();
        }
        /**
         * <pre>
         * The CPU on which this sample was taken.
         * </pre>
         *
         * <code>optional uint32 cpu = 5;</code>
         * @param value The cpu to set.
         * @return This builder for chaining.
         */
        public Builder setCpu(int value) {
          copyOnWrite();
          instance.setCpu(value);
          return this;
        }
        /**
         * <pre>
         * The CPU on which this sample was taken.
         * </pre>
         *
         * <code>optional uint32 cpu = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearCpu() {
          copyOnWrite();
          instance.clearCpu();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:metrics.PerfDataProto.SampleInfo)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "pid_",
                "tid_",
                "sampleTimeNs_",
                "id_",
                "cpu_",
              };
              java.lang.String info =
                  "\u0001\u0005\u0000\u0001\u0001\u0005\u0005\u0000\u0000\u0000\u0001\u100b\u0000\u0002" +
                  "\u100b\u0001\u0003\u1003\u0002\u0004\u1003\u0003\u0005\u100b\u0004";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.SampleInfo)
      private static final org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo DEFAULT_INSTANCE;
      static {
        SampleInfo defaultInstance = new SampleInfo();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          SampleInfo.class, defaultInstance);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<SampleInfo> PARSER;

      public static com.google.protobuf.Parser<SampleInfo> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface CommEventOrBuilder extends
        // @@protoc_insertion_point(interface_extends:metrics.PerfDataProto.CommEvent)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @return Whether the pid field is set.
       */
      boolean hasPid();
      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @return The pid.
       */
      int getPid();

      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 2;</code>
       * @return Whether the tid field is set.
       */
      boolean hasTid();
      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 2;</code>
       * @return The tid.
       */
      int getTid();

      /**
       * <pre>
       * Comm string's md5 prefix.
       * The comm string was field 3 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 comm_md5_prefix = 4;</code>
       * @return Whether the commMd5Prefix field is set.
       */
      boolean hasCommMd5Prefix();
      /**
       * <pre>
       * Comm string's md5 prefix.
       * The comm string was field 3 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 comm_md5_prefix = 4;</code>
       * @return The commMd5Prefix.
       */
      long getCommMd5Prefix();

      /**
       * <pre>
       * Time the sample was taken.
       * Deprecated, use |sample_info| instead.
       * </pre>
       *
       * <code>optional uint64 sample_time = 5 [deprecated = true];</code>
       * @return Whether the sampleTime field is set.
       */
      @java.lang.Deprecated boolean hasSampleTime();
      /**
       * <pre>
       * Time the sample was taken.
       * Deprecated, use |sample_info| instead.
       * </pre>
       *
       * <code>optional uint64 sample_time = 5 [deprecated = true];</code>
       * @return The sampleTime.
       */
      @java.lang.Deprecated long getSampleTime();

      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 6;</code>
       * @return Whether the sampleInfo field is set.
       */
      boolean hasSampleInfo();
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 6;</code>
       * @return The sampleInfo.
       */
      org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo getSampleInfo();
    }
    /**
     * Protobuf type {@code metrics.PerfDataProto.CommEvent}
     */
    public  static final class CommEvent extends
        com.google.protobuf.GeneratedMessageLite<
            CommEvent, CommEvent.Builder> implements
        // @@protoc_insertion_point(message_implements:metrics.PerfDataProto.CommEvent)
        CommEventOrBuilder {
      private CommEvent() {
      }
      private int bitField0_;
      public static final int PID_FIELD_NUMBER = 1;
      private int pid_;
      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @return Whether the pid field is set.
       */
      @java.lang.Override
      public boolean hasPid() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @return The pid.
       */
      @java.lang.Override
      public int getPid() {
        return pid_;
      }
      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @param value The pid to set.
       */
      private void setPid(int value) {
        bitField0_ |= 0x00000001;
        pid_ = value;
      }
      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       */
      private void clearPid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pid_ = 0;
      }

      public static final int TID_FIELD_NUMBER = 2;
      private int tid_;
      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 2;</code>
       * @return Whether the tid field is set.
       */
      @java.lang.Override
      public boolean hasTid() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 2;</code>
       * @return The tid.
       */
      @java.lang.Override
      public int getTid() {
        return tid_;
      }
      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 2;</code>
       * @param value The tid to set.
       */
      private void setTid(int value) {
        bitField0_ |= 0x00000002;
        tid_ = value;
      }
      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 2;</code>
       */
      private void clearTid() {
        bitField0_ = (bitField0_ & ~0x00000002);
        tid_ = 0;
      }

      public static final int COMM_MD5_PREFIX_FIELD_NUMBER = 4;
      private long commMd5Prefix_;
      /**
       * <pre>
       * Comm string's md5 prefix.
       * The comm string was field 3 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 comm_md5_prefix = 4;</code>
       * @return Whether the commMd5Prefix field is set.
       */
      @java.lang.Override
      public boolean hasCommMd5Prefix() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Comm string's md5 prefix.
       * The comm string was field 3 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 comm_md5_prefix = 4;</code>
       * @return The commMd5Prefix.
       */
      @java.lang.Override
      public long getCommMd5Prefix() {
        return commMd5Prefix_;
      }
      /**
       * <pre>
       * Comm string's md5 prefix.
       * The comm string was field 3 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 comm_md5_prefix = 4;</code>
       * @param value The commMd5Prefix to set.
       */
      private void setCommMd5Prefix(long value) {
        bitField0_ |= 0x00000004;
        commMd5Prefix_ = value;
      }
      /**
       * <pre>
       * Comm string's md5 prefix.
       * The comm string was field 3 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 comm_md5_prefix = 4;</code>
       */
      private void clearCommMd5Prefix() {
        bitField0_ = (bitField0_ & ~0x00000004);
        commMd5Prefix_ = 0L;
      }

      public static final int SAMPLE_TIME_FIELD_NUMBER = 5;
      private long sampleTime_;
      /**
       * <pre>
       * Time the sample was taken.
       * Deprecated, use |sample_info| instead.
       * </pre>
       *
       * <code>optional uint64 sample_time = 5 [deprecated = true];</code>
       * @return Whether the sampleTime field is set.
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean hasSampleTime() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Time the sample was taken.
       * Deprecated, use |sample_info| instead.
       * </pre>
       *
       * <code>optional uint64 sample_time = 5 [deprecated = true];</code>
       * @return The sampleTime.
       */
      @java.lang.Override
      @java.lang.Deprecated public long getSampleTime() {
        return sampleTime_;
      }
      /**
       * <pre>
       * Time the sample was taken.
       * Deprecated, use |sample_info| instead.
       * </pre>
       *
       * <code>optional uint64 sample_time = 5 [deprecated = true];</code>
       * @param value The sampleTime to set.
       */
      private void setSampleTime(long value) {
        bitField0_ |= 0x00000008;
        sampleTime_ = value;
      }
      /**
       * <pre>
       * Time the sample was taken.
       * Deprecated, use |sample_info| instead.
       * </pre>
       *
       * <code>optional uint64 sample_time = 5 [deprecated = true];</code>
       */
      private void clearSampleTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        sampleTime_ = 0L;
      }

      public static final int SAMPLE_INFO_FIELD_NUMBER = 6;
      private org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo sampleInfo_;
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 6;</code>
       */
      @java.lang.Override
      public boolean hasSampleInfo() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 6;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo getSampleInfo() {
        return sampleInfo_ == null ? org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo.getDefaultInstance() : sampleInfo_;
      }
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 6;</code>
       */
      private void setSampleInfo(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo value) {
        value.getClass();
  sampleInfo_ = value;
        bitField0_ |= 0x00000010;
        }
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 6;</code>
       */
      @java.lang.SuppressWarnings({"ReferenceEquality"})
      private void mergeSampleInfo(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo value) {
        value.getClass();
  if (sampleInfo_ != null &&
            sampleInfo_ != org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo.getDefaultInstance()) {
          sampleInfo_ =
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo.newBuilder(sampleInfo_).mergeFrom(value).buildPartial();
        } else {
          sampleInfo_ = value;
        }
        bitField0_ |= 0x00000010;
      }
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 6;</code>
       */
      private void clearSampleInfo() {  sampleInfo_ = null;
        bitField0_ = (bitField0_ & ~0x00000010);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code metrics.PerfDataProto.CommEvent}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent, Builder> implements
          // @@protoc_insertion_point(builder_implements:metrics.PerfDataProto.CommEvent)
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEventOrBuilder {
        // Construct using org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Process id.
         * </pre>
         *
         * <code>optional uint32 pid = 1;</code>
         * @return Whether the pid field is set.
         */
        @java.lang.Override
        public boolean hasPid() {
          return instance.hasPid();
        }
        /**
         * <pre>
         * Process id.
         * </pre>
         *
         * <code>optional uint32 pid = 1;</code>
         * @return The pid.
         */
        @java.lang.Override
        public int getPid() {
          return instance.getPid();
        }
        /**
         * <pre>
         * Process id.
         * </pre>
         *
         * <code>optional uint32 pid = 1;</code>
         * @param value The pid to set.
         * @return This builder for chaining.
         */
        public Builder setPid(int value) {
          copyOnWrite();
          instance.setPid(value);
          return this;
        }
        /**
         * <pre>
         * Process id.
         * </pre>
         *
         * <code>optional uint32 pid = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPid() {
          copyOnWrite();
          instance.clearPid();
          return this;
        }

        /**
         * <pre>
         * Thread id.
         * </pre>
         *
         * <code>optional uint32 tid = 2;</code>
         * @return Whether the tid field is set.
         */
        @java.lang.Override
        public boolean hasTid() {
          return instance.hasTid();
        }
        /**
         * <pre>
         * Thread id.
         * </pre>
         *
         * <code>optional uint32 tid = 2;</code>
         * @return The tid.
         */
        @java.lang.Override
        public int getTid() {
          return instance.getTid();
        }
        /**
         * <pre>
         * Thread id.
         * </pre>
         *
         * <code>optional uint32 tid = 2;</code>
         * @param value The tid to set.
         * @return This builder for chaining.
         */
        public Builder setTid(int value) {
          copyOnWrite();
          instance.setTid(value);
          return this;
        }
        /**
         * <pre>
         * Thread id.
         * </pre>
         *
         * <code>optional uint32 tid = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearTid() {
          copyOnWrite();
          instance.clearTid();
          return this;
        }

        /**
         * <pre>
         * Comm string's md5 prefix.
         * The comm string was field 3 and has been intentionally left out.
         * </pre>
         *
         * <code>optional uint64 comm_md5_prefix = 4;</code>
         * @return Whether the commMd5Prefix field is set.
         */
        @java.lang.Override
        public boolean hasCommMd5Prefix() {
          return instance.hasCommMd5Prefix();
        }
        /**
         * <pre>
         * Comm string's md5 prefix.
         * The comm string was field 3 and has been intentionally left out.
         * </pre>
         *
         * <code>optional uint64 comm_md5_prefix = 4;</code>
         * @return The commMd5Prefix.
         */
        @java.lang.Override
        public long getCommMd5Prefix() {
          return instance.getCommMd5Prefix();
        }
        /**
         * <pre>
         * Comm string's md5 prefix.
         * The comm string was field 3 and has been intentionally left out.
         * </pre>
         *
         * <code>optional uint64 comm_md5_prefix = 4;</code>
         * @param value The commMd5Prefix to set.
         * @return This builder for chaining.
         */
        public Builder setCommMd5Prefix(long value) {
          copyOnWrite();
          instance.setCommMd5Prefix(value);
          return this;
        }
        /**
         * <pre>
         * Comm string's md5 prefix.
         * The comm string was field 3 and has been intentionally left out.
         * </pre>
         *
         * <code>optional uint64 comm_md5_prefix = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearCommMd5Prefix() {
          copyOnWrite();
          instance.clearCommMd5Prefix();
          return this;
        }

        /**
         * <pre>
         * Time the sample was taken.
         * Deprecated, use |sample_info| instead.
         * </pre>
         *
         * <code>optional uint64 sample_time = 5 [deprecated = true];</code>
         * @return Whether the sampleTime field is set.
         */
        @java.lang.Override
        @java.lang.Deprecated public boolean hasSampleTime() {
          return instance.hasSampleTime();
        }
        /**
         * <pre>
         * Time the sample was taken.
         * Deprecated, use |sample_info| instead.
         * </pre>
         *
         * <code>optional uint64 sample_time = 5 [deprecated = true];</code>
         * @return The sampleTime.
         */
        @java.lang.Override
        @java.lang.Deprecated public long getSampleTime() {
          return instance.getSampleTime();
        }
        /**
         * <pre>
         * Time the sample was taken.
         * Deprecated, use |sample_info| instead.
         * </pre>
         *
         * <code>optional uint64 sample_time = 5 [deprecated = true];</code>
         * @param value The sampleTime to set.
         * @return This builder for chaining.
         */
        @java.lang.Deprecated public Builder setSampleTime(long value) {
          copyOnWrite();
          instance.setSampleTime(value);
          return this;
        }
        /**
         * <pre>
         * Time the sample was taken.
         * Deprecated, use |sample_info| instead.
         * </pre>
         *
         * <code>optional uint64 sample_time = 5 [deprecated = true];</code>
         * @return This builder for chaining.
         */
        @java.lang.Deprecated public Builder clearSampleTime() {
          copyOnWrite();
          instance.clearSampleTime();
          return this;
        }

        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 6;</code>
         */
        @java.lang.Override
        public boolean hasSampleInfo() {
          return instance.hasSampleInfo();
        }
        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 6;</code>
         */
        @java.lang.Override
        public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo getSampleInfo() {
          return instance.getSampleInfo();
        }
        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 6;</code>
         */
        public Builder setSampleInfo(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo value) {
          copyOnWrite();
          instance.setSampleInfo(value);
          return this;
          }
        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 6;</code>
         */
        public Builder setSampleInfo(
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo.Builder builderForValue) {
          copyOnWrite();
          instance.setSampleInfo(builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 6;</code>
         */
        public Builder mergeSampleInfo(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo value) {
          copyOnWrite();
          instance.mergeSampleInfo(value);
          return this;
        }
        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 6;</code>
         */
        public Builder clearSampleInfo() {  copyOnWrite();
          instance.clearSampleInfo();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:metrics.PerfDataProto.CommEvent)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "pid_",
                "tid_",
                "commMd5Prefix_",
                "sampleTime_",
                "sampleInfo_",
              };
              java.lang.String info =
                  "\u0001\u0005\u0000\u0001\u0001\u0006\u0005\u0000\u0000\u0000\u0001\u100b\u0000\u0002" +
                  "\u100b\u0001\u0004\u1003\u0002\u0005\u1003\u0003\u0006\u1009\u0004";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.CommEvent)
      private static final org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent DEFAULT_INSTANCE;
      static {
        CommEvent defaultInstance = new CommEvent();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          CommEvent.class, defaultInstance);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<CommEvent> PARSER;

      public static com.google.protobuf.Parser<CommEvent> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface MMapEventOrBuilder extends
        // @@protoc_insertion_point(interface_extends:metrics.PerfDataProto.MMapEvent)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @return Whether the pid field is set.
       */
      boolean hasPid();
      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @return The pid.
       */
      int getPid();

      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 2;</code>
       * @return Whether the tid field is set.
       */
      boolean hasTid();
      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 2;</code>
       * @return The tid.
       */
      int getTid();

      /**
       * <pre>
       * Start address.
       * </pre>
       *
       * <code>optional uint64 start = 3;</code>
       * @return Whether the start field is set.
       */
      boolean hasStart();
      /**
       * <pre>
       * Start address.
       * </pre>
       *
       * <code>optional uint64 start = 3;</code>
       * @return The start.
       */
      long getStart();

      /**
       * <pre>
       * Length.
       * </pre>
       *
       * <code>optional uint64 len = 4;</code>
       * @return Whether the len field is set.
       */
      boolean hasLen();
      /**
       * <pre>
       * Length.
       * </pre>
       *
       * <code>optional uint64 len = 4;</code>
       * @return The len.
       */
      long getLen();

      /**
       * <pre>
       * PG Offset.
       * </pre>
       *
       * <code>optional uint64 pgoff = 5;</code>
       * @return Whether the pgoff field is set.
       */
      boolean hasPgoff();
      /**
       * <pre>
       * PG Offset.
       * </pre>
       *
       * <code>optional uint64 pgoff = 5;</code>
       * @return The pgoff.
       */
      long getPgoff();

      /**
       * <pre>
       * Filename's md5 prefix.
       * The filename was field 6 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 filename_md5_prefix = 7;</code>
       * @return Whether the filenameMd5Prefix field is set.
       */
      boolean hasFilenameMd5Prefix();
      /**
       * <pre>
       * Filename's md5 prefix.
       * The filename was field 6 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 filename_md5_prefix = 7;</code>
       * @return The filenameMd5Prefix.
       */
      long getFilenameMd5Prefix();

      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 8;</code>
       * @return Whether the sampleInfo field is set.
       */
      boolean hasSampleInfo();
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 8;</code>
       * @return The sampleInfo.
       */
      org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo getSampleInfo();
    }
    /**
     * Protobuf type {@code metrics.PerfDataProto.MMapEvent}
     */
    public  static final class MMapEvent extends
        com.google.protobuf.GeneratedMessageLite<
            MMapEvent, MMapEvent.Builder> implements
        // @@protoc_insertion_point(message_implements:metrics.PerfDataProto.MMapEvent)
        MMapEventOrBuilder {
      private MMapEvent() {
      }
      private int bitField0_;
      public static final int PID_FIELD_NUMBER = 1;
      private int pid_;
      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @return Whether the pid field is set.
       */
      @java.lang.Override
      public boolean hasPid() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @return The pid.
       */
      @java.lang.Override
      public int getPid() {
        return pid_;
      }
      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @param value The pid to set.
       */
      private void setPid(int value) {
        bitField0_ |= 0x00000001;
        pid_ = value;
      }
      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       */
      private void clearPid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pid_ = 0;
      }

      public static final int TID_FIELD_NUMBER = 2;
      private int tid_;
      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 2;</code>
       * @return Whether the tid field is set.
       */
      @java.lang.Override
      public boolean hasTid() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 2;</code>
       * @return The tid.
       */
      @java.lang.Override
      public int getTid() {
        return tid_;
      }
      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 2;</code>
       * @param value The tid to set.
       */
      private void setTid(int value) {
        bitField0_ |= 0x00000002;
        tid_ = value;
      }
      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 2;</code>
       */
      private void clearTid() {
        bitField0_ = (bitField0_ & ~0x00000002);
        tid_ = 0;
      }

      public static final int START_FIELD_NUMBER = 3;
      private long start_;
      /**
       * <pre>
       * Start address.
       * </pre>
       *
       * <code>optional uint64 start = 3;</code>
       * @return Whether the start field is set.
       */
      @java.lang.Override
      public boolean hasStart() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Start address.
       * </pre>
       *
       * <code>optional uint64 start = 3;</code>
       * @return The start.
       */
      @java.lang.Override
      public long getStart() {
        return start_;
      }
      /**
       * <pre>
       * Start address.
       * </pre>
       *
       * <code>optional uint64 start = 3;</code>
       * @param value The start to set.
       */
      private void setStart(long value) {
        bitField0_ |= 0x00000004;
        start_ = value;
      }
      /**
       * <pre>
       * Start address.
       * </pre>
       *
       * <code>optional uint64 start = 3;</code>
       */
      private void clearStart() {
        bitField0_ = (bitField0_ & ~0x00000004);
        start_ = 0L;
      }

      public static final int LEN_FIELD_NUMBER = 4;
      private long len_;
      /**
       * <pre>
       * Length.
       * </pre>
       *
       * <code>optional uint64 len = 4;</code>
       * @return Whether the len field is set.
       */
      @java.lang.Override
      public boolean hasLen() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Length.
       * </pre>
       *
       * <code>optional uint64 len = 4;</code>
       * @return The len.
       */
      @java.lang.Override
      public long getLen() {
        return len_;
      }
      /**
       * <pre>
       * Length.
       * </pre>
       *
       * <code>optional uint64 len = 4;</code>
       * @param value The len to set.
       */
      private void setLen(long value) {
        bitField0_ |= 0x00000008;
        len_ = value;
      }
      /**
       * <pre>
       * Length.
       * </pre>
       *
       * <code>optional uint64 len = 4;</code>
       */
      private void clearLen() {
        bitField0_ = (bitField0_ & ~0x00000008);
        len_ = 0L;
      }

      public static final int PGOFF_FIELD_NUMBER = 5;
      private long pgoff_;
      /**
       * <pre>
       * PG Offset.
       * </pre>
       *
       * <code>optional uint64 pgoff = 5;</code>
       * @return Whether the pgoff field is set.
       */
      @java.lang.Override
      public boolean hasPgoff() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * PG Offset.
       * </pre>
       *
       * <code>optional uint64 pgoff = 5;</code>
       * @return The pgoff.
       */
      @java.lang.Override
      public long getPgoff() {
        return pgoff_;
      }
      /**
       * <pre>
       * PG Offset.
       * </pre>
       *
       * <code>optional uint64 pgoff = 5;</code>
       * @param value The pgoff to set.
       */
      private void setPgoff(long value) {
        bitField0_ |= 0x00000010;
        pgoff_ = value;
      }
      /**
       * <pre>
       * PG Offset.
       * </pre>
       *
       * <code>optional uint64 pgoff = 5;</code>
       */
      private void clearPgoff() {
        bitField0_ = (bitField0_ & ~0x00000010);
        pgoff_ = 0L;
      }

      public static final int FILENAME_MD5_PREFIX_FIELD_NUMBER = 7;
      private long filenameMd5Prefix_;
      /**
       * <pre>
       * Filename's md5 prefix.
       * The filename was field 6 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 filename_md5_prefix = 7;</code>
       * @return Whether the filenameMd5Prefix field is set.
       */
      @java.lang.Override
      public boolean hasFilenameMd5Prefix() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Filename's md5 prefix.
       * The filename was field 6 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 filename_md5_prefix = 7;</code>
       * @return The filenameMd5Prefix.
       */
      @java.lang.Override
      public long getFilenameMd5Prefix() {
        return filenameMd5Prefix_;
      }
      /**
       * <pre>
       * Filename's md5 prefix.
       * The filename was field 6 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 filename_md5_prefix = 7;</code>
       * @param value The filenameMd5Prefix to set.
       */
      private void setFilenameMd5Prefix(long value) {
        bitField0_ |= 0x00000020;
        filenameMd5Prefix_ = value;
      }
      /**
       * <pre>
       * Filename's md5 prefix.
       * The filename was field 6 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 filename_md5_prefix = 7;</code>
       */
      private void clearFilenameMd5Prefix() {
        bitField0_ = (bitField0_ & ~0x00000020);
        filenameMd5Prefix_ = 0L;
      }

      public static final int SAMPLE_INFO_FIELD_NUMBER = 8;
      private org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo sampleInfo_;
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 8;</code>
       */
      @java.lang.Override
      public boolean hasSampleInfo() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 8;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo getSampleInfo() {
        return sampleInfo_ == null ? org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo.getDefaultInstance() : sampleInfo_;
      }
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 8;</code>
       */
      private void setSampleInfo(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo value) {
        value.getClass();
  sampleInfo_ = value;
        bitField0_ |= 0x00000040;
        }
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 8;</code>
       */
      @java.lang.SuppressWarnings({"ReferenceEquality"})
      private void mergeSampleInfo(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo value) {
        value.getClass();
  if (sampleInfo_ != null &&
            sampleInfo_ != org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo.getDefaultInstance()) {
          sampleInfo_ =
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo.newBuilder(sampleInfo_).mergeFrom(value).buildPartial();
        } else {
          sampleInfo_ = value;
        }
        bitField0_ |= 0x00000040;
      }
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 8;</code>
       */
      private void clearSampleInfo() {  sampleInfo_ = null;
        bitField0_ = (bitField0_ & ~0x00000040);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code metrics.PerfDataProto.MMapEvent}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent, Builder> implements
          // @@protoc_insertion_point(builder_implements:metrics.PerfDataProto.MMapEvent)
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEventOrBuilder {
        // Construct using org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Process id.
         * </pre>
         *
         * <code>optional uint32 pid = 1;</code>
         * @return Whether the pid field is set.
         */
        @java.lang.Override
        public boolean hasPid() {
          return instance.hasPid();
        }
        /**
         * <pre>
         * Process id.
         * </pre>
         *
         * <code>optional uint32 pid = 1;</code>
         * @return The pid.
         */
        @java.lang.Override
        public int getPid() {
          return instance.getPid();
        }
        /**
         * <pre>
         * Process id.
         * </pre>
         *
         * <code>optional uint32 pid = 1;</code>
         * @param value The pid to set.
         * @return This builder for chaining.
         */
        public Builder setPid(int value) {
          copyOnWrite();
          instance.setPid(value);
          return this;
        }
        /**
         * <pre>
         * Process id.
         * </pre>
         *
         * <code>optional uint32 pid = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPid() {
          copyOnWrite();
          instance.clearPid();
          return this;
        }

        /**
         * <pre>
         * Thread id.
         * </pre>
         *
         * <code>optional uint32 tid = 2;</code>
         * @return Whether the tid field is set.
         */
        @java.lang.Override
        public boolean hasTid() {
          return instance.hasTid();
        }
        /**
         * <pre>
         * Thread id.
         * </pre>
         *
         * <code>optional uint32 tid = 2;</code>
         * @return The tid.
         */
        @java.lang.Override
        public int getTid() {
          return instance.getTid();
        }
        /**
         * <pre>
         * Thread id.
         * </pre>
         *
         * <code>optional uint32 tid = 2;</code>
         * @param value The tid to set.
         * @return This builder for chaining.
         */
        public Builder setTid(int value) {
          copyOnWrite();
          instance.setTid(value);
          return this;
        }
        /**
         * <pre>
         * Thread id.
         * </pre>
         *
         * <code>optional uint32 tid = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearTid() {
          copyOnWrite();
          instance.clearTid();
          return this;
        }

        /**
         * <pre>
         * Start address.
         * </pre>
         *
         * <code>optional uint64 start = 3;</code>
         * @return Whether the start field is set.
         */
        @java.lang.Override
        public boolean hasStart() {
          return instance.hasStart();
        }
        /**
         * <pre>
         * Start address.
         * </pre>
         *
         * <code>optional uint64 start = 3;</code>
         * @return The start.
         */
        @java.lang.Override
        public long getStart() {
          return instance.getStart();
        }
        /**
         * <pre>
         * Start address.
         * </pre>
         *
         * <code>optional uint64 start = 3;</code>
         * @param value The start to set.
         * @return This builder for chaining.
         */
        public Builder setStart(long value) {
          copyOnWrite();
          instance.setStart(value);
          return this;
        }
        /**
         * <pre>
         * Start address.
         * </pre>
         *
         * <code>optional uint64 start = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearStart() {
          copyOnWrite();
          instance.clearStart();
          return this;
        }

        /**
         * <pre>
         * Length.
         * </pre>
         *
         * <code>optional uint64 len = 4;</code>
         * @return Whether the len field is set.
         */
        @java.lang.Override
        public boolean hasLen() {
          return instance.hasLen();
        }
        /**
         * <pre>
         * Length.
         * </pre>
         *
         * <code>optional uint64 len = 4;</code>
         * @return The len.
         */
        @java.lang.Override
        public long getLen() {
          return instance.getLen();
        }
        /**
         * <pre>
         * Length.
         * </pre>
         *
         * <code>optional uint64 len = 4;</code>
         * @param value The len to set.
         * @return This builder for chaining.
         */
        public Builder setLen(long value) {
          copyOnWrite();
          instance.setLen(value);
          return this;
        }
        /**
         * <pre>
         * Length.
         * </pre>
         *
         * <code>optional uint64 len = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearLen() {
          copyOnWrite();
          instance.clearLen();
          return this;
        }

        /**
         * <pre>
         * PG Offset.
         * </pre>
         *
         * <code>optional uint64 pgoff = 5;</code>
         * @return Whether the pgoff field is set.
         */
        @java.lang.Override
        public boolean hasPgoff() {
          return instance.hasPgoff();
        }
        /**
         * <pre>
         * PG Offset.
         * </pre>
         *
         * <code>optional uint64 pgoff = 5;</code>
         * @return The pgoff.
         */
        @java.lang.Override
        public long getPgoff() {
          return instance.getPgoff();
        }
        /**
         * <pre>
         * PG Offset.
         * </pre>
         *
         * <code>optional uint64 pgoff = 5;</code>
         * @param value The pgoff to set.
         * @return This builder for chaining.
         */
        public Builder setPgoff(long value) {
          copyOnWrite();
          instance.setPgoff(value);
          return this;
        }
        /**
         * <pre>
         * PG Offset.
         * </pre>
         *
         * <code>optional uint64 pgoff = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearPgoff() {
          copyOnWrite();
          instance.clearPgoff();
          return this;
        }

        /**
         * <pre>
         * Filename's md5 prefix.
         * The filename was field 6 and has been intentionally left out.
         * </pre>
         *
         * <code>optional uint64 filename_md5_prefix = 7;</code>
         * @return Whether the filenameMd5Prefix field is set.
         */
        @java.lang.Override
        public boolean hasFilenameMd5Prefix() {
          return instance.hasFilenameMd5Prefix();
        }
        /**
         * <pre>
         * Filename's md5 prefix.
         * The filename was field 6 and has been intentionally left out.
         * </pre>
         *
         * <code>optional uint64 filename_md5_prefix = 7;</code>
         * @return The filenameMd5Prefix.
         */
        @java.lang.Override
        public long getFilenameMd5Prefix() {
          return instance.getFilenameMd5Prefix();
        }
        /**
         * <pre>
         * Filename's md5 prefix.
         * The filename was field 6 and has been intentionally left out.
         * </pre>
         *
         * <code>optional uint64 filename_md5_prefix = 7;</code>
         * @param value The filenameMd5Prefix to set.
         * @return This builder for chaining.
         */
        public Builder setFilenameMd5Prefix(long value) {
          copyOnWrite();
          instance.setFilenameMd5Prefix(value);
          return this;
        }
        /**
         * <pre>
         * Filename's md5 prefix.
         * The filename was field 6 and has been intentionally left out.
         * </pre>
         *
         * <code>optional uint64 filename_md5_prefix = 7;</code>
         * @return This builder for chaining.
         */
        public Builder clearFilenameMd5Prefix() {
          copyOnWrite();
          instance.clearFilenameMd5Prefix();
          return this;
        }

        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 8;</code>
         */
        @java.lang.Override
        public boolean hasSampleInfo() {
          return instance.hasSampleInfo();
        }
        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 8;</code>
         */
        @java.lang.Override
        public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo getSampleInfo() {
          return instance.getSampleInfo();
        }
        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 8;</code>
         */
        public Builder setSampleInfo(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo value) {
          copyOnWrite();
          instance.setSampleInfo(value);
          return this;
          }
        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 8;</code>
         */
        public Builder setSampleInfo(
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo.Builder builderForValue) {
          copyOnWrite();
          instance.setSampleInfo(builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 8;</code>
         */
        public Builder mergeSampleInfo(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo value) {
          copyOnWrite();
          instance.mergeSampleInfo(value);
          return this;
        }
        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 8;</code>
         */
        public Builder clearSampleInfo() {  copyOnWrite();
          instance.clearSampleInfo();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:metrics.PerfDataProto.MMapEvent)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "pid_",
                "tid_",
                "start_",
                "len_",
                "pgoff_",
                "filenameMd5Prefix_",
                "sampleInfo_",
              };
              java.lang.String info =
                  "\u0001\u0007\u0000\u0001\u0001\b\u0007\u0000\u0000\u0000\u0001\u100b\u0000\u0002" +
                  "\u100b\u0001\u0003\u1003\u0002\u0004\u1003\u0003\u0005\u1003\u0004\u0007\u1003\u0005" +
                  "\b\u1009\u0006";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.MMapEvent)
      private static final org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent DEFAULT_INSTANCE;
      static {
        MMapEvent defaultInstance = new MMapEvent();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          MMapEvent.class, defaultInstance);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<MMapEvent> PARSER;

      public static com.google.protobuf.Parser<MMapEvent> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface BranchStackEntryOrBuilder extends
        // @@protoc_insertion_point(interface_extends:metrics.PerfDataProto.BranchStackEntry)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Branch source address.
       * </pre>
       *
       * <code>optional uint64 from_ip = 1;</code>
       * @return Whether the fromIp field is set.
       */
      boolean hasFromIp();
      /**
       * <pre>
       * Branch source address.
       * </pre>
       *
       * <code>optional uint64 from_ip = 1;</code>
       * @return The fromIp.
       */
      long getFromIp();

      /**
       * <pre>
       * Branch destination address.
       * </pre>
       *
       * <code>optional uint64 to_ip = 2;</code>
       * @return Whether the toIp field is set.
       */
      boolean hasToIp();
      /**
       * <pre>
       * Branch destination address.
       * </pre>
       *
       * <code>optional uint64 to_ip = 2;</code>
       * @return The toIp.
       */
      long getToIp();

      /**
       * <pre>
       * Indicates a mispredicted branch.
       * </pre>
       *
       * <code>optional bool mispredicted = 3;</code>
       * @return Whether the mispredicted field is set.
       */
      boolean hasMispredicted();
      /**
       * <pre>
       * Indicates a mispredicted branch.
       * </pre>
       *
       * <code>optional bool mispredicted = 3;</code>
       * @return The mispredicted.
       */
      boolean getMispredicted();
    }
    /**
     * Protobuf type {@code metrics.PerfDataProto.BranchStackEntry}
     */
    public  static final class BranchStackEntry extends
        com.google.protobuf.GeneratedMessageLite<
            BranchStackEntry, BranchStackEntry.Builder> implements
        // @@protoc_insertion_point(message_implements:metrics.PerfDataProto.BranchStackEntry)
        BranchStackEntryOrBuilder {
      private BranchStackEntry() {
      }
      private int bitField0_;
      public static final int FROM_IP_FIELD_NUMBER = 1;
      private long fromIp_;
      /**
       * <pre>
       * Branch source address.
       * </pre>
       *
       * <code>optional uint64 from_ip = 1;</code>
       * @return Whether the fromIp field is set.
       */
      @java.lang.Override
      public boolean hasFromIp() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Branch source address.
       * </pre>
       *
       * <code>optional uint64 from_ip = 1;</code>
       * @return The fromIp.
       */
      @java.lang.Override
      public long getFromIp() {
        return fromIp_;
      }
      /**
       * <pre>
       * Branch source address.
       * </pre>
       *
       * <code>optional uint64 from_ip = 1;</code>
       * @param value The fromIp to set.
       */
      private void setFromIp(long value) {
        bitField0_ |= 0x00000001;
        fromIp_ = value;
      }
      /**
       * <pre>
       * Branch source address.
       * </pre>
       *
       * <code>optional uint64 from_ip = 1;</code>
       */
      private void clearFromIp() {
        bitField0_ = (bitField0_ & ~0x00000001);
        fromIp_ = 0L;
      }

      public static final int TO_IP_FIELD_NUMBER = 2;
      private long toIp_;
      /**
       * <pre>
       * Branch destination address.
       * </pre>
       *
       * <code>optional uint64 to_ip = 2;</code>
       * @return Whether the toIp field is set.
       */
      @java.lang.Override
      public boolean hasToIp() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Branch destination address.
       * </pre>
       *
       * <code>optional uint64 to_ip = 2;</code>
       * @return The toIp.
       */
      @java.lang.Override
      public long getToIp() {
        return toIp_;
      }
      /**
       * <pre>
       * Branch destination address.
       * </pre>
       *
       * <code>optional uint64 to_ip = 2;</code>
       * @param value The toIp to set.
       */
      private void setToIp(long value) {
        bitField0_ |= 0x00000002;
        toIp_ = value;
      }
      /**
       * <pre>
       * Branch destination address.
       * </pre>
       *
       * <code>optional uint64 to_ip = 2;</code>
       */
      private void clearToIp() {
        bitField0_ = (bitField0_ & ~0x00000002);
        toIp_ = 0L;
      }

      public static final int MISPREDICTED_FIELD_NUMBER = 3;
      private boolean mispredicted_;
      /**
       * <pre>
       * Indicates a mispredicted branch.
       * </pre>
       *
       * <code>optional bool mispredicted = 3;</code>
       * @return Whether the mispredicted field is set.
       */
      @java.lang.Override
      public boolean hasMispredicted() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Indicates a mispredicted branch.
       * </pre>
       *
       * <code>optional bool mispredicted = 3;</code>
       * @return The mispredicted.
       */
      @java.lang.Override
      public boolean getMispredicted() {
        return mispredicted_;
      }
      /**
       * <pre>
       * Indicates a mispredicted branch.
       * </pre>
       *
       * <code>optional bool mispredicted = 3;</code>
       * @param value The mispredicted to set.
       */
      private void setMispredicted(boolean value) {
        bitField0_ |= 0x00000004;
        mispredicted_ = value;
      }
      /**
       * <pre>
       * Indicates a mispredicted branch.
       * </pre>
       *
       * <code>optional bool mispredicted = 3;</code>
       */
      private void clearMispredicted() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mispredicted_ = false;
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code metrics.PerfDataProto.BranchStackEntry}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry, Builder> implements
          // @@protoc_insertion_point(builder_implements:metrics.PerfDataProto.BranchStackEntry)
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntryOrBuilder {
        // Construct using org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Branch source address.
         * </pre>
         *
         * <code>optional uint64 from_ip = 1;</code>
         * @return Whether the fromIp field is set.
         */
        @java.lang.Override
        public boolean hasFromIp() {
          return instance.hasFromIp();
        }
        /**
         * <pre>
         * Branch source address.
         * </pre>
         *
         * <code>optional uint64 from_ip = 1;</code>
         * @return The fromIp.
         */
        @java.lang.Override
        public long getFromIp() {
          return instance.getFromIp();
        }
        /**
         * <pre>
         * Branch source address.
         * </pre>
         *
         * <code>optional uint64 from_ip = 1;</code>
         * @param value The fromIp to set.
         * @return This builder for chaining.
         */
        public Builder setFromIp(long value) {
          copyOnWrite();
          instance.setFromIp(value);
          return this;
        }
        /**
         * <pre>
         * Branch source address.
         * </pre>
         *
         * <code>optional uint64 from_ip = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearFromIp() {
          copyOnWrite();
          instance.clearFromIp();
          return this;
        }

        /**
         * <pre>
         * Branch destination address.
         * </pre>
         *
         * <code>optional uint64 to_ip = 2;</code>
         * @return Whether the toIp field is set.
         */
        @java.lang.Override
        public boolean hasToIp() {
          return instance.hasToIp();
        }
        /**
         * <pre>
         * Branch destination address.
         * </pre>
         *
         * <code>optional uint64 to_ip = 2;</code>
         * @return The toIp.
         */
        @java.lang.Override
        public long getToIp() {
          return instance.getToIp();
        }
        /**
         * <pre>
         * Branch destination address.
         * </pre>
         *
         * <code>optional uint64 to_ip = 2;</code>
         * @param value The toIp to set.
         * @return This builder for chaining.
         */
        public Builder setToIp(long value) {
          copyOnWrite();
          instance.setToIp(value);
          return this;
        }
        /**
         * <pre>
         * Branch destination address.
         * </pre>
         *
         * <code>optional uint64 to_ip = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearToIp() {
          copyOnWrite();
          instance.clearToIp();
          return this;
        }

        /**
         * <pre>
         * Indicates a mispredicted branch.
         * </pre>
         *
         * <code>optional bool mispredicted = 3;</code>
         * @return Whether the mispredicted field is set.
         */
        @java.lang.Override
        public boolean hasMispredicted() {
          return instance.hasMispredicted();
        }
        /**
         * <pre>
         * Indicates a mispredicted branch.
         * </pre>
         *
         * <code>optional bool mispredicted = 3;</code>
         * @return The mispredicted.
         */
        @java.lang.Override
        public boolean getMispredicted() {
          return instance.getMispredicted();
        }
        /**
         * <pre>
         * Indicates a mispredicted branch.
         * </pre>
         *
         * <code>optional bool mispredicted = 3;</code>
         * @param value The mispredicted to set.
         * @return This builder for chaining.
         */
        public Builder setMispredicted(boolean value) {
          copyOnWrite();
          instance.setMispredicted(value);
          return this;
        }
        /**
         * <pre>
         * Indicates a mispredicted branch.
         * </pre>
         *
         * <code>optional bool mispredicted = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearMispredicted() {
          copyOnWrite();
          instance.clearMispredicted();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:metrics.PerfDataProto.BranchStackEntry)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "fromIp_",
                "toIp_",
                "mispredicted_",
              };
              java.lang.String info =
                  "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u1003\u0000\u0002" +
                  "\u1003\u0001\u0003\u1007\u0002";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.BranchStackEntry)
      private static final org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry DEFAULT_INSTANCE;
      static {
        BranchStackEntry defaultInstance = new BranchStackEntry();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          BranchStackEntry.class, defaultInstance);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<BranchStackEntry> PARSER;

      public static com.google.protobuf.Parser<BranchStackEntry> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface SampleEventOrBuilder extends
        // @@protoc_insertion_point(interface_extends:metrics.PerfDataProto.SampleEvent)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Instruction pointer.
       * </pre>
       *
       * <code>optional uint64 ip = 1;</code>
       * @return Whether the ip field is set.
       */
      boolean hasIp();
      /**
       * <pre>
       * Instruction pointer.
       * </pre>
       *
       * <code>optional uint64 ip = 1;</code>
       * @return The ip.
       */
      long getIp();

      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 2;</code>
       * @return Whether the pid field is set.
       */
      boolean hasPid();
      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 2;</code>
       * @return The pid.
       */
      int getPid();

      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 3;</code>
       * @return Whether the tid field is set.
       */
      boolean hasTid();
      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 3;</code>
       * @return The tid.
       */
      int getTid();

      /**
       * <pre>
       * The time after boot when the sample was recorded, in nanoseconds.
       * </pre>
       *
       * <code>optional uint64 sample_time_ns = 4;</code>
       * @return Whether the sampleTimeNs field is set.
       */
      boolean hasSampleTimeNs();
      /**
       * <pre>
       * The time after boot when the sample was recorded, in nanoseconds.
       * </pre>
       *
       * <code>optional uint64 sample_time_ns = 4;</code>
       * @return The sampleTimeNs.
       */
      long getSampleTimeNs();

      /**
       * <pre>
       * The address of the sample.
       * </pre>
       *
       * <code>optional uint64 addr = 5;</code>
       * @return Whether the addr field is set.
       */
      boolean hasAddr();
      /**
       * <pre>
       * The address of the sample.
       * </pre>
       *
       * <code>optional uint64 addr = 5;</code>
       * @return The addr.
       */
      long getAddr();

      /**
       * <pre>
       * The id of the sample.
       * </pre>
       *
       * <code>optional uint64 id = 6;</code>
       * @return Whether the id field is set.
       */
      boolean hasId();
      /**
       * <pre>
       * The id of the sample.
       * </pre>
       *
       * <code>optional uint64 id = 6;</code>
       * @return The id.
       */
      long getId();

      /**
       * <pre>
       * The stream id of the sample.
       * </pre>
       *
       * <code>optional uint64 stream_id = 7;</code>
       * @return Whether the streamId field is set.
       */
      boolean hasStreamId();
      /**
       * <pre>
       * The stream id of the sample.
       * </pre>
       *
       * <code>optional uint64 stream_id = 7;</code>
       * @return The streamId.
       */
      long getStreamId();

      /**
       * <pre>
       * The period of the sample.
       * </pre>
       *
       * <code>optional uint64 period = 8;</code>
       * @return Whether the period field is set.
       */
      boolean hasPeriod();
      /**
       * <pre>
       * The period of the sample.
       * </pre>
       *
       * <code>optional uint64 period = 8;</code>
       * @return The period.
       */
      long getPeriod();

      /**
       * <pre>
       * The CPU where the event was recorded.
       * </pre>
       *
       * <code>optional uint32 cpu = 9;</code>
       * @return Whether the cpu field is set.
       */
      boolean hasCpu();
      /**
       * <pre>
       * The CPU where the event was recorded.
       * </pre>
       *
       * <code>optional uint32 cpu = 9;</code>
       * @return The cpu.
       */
      int getCpu();

      /**
       * <pre>
       * The raw size of the event in bytes.
       * </pre>
       *
       * <code>optional uint32 raw_size = 10;</code>
       * @return Whether the rawSize field is set.
       */
      boolean hasRawSize();
      /**
       * <pre>
       * The raw size of the event in bytes.
       * </pre>
       *
       * <code>optional uint32 raw_size = 10;</code>
       * @return The rawSize.
       */
      int getRawSize();

      /**
       * <pre>
       * Sample callchain info.
       * </pre>
       *
       * <code>repeated uint64 callchain = 11;</code>
       * @return A list containing the callchain.
       */
      java.util.List<java.lang.Long> getCallchainList();
      /**
       * <pre>
       * Sample callchain info.
       * </pre>
       *
       * <code>repeated uint64 callchain = 11;</code>
       * @return The count of callchain.
       */
      int getCallchainCount();
      /**
       * <pre>
       * Sample callchain info.
       * </pre>
       *
       * <code>repeated uint64 callchain = 11;</code>
       * @param index The index of the element to return.
       * @return The callchain at the given index.
       */
      long getCallchain(int index);

      /**
       * <pre>
       * Branch stack info.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
       */
      java.util.List<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry> 
          getBranchStackList();
      /**
       * <pre>
       * Branch stack info.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
       */
      org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry getBranchStack(int index);
      /**
       * <pre>
       * Branch stack info.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
       */
      int getBranchStackCount();

      /**
       * <pre>
       * Sample weight for special events.
       * </pre>
       *
       * <code>optional uint64 weight = 15;</code>
       * @return Whether the weight field is set.
       */
      boolean hasWeight();
      /**
       * <pre>
       * Sample weight for special events.
       * </pre>
       *
       * <code>optional uint64 weight = 15;</code>
       * @return The weight.
       */
      long getWeight();

      /**
       * <pre>
       * Sample data source flags.
       * Possible flag values:
       * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L849
       * </pre>
       *
       * <code>optional uint64 data_src = 16;</code>
       * @return Whether the dataSrc field is set.
       */
      boolean hasDataSrc();
      /**
       * <pre>
       * Sample data source flags.
       * Possible flag values:
       * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L849
       * </pre>
       *
       * <code>optional uint64 data_src = 16;</code>
       * @return The dataSrc.
       */
      long getDataSrc();

      /**
       * <pre>
       * Sample transaction flags for special events.
       * Flag fields:
       * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L209
       * </pre>
       *
       * <code>optional uint64 transaction = 17;</code>
       * @return Whether the transaction field is set.
       */
      boolean hasTransaction();
      /**
       * <pre>
       * Sample transaction flags for special events.
       * Flag fields:
       * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L209
       * </pre>
       *
       * <code>optional uint64 transaction = 17;</code>
       * @return The transaction.
       */
      long getTransaction();
    }
    /**
     * Protobuf type {@code metrics.PerfDataProto.SampleEvent}
     */
    public  static final class SampleEvent extends
        com.google.protobuf.GeneratedMessageLite<
            SampleEvent, SampleEvent.Builder> implements
        // @@protoc_insertion_point(message_implements:metrics.PerfDataProto.SampleEvent)
        SampleEventOrBuilder {
      private SampleEvent() {
        callchain_ = emptyLongList();
        branchStack_ = emptyProtobufList();
      }
      private int bitField0_;
      public static final int IP_FIELD_NUMBER = 1;
      private long ip_;
      /**
       * <pre>
       * Instruction pointer.
       * </pre>
       *
       * <code>optional uint64 ip = 1;</code>
       * @return Whether the ip field is set.
       */
      @java.lang.Override
      public boolean hasIp() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Instruction pointer.
       * </pre>
       *
       * <code>optional uint64 ip = 1;</code>
       * @return The ip.
       */
      @java.lang.Override
      public long getIp() {
        return ip_;
      }
      /**
       * <pre>
       * Instruction pointer.
       * </pre>
       *
       * <code>optional uint64 ip = 1;</code>
       * @param value The ip to set.
       */
      private void setIp(long value) {
        bitField0_ |= 0x00000001;
        ip_ = value;
      }
      /**
       * <pre>
       * Instruction pointer.
       * </pre>
       *
       * <code>optional uint64 ip = 1;</code>
       */
      private void clearIp() {
        bitField0_ = (bitField0_ & ~0x00000001);
        ip_ = 0L;
      }

      public static final int PID_FIELD_NUMBER = 2;
      private int pid_;
      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 2;</code>
       * @return Whether the pid field is set.
       */
      @java.lang.Override
      public boolean hasPid() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 2;</code>
       * @return The pid.
       */
      @java.lang.Override
      public int getPid() {
        return pid_;
      }
      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 2;</code>
       * @param value The pid to set.
       */
      private void setPid(int value) {
        bitField0_ |= 0x00000002;
        pid_ = value;
      }
      /**
       * <pre>
       * Process id.
       * </pre>
       *
       * <code>optional uint32 pid = 2;</code>
       */
      private void clearPid() {
        bitField0_ = (bitField0_ & ~0x00000002);
        pid_ = 0;
      }

      public static final int TID_FIELD_NUMBER = 3;
      private int tid_;
      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 3;</code>
       * @return Whether the tid field is set.
       */
      @java.lang.Override
      public boolean hasTid() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 3;</code>
       * @return The tid.
       */
      @java.lang.Override
      public int getTid() {
        return tid_;
      }
      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 3;</code>
       * @param value The tid to set.
       */
      private void setTid(int value) {
        bitField0_ |= 0x00000004;
        tid_ = value;
      }
      /**
       * <pre>
       * Thread id.
       * </pre>
       *
       * <code>optional uint32 tid = 3;</code>
       */
      private void clearTid() {
        bitField0_ = (bitField0_ & ~0x00000004);
        tid_ = 0;
      }

      public static final int SAMPLE_TIME_NS_FIELD_NUMBER = 4;
      private long sampleTimeNs_;
      /**
       * <pre>
       * The time after boot when the sample was recorded, in nanoseconds.
       * </pre>
       *
       * <code>optional uint64 sample_time_ns = 4;</code>
       * @return Whether the sampleTimeNs field is set.
       */
      @java.lang.Override
      public boolean hasSampleTimeNs() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * The time after boot when the sample was recorded, in nanoseconds.
       * </pre>
       *
       * <code>optional uint64 sample_time_ns = 4;</code>
       * @return The sampleTimeNs.
       */
      @java.lang.Override
      public long getSampleTimeNs() {
        return sampleTimeNs_;
      }
      /**
       * <pre>
       * The time after boot when the sample was recorded, in nanoseconds.
       * </pre>
       *
       * <code>optional uint64 sample_time_ns = 4;</code>
       * @param value The sampleTimeNs to set.
       */
      private void setSampleTimeNs(long value) {
        bitField0_ |= 0x00000008;
        sampleTimeNs_ = value;
      }
      /**
       * <pre>
       * The time after boot when the sample was recorded, in nanoseconds.
       * </pre>
       *
       * <code>optional uint64 sample_time_ns = 4;</code>
       */
      private void clearSampleTimeNs() {
        bitField0_ = (bitField0_ & ~0x00000008);
        sampleTimeNs_ = 0L;
      }

      public static final int ADDR_FIELD_NUMBER = 5;
      private long addr_;
      /**
       * <pre>
       * The address of the sample.
       * </pre>
       *
       * <code>optional uint64 addr = 5;</code>
       * @return Whether the addr field is set.
       */
      @java.lang.Override
      public boolean hasAddr() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * The address of the sample.
       * </pre>
       *
       * <code>optional uint64 addr = 5;</code>
       * @return The addr.
       */
      @java.lang.Override
      public long getAddr() {
        return addr_;
      }
      /**
       * <pre>
       * The address of the sample.
       * </pre>
       *
       * <code>optional uint64 addr = 5;</code>
       * @param value The addr to set.
       */
      private void setAddr(long value) {
        bitField0_ |= 0x00000010;
        addr_ = value;
      }
      /**
       * <pre>
       * The address of the sample.
       * </pre>
       *
       * <code>optional uint64 addr = 5;</code>
       */
      private void clearAddr() {
        bitField0_ = (bitField0_ & ~0x00000010);
        addr_ = 0L;
      }

      public static final int ID_FIELD_NUMBER = 6;
      private long id_;
      /**
       * <pre>
       * The id of the sample.
       * </pre>
       *
       * <code>optional uint64 id = 6;</code>
       * @return Whether the id field is set.
       */
      @java.lang.Override
      public boolean hasId() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * The id of the sample.
       * </pre>
       *
       * <code>optional uint64 id = 6;</code>
       * @return The id.
       */
      @java.lang.Override
      public long getId() {
        return id_;
      }
      /**
       * <pre>
       * The id of the sample.
       * </pre>
       *
       * <code>optional uint64 id = 6;</code>
       * @param value The id to set.
       */
      private void setId(long value) {
        bitField0_ |= 0x00000020;
        id_ = value;
      }
      /**
       * <pre>
       * The id of the sample.
       * </pre>
       *
       * <code>optional uint64 id = 6;</code>
       */
      private void clearId() {
        bitField0_ = (bitField0_ & ~0x00000020);
        id_ = 0L;
      }

      public static final int STREAM_ID_FIELD_NUMBER = 7;
      private long streamId_;
      /**
       * <pre>
       * The stream id of the sample.
       * </pre>
       *
       * <code>optional uint64 stream_id = 7;</code>
       * @return Whether the streamId field is set.
       */
      @java.lang.Override
      public boolean hasStreamId() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * The stream id of the sample.
       * </pre>
       *
       * <code>optional uint64 stream_id = 7;</code>
       * @return The streamId.
       */
      @java.lang.Override
      public long getStreamId() {
        return streamId_;
      }
      /**
       * <pre>
       * The stream id of the sample.
       * </pre>
       *
       * <code>optional uint64 stream_id = 7;</code>
       * @param value The streamId to set.
       */
      private void setStreamId(long value) {
        bitField0_ |= 0x00000040;
        streamId_ = value;
      }
      /**
       * <pre>
       * The stream id of the sample.
       * </pre>
       *
       * <code>optional uint64 stream_id = 7;</code>
       */
      private void clearStreamId() {
        bitField0_ = (bitField0_ & ~0x00000040);
        streamId_ = 0L;
      }

      public static final int PERIOD_FIELD_NUMBER = 8;
      private long period_;
      /**
       * <pre>
       * The period of the sample.
       * </pre>
       *
       * <code>optional uint64 period = 8;</code>
       * @return Whether the period field is set.
       */
      @java.lang.Override
      public boolean hasPeriod() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * The period of the sample.
       * </pre>
       *
       * <code>optional uint64 period = 8;</code>
       * @return The period.
       */
      @java.lang.Override
      public long getPeriod() {
        return period_;
      }
      /**
       * <pre>
       * The period of the sample.
       * </pre>
       *
       * <code>optional uint64 period = 8;</code>
       * @param value The period to set.
       */
      private void setPeriod(long value) {
        bitField0_ |= 0x00000080;
        period_ = value;
      }
      /**
       * <pre>
       * The period of the sample.
       * </pre>
       *
       * <code>optional uint64 period = 8;</code>
       */
      private void clearPeriod() {
        bitField0_ = (bitField0_ & ~0x00000080);
        period_ = 0L;
      }

      public static final int CPU_FIELD_NUMBER = 9;
      private int cpu_;
      /**
       * <pre>
       * The CPU where the event was recorded.
       * </pre>
       *
       * <code>optional uint32 cpu = 9;</code>
       * @return Whether the cpu field is set.
       */
      @java.lang.Override
      public boolean hasCpu() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * The CPU where the event was recorded.
       * </pre>
       *
       * <code>optional uint32 cpu = 9;</code>
       * @return The cpu.
       */
      @java.lang.Override
      public int getCpu() {
        return cpu_;
      }
      /**
       * <pre>
       * The CPU where the event was recorded.
       * </pre>
       *
       * <code>optional uint32 cpu = 9;</code>
       * @param value The cpu to set.
       */
      private void setCpu(int value) {
        bitField0_ |= 0x00000100;
        cpu_ = value;
      }
      /**
       * <pre>
       * The CPU where the event was recorded.
       * </pre>
       *
       * <code>optional uint32 cpu = 9;</code>
       */
      private void clearCpu() {
        bitField0_ = (bitField0_ & ~0x00000100);
        cpu_ = 0;
      }

      public static final int RAW_SIZE_FIELD_NUMBER = 10;
      private int rawSize_;
      /**
       * <pre>
       * The raw size of the event in bytes.
       * </pre>
       *
       * <code>optional uint32 raw_size = 10;</code>
       * @return Whether the rawSize field is set.
       */
      @java.lang.Override
      public boolean hasRawSize() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       * The raw size of the event in bytes.
       * </pre>
       *
       * <code>optional uint32 raw_size = 10;</code>
       * @return The rawSize.
       */
      @java.lang.Override
      public int getRawSize() {
        return rawSize_;
      }
      /**
       * <pre>
       * The raw size of the event in bytes.
       * </pre>
       *
       * <code>optional uint32 raw_size = 10;</code>
       * @param value The rawSize to set.
       */
      private void setRawSize(int value) {
        bitField0_ |= 0x00000200;
        rawSize_ = value;
      }
      /**
       * <pre>
       * The raw size of the event in bytes.
       * </pre>
       *
       * <code>optional uint32 raw_size = 10;</code>
       */
      private void clearRawSize() {
        bitField0_ = (bitField0_ & ~0x00000200);
        rawSize_ = 0;
      }

      public static final int CALLCHAIN_FIELD_NUMBER = 11;
      private com.google.protobuf.Internal.LongList callchain_;
      /**
       * <pre>
       * Sample callchain info.
       * </pre>
       *
       * <code>repeated uint64 callchain = 11;</code>
       * @return A list containing the callchain.
       */
      @java.lang.Override
      public java.util.List<java.lang.Long>
          getCallchainList() {
        return callchain_;
      }
      /**
       * <pre>
       * Sample callchain info.
       * </pre>
       *
       * <code>repeated uint64 callchain = 11;</code>
       * @return The count of callchain.
       */
      @java.lang.Override
      public int getCallchainCount() {
        return callchain_.size();
      }
      /**
       * <pre>
       * Sample callchain info.
       * </pre>
       *
       * <code>repeated uint64 callchain = 11;</code>
       * @param index The index of the element to return.
       * @return The callchain at the given index.
       */
      @java.lang.Override
      public long getCallchain(int index) {
        return callchain_.getLong(index);
      }
      private void ensureCallchainIsMutable() {
        com.google.protobuf.Internal.LongList tmp = callchain_;
        if (!tmp.isModifiable()) {
          callchain_ =
              com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
         }
      }
      /**
       * <pre>
       * Sample callchain info.
       * </pre>
       *
       * <code>repeated uint64 callchain = 11;</code>
       * @param index The index to set the value at.
       * @param value The callchain to set.
       */
      private void setCallchain(
          int index, long value) {
        ensureCallchainIsMutable();
        callchain_.setLong(index, value);
      }
      /**
       * <pre>
       * Sample callchain info.
       * </pre>
       *
       * <code>repeated uint64 callchain = 11;</code>
       * @param value The callchain to add.
       */
      private void addCallchain(long value) {
        ensureCallchainIsMutable();
        callchain_.addLong(value);
      }
      /**
       * <pre>
       * Sample callchain info.
       * </pre>
       *
       * <code>repeated uint64 callchain = 11;</code>
       * @param values The callchain to add.
       */
      private void addAllCallchain(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureCallchainIsMutable();
        com.google.protobuf.AbstractMessageLite.addAll(
            values, callchain_);
      }
      /**
       * <pre>
       * Sample callchain info.
       * </pre>
       *
       * <code>repeated uint64 callchain = 11;</code>
       */
      private void clearCallchain() {
        callchain_ = emptyLongList();
      }

      public static final int BRANCH_STACK_FIELD_NUMBER = 12;
      private com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry> branchStack_;
      /**
       * <pre>
       * Branch stack info.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
       */
      @java.lang.Override
      public java.util.List<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry> getBranchStackList() {
        return branchStack_;
      }
      /**
       * <pre>
       * Branch stack info.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
       */
      public java.util.List<? extends org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntryOrBuilder> 
          getBranchStackOrBuilderList() {
        return branchStack_;
      }
      /**
       * <pre>
       * Branch stack info.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
       */
      @java.lang.Override
      public int getBranchStackCount() {
        return branchStack_.size();
      }
      /**
       * <pre>
       * Branch stack info.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry getBranchStack(int index) {
        return branchStack_.get(index);
      }
      /**
       * <pre>
       * Branch stack info.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
       */
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntryOrBuilder getBranchStackOrBuilder(
          int index) {
        return branchStack_.get(index);
      }
      private void ensureBranchStackIsMutable() {
        com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry> tmp = branchStack_;
        if (!tmp.isModifiable()) {
          branchStack_ =
              com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
         }
      }

      /**
       * <pre>
       * Branch stack info.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
       */
      private void setBranchStack(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry value) {
        value.getClass();
  ensureBranchStackIsMutable();
        branchStack_.set(index, value);
      }
      /**
       * <pre>
       * Branch stack info.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
       */
      private void addBranchStack(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry value) {
        value.getClass();
  ensureBranchStackIsMutable();
        branchStack_.add(value);
      }
      /**
       * <pre>
       * Branch stack info.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
       */
      private void addBranchStack(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry value) {
        value.getClass();
  ensureBranchStackIsMutable();
        branchStack_.add(index, value);
      }
      /**
       * <pre>
       * Branch stack info.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
       */
      private void addAllBranchStack(
          java.lang.Iterable<? extends org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry> values) {
        ensureBranchStackIsMutable();
        com.google.protobuf.AbstractMessageLite.addAll(
            values, branchStack_);
      }
      /**
       * <pre>
       * Branch stack info.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
       */
      private void clearBranchStack() {
        branchStack_ = emptyProtobufList();
      }
      /**
       * <pre>
       * Branch stack info.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
       */
      private void removeBranchStack(int index) {
        ensureBranchStackIsMutable();
        branchStack_.remove(index);
      }

      public static final int WEIGHT_FIELD_NUMBER = 15;
      private long weight_;
      /**
       * <pre>
       * Sample weight for special events.
       * </pre>
       *
       * <code>optional uint64 weight = 15;</code>
       * @return Whether the weight field is set.
       */
      @java.lang.Override
      public boolean hasWeight() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       * Sample weight for special events.
       * </pre>
       *
       * <code>optional uint64 weight = 15;</code>
       * @return The weight.
       */
      @java.lang.Override
      public long getWeight() {
        return weight_;
      }
      /**
       * <pre>
       * Sample weight for special events.
       * </pre>
       *
       * <code>optional uint64 weight = 15;</code>
       * @param value The weight to set.
       */
      private void setWeight(long value) {
        bitField0_ |= 0x00000400;
        weight_ = value;
      }
      /**
       * <pre>
       * Sample weight for special events.
       * </pre>
       *
       * <code>optional uint64 weight = 15;</code>
       */
      private void clearWeight() {
        bitField0_ = (bitField0_ & ~0x00000400);
        weight_ = 0L;
      }

      public static final int DATA_SRC_FIELD_NUMBER = 16;
      private long dataSrc_;
      /**
       * <pre>
       * Sample data source flags.
       * Possible flag values:
       * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L849
       * </pre>
       *
       * <code>optional uint64 data_src = 16;</code>
       * @return Whether the dataSrc field is set.
       */
      @java.lang.Override
      public boolean hasDataSrc() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <pre>
       * Sample data source flags.
       * Possible flag values:
       * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L849
       * </pre>
       *
       * <code>optional uint64 data_src = 16;</code>
       * @return The dataSrc.
       */
      @java.lang.Override
      public long getDataSrc() {
        return dataSrc_;
      }
      /**
       * <pre>
       * Sample data source flags.
       * Possible flag values:
       * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L849
       * </pre>
       *
       * <code>optional uint64 data_src = 16;</code>
       * @param value The dataSrc to set.
       */
      private void setDataSrc(long value) {
        bitField0_ |= 0x00000800;
        dataSrc_ = value;
      }
      /**
       * <pre>
       * Sample data source flags.
       * Possible flag values:
       * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L849
       * </pre>
       *
       * <code>optional uint64 data_src = 16;</code>
       */
      private void clearDataSrc() {
        bitField0_ = (bitField0_ & ~0x00000800);
        dataSrc_ = 0L;
      }

      public static final int TRANSACTION_FIELD_NUMBER = 17;
      private long transaction_;
      /**
       * <pre>
       * Sample transaction flags for special events.
       * Flag fields:
       * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L209
       * </pre>
       *
       * <code>optional uint64 transaction = 17;</code>
       * @return Whether the transaction field is set.
       */
      @java.lang.Override
      public boolean hasTransaction() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <pre>
       * Sample transaction flags for special events.
       * Flag fields:
       * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L209
       * </pre>
       *
       * <code>optional uint64 transaction = 17;</code>
       * @return The transaction.
       */
      @java.lang.Override
      public long getTransaction() {
        return transaction_;
      }
      /**
       * <pre>
       * Sample transaction flags for special events.
       * Flag fields:
       * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L209
       * </pre>
       *
       * <code>optional uint64 transaction = 17;</code>
       * @param value The transaction to set.
       */
      private void setTransaction(long value) {
        bitField0_ |= 0x00001000;
        transaction_ = value;
      }
      /**
       * <pre>
       * Sample transaction flags for special events.
       * Flag fields:
       * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L209
       * </pre>
       *
       * <code>optional uint64 transaction = 17;</code>
       */
      private void clearTransaction() {
        bitField0_ = (bitField0_ & ~0x00001000);
        transaction_ = 0L;
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code metrics.PerfDataProto.SampleEvent}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent, Builder> implements
          // @@protoc_insertion_point(builder_implements:metrics.PerfDataProto.SampleEvent)
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEventOrBuilder {
        // Construct using org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Instruction pointer.
         * </pre>
         *
         * <code>optional uint64 ip = 1;</code>
         * @return Whether the ip field is set.
         */
        @java.lang.Override
        public boolean hasIp() {
          return instance.hasIp();
        }
        /**
         * <pre>
         * Instruction pointer.
         * </pre>
         *
         * <code>optional uint64 ip = 1;</code>
         * @return The ip.
         */
        @java.lang.Override
        public long getIp() {
          return instance.getIp();
        }
        /**
         * <pre>
         * Instruction pointer.
         * </pre>
         *
         * <code>optional uint64 ip = 1;</code>
         * @param value The ip to set.
         * @return This builder for chaining.
         */
        public Builder setIp(long value) {
          copyOnWrite();
          instance.setIp(value);
          return this;
        }
        /**
         * <pre>
         * Instruction pointer.
         * </pre>
         *
         * <code>optional uint64 ip = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearIp() {
          copyOnWrite();
          instance.clearIp();
          return this;
        }

        /**
         * <pre>
         * Process id.
         * </pre>
         *
         * <code>optional uint32 pid = 2;</code>
         * @return Whether the pid field is set.
         */
        @java.lang.Override
        public boolean hasPid() {
          return instance.hasPid();
        }
        /**
         * <pre>
         * Process id.
         * </pre>
         *
         * <code>optional uint32 pid = 2;</code>
         * @return The pid.
         */
        @java.lang.Override
        public int getPid() {
          return instance.getPid();
        }
        /**
         * <pre>
         * Process id.
         * </pre>
         *
         * <code>optional uint32 pid = 2;</code>
         * @param value The pid to set.
         * @return This builder for chaining.
         */
        public Builder setPid(int value) {
          copyOnWrite();
          instance.setPid(value);
          return this;
        }
        /**
         * <pre>
         * Process id.
         * </pre>
         *
         * <code>optional uint32 pid = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearPid() {
          copyOnWrite();
          instance.clearPid();
          return this;
        }

        /**
         * <pre>
         * Thread id.
         * </pre>
         *
         * <code>optional uint32 tid = 3;</code>
         * @return Whether the tid field is set.
         */
        @java.lang.Override
        public boolean hasTid() {
          return instance.hasTid();
        }
        /**
         * <pre>
         * Thread id.
         * </pre>
         *
         * <code>optional uint32 tid = 3;</code>
         * @return The tid.
         */
        @java.lang.Override
        public int getTid() {
          return instance.getTid();
        }
        /**
         * <pre>
         * Thread id.
         * </pre>
         *
         * <code>optional uint32 tid = 3;</code>
         * @param value The tid to set.
         * @return This builder for chaining.
         */
        public Builder setTid(int value) {
          copyOnWrite();
          instance.setTid(value);
          return this;
        }
        /**
         * <pre>
         * Thread id.
         * </pre>
         *
         * <code>optional uint32 tid = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearTid() {
          copyOnWrite();
          instance.clearTid();
          return this;
        }

        /**
         * <pre>
         * The time after boot when the sample was recorded, in nanoseconds.
         * </pre>
         *
         * <code>optional uint64 sample_time_ns = 4;</code>
         * @return Whether the sampleTimeNs field is set.
         */
        @java.lang.Override
        public boolean hasSampleTimeNs() {
          return instance.hasSampleTimeNs();
        }
        /**
         * <pre>
         * The time after boot when the sample was recorded, in nanoseconds.
         * </pre>
         *
         * <code>optional uint64 sample_time_ns = 4;</code>
         * @return The sampleTimeNs.
         */
        @java.lang.Override
        public long getSampleTimeNs() {
          return instance.getSampleTimeNs();
        }
        /**
         * <pre>
         * The time after boot when the sample was recorded, in nanoseconds.
         * </pre>
         *
         * <code>optional uint64 sample_time_ns = 4;</code>
         * @param value The sampleTimeNs to set.
         * @return This builder for chaining.
         */
        public Builder setSampleTimeNs(long value) {
          copyOnWrite();
          instance.setSampleTimeNs(value);
          return this;
        }
        /**
         * <pre>
         * The time after boot when the sample was recorded, in nanoseconds.
         * </pre>
         *
         * <code>optional uint64 sample_time_ns = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearSampleTimeNs() {
          copyOnWrite();
          instance.clearSampleTimeNs();
          return this;
        }

        /**
         * <pre>
         * The address of the sample.
         * </pre>
         *
         * <code>optional uint64 addr = 5;</code>
         * @return Whether the addr field is set.
         */
        @java.lang.Override
        public boolean hasAddr() {
          return instance.hasAddr();
        }
        /**
         * <pre>
         * The address of the sample.
         * </pre>
         *
         * <code>optional uint64 addr = 5;</code>
         * @return The addr.
         */
        @java.lang.Override
        public long getAddr() {
          return instance.getAddr();
        }
        /**
         * <pre>
         * The address of the sample.
         * </pre>
         *
         * <code>optional uint64 addr = 5;</code>
         * @param value The addr to set.
         * @return This builder for chaining.
         */
        public Builder setAddr(long value) {
          copyOnWrite();
          instance.setAddr(value);
          return this;
        }
        /**
         * <pre>
         * The address of the sample.
         * </pre>
         *
         * <code>optional uint64 addr = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearAddr() {
          copyOnWrite();
          instance.clearAddr();
          return this;
        }

        /**
         * <pre>
         * The id of the sample.
         * </pre>
         *
         * <code>optional uint64 id = 6;</code>
         * @return Whether the id field is set.
         */
        @java.lang.Override
        public boolean hasId() {
          return instance.hasId();
        }
        /**
         * <pre>
         * The id of the sample.
         * </pre>
         *
         * <code>optional uint64 id = 6;</code>
         * @return The id.
         */
        @java.lang.Override
        public long getId() {
          return instance.getId();
        }
        /**
         * <pre>
         * The id of the sample.
         * </pre>
         *
         * <code>optional uint64 id = 6;</code>
         * @param value The id to set.
         * @return This builder for chaining.
         */
        public Builder setId(long value) {
          copyOnWrite();
          instance.setId(value);
          return this;
        }
        /**
         * <pre>
         * The id of the sample.
         * </pre>
         *
         * <code>optional uint64 id = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearId() {
          copyOnWrite();
          instance.clearId();
          return this;
        }

        /**
         * <pre>
         * The stream id of the sample.
         * </pre>
         *
         * <code>optional uint64 stream_id = 7;</code>
         * @return Whether the streamId field is set.
         */
        @java.lang.Override
        public boolean hasStreamId() {
          return instance.hasStreamId();
        }
        /**
         * <pre>
         * The stream id of the sample.
         * </pre>
         *
         * <code>optional uint64 stream_id = 7;</code>
         * @return The streamId.
         */
        @java.lang.Override
        public long getStreamId() {
          return instance.getStreamId();
        }
        /**
         * <pre>
         * The stream id of the sample.
         * </pre>
         *
         * <code>optional uint64 stream_id = 7;</code>
         * @param value The streamId to set.
         * @return This builder for chaining.
         */
        public Builder setStreamId(long value) {
          copyOnWrite();
          instance.setStreamId(value);
          return this;
        }
        /**
         * <pre>
         * The stream id of the sample.
         * </pre>
         *
         * <code>optional uint64 stream_id = 7;</code>
         * @return This builder for chaining.
         */
        public Builder clearStreamId() {
          copyOnWrite();
          instance.clearStreamId();
          return this;
        }

        /**
         * <pre>
         * The period of the sample.
         * </pre>
         *
         * <code>optional uint64 period = 8;</code>
         * @return Whether the period field is set.
         */
        @java.lang.Override
        public boolean hasPeriod() {
          return instance.hasPeriod();
        }
        /**
         * <pre>
         * The period of the sample.
         * </pre>
         *
         * <code>optional uint64 period = 8;</code>
         * @return The period.
         */
        @java.lang.Override
        public long getPeriod() {
          return instance.getPeriod();
        }
        /**
         * <pre>
         * The period of the sample.
         * </pre>
         *
         * <code>optional uint64 period = 8;</code>
         * @param value The period to set.
         * @return This builder for chaining.
         */
        public Builder setPeriod(long value) {
          copyOnWrite();
          instance.setPeriod(value);
          return this;
        }
        /**
         * <pre>
         * The period of the sample.
         * </pre>
         *
         * <code>optional uint64 period = 8;</code>
         * @return This builder for chaining.
         */
        public Builder clearPeriod() {
          copyOnWrite();
          instance.clearPeriod();
          return this;
        }

        /**
         * <pre>
         * The CPU where the event was recorded.
         * </pre>
         *
         * <code>optional uint32 cpu = 9;</code>
         * @return Whether the cpu field is set.
         */
        @java.lang.Override
        public boolean hasCpu() {
          return instance.hasCpu();
        }
        /**
         * <pre>
         * The CPU where the event was recorded.
         * </pre>
         *
         * <code>optional uint32 cpu = 9;</code>
         * @return The cpu.
         */
        @java.lang.Override
        public int getCpu() {
          return instance.getCpu();
        }
        /**
         * <pre>
         * The CPU where the event was recorded.
         * </pre>
         *
         * <code>optional uint32 cpu = 9;</code>
         * @param value The cpu to set.
         * @return This builder for chaining.
         */
        public Builder setCpu(int value) {
          copyOnWrite();
          instance.setCpu(value);
          return this;
        }
        /**
         * <pre>
         * The CPU where the event was recorded.
         * </pre>
         *
         * <code>optional uint32 cpu = 9;</code>
         * @return This builder for chaining.
         */
        public Builder clearCpu() {
          copyOnWrite();
          instance.clearCpu();
          return this;
        }

        /**
         * <pre>
         * The raw size of the event in bytes.
         * </pre>
         *
         * <code>optional uint32 raw_size = 10;</code>
         * @return Whether the rawSize field is set.
         */
        @java.lang.Override
        public boolean hasRawSize() {
          return instance.hasRawSize();
        }
        /**
         * <pre>
         * The raw size of the event in bytes.
         * </pre>
         *
         * <code>optional uint32 raw_size = 10;</code>
         * @return The rawSize.
         */
        @java.lang.Override
        public int getRawSize() {
          return instance.getRawSize();
        }
        /**
         * <pre>
         * The raw size of the event in bytes.
         * </pre>
         *
         * <code>optional uint32 raw_size = 10;</code>
         * @param value The rawSize to set.
         * @return This builder for chaining.
         */
        public Builder setRawSize(int value) {
          copyOnWrite();
          instance.setRawSize(value);
          return this;
        }
        /**
         * <pre>
         * The raw size of the event in bytes.
         * </pre>
         *
         * <code>optional uint32 raw_size = 10;</code>
         * @return This builder for chaining.
         */
        public Builder clearRawSize() {
          copyOnWrite();
          instance.clearRawSize();
          return this;
        }

        /**
         * <pre>
         * Sample callchain info.
         * </pre>
         *
         * <code>repeated uint64 callchain = 11;</code>
         * @return A list containing the callchain.
         */
        @java.lang.Override
        public java.util.List<java.lang.Long>
            getCallchainList() {
          return java.util.Collections.unmodifiableList(
              instance.getCallchainList());
        }
        /**
         * <pre>
         * Sample callchain info.
         * </pre>
         *
         * <code>repeated uint64 callchain = 11;</code>
         * @return The count of callchain.
         */
        @java.lang.Override
        public int getCallchainCount() {
          return instance.getCallchainCount();
        }
        /**
         * <pre>
         * Sample callchain info.
         * </pre>
         *
         * <code>repeated uint64 callchain = 11;</code>
         * @param index The index of the element to return.
         * @return The callchain at the given index.
         */
        @java.lang.Override
        public long getCallchain(int index) {
          return instance.getCallchain(index);
        }
        /**
         * <pre>
         * Sample callchain info.
         * </pre>
         *
         * <code>repeated uint64 callchain = 11;</code>
         * @param value The callchain to set.
         * @return This builder for chaining.
         */
        public Builder setCallchain(
            int index, long value) {
          copyOnWrite();
          instance.setCallchain(index, value);
          return this;
        }
        /**
         * <pre>
         * Sample callchain info.
         * </pre>
         *
         * <code>repeated uint64 callchain = 11;</code>
         * @param value The callchain to add.
         * @return This builder for chaining.
         */
        public Builder addCallchain(long value) {
          copyOnWrite();
          instance.addCallchain(value);
          return this;
        }
        /**
         * <pre>
         * Sample callchain info.
         * </pre>
         *
         * <code>repeated uint64 callchain = 11;</code>
         * @param values The callchain to add.
         * @return This builder for chaining.
         */
        public Builder addAllCallchain(
            java.lang.Iterable<? extends java.lang.Long> values) {
          copyOnWrite();
          instance.addAllCallchain(values);
          return this;
        }
        /**
         * <pre>
         * Sample callchain info.
         * </pre>
         *
         * <code>repeated uint64 callchain = 11;</code>
         * @return This builder for chaining.
         */
        public Builder clearCallchain() {
          copyOnWrite();
          instance.clearCallchain();
          return this;
        }

        /**
         * <pre>
         * Branch stack info.
         * </pre>
         *
         * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
         */
        @java.lang.Override
        public java.util.List<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry> getBranchStackList() {
          return java.util.Collections.unmodifiableList(
              instance.getBranchStackList());
        }
        /**
         * <pre>
         * Branch stack info.
         * </pre>
         *
         * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
         */
        @java.lang.Override
        public int getBranchStackCount() {
          return instance.getBranchStackCount();
        }/**
         * <pre>
         * Branch stack info.
         * </pre>
         *
         * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
         */
        @java.lang.Override
        public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry getBranchStack(int index) {
          return instance.getBranchStack(index);
        }
        /**
         * <pre>
         * Branch stack info.
         * </pre>
         *
         * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
         */
        public Builder setBranchStack(
            int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry value) {
          copyOnWrite();
          instance.setBranchStack(index, value);
          return this;
        }
        /**
         * <pre>
         * Branch stack info.
         * </pre>
         *
         * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
         */
        public Builder setBranchStack(
            int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry.Builder builderForValue) {
          copyOnWrite();
          instance.setBranchStack(index,
              builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * Branch stack info.
         * </pre>
         *
         * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
         */
        public Builder addBranchStack(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry value) {
          copyOnWrite();
          instance.addBranchStack(value);
          return this;
        }
        /**
         * <pre>
         * Branch stack info.
         * </pre>
         *
         * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
         */
        public Builder addBranchStack(
            int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry value) {
          copyOnWrite();
          instance.addBranchStack(index, value);
          return this;
        }
        /**
         * <pre>
         * Branch stack info.
         * </pre>
         *
         * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
         */
        public Builder addBranchStack(
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry.Builder builderForValue) {
          copyOnWrite();
          instance.addBranchStack(builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * Branch stack info.
         * </pre>
         *
         * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
         */
        public Builder addBranchStack(
            int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry.Builder builderForValue) {
          copyOnWrite();
          instance.addBranchStack(index,
              builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * Branch stack info.
         * </pre>
         *
         * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
         */
        public Builder addAllBranchStack(
            java.lang.Iterable<? extends org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry> values) {
          copyOnWrite();
          instance.addAllBranchStack(values);
          return this;
        }
        /**
         * <pre>
         * Branch stack info.
         * </pre>
         *
         * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
         */
        public Builder clearBranchStack() {
          copyOnWrite();
          instance.clearBranchStack();
          return this;
        }
        /**
         * <pre>
         * Branch stack info.
         * </pre>
         *
         * <code>repeated .metrics.PerfDataProto.BranchStackEntry branch_stack = 12;</code>
         */
        public Builder removeBranchStack(int index) {
          copyOnWrite();
          instance.removeBranchStack(index);
          return this;
        }

        /**
         * <pre>
         * Sample weight for special events.
         * </pre>
         *
         * <code>optional uint64 weight = 15;</code>
         * @return Whether the weight field is set.
         */
        @java.lang.Override
        public boolean hasWeight() {
          return instance.hasWeight();
        }
        /**
         * <pre>
         * Sample weight for special events.
         * </pre>
         *
         * <code>optional uint64 weight = 15;</code>
         * @return The weight.
         */
        @java.lang.Override
        public long getWeight() {
          return instance.getWeight();
        }
        /**
         * <pre>
         * Sample weight for special events.
         * </pre>
         *
         * <code>optional uint64 weight = 15;</code>
         * @param value The weight to set.
         * @return This builder for chaining.
         */
        public Builder setWeight(long value) {
          copyOnWrite();
          instance.setWeight(value);
          return this;
        }
        /**
         * <pre>
         * Sample weight for special events.
         * </pre>
         *
         * <code>optional uint64 weight = 15;</code>
         * @return This builder for chaining.
         */
        public Builder clearWeight() {
          copyOnWrite();
          instance.clearWeight();
          return this;
        }

        /**
         * <pre>
         * Sample data source flags.
         * Possible flag values:
         * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L849
         * </pre>
         *
         * <code>optional uint64 data_src = 16;</code>
         * @return Whether the dataSrc field is set.
         */
        @java.lang.Override
        public boolean hasDataSrc() {
          return instance.hasDataSrc();
        }
        /**
         * <pre>
         * Sample data source flags.
         * Possible flag values:
         * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L849
         * </pre>
         *
         * <code>optional uint64 data_src = 16;</code>
         * @return The dataSrc.
         */
        @java.lang.Override
        public long getDataSrc() {
          return instance.getDataSrc();
        }
        /**
         * <pre>
         * Sample data source flags.
         * Possible flag values:
         * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L849
         * </pre>
         *
         * <code>optional uint64 data_src = 16;</code>
         * @param value The dataSrc to set.
         * @return This builder for chaining.
         */
        public Builder setDataSrc(long value) {
          copyOnWrite();
          instance.setDataSrc(value);
          return this;
        }
        /**
         * <pre>
         * Sample data source flags.
         * Possible flag values:
         * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L849
         * </pre>
         *
         * <code>optional uint64 data_src = 16;</code>
         * @return This builder for chaining.
         */
        public Builder clearDataSrc() {
          copyOnWrite();
          instance.clearDataSrc();
          return this;
        }

        /**
         * <pre>
         * Sample transaction flags for special events.
         * Flag fields:
         * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L209
         * </pre>
         *
         * <code>optional uint64 transaction = 17;</code>
         * @return Whether the transaction field is set.
         */
        @java.lang.Override
        public boolean hasTransaction() {
          return instance.hasTransaction();
        }
        /**
         * <pre>
         * Sample transaction flags for special events.
         * Flag fields:
         * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L209
         * </pre>
         *
         * <code>optional uint64 transaction = 17;</code>
         * @return The transaction.
         */
        @java.lang.Override
        public long getTransaction() {
          return instance.getTransaction();
        }
        /**
         * <pre>
         * Sample transaction flags for special events.
         * Flag fields:
         * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L209
         * </pre>
         *
         * <code>optional uint64 transaction = 17;</code>
         * @param value The transaction to set.
         * @return This builder for chaining.
         */
        public Builder setTransaction(long value) {
          copyOnWrite();
          instance.setTransaction(value);
          return this;
        }
        /**
         * <pre>
         * Sample transaction flags for special events.
         * Flag fields:
         * http://lxr.free-electrons.com/source/include/uapi/linux/perf_event.h#L209
         * </pre>
         *
         * <code>optional uint64 transaction = 17;</code>
         * @return This builder for chaining.
         */
        public Builder clearTransaction() {
          copyOnWrite();
          instance.clearTransaction();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:metrics.PerfDataProto.SampleEvent)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "ip_",
                "pid_",
                "tid_",
                "sampleTimeNs_",
                "addr_",
                "id_",
                "streamId_",
                "period_",
                "cpu_",
                "rawSize_",
                "callchain_",
                "branchStack_",
                org.chromium.components.metrics.PerfDataProtos.PerfDataProto.BranchStackEntry.class,
                "weight_",
                "dataSrc_",
                "transaction_",
              };
              java.lang.String info =
                  "\u0001\u000f\u0000\u0001\u0001\u0011\u000f\u0000\u0002\u0000\u0001\u1003\u0000\u0002" +
                  "\u100b\u0001\u0003\u100b\u0002\u0004\u1003\u0003\u0005\u1003\u0004\u0006\u1003\u0005" +
                  "\u0007\u1003\u0006\b\u1003\u0007\t\u100b\b\n\u100b\t\u000b\u0015\f\u001b\u000f\u1003" +
                  "\n\u0010\u1003\u000b\u0011\u1003\f";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.SampleEvent)
      private static final org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent DEFAULT_INSTANCE;
      static {
        SampleEvent defaultInstance = new SampleEvent();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          SampleEvent.class, defaultInstance);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<SampleEvent> PARSER;

      public static com.google.protobuf.Parser<SampleEvent> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface ForkEventOrBuilder extends
        // @@protoc_insertion_point(interface_extends:metrics.PerfDataProto.ForkEvent)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Forked process ID.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @return Whether the pid field is set.
       */
      boolean hasPid();
      /**
       * <pre>
       * Forked process ID.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @return The pid.
       */
      int getPid();

      /**
       * <pre>
       * Parent process ID.
       * </pre>
       *
       * <code>optional uint32 ppid = 2;</code>
       * @return Whether the ppid field is set.
       */
      boolean hasPpid();
      /**
       * <pre>
       * Parent process ID.
       * </pre>
       *
       * <code>optional uint32 ppid = 2;</code>
       * @return The ppid.
       */
      int getPpid();

      /**
       * <pre>
       * Forked process thread ID.
       * </pre>
       *
       * <code>optional uint32 tid = 3;</code>
       * @return Whether the tid field is set.
       */
      boolean hasTid();
      /**
       * <pre>
       * Forked process thread ID.
       * </pre>
       *
       * <code>optional uint32 tid = 3;</code>
       * @return The tid.
       */
      int getTid();

      /**
       * <pre>
       * Parent process thread ID.
       * </pre>
       *
       * <code>optional uint32 ptid = 4;</code>
       * @return Whether the ptid field is set.
       */
      boolean hasPtid();
      /**
       * <pre>
       * Parent process thread ID.
       * </pre>
       *
       * <code>optional uint32 ptid = 4;</code>
       * @return The ptid.
       */
      int getPtid();

      /**
       * <pre>
       * Time of fork event in nanoseconds since bootup.
       * </pre>
       *
       * <code>optional uint64 fork_time_ns = 5;</code>
       * @return Whether the forkTimeNs field is set.
       */
      boolean hasForkTimeNs();
      /**
       * <pre>
       * Time of fork event in nanoseconds since bootup.
       * </pre>
       *
       * <code>optional uint64 fork_time_ns = 5;</code>
       * @return The forkTimeNs.
       */
      long getForkTimeNs();

      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 11;</code>
       * @return Whether the sampleInfo field is set.
       */
      boolean hasSampleInfo();
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 11;</code>
       * @return The sampleInfo.
       */
      org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo getSampleInfo();
    }
    /**
     * <pre>
     * ForkEvent is used for both FORK and EXIT events, which have the same data
     * format.  We don't want to call this "ForkOrExitEvent", in case a separate
     * exit event is introduced in the future.
     * </pre>
     *
     * Protobuf type {@code metrics.PerfDataProto.ForkEvent}
     */
    public  static final class ForkEvent extends
        com.google.protobuf.GeneratedMessageLite<
            ForkEvent, ForkEvent.Builder> implements
        // @@protoc_insertion_point(message_implements:metrics.PerfDataProto.ForkEvent)
        ForkEventOrBuilder {
      private ForkEvent() {
      }
      private int bitField0_;
      public static final int PID_FIELD_NUMBER = 1;
      private int pid_;
      /**
       * <pre>
       * Forked process ID.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @return Whether the pid field is set.
       */
      @java.lang.Override
      public boolean hasPid() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Forked process ID.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @return The pid.
       */
      @java.lang.Override
      public int getPid() {
        return pid_;
      }
      /**
       * <pre>
       * Forked process ID.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       * @param value The pid to set.
       */
      private void setPid(int value) {
        bitField0_ |= 0x00000001;
        pid_ = value;
      }
      /**
       * <pre>
       * Forked process ID.
       * </pre>
       *
       * <code>optional uint32 pid = 1;</code>
       */
      private void clearPid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pid_ = 0;
      }

      public static final int PPID_FIELD_NUMBER = 2;
      private int ppid_;
      /**
       * <pre>
       * Parent process ID.
       * </pre>
       *
       * <code>optional uint32 ppid = 2;</code>
       * @return Whether the ppid field is set.
       */
      @java.lang.Override
      public boolean hasPpid() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Parent process ID.
       * </pre>
       *
       * <code>optional uint32 ppid = 2;</code>
       * @return The ppid.
       */
      @java.lang.Override
      public int getPpid() {
        return ppid_;
      }
      /**
       * <pre>
       * Parent process ID.
       * </pre>
       *
       * <code>optional uint32 ppid = 2;</code>
       * @param value The ppid to set.
       */
      private void setPpid(int value) {
        bitField0_ |= 0x00000002;
        ppid_ = value;
      }
      /**
       * <pre>
       * Parent process ID.
       * </pre>
       *
       * <code>optional uint32 ppid = 2;</code>
       */
      private void clearPpid() {
        bitField0_ = (bitField0_ & ~0x00000002);
        ppid_ = 0;
      }

      public static final int TID_FIELD_NUMBER = 3;
      private int tid_;
      /**
       * <pre>
       * Forked process thread ID.
       * </pre>
       *
       * <code>optional uint32 tid = 3;</code>
       * @return Whether the tid field is set.
       */
      @java.lang.Override
      public boolean hasTid() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Forked process thread ID.
       * </pre>
       *
       * <code>optional uint32 tid = 3;</code>
       * @return The tid.
       */
      @java.lang.Override
      public int getTid() {
        return tid_;
      }
      /**
       * <pre>
       * Forked process thread ID.
       * </pre>
       *
       * <code>optional uint32 tid = 3;</code>
       * @param value The tid to set.
       */
      private void setTid(int value) {
        bitField0_ |= 0x00000004;
        tid_ = value;
      }
      /**
       * <pre>
       * Forked process thread ID.
       * </pre>
       *
       * <code>optional uint32 tid = 3;</code>
       */
      private void clearTid() {
        bitField0_ = (bitField0_ & ~0x00000004);
        tid_ = 0;
      }

      public static final int PTID_FIELD_NUMBER = 4;
      private int ptid_;
      /**
       * <pre>
       * Parent process thread ID.
       * </pre>
       *
       * <code>optional uint32 ptid = 4;</code>
       * @return Whether the ptid field is set.
       */
      @java.lang.Override
      public boolean hasPtid() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Parent process thread ID.
       * </pre>
       *
       * <code>optional uint32 ptid = 4;</code>
       * @return The ptid.
       */
      @java.lang.Override
      public int getPtid() {
        return ptid_;
      }
      /**
       * <pre>
       * Parent process thread ID.
       * </pre>
       *
       * <code>optional uint32 ptid = 4;</code>
       * @param value The ptid to set.
       */
      private void setPtid(int value) {
        bitField0_ |= 0x00000008;
        ptid_ = value;
      }
      /**
       * <pre>
       * Parent process thread ID.
       * </pre>
       *
       * <code>optional uint32 ptid = 4;</code>
       */
      private void clearPtid() {
        bitField0_ = (bitField0_ & ~0x00000008);
        ptid_ = 0;
      }

      public static final int FORK_TIME_NS_FIELD_NUMBER = 5;
      private long forkTimeNs_;
      /**
       * <pre>
       * Time of fork event in nanoseconds since bootup.
       * </pre>
       *
       * <code>optional uint64 fork_time_ns = 5;</code>
       * @return Whether the forkTimeNs field is set.
       */
      @java.lang.Override
      public boolean hasForkTimeNs() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Time of fork event in nanoseconds since bootup.
       * </pre>
       *
       * <code>optional uint64 fork_time_ns = 5;</code>
       * @return The forkTimeNs.
       */
      @java.lang.Override
      public long getForkTimeNs() {
        return forkTimeNs_;
      }
      /**
       * <pre>
       * Time of fork event in nanoseconds since bootup.
       * </pre>
       *
       * <code>optional uint64 fork_time_ns = 5;</code>
       * @param value The forkTimeNs to set.
       */
      private void setForkTimeNs(long value) {
        bitField0_ |= 0x00000010;
        forkTimeNs_ = value;
      }
      /**
       * <pre>
       * Time of fork event in nanoseconds since bootup.
       * </pre>
       *
       * <code>optional uint64 fork_time_ns = 5;</code>
       */
      private void clearForkTimeNs() {
        bitField0_ = (bitField0_ & ~0x00000010);
        forkTimeNs_ = 0L;
      }

      public static final int SAMPLE_INFO_FIELD_NUMBER = 11;
      private org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo sampleInfo_;
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 11;</code>
       */
      @java.lang.Override
      public boolean hasSampleInfo() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 11;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo getSampleInfo() {
        return sampleInfo_ == null ? org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo.getDefaultInstance() : sampleInfo_;
      }
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 11;</code>
       */
      private void setSampleInfo(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo value) {
        value.getClass();
  sampleInfo_ = value;
        bitField0_ |= 0x00000020;
        }
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 11;</code>
       */
      @java.lang.SuppressWarnings({"ReferenceEquality"})
      private void mergeSampleInfo(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo value) {
        value.getClass();
  if (sampleInfo_ != null &&
            sampleInfo_ != org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo.getDefaultInstance()) {
          sampleInfo_ =
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo.newBuilder(sampleInfo_).mergeFrom(value).buildPartial();
        } else {
          sampleInfo_ = value;
        }
        bitField0_ |= 0x00000020;
      }
      /**
       * <pre>
       * Info about the perf sample containing this event.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 11;</code>
       */
      private void clearSampleInfo() {  sampleInfo_ = null;
        bitField0_ = (bitField0_ & ~0x00000020);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * ForkEvent is used for both FORK and EXIT events, which have the same data
       * format.  We don't want to call this "ForkOrExitEvent", in case a separate
       * exit event is introduced in the future.
       * </pre>
       *
       * Protobuf type {@code metrics.PerfDataProto.ForkEvent}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent, Builder> implements
          // @@protoc_insertion_point(builder_implements:metrics.PerfDataProto.ForkEvent)
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEventOrBuilder {
        // Construct using org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Forked process ID.
         * </pre>
         *
         * <code>optional uint32 pid = 1;</code>
         * @return Whether the pid field is set.
         */
        @java.lang.Override
        public boolean hasPid() {
          return instance.hasPid();
        }
        /**
         * <pre>
         * Forked process ID.
         * </pre>
         *
         * <code>optional uint32 pid = 1;</code>
         * @return The pid.
         */
        @java.lang.Override
        public int getPid() {
          return instance.getPid();
        }
        /**
         * <pre>
         * Forked process ID.
         * </pre>
         *
         * <code>optional uint32 pid = 1;</code>
         * @param value The pid to set.
         * @return This builder for chaining.
         */
        public Builder setPid(int value) {
          copyOnWrite();
          instance.setPid(value);
          return this;
        }
        /**
         * <pre>
         * Forked process ID.
         * </pre>
         *
         * <code>optional uint32 pid = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearPid() {
          copyOnWrite();
          instance.clearPid();
          return this;
        }

        /**
         * <pre>
         * Parent process ID.
         * </pre>
         *
         * <code>optional uint32 ppid = 2;</code>
         * @return Whether the ppid field is set.
         */
        @java.lang.Override
        public boolean hasPpid() {
          return instance.hasPpid();
        }
        /**
         * <pre>
         * Parent process ID.
         * </pre>
         *
         * <code>optional uint32 ppid = 2;</code>
         * @return The ppid.
         */
        @java.lang.Override
        public int getPpid() {
          return instance.getPpid();
        }
        /**
         * <pre>
         * Parent process ID.
         * </pre>
         *
         * <code>optional uint32 ppid = 2;</code>
         * @param value The ppid to set.
         * @return This builder for chaining.
         */
        public Builder setPpid(int value) {
          copyOnWrite();
          instance.setPpid(value);
          return this;
        }
        /**
         * <pre>
         * Parent process ID.
         * </pre>
         *
         * <code>optional uint32 ppid = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearPpid() {
          copyOnWrite();
          instance.clearPpid();
          return this;
        }

        /**
         * <pre>
         * Forked process thread ID.
         * </pre>
         *
         * <code>optional uint32 tid = 3;</code>
         * @return Whether the tid field is set.
         */
        @java.lang.Override
        public boolean hasTid() {
          return instance.hasTid();
        }
        /**
         * <pre>
         * Forked process thread ID.
         * </pre>
         *
         * <code>optional uint32 tid = 3;</code>
         * @return The tid.
         */
        @java.lang.Override
        public int getTid() {
          return instance.getTid();
        }
        /**
         * <pre>
         * Forked process thread ID.
         * </pre>
         *
         * <code>optional uint32 tid = 3;</code>
         * @param value The tid to set.
         * @return This builder for chaining.
         */
        public Builder setTid(int value) {
          copyOnWrite();
          instance.setTid(value);
          return this;
        }
        /**
         * <pre>
         * Forked process thread ID.
         * </pre>
         *
         * <code>optional uint32 tid = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearTid() {
          copyOnWrite();
          instance.clearTid();
          return this;
        }

        /**
         * <pre>
         * Parent process thread ID.
         * </pre>
         *
         * <code>optional uint32 ptid = 4;</code>
         * @return Whether the ptid field is set.
         */
        @java.lang.Override
        public boolean hasPtid() {
          return instance.hasPtid();
        }
        /**
         * <pre>
         * Parent process thread ID.
         * </pre>
         *
         * <code>optional uint32 ptid = 4;</code>
         * @return The ptid.
         */
        @java.lang.Override
        public int getPtid() {
          return instance.getPtid();
        }
        /**
         * <pre>
         * Parent process thread ID.
         * </pre>
         *
         * <code>optional uint32 ptid = 4;</code>
         * @param value The ptid to set.
         * @return This builder for chaining.
         */
        public Builder setPtid(int value) {
          copyOnWrite();
          instance.setPtid(value);
          return this;
        }
        /**
         * <pre>
         * Parent process thread ID.
         * </pre>
         *
         * <code>optional uint32 ptid = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearPtid() {
          copyOnWrite();
          instance.clearPtid();
          return this;
        }

        /**
         * <pre>
         * Time of fork event in nanoseconds since bootup.
         * </pre>
         *
         * <code>optional uint64 fork_time_ns = 5;</code>
         * @return Whether the forkTimeNs field is set.
         */
        @java.lang.Override
        public boolean hasForkTimeNs() {
          return instance.hasForkTimeNs();
        }
        /**
         * <pre>
         * Time of fork event in nanoseconds since bootup.
         * </pre>
         *
         * <code>optional uint64 fork_time_ns = 5;</code>
         * @return The forkTimeNs.
         */
        @java.lang.Override
        public long getForkTimeNs() {
          return instance.getForkTimeNs();
        }
        /**
         * <pre>
         * Time of fork event in nanoseconds since bootup.
         * </pre>
         *
         * <code>optional uint64 fork_time_ns = 5;</code>
         * @param value The forkTimeNs to set.
         * @return This builder for chaining.
         */
        public Builder setForkTimeNs(long value) {
          copyOnWrite();
          instance.setForkTimeNs(value);
          return this;
        }
        /**
         * <pre>
         * Time of fork event in nanoseconds since bootup.
         * </pre>
         *
         * <code>optional uint64 fork_time_ns = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearForkTimeNs() {
          copyOnWrite();
          instance.clearForkTimeNs();
          return this;
        }

        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 11;</code>
         */
        @java.lang.Override
        public boolean hasSampleInfo() {
          return instance.hasSampleInfo();
        }
        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 11;</code>
         */
        @java.lang.Override
        public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo getSampleInfo() {
          return instance.getSampleInfo();
        }
        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 11;</code>
         */
        public Builder setSampleInfo(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo value) {
          copyOnWrite();
          instance.setSampleInfo(value);
          return this;
          }
        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 11;</code>
         */
        public Builder setSampleInfo(
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo.Builder builderForValue) {
          copyOnWrite();
          instance.setSampleInfo(builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 11;</code>
         */
        public Builder mergeSampleInfo(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleInfo value) {
          copyOnWrite();
          instance.mergeSampleInfo(value);
          return this;
        }
        /**
         * <pre>
         * Info about the perf sample containing this event.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.SampleInfo sample_info = 11;</code>
         */
        public Builder clearSampleInfo() {  copyOnWrite();
          instance.clearSampleInfo();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:metrics.PerfDataProto.ForkEvent)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "pid_",
                "ppid_",
                "tid_",
                "ptid_",
                "forkTimeNs_",
                "sampleInfo_",
              };
              java.lang.String info =
                  "\u0001\u0006\u0000\u0001\u0001\u000b\u0006\u0000\u0000\u0000\u0001\u100b\u0000\u0002" +
                  "\u100b\u0001\u0003\u100b\u0002\u0004\u100b\u0003\u0005\u1003\u0004\u000b\u1009\u0005" +
                  "";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.ForkEvent)
      private static final org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent DEFAULT_INSTANCE;
      static {
        ForkEvent defaultInstance = new ForkEvent();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          ForkEvent.class, defaultInstance);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<ForkEvent> PARSER;

      public static com.google.protobuf.Parser<ForkEvent> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface EventHeaderOrBuilder extends
        // @@protoc_insertion_point(interface_extends:metrics.PerfDataProto.EventHeader)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Type of event.
       * </pre>
       *
       * <code>optional uint32 type = 1;</code>
       * @return Whether the type field is set.
       */
      boolean hasType();
      /**
       * <pre>
       * Type of event.
       * </pre>
       *
       * <code>optional uint32 type = 1;</code>
       * @return The type.
       */
      int getType();

      /**
       * <code>optional uint32 misc = 2;</code>
       * @return Whether the misc field is set.
       */
      boolean hasMisc();
      /**
       * <code>optional uint32 misc = 2;</code>
       * @return The misc.
       */
      int getMisc();

      /**
       * <pre>
       * Size of event.
       * </pre>
       *
       * <code>optional uint32 size = 3;</code>
       * @return Whether the size field is set.
       */
      boolean hasSize();
      /**
       * <pre>
       * Size of event.
       * </pre>
       *
       * <code>optional uint32 size = 3;</code>
       * @return The size.
       */
      int getSize();
    }
    /**
     * Protobuf type {@code metrics.PerfDataProto.EventHeader}
     */
    public  static final class EventHeader extends
        com.google.protobuf.GeneratedMessageLite<
            EventHeader, EventHeader.Builder> implements
        // @@protoc_insertion_point(message_implements:metrics.PerfDataProto.EventHeader)
        EventHeaderOrBuilder {
      private EventHeader() {
      }
      private int bitField0_;
      public static final int TYPE_FIELD_NUMBER = 1;
      private int type_;
      /**
       * <pre>
       * Type of event.
       * </pre>
       *
       * <code>optional uint32 type = 1;</code>
       * @return Whether the type field is set.
       */
      @java.lang.Override
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Type of event.
       * </pre>
       *
       * <code>optional uint32 type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public int getType() {
        return type_;
      }
      /**
       * <pre>
       * Type of event.
       * </pre>
       *
       * <code>optional uint32 type = 1;</code>
       * @param value The type to set.
       */
      private void setType(int value) {
        bitField0_ |= 0x00000001;
        type_ = value;
      }
      /**
       * <pre>
       * Type of event.
       * </pre>
       *
       * <code>optional uint32 type = 1;</code>
       */
      private void clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
      }

      public static final int MISC_FIELD_NUMBER = 2;
      private int misc_;
      /**
       * <code>optional uint32 misc = 2;</code>
       * @return Whether the misc field is set.
       */
      @java.lang.Override
      public boolean hasMisc() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional uint32 misc = 2;</code>
       * @return The misc.
       */
      @java.lang.Override
      public int getMisc() {
        return misc_;
      }
      /**
       * <code>optional uint32 misc = 2;</code>
       * @param value The misc to set.
       */
      private void setMisc(int value) {
        bitField0_ |= 0x00000002;
        misc_ = value;
      }
      /**
       * <code>optional uint32 misc = 2;</code>
       */
      private void clearMisc() {
        bitField0_ = (bitField0_ & ~0x00000002);
        misc_ = 0;
      }

      public static final int SIZE_FIELD_NUMBER = 3;
      private int size_;
      /**
       * <pre>
       * Size of event.
       * </pre>
       *
       * <code>optional uint32 size = 3;</code>
       * @return Whether the size field is set.
       */
      @java.lang.Override
      public boolean hasSize() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Size of event.
       * </pre>
       *
       * <code>optional uint32 size = 3;</code>
       * @return The size.
       */
      @java.lang.Override
      public int getSize() {
        return size_;
      }
      /**
       * <pre>
       * Size of event.
       * </pre>
       *
       * <code>optional uint32 size = 3;</code>
       * @param value The size to set.
       */
      private void setSize(int value) {
        bitField0_ |= 0x00000004;
        size_ = value;
      }
      /**
       * <pre>
       * Size of event.
       * </pre>
       *
       * <code>optional uint32 size = 3;</code>
       */
      private void clearSize() {
        bitField0_ = (bitField0_ & ~0x00000004);
        size_ = 0;
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code metrics.PerfDataProto.EventHeader}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader, Builder> implements
          // @@protoc_insertion_point(builder_implements:metrics.PerfDataProto.EventHeader)
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeaderOrBuilder {
        // Construct using org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Type of event.
         * </pre>
         *
         * <code>optional uint32 type = 1;</code>
         * @return Whether the type field is set.
         */
        @java.lang.Override
        public boolean hasType() {
          return instance.hasType();
        }
        /**
         * <pre>
         * Type of event.
         * </pre>
         *
         * <code>optional uint32 type = 1;</code>
         * @return The type.
         */
        @java.lang.Override
        public int getType() {
          return instance.getType();
        }
        /**
         * <pre>
         * Type of event.
         * </pre>
         *
         * <code>optional uint32 type = 1;</code>
         * @param value The type to set.
         * @return This builder for chaining.
         */
        public Builder setType(int value) {
          copyOnWrite();
          instance.setType(value);
          return this;
        }
        /**
         * <pre>
         * Type of event.
         * </pre>
         *
         * <code>optional uint32 type = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearType() {
          copyOnWrite();
          instance.clearType();
          return this;
        }

        /**
         * <code>optional uint32 misc = 2;</code>
         * @return Whether the misc field is set.
         */
        @java.lang.Override
        public boolean hasMisc() {
          return instance.hasMisc();
        }
        /**
         * <code>optional uint32 misc = 2;</code>
         * @return The misc.
         */
        @java.lang.Override
        public int getMisc() {
          return instance.getMisc();
        }
        /**
         * <code>optional uint32 misc = 2;</code>
         * @param value The misc to set.
         * @return This builder for chaining.
         */
        public Builder setMisc(int value) {
          copyOnWrite();
          instance.setMisc(value);
          return this;
        }
        /**
         * <code>optional uint32 misc = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearMisc() {
          copyOnWrite();
          instance.clearMisc();
          return this;
        }

        /**
         * <pre>
         * Size of event.
         * </pre>
         *
         * <code>optional uint32 size = 3;</code>
         * @return Whether the size field is set.
         */
        @java.lang.Override
        public boolean hasSize() {
          return instance.hasSize();
        }
        /**
         * <pre>
         * Size of event.
         * </pre>
         *
         * <code>optional uint32 size = 3;</code>
         * @return The size.
         */
        @java.lang.Override
        public int getSize() {
          return instance.getSize();
        }
        /**
         * <pre>
         * Size of event.
         * </pre>
         *
         * <code>optional uint32 size = 3;</code>
         * @param value The size to set.
         * @return This builder for chaining.
         */
        public Builder setSize(int value) {
          copyOnWrite();
          instance.setSize(value);
          return this;
        }
        /**
         * <pre>
         * Size of event.
         * </pre>
         *
         * <code>optional uint32 size = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearSize() {
          copyOnWrite();
          instance.clearSize();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:metrics.PerfDataProto.EventHeader)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "type_",
                "misc_",
                "size_",
              };
              java.lang.String info =
                  "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u100b\u0000\u0002" +
                  "\u100b\u0001\u0003\u100b\u0002";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.EventHeader)
      private static final org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader DEFAULT_INSTANCE;
      static {
        EventHeader defaultInstance = new EventHeader();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          EventHeader.class, defaultInstance);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<EventHeader> PARSER;

      public static com.google.protobuf.Parser<EventHeader> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface PerfEventOrBuilder extends
        // @@protoc_insertion_point(interface_extends:metrics.PerfDataProto.PerfEvent)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <code>optional .metrics.PerfDataProto.EventHeader header = 1;</code>
       * @return Whether the header field is set.
       */
      boolean hasHeader();
      /**
       * <code>optional .metrics.PerfDataProto.EventHeader header = 1;</code>
       * @return The header.
       */
      org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader getHeader();

      /**
       * <code>optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;</code>
       * @return Whether the mmapEvent field is set.
       */
      boolean hasMmapEvent();
      /**
       * <code>optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;</code>
       * @return The mmapEvent.
       */
      org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent getMmapEvent();

      /**
       * <code>optional .metrics.PerfDataProto.SampleEvent sample_event = 3;</code>
       * @return Whether the sampleEvent field is set.
       */
      boolean hasSampleEvent();
      /**
       * <code>optional .metrics.PerfDataProto.SampleEvent sample_event = 3;</code>
       * @return The sampleEvent.
       */
      org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent getSampleEvent();

      /**
       * <code>optional .metrics.PerfDataProto.CommEvent comm_event = 4;</code>
       * @return Whether the commEvent field is set.
       */
      boolean hasCommEvent();
      /**
       * <code>optional .metrics.PerfDataProto.CommEvent comm_event = 4;</code>
       * @return The commEvent.
       */
      org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent getCommEvent();

      /**
       * <pre>
       * FORK and EXIT events are structurally identical. They only differ by the
       * event type. But using two distinct fields makes things easier.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.ForkEvent fork_event = 5;</code>
       * @return Whether the forkEvent field is set.
       */
      boolean hasForkEvent();
      /**
       * <pre>
       * FORK and EXIT events are structurally identical. They only differ by the
       * event type. But using two distinct fields makes things easier.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.ForkEvent fork_event = 5;</code>
       * @return The forkEvent.
       */
      org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent getForkEvent();

      /**
       * <code>optional .metrics.PerfDataProto.ForkEvent exit_event = 9;</code>
       * @return Whether the exitEvent field is set.
       */
      boolean hasExitEvent();
      /**
       * <code>optional .metrics.PerfDataProto.ForkEvent exit_event = 9;</code>
       * @return The exitEvent.
       */
      org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent getExitEvent();
    }
    /**
     * Protobuf type {@code metrics.PerfDataProto.PerfEvent}
     */
    public  static final class PerfEvent extends
        com.google.protobuf.GeneratedMessageLite<
            PerfEvent, PerfEvent.Builder> implements
        // @@protoc_insertion_point(message_implements:metrics.PerfDataProto.PerfEvent)
        PerfEventOrBuilder {
      private PerfEvent() {
      }
      private int bitField0_;
      public static final int HEADER_FIELD_NUMBER = 1;
      private org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader header_;
      /**
       * <code>optional .metrics.PerfDataProto.EventHeader header = 1;</code>
       */
      @java.lang.Override
      public boolean hasHeader() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .metrics.PerfDataProto.EventHeader header = 1;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader getHeader() {
        return header_ == null ? org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader.getDefaultInstance() : header_;
      }
      /**
       * <code>optional .metrics.PerfDataProto.EventHeader header = 1;</code>
       */
      private void setHeader(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader value) {
        value.getClass();
  header_ = value;
        bitField0_ |= 0x00000001;
        }
      /**
       * <code>optional .metrics.PerfDataProto.EventHeader header = 1;</code>
       */
      @java.lang.SuppressWarnings({"ReferenceEquality"})
      private void mergeHeader(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader value) {
        value.getClass();
  if (header_ != null &&
            header_ != org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader.getDefaultInstance()) {
          header_ =
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader.newBuilder(header_).mergeFrom(value).buildPartial();
        } else {
          header_ = value;
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <code>optional .metrics.PerfDataProto.EventHeader header = 1;</code>
       */
      private void clearHeader() {  header_ = null;
        bitField0_ = (bitField0_ & ~0x00000001);
      }

      public static final int MMAP_EVENT_FIELD_NUMBER = 2;
      private org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent mmapEvent_;
      /**
       * <code>optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;</code>
       */
      @java.lang.Override
      public boolean hasMmapEvent() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent getMmapEvent() {
        return mmapEvent_ == null ? org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent.getDefaultInstance() : mmapEvent_;
      }
      /**
       * <code>optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;</code>
       */
      private void setMmapEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent value) {
        value.getClass();
  mmapEvent_ = value;
        bitField0_ |= 0x00000002;
        }
      /**
       * <code>optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;</code>
       */
      @java.lang.SuppressWarnings({"ReferenceEquality"})
      private void mergeMmapEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent value) {
        value.getClass();
  if (mmapEvent_ != null &&
            mmapEvent_ != org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent.getDefaultInstance()) {
          mmapEvent_ =
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent.newBuilder(mmapEvent_).mergeFrom(value).buildPartial();
        } else {
          mmapEvent_ = value;
        }
        bitField0_ |= 0x00000002;
      }
      /**
       * <code>optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;</code>
       */
      private void clearMmapEvent() {  mmapEvent_ = null;
        bitField0_ = (bitField0_ & ~0x00000002);
      }

      public static final int SAMPLE_EVENT_FIELD_NUMBER = 3;
      private org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent sampleEvent_;
      /**
       * <code>optional .metrics.PerfDataProto.SampleEvent sample_event = 3;</code>
       */
      @java.lang.Override
      public boolean hasSampleEvent() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional .metrics.PerfDataProto.SampleEvent sample_event = 3;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent getSampleEvent() {
        return sampleEvent_ == null ? org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent.getDefaultInstance() : sampleEvent_;
      }
      /**
       * <code>optional .metrics.PerfDataProto.SampleEvent sample_event = 3;</code>
       */
      private void setSampleEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent value) {
        value.getClass();
  sampleEvent_ = value;
        bitField0_ |= 0x00000004;
        }
      /**
       * <code>optional .metrics.PerfDataProto.SampleEvent sample_event = 3;</code>
       */
      @java.lang.SuppressWarnings({"ReferenceEquality"})
      private void mergeSampleEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent value) {
        value.getClass();
  if (sampleEvent_ != null &&
            sampleEvent_ != org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent.getDefaultInstance()) {
          sampleEvent_ =
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent.newBuilder(sampleEvent_).mergeFrom(value).buildPartial();
        } else {
          sampleEvent_ = value;
        }
        bitField0_ |= 0x00000004;
      }
      /**
       * <code>optional .metrics.PerfDataProto.SampleEvent sample_event = 3;</code>
       */
      private void clearSampleEvent() {  sampleEvent_ = null;
        bitField0_ = (bitField0_ & ~0x00000004);
      }

      public static final int COMM_EVENT_FIELD_NUMBER = 4;
      private org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent commEvent_;
      /**
       * <code>optional .metrics.PerfDataProto.CommEvent comm_event = 4;</code>
       */
      @java.lang.Override
      public boolean hasCommEvent() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional .metrics.PerfDataProto.CommEvent comm_event = 4;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent getCommEvent() {
        return commEvent_ == null ? org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent.getDefaultInstance() : commEvent_;
      }
      /**
       * <code>optional .metrics.PerfDataProto.CommEvent comm_event = 4;</code>
       */
      private void setCommEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent value) {
        value.getClass();
  commEvent_ = value;
        bitField0_ |= 0x00000008;
        }
      /**
       * <code>optional .metrics.PerfDataProto.CommEvent comm_event = 4;</code>
       */
      @java.lang.SuppressWarnings({"ReferenceEquality"})
      private void mergeCommEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent value) {
        value.getClass();
  if (commEvent_ != null &&
            commEvent_ != org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent.getDefaultInstance()) {
          commEvent_ =
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent.newBuilder(commEvent_).mergeFrom(value).buildPartial();
        } else {
          commEvent_ = value;
        }
        bitField0_ |= 0x00000008;
      }
      /**
       * <code>optional .metrics.PerfDataProto.CommEvent comm_event = 4;</code>
       */
      private void clearCommEvent() {  commEvent_ = null;
        bitField0_ = (bitField0_ & ~0x00000008);
      }

      public static final int FORK_EVENT_FIELD_NUMBER = 5;
      private org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent forkEvent_;
      /**
       * <pre>
       * FORK and EXIT events are structurally identical. They only differ by the
       * event type. But using two distinct fields makes things easier.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.ForkEvent fork_event = 5;</code>
       */
      @java.lang.Override
      public boolean hasForkEvent() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * FORK and EXIT events are structurally identical. They only differ by the
       * event type. But using two distinct fields makes things easier.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.ForkEvent fork_event = 5;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent getForkEvent() {
        return forkEvent_ == null ? org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent.getDefaultInstance() : forkEvent_;
      }
      /**
       * <pre>
       * FORK and EXIT events are structurally identical. They only differ by the
       * event type. But using two distinct fields makes things easier.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.ForkEvent fork_event = 5;</code>
       */
      private void setForkEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent value) {
        value.getClass();
  forkEvent_ = value;
        bitField0_ |= 0x00000010;
        }
      /**
       * <pre>
       * FORK and EXIT events are structurally identical. They only differ by the
       * event type. But using two distinct fields makes things easier.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.ForkEvent fork_event = 5;</code>
       */
      @java.lang.SuppressWarnings({"ReferenceEquality"})
      private void mergeForkEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent value) {
        value.getClass();
  if (forkEvent_ != null &&
            forkEvent_ != org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent.getDefaultInstance()) {
          forkEvent_ =
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent.newBuilder(forkEvent_).mergeFrom(value).buildPartial();
        } else {
          forkEvent_ = value;
        }
        bitField0_ |= 0x00000010;
      }
      /**
       * <pre>
       * FORK and EXIT events are structurally identical. They only differ by the
       * event type. But using two distinct fields makes things easier.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.ForkEvent fork_event = 5;</code>
       */
      private void clearForkEvent() {  forkEvent_ = null;
        bitField0_ = (bitField0_ & ~0x00000010);
      }

      public static final int EXIT_EVENT_FIELD_NUMBER = 9;
      private org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent exitEvent_;
      /**
       * <code>optional .metrics.PerfDataProto.ForkEvent exit_event = 9;</code>
       */
      @java.lang.Override
      public boolean hasExitEvent() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional .metrics.PerfDataProto.ForkEvent exit_event = 9;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent getExitEvent() {
        return exitEvent_ == null ? org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent.getDefaultInstance() : exitEvent_;
      }
      /**
       * <code>optional .metrics.PerfDataProto.ForkEvent exit_event = 9;</code>
       */
      private void setExitEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent value) {
        value.getClass();
  exitEvent_ = value;
        bitField0_ |= 0x00000020;
        }
      /**
       * <code>optional .metrics.PerfDataProto.ForkEvent exit_event = 9;</code>
       */
      @java.lang.SuppressWarnings({"ReferenceEquality"})
      private void mergeExitEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent value) {
        value.getClass();
  if (exitEvent_ != null &&
            exitEvent_ != org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent.getDefaultInstance()) {
          exitEvent_ =
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent.newBuilder(exitEvent_).mergeFrom(value).buildPartial();
        } else {
          exitEvent_ = value;
        }
        bitField0_ |= 0x00000020;
      }
      /**
       * <code>optional .metrics.PerfDataProto.ForkEvent exit_event = 9;</code>
       */
      private void clearExitEvent() {  exitEvent_ = null;
        bitField0_ = (bitField0_ & ~0x00000020);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code metrics.PerfDataProto.PerfEvent}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent, Builder> implements
          // @@protoc_insertion_point(builder_implements:metrics.PerfDataProto.PerfEvent)
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventOrBuilder {
        // Construct using org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <code>optional .metrics.PerfDataProto.EventHeader header = 1;</code>
         */
        @java.lang.Override
        public boolean hasHeader() {
          return instance.hasHeader();
        }
        /**
         * <code>optional .metrics.PerfDataProto.EventHeader header = 1;</code>
         */
        @java.lang.Override
        public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader getHeader() {
          return instance.getHeader();
        }
        /**
         * <code>optional .metrics.PerfDataProto.EventHeader header = 1;</code>
         */
        public Builder setHeader(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader value) {
          copyOnWrite();
          instance.setHeader(value);
          return this;
          }
        /**
         * <code>optional .metrics.PerfDataProto.EventHeader header = 1;</code>
         */
        public Builder setHeader(
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader.Builder builderForValue) {
          copyOnWrite();
          instance.setHeader(builderForValue.build());
          return this;
        }
        /**
         * <code>optional .metrics.PerfDataProto.EventHeader header = 1;</code>
         */
        public Builder mergeHeader(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.EventHeader value) {
          copyOnWrite();
          instance.mergeHeader(value);
          return this;
        }
        /**
         * <code>optional .metrics.PerfDataProto.EventHeader header = 1;</code>
         */
        public Builder clearHeader() {  copyOnWrite();
          instance.clearHeader();
          return this;
        }

        /**
         * <code>optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;</code>
         */
        @java.lang.Override
        public boolean hasMmapEvent() {
          return instance.hasMmapEvent();
        }
        /**
         * <code>optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;</code>
         */
        @java.lang.Override
        public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent getMmapEvent() {
          return instance.getMmapEvent();
        }
        /**
         * <code>optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;</code>
         */
        public Builder setMmapEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent value) {
          copyOnWrite();
          instance.setMmapEvent(value);
          return this;
          }
        /**
         * <code>optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;</code>
         */
        public Builder setMmapEvent(
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent.Builder builderForValue) {
          copyOnWrite();
          instance.setMmapEvent(builderForValue.build());
          return this;
        }
        /**
         * <code>optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;</code>
         */
        public Builder mergeMmapEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.MMapEvent value) {
          copyOnWrite();
          instance.mergeMmapEvent(value);
          return this;
        }
        /**
         * <code>optional .metrics.PerfDataProto.MMapEvent mmap_event = 2;</code>
         */
        public Builder clearMmapEvent() {  copyOnWrite();
          instance.clearMmapEvent();
          return this;
        }

        /**
         * <code>optional .metrics.PerfDataProto.SampleEvent sample_event = 3;</code>
         */
        @java.lang.Override
        public boolean hasSampleEvent() {
          return instance.hasSampleEvent();
        }
        /**
         * <code>optional .metrics.PerfDataProto.SampleEvent sample_event = 3;</code>
         */
        @java.lang.Override
        public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent getSampleEvent() {
          return instance.getSampleEvent();
        }
        /**
         * <code>optional .metrics.PerfDataProto.SampleEvent sample_event = 3;</code>
         */
        public Builder setSampleEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent value) {
          copyOnWrite();
          instance.setSampleEvent(value);
          return this;
          }
        /**
         * <code>optional .metrics.PerfDataProto.SampleEvent sample_event = 3;</code>
         */
        public Builder setSampleEvent(
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent.Builder builderForValue) {
          copyOnWrite();
          instance.setSampleEvent(builderForValue.build());
          return this;
        }
        /**
         * <code>optional .metrics.PerfDataProto.SampleEvent sample_event = 3;</code>
         */
        public Builder mergeSampleEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.SampleEvent value) {
          copyOnWrite();
          instance.mergeSampleEvent(value);
          return this;
        }
        /**
         * <code>optional .metrics.PerfDataProto.SampleEvent sample_event = 3;</code>
         */
        public Builder clearSampleEvent() {  copyOnWrite();
          instance.clearSampleEvent();
          return this;
        }

        /**
         * <code>optional .metrics.PerfDataProto.CommEvent comm_event = 4;</code>
         */
        @java.lang.Override
        public boolean hasCommEvent() {
          return instance.hasCommEvent();
        }
        /**
         * <code>optional .metrics.PerfDataProto.CommEvent comm_event = 4;</code>
         */
        @java.lang.Override
        public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent getCommEvent() {
          return instance.getCommEvent();
        }
        /**
         * <code>optional .metrics.PerfDataProto.CommEvent comm_event = 4;</code>
         */
        public Builder setCommEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent value) {
          copyOnWrite();
          instance.setCommEvent(value);
          return this;
          }
        /**
         * <code>optional .metrics.PerfDataProto.CommEvent comm_event = 4;</code>
         */
        public Builder setCommEvent(
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent.Builder builderForValue) {
          copyOnWrite();
          instance.setCommEvent(builderForValue.build());
          return this;
        }
        /**
         * <code>optional .metrics.PerfDataProto.CommEvent comm_event = 4;</code>
         */
        public Builder mergeCommEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.CommEvent value) {
          copyOnWrite();
          instance.mergeCommEvent(value);
          return this;
        }
        /**
         * <code>optional .metrics.PerfDataProto.CommEvent comm_event = 4;</code>
         */
        public Builder clearCommEvent() {  copyOnWrite();
          instance.clearCommEvent();
          return this;
        }

        /**
         * <pre>
         * FORK and EXIT events are structurally identical. They only differ by the
         * event type. But using two distinct fields makes things easier.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.ForkEvent fork_event = 5;</code>
         */
        @java.lang.Override
        public boolean hasForkEvent() {
          return instance.hasForkEvent();
        }
        /**
         * <pre>
         * FORK and EXIT events are structurally identical. They only differ by the
         * event type. But using two distinct fields makes things easier.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.ForkEvent fork_event = 5;</code>
         */
        @java.lang.Override
        public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent getForkEvent() {
          return instance.getForkEvent();
        }
        /**
         * <pre>
         * FORK and EXIT events are structurally identical. They only differ by the
         * event type. But using two distinct fields makes things easier.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.ForkEvent fork_event = 5;</code>
         */
        public Builder setForkEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent value) {
          copyOnWrite();
          instance.setForkEvent(value);
          return this;
          }
        /**
         * <pre>
         * FORK and EXIT events are structurally identical. They only differ by the
         * event type. But using two distinct fields makes things easier.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.ForkEvent fork_event = 5;</code>
         */
        public Builder setForkEvent(
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent.Builder builderForValue) {
          copyOnWrite();
          instance.setForkEvent(builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * FORK and EXIT events are structurally identical. They only differ by the
         * event type. But using two distinct fields makes things easier.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.ForkEvent fork_event = 5;</code>
         */
        public Builder mergeForkEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent value) {
          copyOnWrite();
          instance.mergeForkEvent(value);
          return this;
        }
        /**
         * <pre>
         * FORK and EXIT events are structurally identical. They only differ by the
         * event type. But using two distinct fields makes things easier.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.ForkEvent fork_event = 5;</code>
         */
        public Builder clearForkEvent() {  copyOnWrite();
          instance.clearForkEvent();
          return this;
        }

        /**
         * <code>optional .metrics.PerfDataProto.ForkEvent exit_event = 9;</code>
         */
        @java.lang.Override
        public boolean hasExitEvent() {
          return instance.hasExitEvent();
        }
        /**
         * <code>optional .metrics.PerfDataProto.ForkEvent exit_event = 9;</code>
         */
        @java.lang.Override
        public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent getExitEvent() {
          return instance.getExitEvent();
        }
        /**
         * <code>optional .metrics.PerfDataProto.ForkEvent exit_event = 9;</code>
         */
        public Builder setExitEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent value) {
          copyOnWrite();
          instance.setExitEvent(value);
          return this;
          }
        /**
         * <code>optional .metrics.PerfDataProto.ForkEvent exit_event = 9;</code>
         */
        public Builder setExitEvent(
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent.Builder builderForValue) {
          copyOnWrite();
          instance.setExitEvent(builderForValue.build());
          return this;
        }
        /**
         * <code>optional .metrics.PerfDataProto.ForkEvent exit_event = 9;</code>
         */
        public Builder mergeExitEvent(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.ForkEvent value) {
          copyOnWrite();
          instance.mergeExitEvent(value);
          return this;
        }
        /**
         * <code>optional .metrics.PerfDataProto.ForkEvent exit_event = 9;</code>
         */
        public Builder clearExitEvent() {  copyOnWrite();
          instance.clearExitEvent();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:metrics.PerfDataProto.PerfEvent)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "header_",
                "mmapEvent_",
                "sampleEvent_",
                "commEvent_",
                "forkEvent_",
                "exitEvent_",
              };
              java.lang.String info =
                  "\u0001\u0006\u0000\u0001\u0001\t\u0006\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
                  "\u1009\u0001\u0003\u1009\u0002\u0004\u1009\u0003\u0005\u1009\u0004\t\u1009\u0005" +
                  "";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfEvent)
      private static final org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent DEFAULT_INSTANCE;
      static {
        PerfEvent defaultInstance = new PerfEvent();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          PerfEvent.class, defaultInstance);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<PerfEvent> PARSER;

      public static com.google.protobuf.Parser<PerfEvent> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface PerfEventStatsOrBuilder extends
        // @@protoc_insertion_point(interface_extends:metrics.PerfDataProto.PerfEventStats)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Total number of events read from perf data.
       * </pre>
       *
       * <code>optional uint32 num_events_read = 1;</code>
       * @return Whether the numEventsRead field is set.
       */
      boolean hasNumEventsRead();
      /**
       * <pre>
       * Total number of events read from perf data.
       * </pre>
       *
       * <code>optional uint32 num_events_read = 1;</code>
       * @return The numEventsRead.
       */
      int getNumEventsRead();

      /**
       * <pre>
       * Total number of various types of events.
       * </pre>
       *
       * <code>optional uint32 num_sample_events = 2;</code>
       * @return Whether the numSampleEvents field is set.
       */
      boolean hasNumSampleEvents();
      /**
       * <pre>
       * Total number of various types of events.
       * </pre>
       *
       * <code>optional uint32 num_sample_events = 2;</code>
       * @return The numSampleEvents.
       */
      int getNumSampleEvents();

      /**
       * <code>optional uint32 num_mmap_events = 3;</code>
       * @return Whether the numMmapEvents field is set.
       */
      boolean hasNumMmapEvents();
      /**
       * <code>optional uint32 num_mmap_events = 3;</code>
       * @return The numMmapEvents.
       */
      int getNumMmapEvents();

      /**
       * <code>optional uint32 num_fork_events = 4;</code>
       * @return Whether the numForkEvents field is set.
       */
      boolean hasNumForkEvents();
      /**
       * <code>optional uint32 num_fork_events = 4;</code>
       * @return The numForkEvents.
       */
      int getNumForkEvents();

      /**
       * <code>optional uint32 num_exit_events = 5;</code>
       * @return Whether the numExitEvents field is set.
       */
      boolean hasNumExitEvents();
      /**
       * <code>optional uint32 num_exit_events = 5;</code>
       * @return The numExitEvents.
       */
      int getNumExitEvents();

      /**
       * <pre>
       * Number of sample events that were successfully mapped by the address
       * mapper, a quipper module that is used to obscure addresses and convert
       * them to DSO name + offset.  Sometimes it fails to process sample events.
       * This field allows us to track the success rate of the address mapper.
       * </pre>
       *
       * <code>optional uint32 num_sample_events_mapped = 6;</code>
       * @return Whether the numSampleEventsMapped field is set.
       */
      boolean hasNumSampleEventsMapped();
      /**
       * <pre>
       * Number of sample events that were successfully mapped by the address
       * mapper, a quipper module that is used to obscure addresses and convert
       * them to DSO name + offset.  Sometimes it fails to process sample events.
       * This field allows us to track the success rate of the address mapper.
       * </pre>
       *
       * <code>optional uint32 num_sample_events_mapped = 6;</code>
       * @return The numSampleEventsMapped.
       */
      int getNumSampleEventsMapped();

      /**
       * <pre>
       * Whether address remapping was enabled.
       * </pre>
       *
       * <code>optional bool did_remap = 7;</code>
       * @return Whether the didRemap field is set.
       */
      boolean hasDidRemap();
      /**
       * <pre>
       * Whether address remapping was enabled.
       * </pre>
       *
       * <code>optional bool did_remap = 7;</code>
       * @return The didRemap.
       */
      boolean getDidRemap();
    }
    /**
     * Protobuf type {@code metrics.PerfDataProto.PerfEventStats}
     */
    public  static final class PerfEventStats extends
        com.google.protobuf.GeneratedMessageLite<
            PerfEventStats, PerfEventStats.Builder> implements
        // @@protoc_insertion_point(message_implements:metrics.PerfDataProto.PerfEventStats)
        PerfEventStatsOrBuilder {
      private PerfEventStats() {
      }
      private int bitField0_;
      public static final int NUM_EVENTS_READ_FIELD_NUMBER = 1;
      private int numEventsRead_;
      /**
       * <pre>
       * Total number of events read from perf data.
       * </pre>
       *
       * <code>optional uint32 num_events_read = 1;</code>
       * @return Whether the numEventsRead field is set.
       */
      @java.lang.Override
      public boolean hasNumEventsRead() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Total number of events read from perf data.
       * </pre>
       *
       * <code>optional uint32 num_events_read = 1;</code>
       * @return The numEventsRead.
       */
      @java.lang.Override
      public int getNumEventsRead() {
        return numEventsRead_;
      }
      /**
       * <pre>
       * Total number of events read from perf data.
       * </pre>
       *
       * <code>optional uint32 num_events_read = 1;</code>
       * @param value The numEventsRead to set.
       */
      private void setNumEventsRead(int value) {
        bitField0_ |= 0x00000001;
        numEventsRead_ = value;
      }
      /**
       * <pre>
       * Total number of events read from perf data.
       * </pre>
       *
       * <code>optional uint32 num_events_read = 1;</code>
       */
      private void clearNumEventsRead() {
        bitField0_ = (bitField0_ & ~0x00000001);
        numEventsRead_ = 0;
      }

      public static final int NUM_SAMPLE_EVENTS_FIELD_NUMBER = 2;
      private int numSampleEvents_;
      /**
       * <pre>
       * Total number of various types of events.
       * </pre>
       *
       * <code>optional uint32 num_sample_events = 2;</code>
       * @return Whether the numSampleEvents field is set.
       */
      @java.lang.Override
      public boolean hasNumSampleEvents() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Total number of various types of events.
       * </pre>
       *
       * <code>optional uint32 num_sample_events = 2;</code>
       * @return The numSampleEvents.
       */
      @java.lang.Override
      public int getNumSampleEvents() {
        return numSampleEvents_;
      }
      /**
       * <pre>
       * Total number of various types of events.
       * </pre>
       *
       * <code>optional uint32 num_sample_events = 2;</code>
       * @param value The numSampleEvents to set.
       */
      private void setNumSampleEvents(int value) {
        bitField0_ |= 0x00000002;
        numSampleEvents_ = value;
      }
      /**
       * <pre>
       * Total number of various types of events.
       * </pre>
       *
       * <code>optional uint32 num_sample_events = 2;</code>
       */
      private void clearNumSampleEvents() {
        bitField0_ = (bitField0_ & ~0x00000002);
        numSampleEvents_ = 0;
      }

      public static final int NUM_MMAP_EVENTS_FIELD_NUMBER = 3;
      private int numMmapEvents_;
      /**
       * <code>optional uint32 num_mmap_events = 3;</code>
       * @return Whether the numMmapEvents field is set.
       */
      @java.lang.Override
      public boolean hasNumMmapEvents() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional uint32 num_mmap_events = 3;</code>
       * @return The numMmapEvents.
       */
      @java.lang.Override
      public int getNumMmapEvents() {
        return numMmapEvents_;
      }
      /**
       * <code>optional uint32 num_mmap_events = 3;</code>
       * @param value The numMmapEvents to set.
       */
      private void setNumMmapEvents(int value) {
        bitField0_ |= 0x00000004;
        numMmapEvents_ = value;
      }
      /**
       * <code>optional uint32 num_mmap_events = 3;</code>
       */
      private void clearNumMmapEvents() {
        bitField0_ = (bitField0_ & ~0x00000004);
        numMmapEvents_ = 0;
      }

      public static final int NUM_FORK_EVENTS_FIELD_NUMBER = 4;
      private int numForkEvents_;
      /**
       * <code>optional uint32 num_fork_events = 4;</code>
       * @return Whether the numForkEvents field is set.
       */
      @java.lang.Override
      public boolean hasNumForkEvents() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional uint32 num_fork_events = 4;</code>
       * @return The numForkEvents.
       */
      @java.lang.Override
      public int getNumForkEvents() {
        return numForkEvents_;
      }
      /**
       * <code>optional uint32 num_fork_events = 4;</code>
       * @param value The numForkEvents to set.
       */
      private void setNumForkEvents(int value) {
        bitField0_ |= 0x00000008;
        numForkEvents_ = value;
      }
      /**
       * <code>optional uint32 num_fork_events = 4;</code>
       */
      private void clearNumForkEvents() {
        bitField0_ = (bitField0_ & ~0x00000008);
        numForkEvents_ = 0;
      }

      public static final int NUM_EXIT_EVENTS_FIELD_NUMBER = 5;
      private int numExitEvents_;
      /**
       * <code>optional uint32 num_exit_events = 5;</code>
       * @return Whether the numExitEvents field is set.
       */
      @java.lang.Override
      public boolean hasNumExitEvents() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional uint32 num_exit_events = 5;</code>
       * @return The numExitEvents.
       */
      @java.lang.Override
      public int getNumExitEvents() {
        return numExitEvents_;
      }
      /**
       * <code>optional uint32 num_exit_events = 5;</code>
       * @param value The numExitEvents to set.
       */
      private void setNumExitEvents(int value) {
        bitField0_ |= 0x00000010;
        numExitEvents_ = value;
      }
      /**
       * <code>optional uint32 num_exit_events = 5;</code>
       */
      private void clearNumExitEvents() {
        bitField0_ = (bitField0_ & ~0x00000010);
        numExitEvents_ = 0;
      }

      public static final int NUM_SAMPLE_EVENTS_MAPPED_FIELD_NUMBER = 6;
      private int numSampleEventsMapped_;
      /**
       * <pre>
       * Number of sample events that were successfully mapped by the address
       * mapper, a quipper module that is used to obscure addresses and convert
       * them to DSO name + offset.  Sometimes it fails to process sample events.
       * This field allows us to track the success rate of the address mapper.
       * </pre>
       *
       * <code>optional uint32 num_sample_events_mapped = 6;</code>
       * @return Whether the numSampleEventsMapped field is set.
       */
      @java.lang.Override
      public boolean hasNumSampleEventsMapped() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Number of sample events that were successfully mapped by the address
       * mapper, a quipper module that is used to obscure addresses and convert
       * them to DSO name + offset.  Sometimes it fails to process sample events.
       * This field allows us to track the success rate of the address mapper.
       * </pre>
       *
       * <code>optional uint32 num_sample_events_mapped = 6;</code>
       * @return The numSampleEventsMapped.
       */
      @java.lang.Override
      public int getNumSampleEventsMapped() {
        return numSampleEventsMapped_;
      }
      /**
       * <pre>
       * Number of sample events that were successfully mapped by the address
       * mapper, a quipper module that is used to obscure addresses and convert
       * them to DSO name + offset.  Sometimes it fails to process sample events.
       * This field allows us to track the success rate of the address mapper.
       * </pre>
       *
       * <code>optional uint32 num_sample_events_mapped = 6;</code>
       * @param value The numSampleEventsMapped to set.
       */
      private void setNumSampleEventsMapped(int value) {
        bitField0_ |= 0x00000020;
        numSampleEventsMapped_ = value;
      }
      /**
       * <pre>
       * Number of sample events that were successfully mapped by the address
       * mapper, a quipper module that is used to obscure addresses and convert
       * them to DSO name + offset.  Sometimes it fails to process sample events.
       * This field allows us to track the success rate of the address mapper.
       * </pre>
       *
       * <code>optional uint32 num_sample_events_mapped = 6;</code>
       */
      private void clearNumSampleEventsMapped() {
        bitField0_ = (bitField0_ & ~0x00000020);
        numSampleEventsMapped_ = 0;
      }

      public static final int DID_REMAP_FIELD_NUMBER = 7;
      private boolean didRemap_;
      /**
       * <pre>
       * Whether address remapping was enabled.
       * </pre>
       *
       * <code>optional bool did_remap = 7;</code>
       * @return Whether the didRemap field is set.
       */
      @java.lang.Override
      public boolean hasDidRemap() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * Whether address remapping was enabled.
       * </pre>
       *
       * <code>optional bool did_remap = 7;</code>
       * @return The didRemap.
       */
      @java.lang.Override
      public boolean getDidRemap() {
        return didRemap_;
      }
      /**
       * <pre>
       * Whether address remapping was enabled.
       * </pre>
       *
       * <code>optional bool did_remap = 7;</code>
       * @param value The didRemap to set.
       */
      private void setDidRemap(boolean value) {
        bitField0_ |= 0x00000040;
        didRemap_ = value;
      }
      /**
       * <pre>
       * Whether address remapping was enabled.
       * </pre>
       *
       * <code>optional bool did_remap = 7;</code>
       */
      private void clearDidRemap() {
        bitField0_ = (bitField0_ & ~0x00000040);
        didRemap_ = false;
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code metrics.PerfDataProto.PerfEventStats}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats, Builder> implements
          // @@protoc_insertion_point(builder_implements:metrics.PerfDataProto.PerfEventStats)
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStatsOrBuilder {
        // Construct using org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Total number of events read from perf data.
         * </pre>
         *
         * <code>optional uint32 num_events_read = 1;</code>
         * @return Whether the numEventsRead field is set.
         */
        @java.lang.Override
        public boolean hasNumEventsRead() {
          return instance.hasNumEventsRead();
        }
        /**
         * <pre>
         * Total number of events read from perf data.
         * </pre>
         *
         * <code>optional uint32 num_events_read = 1;</code>
         * @return The numEventsRead.
         */
        @java.lang.Override
        public int getNumEventsRead() {
          return instance.getNumEventsRead();
        }
        /**
         * <pre>
         * Total number of events read from perf data.
         * </pre>
         *
         * <code>optional uint32 num_events_read = 1;</code>
         * @param value The numEventsRead to set.
         * @return This builder for chaining.
         */
        public Builder setNumEventsRead(int value) {
          copyOnWrite();
          instance.setNumEventsRead(value);
          return this;
        }
        /**
         * <pre>
         * Total number of events read from perf data.
         * </pre>
         *
         * <code>optional uint32 num_events_read = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearNumEventsRead() {
          copyOnWrite();
          instance.clearNumEventsRead();
          return this;
        }

        /**
         * <pre>
         * Total number of various types of events.
         * </pre>
         *
         * <code>optional uint32 num_sample_events = 2;</code>
         * @return Whether the numSampleEvents field is set.
         */
        @java.lang.Override
        public boolean hasNumSampleEvents() {
          return instance.hasNumSampleEvents();
        }
        /**
         * <pre>
         * Total number of various types of events.
         * </pre>
         *
         * <code>optional uint32 num_sample_events = 2;</code>
         * @return The numSampleEvents.
         */
        @java.lang.Override
        public int getNumSampleEvents() {
          return instance.getNumSampleEvents();
        }
        /**
         * <pre>
         * Total number of various types of events.
         * </pre>
         *
         * <code>optional uint32 num_sample_events = 2;</code>
         * @param value The numSampleEvents to set.
         * @return This builder for chaining.
         */
        public Builder setNumSampleEvents(int value) {
          copyOnWrite();
          instance.setNumSampleEvents(value);
          return this;
        }
        /**
         * <pre>
         * Total number of various types of events.
         * </pre>
         *
         * <code>optional uint32 num_sample_events = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearNumSampleEvents() {
          copyOnWrite();
          instance.clearNumSampleEvents();
          return this;
        }

        /**
         * <code>optional uint32 num_mmap_events = 3;</code>
         * @return Whether the numMmapEvents field is set.
         */
        @java.lang.Override
        public boolean hasNumMmapEvents() {
          return instance.hasNumMmapEvents();
        }
        /**
         * <code>optional uint32 num_mmap_events = 3;</code>
         * @return The numMmapEvents.
         */
        @java.lang.Override
        public int getNumMmapEvents() {
          return instance.getNumMmapEvents();
        }
        /**
         * <code>optional uint32 num_mmap_events = 3;</code>
         * @param value The numMmapEvents to set.
         * @return This builder for chaining.
         */
        public Builder setNumMmapEvents(int value) {
          copyOnWrite();
          instance.setNumMmapEvents(value);
          return this;
        }
        /**
         * <code>optional uint32 num_mmap_events = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearNumMmapEvents() {
          copyOnWrite();
          instance.clearNumMmapEvents();
          return this;
        }

        /**
         * <code>optional uint32 num_fork_events = 4;</code>
         * @return Whether the numForkEvents field is set.
         */
        @java.lang.Override
        public boolean hasNumForkEvents() {
          return instance.hasNumForkEvents();
        }
        /**
         * <code>optional uint32 num_fork_events = 4;</code>
         * @return The numForkEvents.
         */
        @java.lang.Override
        public int getNumForkEvents() {
          return instance.getNumForkEvents();
        }
        /**
         * <code>optional uint32 num_fork_events = 4;</code>
         * @param value The numForkEvents to set.
         * @return This builder for chaining.
         */
        public Builder setNumForkEvents(int value) {
          copyOnWrite();
          instance.setNumForkEvents(value);
          return this;
        }
        /**
         * <code>optional uint32 num_fork_events = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearNumForkEvents() {
          copyOnWrite();
          instance.clearNumForkEvents();
          return this;
        }

        /**
         * <code>optional uint32 num_exit_events = 5;</code>
         * @return Whether the numExitEvents field is set.
         */
        @java.lang.Override
        public boolean hasNumExitEvents() {
          return instance.hasNumExitEvents();
        }
        /**
         * <code>optional uint32 num_exit_events = 5;</code>
         * @return The numExitEvents.
         */
        @java.lang.Override
        public int getNumExitEvents() {
          return instance.getNumExitEvents();
        }
        /**
         * <code>optional uint32 num_exit_events = 5;</code>
         * @param value The numExitEvents to set.
         * @return This builder for chaining.
         */
        public Builder setNumExitEvents(int value) {
          copyOnWrite();
          instance.setNumExitEvents(value);
          return this;
        }
        /**
         * <code>optional uint32 num_exit_events = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearNumExitEvents() {
          copyOnWrite();
          instance.clearNumExitEvents();
          return this;
        }

        /**
         * <pre>
         * Number of sample events that were successfully mapped by the address
         * mapper, a quipper module that is used to obscure addresses and convert
         * them to DSO name + offset.  Sometimes it fails to process sample events.
         * This field allows us to track the success rate of the address mapper.
         * </pre>
         *
         * <code>optional uint32 num_sample_events_mapped = 6;</code>
         * @return Whether the numSampleEventsMapped field is set.
         */
        @java.lang.Override
        public boolean hasNumSampleEventsMapped() {
          return instance.hasNumSampleEventsMapped();
        }
        /**
         * <pre>
         * Number of sample events that were successfully mapped by the address
         * mapper, a quipper module that is used to obscure addresses and convert
         * them to DSO name + offset.  Sometimes it fails to process sample events.
         * This field allows us to track the success rate of the address mapper.
         * </pre>
         *
         * <code>optional uint32 num_sample_events_mapped = 6;</code>
         * @return The numSampleEventsMapped.
         */
        @java.lang.Override
        public int getNumSampleEventsMapped() {
          return instance.getNumSampleEventsMapped();
        }
        /**
         * <pre>
         * Number of sample events that were successfully mapped by the address
         * mapper, a quipper module that is used to obscure addresses and convert
         * them to DSO name + offset.  Sometimes it fails to process sample events.
         * This field allows us to track the success rate of the address mapper.
         * </pre>
         *
         * <code>optional uint32 num_sample_events_mapped = 6;</code>
         * @param value The numSampleEventsMapped to set.
         * @return This builder for chaining.
         */
        public Builder setNumSampleEventsMapped(int value) {
          copyOnWrite();
          instance.setNumSampleEventsMapped(value);
          return this;
        }
        /**
         * <pre>
         * Number of sample events that were successfully mapped by the address
         * mapper, a quipper module that is used to obscure addresses and convert
         * them to DSO name + offset.  Sometimes it fails to process sample events.
         * This field allows us to track the success rate of the address mapper.
         * </pre>
         *
         * <code>optional uint32 num_sample_events_mapped = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearNumSampleEventsMapped() {
          copyOnWrite();
          instance.clearNumSampleEventsMapped();
          return this;
        }

        /**
         * <pre>
         * Whether address remapping was enabled.
         * </pre>
         *
         * <code>optional bool did_remap = 7;</code>
         * @return Whether the didRemap field is set.
         */
        @java.lang.Override
        public boolean hasDidRemap() {
          return instance.hasDidRemap();
        }
        /**
         * <pre>
         * Whether address remapping was enabled.
         * </pre>
         *
         * <code>optional bool did_remap = 7;</code>
         * @return The didRemap.
         */
        @java.lang.Override
        public boolean getDidRemap() {
          return instance.getDidRemap();
        }
        /**
         * <pre>
         * Whether address remapping was enabled.
         * </pre>
         *
         * <code>optional bool did_remap = 7;</code>
         * @param value The didRemap to set.
         * @return This builder for chaining.
         */
        public Builder setDidRemap(boolean value) {
          copyOnWrite();
          instance.setDidRemap(value);
          return this;
        }
        /**
         * <pre>
         * Whether address remapping was enabled.
         * </pre>
         *
         * <code>optional bool did_remap = 7;</code>
         * @return This builder for chaining.
         */
        public Builder clearDidRemap() {
          copyOnWrite();
          instance.clearDidRemap();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:metrics.PerfDataProto.PerfEventStats)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "numEventsRead_",
                "numSampleEvents_",
                "numMmapEvents_",
                "numForkEvents_",
                "numExitEvents_",
                "numSampleEventsMapped_",
                "didRemap_",
              };
              java.lang.String info =
                  "\u0001\u0007\u0000\u0001\u0001\u0007\u0007\u0000\u0000\u0000\u0001\u100b\u0000\u0002" +
                  "\u100b\u0001\u0003\u100b\u0002\u0004\u100b\u0003\u0005\u100b\u0004\u0006\u100b\u0005" +
                  "\u0007\u1007\u0006";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfEventStats)
      private static final org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats DEFAULT_INSTANCE;
      static {
        PerfEventStats defaultInstance = new PerfEventStats();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          PerfEventStats.class, defaultInstance);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<PerfEventStats> PARSER;

      public static com.google.protobuf.Parser<PerfEventStats> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface PerfBuildIDOrBuilder extends
        // @@protoc_insertion_point(interface_extends:metrics.PerfDataProto.PerfBuildID)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Misc field in perf_event_header.
       * Indicates whether the file is mapped in kernel mode or user mode.
       * </pre>
       *
       * <code>optional uint32 misc = 1;</code>
       * @return Whether the misc field is set.
       */
      boolean hasMisc();
      /**
       * <pre>
       * Misc field in perf_event_header.
       * Indicates whether the file is mapped in kernel mode or user mode.
       * </pre>
       *
       * <code>optional uint32 misc = 1;</code>
       * @return The misc.
       */
      int getMisc();

      /**
       * <pre>
       * Process ID.
       * </pre>
       *
       * <code>optional uint32 pid = 2;</code>
       * @return Whether the pid field is set.
       */
      boolean hasPid();
      /**
       * <pre>
       * Process ID.
       * </pre>
       *
       * <code>optional uint32 pid = 2;</code>
       * @return The pid.
       */
      int getPid();

      /**
       * <pre>
       * Build id.  Should always contain kBuildIDArraySize bytes of data.
       * perf_reader.h in Chrome OS defines kBuildIDArraySize = 20.
       * </pre>
       *
       * <code>optional bytes build_id_hash = 3;</code>
       * @return Whether the buildIdHash field is set.
       */
      boolean hasBuildIdHash();
      /**
       * <pre>
       * Build id.  Should always contain kBuildIDArraySize bytes of data.
       * perf_reader.h in Chrome OS defines kBuildIDArraySize = 20.
       * </pre>
       *
       * <code>optional bytes build_id_hash = 3;</code>
       * @return The buildIdHash.
       */
      com.google.protobuf.ByteString getBuildIdHash();

      /**
       * <pre>
       * Filename Md5sum prefix.
       * The filename was field 4 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 filename_md5_prefix = 5;</code>
       * @return Whether the filenameMd5Prefix field is set.
       */
      boolean hasFilenameMd5Prefix();
      /**
       * <pre>
       * Filename Md5sum prefix.
       * The filename was field 4 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 filename_md5_prefix = 5;</code>
       * @return The filenameMd5Prefix.
       */
      long getFilenameMd5Prefix();
    }
    /**
     * Protobuf type {@code metrics.PerfDataProto.PerfBuildID}
     */
    public  static final class PerfBuildID extends
        com.google.protobuf.GeneratedMessageLite<
            PerfBuildID, PerfBuildID.Builder> implements
        // @@protoc_insertion_point(message_implements:metrics.PerfDataProto.PerfBuildID)
        PerfBuildIDOrBuilder {
      private PerfBuildID() {
        buildIdHash_ = com.google.protobuf.ByteString.EMPTY;
      }
      private int bitField0_;
      public static final int MISC_FIELD_NUMBER = 1;
      private int misc_;
      /**
       * <pre>
       * Misc field in perf_event_header.
       * Indicates whether the file is mapped in kernel mode or user mode.
       * </pre>
       *
       * <code>optional uint32 misc = 1;</code>
       * @return Whether the misc field is set.
       */
      @java.lang.Override
      public boolean hasMisc() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Misc field in perf_event_header.
       * Indicates whether the file is mapped in kernel mode or user mode.
       * </pre>
       *
       * <code>optional uint32 misc = 1;</code>
       * @return The misc.
       */
      @java.lang.Override
      public int getMisc() {
        return misc_;
      }
      /**
       * <pre>
       * Misc field in perf_event_header.
       * Indicates whether the file is mapped in kernel mode or user mode.
       * </pre>
       *
       * <code>optional uint32 misc = 1;</code>
       * @param value The misc to set.
       */
      private void setMisc(int value) {
        bitField0_ |= 0x00000001;
        misc_ = value;
      }
      /**
       * <pre>
       * Misc field in perf_event_header.
       * Indicates whether the file is mapped in kernel mode or user mode.
       * </pre>
       *
       * <code>optional uint32 misc = 1;</code>
       */
      private void clearMisc() {
        bitField0_ = (bitField0_ & ~0x00000001);
        misc_ = 0;
      }

      public static final int PID_FIELD_NUMBER = 2;
      private int pid_;
      /**
       * <pre>
       * Process ID.
       * </pre>
       *
       * <code>optional uint32 pid = 2;</code>
       * @return Whether the pid field is set.
       */
      @java.lang.Override
      public boolean hasPid() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Process ID.
       * </pre>
       *
       * <code>optional uint32 pid = 2;</code>
       * @return The pid.
       */
      @java.lang.Override
      public int getPid() {
        return pid_;
      }
      /**
       * <pre>
       * Process ID.
       * </pre>
       *
       * <code>optional uint32 pid = 2;</code>
       * @param value The pid to set.
       */
      private void setPid(int value) {
        bitField0_ |= 0x00000002;
        pid_ = value;
      }
      /**
       * <pre>
       * Process ID.
       * </pre>
       *
       * <code>optional uint32 pid = 2;</code>
       */
      private void clearPid() {
        bitField0_ = (bitField0_ & ~0x00000002);
        pid_ = 0;
      }

      public static final int BUILD_ID_HASH_FIELD_NUMBER = 3;
      private com.google.protobuf.ByteString buildIdHash_;
      /**
       * <pre>
       * Build id.  Should always contain kBuildIDArraySize bytes of data.
       * perf_reader.h in Chrome OS defines kBuildIDArraySize = 20.
       * </pre>
       *
       * <code>optional bytes build_id_hash = 3;</code>
       * @return Whether the buildIdHash field is set.
       */
      @java.lang.Override
      public boolean hasBuildIdHash() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Build id.  Should always contain kBuildIDArraySize bytes of data.
       * perf_reader.h in Chrome OS defines kBuildIDArraySize = 20.
       * </pre>
       *
       * <code>optional bytes build_id_hash = 3;</code>
       * @return The buildIdHash.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getBuildIdHash() {
        return buildIdHash_;
      }
      /**
       * <pre>
       * Build id.  Should always contain kBuildIDArraySize bytes of data.
       * perf_reader.h in Chrome OS defines kBuildIDArraySize = 20.
       * </pre>
       *
       * <code>optional bytes build_id_hash = 3;</code>
       * @param value The buildIdHash to set.
       */
      private void setBuildIdHash(com.google.protobuf.ByteString value) {
        value.getClass();
  bitField0_ |= 0x00000004;
        buildIdHash_ = value;
      }
      /**
       * <pre>
       * Build id.  Should always contain kBuildIDArraySize bytes of data.
       * perf_reader.h in Chrome OS defines kBuildIDArraySize = 20.
       * </pre>
       *
       * <code>optional bytes build_id_hash = 3;</code>
       */
      private void clearBuildIdHash() {
        bitField0_ = (bitField0_ & ~0x00000004);
        buildIdHash_ = getDefaultInstance().getBuildIdHash();
      }

      public static final int FILENAME_MD5_PREFIX_FIELD_NUMBER = 5;
      private long filenameMd5Prefix_;
      /**
       * <pre>
       * Filename Md5sum prefix.
       * The filename was field 4 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 filename_md5_prefix = 5;</code>
       * @return Whether the filenameMd5Prefix field is set.
       */
      @java.lang.Override
      public boolean hasFilenameMd5Prefix() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Filename Md5sum prefix.
       * The filename was field 4 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 filename_md5_prefix = 5;</code>
       * @return The filenameMd5Prefix.
       */
      @java.lang.Override
      public long getFilenameMd5Prefix() {
        return filenameMd5Prefix_;
      }
      /**
       * <pre>
       * Filename Md5sum prefix.
       * The filename was field 4 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 filename_md5_prefix = 5;</code>
       * @param value The filenameMd5Prefix to set.
       */
      private void setFilenameMd5Prefix(long value) {
        bitField0_ |= 0x00000008;
        filenameMd5Prefix_ = value;
      }
      /**
       * <pre>
       * Filename Md5sum prefix.
       * The filename was field 4 and has been intentionally left out.
       * </pre>
       *
       * <code>optional uint64 filename_md5_prefix = 5;</code>
       */
      private void clearFilenameMd5Prefix() {
        bitField0_ = (bitField0_ & ~0x00000008);
        filenameMd5Prefix_ = 0L;
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code metrics.PerfDataProto.PerfBuildID}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID, Builder> implements
          // @@protoc_insertion_point(builder_implements:metrics.PerfDataProto.PerfBuildID)
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildIDOrBuilder {
        // Construct using org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Misc field in perf_event_header.
         * Indicates whether the file is mapped in kernel mode or user mode.
         * </pre>
         *
         * <code>optional uint32 misc = 1;</code>
         * @return Whether the misc field is set.
         */
        @java.lang.Override
        public boolean hasMisc() {
          return instance.hasMisc();
        }
        /**
         * <pre>
         * Misc field in perf_event_header.
         * Indicates whether the file is mapped in kernel mode or user mode.
         * </pre>
         *
         * <code>optional uint32 misc = 1;</code>
         * @return The misc.
         */
        @java.lang.Override
        public int getMisc() {
          return instance.getMisc();
        }
        /**
         * <pre>
         * Misc field in perf_event_header.
         * Indicates whether the file is mapped in kernel mode or user mode.
         * </pre>
         *
         * <code>optional uint32 misc = 1;</code>
         * @param value The misc to set.
         * @return This builder for chaining.
         */
        public Builder setMisc(int value) {
          copyOnWrite();
          instance.setMisc(value);
          return this;
        }
        /**
         * <pre>
         * Misc field in perf_event_header.
         * Indicates whether the file is mapped in kernel mode or user mode.
         * </pre>
         *
         * <code>optional uint32 misc = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearMisc() {
          copyOnWrite();
          instance.clearMisc();
          return this;
        }

        /**
         * <pre>
         * Process ID.
         * </pre>
         *
         * <code>optional uint32 pid = 2;</code>
         * @return Whether the pid field is set.
         */
        @java.lang.Override
        public boolean hasPid() {
          return instance.hasPid();
        }
        /**
         * <pre>
         * Process ID.
         * </pre>
         *
         * <code>optional uint32 pid = 2;</code>
         * @return The pid.
         */
        @java.lang.Override
        public int getPid() {
          return instance.getPid();
        }
        /**
         * <pre>
         * Process ID.
         * </pre>
         *
         * <code>optional uint32 pid = 2;</code>
         * @param value The pid to set.
         * @return This builder for chaining.
         */
        public Builder setPid(int value) {
          copyOnWrite();
          instance.setPid(value);
          return this;
        }
        /**
         * <pre>
         * Process ID.
         * </pre>
         *
         * <code>optional uint32 pid = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearPid() {
          copyOnWrite();
          instance.clearPid();
          return this;
        }

        /**
         * <pre>
         * Build id.  Should always contain kBuildIDArraySize bytes of data.
         * perf_reader.h in Chrome OS defines kBuildIDArraySize = 20.
         * </pre>
         *
         * <code>optional bytes build_id_hash = 3;</code>
         * @return Whether the buildIdHash field is set.
         */
        @java.lang.Override
        public boolean hasBuildIdHash() {
          return instance.hasBuildIdHash();
        }
        /**
         * <pre>
         * Build id.  Should always contain kBuildIDArraySize bytes of data.
         * perf_reader.h in Chrome OS defines kBuildIDArraySize = 20.
         * </pre>
         *
         * <code>optional bytes build_id_hash = 3;</code>
         * @return The buildIdHash.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString getBuildIdHash() {
          return instance.getBuildIdHash();
        }
        /**
         * <pre>
         * Build id.  Should always contain kBuildIDArraySize bytes of data.
         * perf_reader.h in Chrome OS defines kBuildIDArraySize = 20.
         * </pre>
         *
         * <code>optional bytes build_id_hash = 3;</code>
         * @param value The buildIdHash to set.
         * @return This builder for chaining.
         */
        public Builder setBuildIdHash(com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setBuildIdHash(value);
          return this;
        }
        /**
         * <pre>
         * Build id.  Should always contain kBuildIDArraySize bytes of data.
         * perf_reader.h in Chrome OS defines kBuildIDArraySize = 20.
         * </pre>
         *
         * <code>optional bytes build_id_hash = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearBuildIdHash() {
          copyOnWrite();
          instance.clearBuildIdHash();
          return this;
        }

        /**
         * <pre>
         * Filename Md5sum prefix.
         * The filename was field 4 and has been intentionally left out.
         * </pre>
         *
         * <code>optional uint64 filename_md5_prefix = 5;</code>
         * @return Whether the filenameMd5Prefix field is set.
         */
        @java.lang.Override
        public boolean hasFilenameMd5Prefix() {
          return instance.hasFilenameMd5Prefix();
        }
        /**
         * <pre>
         * Filename Md5sum prefix.
         * The filename was field 4 and has been intentionally left out.
         * </pre>
         *
         * <code>optional uint64 filename_md5_prefix = 5;</code>
         * @return The filenameMd5Prefix.
         */
        @java.lang.Override
        public long getFilenameMd5Prefix() {
          return instance.getFilenameMd5Prefix();
        }
        /**
         * <pre>
         * Filename Md5sum prefix.
         * The filename was field 4 and has been intentionally left out.
         * </pre>
         *
         * <code>optional uint64 filename_md5_prefix = 5;</code>
         * @param value The filenameMd5Prefix to set.
         * @return This builder for chaining.
         */
        public Builder setFilenameMd5Prefix(long value) {
          copyOnWrite();
          instance.setFilenameMd5Prefix(value);
          return this;
        }
        /**
         * <pre>
         * Filename Md5sum prefix.
         * The filename was field 4 and has been intentionally left out.
         * </pre>
         *
         * <code>optional uint64 filename_md5_prefix = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearFilenameMd5Prefix() {
          copyOnWrite();
          instance.clearFilenameMd5Prefix();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:metrics.PerfDataProto.PerfBuildID)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "misc_",
                "pid_",
                "buildIdHash_",
                "filenameMd5Prefix_",
              };
              java.lang.String info =
                  "\u0001\u0004\u0000\u0001\u0001\u0005\u0004\u0000\u0000\u0000\u0001\u100b\u0000\u0002" +
                  "\u100b\u0001\u0003\u100a\u0002\u0005\u1003\u0003";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.PerfBuildID)
      private static final org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID DEFAULT_INSTANCE;
      static {
        PerfBuildID defaultInstance = new PerfBuildID();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          PerfBuildID.class, defaultInstance);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<PerfBuildID> PARSER;

      public static com.google.protobuf.Parser<PerfBuildID> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface StringMetadataOrBuilder extends
        // @@protoc_insertion_point(interface_extends:metrics.PerfDataProto.StringMetadata)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * The command line stored as a single string.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;</code>
       * @return Whether the perfCommandLineWhole field is set.
       */
      boolean hasPerfCommandLineWhole();
      /**
       * <pre>
       * The command line stored as a single string.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;</code>
       * @return The perfCommandLineWhole.
       */
      org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix getPerfCommandLineWhole();
    }
    /**
     * Protobuf type {@code metrics.PerfDataProto.StringMetadata}
     */
    public  static final class StringMetadata extends
        com.google.protobuf.GeneratedMessageLite<
            StringMetadata, StringMetadata.Builder> implements
        // @@protoc_insertion_point(message_implements:metrics.PerfDataProto.StringMetadata)
        StringMetadataOrBuilder {
      private StringMetadata() {
      }
      public interface StringAndMd5sumPrefixOrBuilder extends
          // @@protoc_insertion_point(interface_extends:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
          com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <pre>
         * The string value's md5sum prefix.
         * </pre>
         *
         * <code>optional uint64 value_md5_prefix = 2;</code>
         * @return Whether the valueMd5Prefix field is set.
         */
        boolean hasValueMd5Prefix();
        /**
         * <pre>
         * The string value's md5sum prefix.
         * </pre>
         *
         * <code>optional uint64 value_md5_prefix = 2;</code>
         * @return The valueMd5Prefix.
         */
        long getValueMd5Prefix();
      }
      /**
       * <pre>
       * The string value was field 1 and has been intentionally left out.
       * </pre>
       *
       * Protobuf type {@code metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix}
       */
      public  static final class StringAndMd5sumPrefix extends
          com.google.protobuf.GeneratedMessageLite<
              StringAndMd5sumPrefix, StringAndMd5sumPrefix.Builder> implements
          // @@protoc_insertion_point(message_implements:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
          StringAndMd5sumPrefixOrBuilder {
        private StringAndMd5sumPrefix() {
        }
        private int bitField0_;
        public static final int VALUE_MD5_PREFIX_FIELD_NUMBER = 2;
        private long valueMd5Prefix_;
        /**
         * <pre>
         * The string value's md5sum prefix.
         * </pre>
         *
         * <code>optional uint64 value_md5_prefix = 2;</code>
         * @return Whether the valueMd5Prefix field is set.
         */
        @java.lang.Override
        public boolean hasValueMd5Prefix() {
          return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <pre>
         * The string value's md5sum prefix.
         * </pre>
         *
         * <code>optional uint64 value_md5_prefix = 2;</code>
         * @return The valueMd5Prefix.
         */
        @java.lang.Override
        public long getValueMd5Prefix() {
          return valueMd5Prefix_;
        }
        /**
         * <pre>
         * The string value's md5sum prefix.
         * </pre>
         *
         * <code>optional uint64 value_md5_prefix = 2;</code>
         * @param value The valueMd5Prefix to set.
         */
        private void setValueMd5Prefix(long value) {
          bitField0_ |= 0x00000001;
          valueMd5Prefix_ = value;
        }
        /**
         * <pre>
         * The string value's md5sum prefix.
         * </pre>
         *
         * <code>optional uint64 value_md5_prefix = 2;</code>
         */
        private void clearValueMd5Prefix() {
          bitField0_ = (bitField0_ & ~0x00000001);
          valueMd5Prefix_ = 0L;
        }

        public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return com.google.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, data);
        }
        public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return com.google.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, data, extensionRegistry);
        }
        public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return com.google.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, data);
        }
        public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return com.google.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, data, extensionRegistry);
        }
        public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return com.google.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, data);
        }
        public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return com.google.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, data, extensionRegistry);
        }
        public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, input);
        }
        public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, input, extensionRegistry);
        }
        public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }
        public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }
        public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, input);
        }
        public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageLite.parseFrom(
              DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
          return (Builder) DEFAULT_INSTANCE.createBuilder();
        }
        public static Builder newBuilder(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix prototype) {
          return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
        }

        /**
         * <pre>
         * The string value was field 1 and has been intentionally left out.
         * </pre>
         *
         * Protobuf type {@code metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageLite.Builder<
              org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix, Builder> implements
            // @@protoc_insertion_point(builder_implements:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefixOrBuilder {
          // Construct using org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix.newBuilder()
          private Builder() {
            super(DEFAULT_INSTANCE);
          }


          /**
           * <pre>
           * The string value's md5sum prefix.
           * </pre>
           *
           * <code>optional uint64 value_md5_prefix = 2;</code>
           * @return Whether the valueMd5Prefix field is set.
           */
          @java.lang.Override
          public boolean hasValueMd5Prefix() {
            return instance.hasValueMd5Prefix();
          }
          /**
           * <pre>
           * The string value's md5sum prefix.
           * </pre>
           *
           * <code>optional uint64 value_md5_prefix = 2;</code>
           * @return The valueMd5Prefix.
           */
          @java.lang.Override
          public long getValueMd5Prefix() {
            return instance.getValueMd5Prefix();
          }
          /**
           * <pre>
           * The string value's md5sum prefix.
           * </pre>
           *
           * <code>optional uint64 value_md5_prefix = 2;</code>
           * @param value The valueMd5Prefix to set.
           * @return This builder for chaining.
           */
          public Builder setValueMd5Prefix(long value) {
            copyOnWrite();
            instance.setValueMd5Prefix(value);
            return this;
          }
          /**
           * <pre>
           * The string value's md5sum prefix.
           * </pre>
           *
           * <code>optional uint64 value_md5_prefix = 2;</code>
           * @return This builder for chaining.
           */
          public Builder clearValueMd5Prefix() {
            copyOnWrite();
            instance.clearValueMd5Prefix();
            return this;
          }

          // @@protoc_insertion_point(builder_scope:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
        }
        @java.lang.Override
        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
            com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
            java.lang.Object arg0, java.lang.Object arg1) {
          switch (method) {
            case NEW_MUTABLE_INSTANCE: {
              return new org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix();
            }
            case NEW_BUILDER: {
              return new Builder();
            }
            case BUILD_MESSAGE_INFO: {
                java.lang.Object[] objects = new java.lang.Object[] {
                  "bitField0_",
                  "valueMd5Prefix_",
                };
                java.lang.String info =
                    "\u0001\u0001\u0000\u0001\u0002\u0002\u0001\u0000\u0000\u0000\u0002\u1003\u0000";
                return newMessageInfo(DEFAULT_INSTANCE, info, objects);
            }
            // fall through
            case GET_DEFAULT_INSTANCE: {
              return DEFAULT_INSTANCE;
            }
            case GET_PARSER: {
              com.google.protobuf.Parser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix> parser = PARSER;
              if (parser == null) {
                synchronized (org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix.class) {
                  parser = PARSER;
                  if (parser == null) {
                    parser =
                        new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix>(
                            DEFAULT_INSTANCE);
                    PARSER = parser;
                  }
                }
              }
              return parser;
          }
          case GET_MEMOIZED_IS_INITIALIZED: {
            return (byte) 1;
          }
          case SET_MEMOIZED_IS_INITIALIZED: {
            return null;
          }
          }
          throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix)
        private static final org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix DEFAULT_INSTANCE;
        static {
          StringAndMd5sumPrefix defaultInstance = new StringAndMd5sumPrefix();
          // New instances are implicitly immutable so no need to make
          // immutable.
          DEFAULT_INSTANCE = defaultInstance;
          com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
            StringAndMd5sumPrefix.class, defaultInstance);
        }

        public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<StringAndMd5sumPrefix> PARSER;

        public static com.google.protobuf.Parser<StringAndMd5sumPrefix> parser() {
          return DEFAULT_INSTANCE.getParserForType();
        }
      }

      private int bitField0_;
      public static final int PERF_COMMAND_LINE_WHOLE_FIELD_NUMBER = 8;
      private org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perfCommandLineWhole_;
      /**
       * <pre>
       * The command line stored as a single string.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;</code>
       */
      @java.lang.Override
      public boolean hasPerfCommandLineWhole() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The command line stored as a single string.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix getPerfCommandLineWhole() {
        return perfCommandLineWhole_ == null ? org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix.getDefaultInstance() : perfCommandLineWhole_;
      }
      /**
       * <pre>
       * The command line stored as a single string.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;</code>
       */
      private void setPerfCommandLineWhole(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix value) {
        value.getClass();
  perfCommandLineWhole_ = value;
        bitField0_ |= 0x00000001;
        }
      /**
       * <pre>
       * The command line stored as a single string.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;</code>
       */
      @java.lang.SuppressWarnings({"ReferenceEquality"})
      private void mergePerfCommandLineWhole(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix value) {
        value.getClass();
  if (perfCommandLineWhole_ != null &&
            perfCommandLineWhole_ != org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix.getDefaultInstance()) {
          perfCommandLineWhole_ =
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix.newBuilder(perfCommandLineWhole_).mergeFrom(value).buildPartial();
        } else {
          perfCommandLineWhole_ = value;
        }
        bitField0_ |= 0x00000001;
      }
      /**
       * <pre>
       * The command line stored as a single string.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;</code>
       */
      private void clearPerfCommandLineWhole() {  perfCommandLineWhole_ = null;
        bitField0_ = (bitField0_ & ~0x00000001);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code metrics.PerfDataProto.StringMetadata}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata, Builder> implements
          // @@protoc_insertion_point(builder_implements:metrics.PerfDataProto.StringMetadata)
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadataOrBuilder {
        // Construct using org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * The command line stored as a single string.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;</code>
         */
        @java.lang.Override
        public boolean hasPerfCommandLineWhole() {
          return instance.hasPerfCommandLineWhole();
        }
        /**
         * <pre>
         * The command line stored as a single string.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;</code>
         */
        @java.lang.Override
        public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix getPerfCommandLineWhole() {
          return instance.getPerfCommandLineWhole();
        }
        /**
         * <pre>
         * The command line stored as a single string.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;</code>
         */
        public Builder setPerfCommandLineWhole(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix value) {
          copyOnWrite();
          instance.setPerfCommandLineWhole(value);
          return this;
          }
        /**
         * <pre>
         * The command line stored as a single string.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;</code>
         */
        public Builder setPerfCommandLineWhole(
            org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix.Builder builderForValue) {
          copyOnWrite();
          instance.setPerfCommandLineWhole(builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * The command line stored as a single string.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;</code>
         */
        public Builder mergePerfCommandLineWhole(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.StringAndMd5sumPrefix value) {
          copyOnWrite();
          instance.mergePerfCommandLineWhole(value);
          return this;
        }
        /**
         * <pre>
         * The command line stored as a single string.
         * </pre>
         *
         * <code>optional .metrics.PerfDataProto.StringMetadata.StringAndMd5sumPrefix perf_command_line_whole = 8;</code>
         */
        public Builder clearPerfCommandLineWhole() {  copyOnWrite();
          instance.clearPerfCommandLineWhole();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:metrics.PerfDataProto.StringMetadata)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "perfCommandLineWhole_",
              };
              java.lang.String info =
                  "\u0001\u0001\u0000\u0001\b\b\u0001\u0000\u0000\u0000\b\u1009\u0000";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:metrics.PerfDataProto.StringMetadata)
      private static final org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata DEFAULT_INSTANCE;
      static {
        StringMetadata defaultInstance = new StringMetadata();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          StringMetadata.class, defaultInstance);
      }

      public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<StringMetadata> PARSER;

      public static com.google.protobuf.Parser<StringMetadata> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    public static final int FILE_ATTRS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr> fileAttrs_;
    /**
     * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr> getFileAttrsList() {
      return fileAttrs_;
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
     */
    public java.util.List<? extends org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttrOrBuilder> 
        getFileAttrsOrBuilderList() {
      return fileAttrs_;
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
     */
    @java.lang.Override
    public int getFileAttrsCount() {
      return fileAttrs_.size();
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
     */
    @java.lang.Override
    public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr getFileAttrs(int index) {
      return fileAttrs_.get(index);
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
     */
    public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttrOrBuilder getFileAttrsOrBuilder(
        int index) {
      return fileAttrs_.get(index);
    }
    private void ensureFileAttrsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr> tmp = fileAttrs_;
      if (!tmp.isModifiable()) {
        fileAttrs_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
     */
    private void setFileAttrs(
        int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr value) {
      value.getClass();
  ensureFileAttrsIsMutable();
      fileAttrs_.set(index, value);
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
     */
    private void addFileAttrs(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr value) {
      value.getClass();
  ensureFileAttrsIsMutable();
      fileAttrs_.add(value);
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
     */
    private void addFileAttrs(
        int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr value) {
      value.getClass();
  ensureFileAttrsIsMutable();
      fileAttrs_.add(index, value);
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
     */
    private void addAllFileAttrs(
        java.lang.Iterable<? extends org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr> values) {
      ensureFileAttrsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fileAttrs_);
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
     */
    private void clearFileAttrs() {
      fileAttrs_ = emptyProtobufList();
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
     */
    private void removeFileAttrs(int index) {
      ensureFileAttrsIsMutable();
      fileAttrs_.remove(index);
    }

    public static final int EVENTS_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent> events_;
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent> getEventsList() {
      return events_;
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
     */
    public java.util.List<? extends org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventOrBuilder> 
        getEventsOrBuilderList() {
      return events_;
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
     */
    @java.lang.Override
    public int getEventsCount() {
      return events_.size();
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
     */
    @java.lang.Override
    public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent getEvents(int index) {
      return events_.get(index);
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
     */
    public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventOrBuilder getEventsOrBuilder(
        int index) {
      return events_.get(index);
    }
    private void ensureEventsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent> tmp = events_;
      if (!tmp.isModifiable()) {
        events_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
     */
    private void setEvents(
        int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent value) {
      value.getClass();
  ensureEventsIsMutable();
      events_.set(index, value);
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
     */
    private void addEvents(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent value) {
      value.getClass();
  ensureEventsIsMutable();
      events_.add(value);
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
     */
    private void addEvents(
        int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent value) {
      value.getClass();
  ensureEventsIsMutable();
      events_.add(index, value);
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
     */
    private void addAllEvents(
        java.lang.Iterable<? extends org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent> values) {
      ensureEventsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, events_);
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
     */
    private void clearEvents() {
      events_ = emptyProtobufList();
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
     */
    private void removeEvents(int index) {
      ensureEventsIsMutable();
      events_.remove(index);
    }

    public static final int EVENT_TYPES_FIELD_NUMBER = 10;
    private com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType> eventTypes_;
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType> getEventTypesList() {
      return eventTypes_;
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
     */
    public java.util.List<? extends org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventTypeOrBuilder> 
        getEventTypesOrBuilderList() {
      return eventTypes_;
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
     */
    @java.lang.Override
    public int getEventTypesCount() {
      return eventTypes_.size();
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
     */
    @java.lang.Override
    public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType getEventTypes(int index) {
      return eventTypes_.get(index);
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
     */
    public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventTypeOrBuilder getEventTypesOrBuilder(
        int index) {
      return eventTypes_.get(index);
    }
    private void ensureEventTypesIsMutable() {
      com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType> tmp = eventTypes_;
      if (!tmp.isModifiable()) {
        eventTypes_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
     */
    private void setEventTypes(
        int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType value) {
      value.getClass();
  ensureEventTypesIsMutable();
      eventTypes_.set(index, value);
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
     */
    private void addEventTypes(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType value) {
      value.getClass();
  ensureEventTypesIsMutable();
      eventTypes_.add(value);
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
     */
    private void addEventTypes(
        int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType value) {
      value.getClass();
  ensureEventTypesIsMutable();
      eventTypes_.add(index, value);
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
     */
    private void addAllEventTypes(
        java.lang.Iterable<? extends org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType> values) {
      ensureEventTypesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, eventTypes_);
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
     */
    private void clearEventTypes() {
      eventTypes_ = emptyProtobufList();
    }
    /**
     * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
     */
    private void removeEventTypes(int index) {
      ensureEventTypesIsMutable();
      eventTypes_.remove(index);
    }

    public static final int TIMESTAMP_SEC_FIELD_NUMBER = 3;
    private long timestampSec_;
    /**
     * <pre>
     * Time when quipper generated this perf data / protobuf, given as seconds
     * since the epoch.
     * </pre>
     *
     * <code>optional uint64 timestamp_sec = 3;</code>
     * @return Whether the timestampSec field is set.
     */
    @java.lang.Override
    public boolean hasTimestampSec() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Time when quipper generated this perf data / protobuf, given as seconds
     * since the epoch.
     * </pre>
     *
     * <code>optional uint64 timestamp_sec = 3;</code>
     * @return The timestampSec.
     */
    @java.lang.Override
    public long getTimestampSec() {
      return timestampSec_;
    }
    /**
     * <pre>
     * Time when quipper generated this perf data / protobuf, given as seconds
     * since the epoch.
     * </pre>
     *
     * <code>optional uint64 timestamp_sec = 3;</code>
     * @param value The timestampSec to set.
     */
    private void setTimestampSec(long value) {
      bitField0_ |= 0x00000001;
      timestampSec_ = value;
    }
    /**
     * <pre>
     * Time when quipper generated this perf data / protobuf, given as seconds
     * since the epoch.
     * </pre>
     *
     * <code>optional uint64 timestamp_sec = 3;</code>
     */
    private void clearTimestampSec() {
      bitField0_ = (bitField0_ & ~0x00000001);
      timestampSec_ = 0L;
    }

    public static final int STATS_FIELD_NUMBER = 4;
    private org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats stats_;
    /**
     * <pre>
     * Records some stats about the serialized perf events.
     * </pre>
     *
     * <code>optional .metrics.PerfDataProto.PerfEventStats stats = 4;</code>
     */
    @java.lang.Override
    public boolean hasStats() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Records some stats about the serialized perf events.
     * </pre>
     *
     * <code>optional .metrics.PerfDataProto.PerfEventStats stats = 4;</code>
     */
    @java.lang.Override
    public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats getStats() {
      return stats_ == null ? org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats.getDefaultInstance() : stats_;
    }
    /**
     * <pre>
     * Records some stats about the serialized perf events.
     * </pre>
     *
     * <code>optional .metrics.PerfDataProto.PerfEventStats stats = 4;</code>
     */
    private void setStats(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats value) {
      value.getClass();
  stats_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <pre>
     * Records some stats about the serialized perf events.
     * </pre>
     *
     * <code>optional .metrics.PerfDataProto.PerfEventStats stats = 4;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeStats(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats value) {
      value.getClass();
  if (stats_ != null &&
          stats_ != org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats.getDefaultInstance()) {
        stats_ =
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats.newBuilder(stats_).mergeFrom(value).buildPartial();
      } else {
        stats_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * Records some stats about the serialized perf events.
     * </pre>
     *
     * <code>optional .metrics.PerfDataProto.PerfEventStats stats = 4;</code>
     */
    private void clearStats() {  stats_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int BUILD_IDS_FIELD_NUMBER = 7;
    private com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID> buildIds_;
    /**
     * <pre>
     * Build ID metadata.
     * </pre>
     *
     * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID> getBuildIdsList() {
      return buildIds_;
    }
    /**
     * <pre>
     * Build ID metadata.
     * </pre>
     *
     * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
     */
    public java.util.List<? extends org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildIDOrBuilder> 
        getBuildIdsOrBuilderList() {
      return buildIds_;
    }
    /**
     * <pre>
     * Build ID metadata.
     * </pre>
     *
     * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
     */
    @java.lang.Override
    public int getBuildIdsCount() {
      return buildIds_.size();
    }
    /**
     * <pre>
     * Build ID metadata.
     * </pre>
     *
     * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
     */
    @java.lang.Override
    public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID getBuildIds(int index) {
      return buildIds_.get(index);
    }
    /**
     * <pre>
     * Build ID metadata.
     * </pre>
     *
     * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
     */
    public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildIDOrBuilder getBuildIdsOrBuilder(
        int index) {
      return buildIds_.get(index);
    }
    private void ensureBuildIdsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID> tmp = buildIds_;
      if (!tmp.isModifiable()) {
        buildIds_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * Build ID metadata.
     * </pre>
     *
     * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
     */
    private void setBuildIds(
        int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID value) {
      value.getClass();
  ensureBuildIdsIsMutable();
      buildIds_.set(index, value);
    }
    /**
     * <pre>
     * Build ID metadata.
     * </pre>
     *
     * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
     */
    private void addBuildIds(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID value) {
      value.getClass();
  ensureBuildIdsIsMutable();
      buildIds_.add(value);
    }
    /**
     * <pre>
     * Build ID metadata.
     * </pre>
     *
     * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
     */
    private void addBuildIds(
        int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID value) {
      value.getClass();
  ensureBuildIdsIsMutable();
      buildIds_.add(index, value);
    }
    /**
     * <pre>
     * Build ID metadata.
     * </pre>
     *
     * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
     */
    private void addAllBuildIds(
        java.lang.Iterable<? extends org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID> values) {
      ensureBuildIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, buildIds_);
    }
    /**
     * <pre>
     * Build ID metadata.
     * </pre>
     *
     * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
     */
    private void clearBuildIds() {
      buildIds_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Build ID metadata.
     * </pre>
     *
     * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
     */
    private void removeBuildIds(int index) {
      ensureBuildIdsIsMutable();
      buildIds_.remove(index);
    }

    public static final int STRING_METADATA_FIELD_NUMBER = 13;
    private org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata stringMetadata_;
    /**
     * <pre>
     * All the string metadata from the perf data file.
     * </pre>
     *
     * <code>optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;</code>
     */
    @java.lang.Override
    public boolean hasStringMetadata() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * All the string metadata from the perf data file.
     * </pre>
     *
     * <code>optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;</code>
     */
    @java.lang.Override
    public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata getStringMetadata() {
      return stringMetadata_ == null ? org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.getDefaultInstance() : stringMetadata_;
    }
    /**
     * <pre>
     * All the string metadata from the perf data file.
     * </pre>
     *
     * <code>optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;</code>
     */
    private void setStringMetadata(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata value) {
      value.getClass();
  stringMetadata_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <pre>
     * All the string metadata from the perf data file.
     * </pre>
     *
     * <code>optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeStringMetadata(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata value) {
      value.getClass();
  if (stringMetadata_ != null &&
          stringMetadata_ != org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.getDefaultInstance()) {
        stringMetadata_ =
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.newBuilder(stringMetadata_).mergeFrom(value).buildPartial();
      } else {
        stringMetadata_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <pre>
     * All the string metadata from the perf data file.
     * </pre>
     *
     * <code>optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;</code>
     */
    private void clearStringMetadata() {  stringMetadata_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.metrics.PerfDataProtos.PerfDataProto prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Please do not modify this protobuf directly, except to mirror the upstream
     * version found here:
     * https://github.com/google/perf_data_converter/blob/master/src/quipper/perf_data.proto
     * with some fields omitted for privacy reasons. Because it is a read-only copy
     * of the upstream protobuf, "Next tag:" comments are also absent.
     * </pre>
     *
     * Protobuf type {@code metrics.PerfDataProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto, Builder> implements
        // @@protoc_insertion_point(builder_implements:metrics.PerfDataProto)
        org.chromium.components.metrics.PerfDataProtos.PerfDataProtoOrBuilder {
      // Construct using org.chromium.components.metrics.PerfDataProtos.PerfDataProto.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
       */
      @java.lang.Override
      public java.util.List<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr> getFileAttrsList() {
        return java.util.Collections.unmodifiableList(
            instance.getFileAttrsList());
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
       */
      @java.lang.Override
      public int getFileAttrsCount() {
        return instance.getFileAttrsCount();
      }/**
       * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr getFileAttrs(int index) {
        return instance.getFileAttrs(index);
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
       */
      public Builder setFileAttrs(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr value) {
        copyOnWrite();
        instance.setFileAttrs(index, value);
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
       */
      public Builder setFileAttrs(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr.Builder builderForValue) {
        copyOnWrite();
        instance.setFileAttrs(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
       */
      public Builder addFileAttrs(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr value) {
        copyOnWrite();
        instance.addFileAttrs(value);
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
       */
      public Builder addFileAttrs(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr value) {
        copyOnWrite();
        instance.addFileAttrs(index, value);
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
       */
      public Builder addFileAttrs(
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr.Builder builderForValue) {
        copyOnWrite();
        instance.addFileAttrs(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
       */
      public Builder addFileAttrs(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr.Builder builderForValue) {
        copyOnWrite();
        instance.addFileAttrs(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
       */
      public Builder addAllFileAttrs(
          java.lang.Iterable<? extends org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr> values) {
        copyOnWrite();
        instance.addAllFileAttrs(values);
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
       */
      public Builder clearFileAttrs() {
        copyOnWrite();
        instance.clearFileAttrs();
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfFileAttr file_attrs = 1;</code>
       */
      public Builder removeFileAttrs(int index) {
        copyOnWrite();
        instance.removeFileAttrs(index);
        return this;
      }

      /**
       * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
       */
      @java.lang.Override
      public java.util.List<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent> getEventsList() {
        return java.util.Collections.unmodifiableList(
            instance.getEventsList());
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
       */
      @java.lang.Override
      public int getEventsCount() {
        return instance.getEventsCount();
      }/**
       * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent getEvents(int index) {
        return instance.getEvents(index);
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
       */
      public Builder setEvents(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent value) {
        copyOnWrite();
        instance.setEvents(index, value);
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
       */
      public Builder setEvents(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent.Builder builderForValue) {
        copyOnWrite();
        instance.setEvents(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
       */
      public Builder addEvents(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent value) {
        copyOnWrite();
        instance.addEvents(value);
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
       */
      public Builder addEvents(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent value) {
        copyOnWrite();
        instance.addEvents(index, value);
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
       */
      public Builder addEvents(
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent.Builder builderForValue) {
        copyOnWrite();
        instance.addEvents(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
       */
      public Builder addEvents(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent.Builder builderForValue) {
        copyOnWrite();
        instance.addEvents(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
       */
      public Builder addAllEvents(
          java.lang.Iterable<? extends org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent> values) {
        copyOnWrite();
        instance.addAllEvents(values);
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
       */
      public Builder clearEvents() {
        copyOnWrite();
        instance.clearEvents();
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEvent events = 2;</code>
       */
      public Builder removeEvents(int index) {
        copyOnWrite();
        instance.removeEvents(index);
        return this;
      }

      /**
       * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
       */
      @java.lang.Override
      public java.util.List<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType> getEventTypesList() {
        return java.util.Collections.unmodifiableList(
            instance.getEventTypesList());
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
       */
      @java.lang.Override
      public int getEventTypesCount() {
        return instance.getEventTypesCount();
      }/**
       * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType getEventTypes(int index) {
        return instance.getEventTypes(index);
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
       */
      public Builder setEventTypes(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType value) {
        copyOnWrite();
        instance.setEventTypes(index, value);
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
       */
      public Builder setEventTypes(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType.Builder builderForValue) {
        copyOnWrite();
        instance.setEventTypes(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
       */
      public Builder addEventTypes(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType value) {
        copyOnWrite();
        instance.addEventTypes(value);
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
       */
      public Builder addEventTypes(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType value) {
        copyOnWrite();
        instance.addEventTypes(index, value);
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
       */
      public Builder addEventTypes(
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType.Builder builderForValue) {
        copyOnWrite();
        instance.addEventTypes(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
       */
      public Builder addEventTypes(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType.Builder builderForValue) {
        copyOnWrite();
        instance.addEventTypes(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
       */
      public Builder addAllEventTypes(
          java.lang.Iterable<? extends org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType> values) {
        copyOnWrite();
        instance.addAllEventTypes(values);
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
       */
      public Builder clearEventTypes() {
        copyOnWrite();
        instance.clearEventTypes();
        return this;
      }
      /**
       * <code>repeated .metrics.PerfDataProto.PerfEventType event_types = 10;</code>
       */
      public Builder removeEventTypes(int index) {
        copyOnWrite();
        instance.removeEventTypes(index);
        return this;
      }

      /**
       * <pre>
       * Time when quipper generated this perf data / protobuf, given as seconds
       * since the epoch.
       * </pre>
       *
       * <code>optional uint64 timestamp_sec = 3;</code>
       * @return Whether the timestampSec field is set.
       */
      @java.lang.Override
      public boolean hasTimestampSec() {
        return instance.hasTimestampSec();
      }
      /**
       * <pre>
       * Time when quipper generated this perf data / protobuf, given as seconds
       * since the epoch.
       * </pre>
       *
       * <code>optional uint64 timestamp_sec = 3;</code>
       * @return The timestampSec.
       */
      @java.lang.Override
      public long getTimestampSec() {
        return instance.getTimestampSec();
      }
      /**
       * <pre>
       * Time when quipper generated this perf data / protobuf, given as seconds
       * since the epoch.
       * </pre>
       *
       * <code>optional uint64 timestamp_sec = 3;</code>
       * @param value The timestampSec to set.
       * @return This builder for chaining.
       */
      public Builder setTimestampSec(long value) {
        copyOnWrite();
        instance.setTimestampSec(value);
        return this;
      }
      /**
       * <pre>
       * Time when quipper generated this perf data / protobuf, given as seconds
       * since the epoch.
       * </pre>
       *
       * <code>optional uint64 timestamp_sec = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestampSec() {
        copyOnWrite();
        instance.clearTimestampSec();
        return this;
      }

      /**
       * <pre>
       * Records some stats about the serialized perf events.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.PerfEventStats stats = 4;</code>
       */
      @java.lang.Override
      public boolean hasStats() {
        return instance.hasStats();
      }
      /**
       * <pre>
       * Records some stats about the serialized perf events.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.PerfEventStats stats = 4;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats getStats() {
        return instance.getStats();
      }
      /**
       * <pre>
       * Records some stats about the serialized perf events.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.PerfEventStats stats = 4;</code>
       */
      public Builder setStats(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats value) {
        copyOnWrite();
        instance.setStats(value);
        return this;
        }
      /**
       * <pre>
       * Records some stats about the serialized perf events.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.PerfEventStats stats = 4;</code>
       */
      public Builder setStats(
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats.Builder builderForValue) {
        copyOnWrite();
        instance.setStats(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Records some stats about the serialized perf events.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.PerfEventStats stats = 4;</code>
       */
      public Builder mergeStats(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventStats value) {
        copyOnWrite();
        instance.mergeStats(value);
        return this;
      }
      /**
       * <pre>
       * Records some stats about the serialized perf events.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.PerfEventStats stats = 4;</code>
       */
      public Builder clearStats() {  copyOnWrite();
        instance.clearStats();
        return this;
      }

      /**
       * <pre>
       * Build ID metadata.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
       */
      @java.lang.Override
      public java.util.List<org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID> getBuildIdsList() {
        return java.util.Collections.unmodifiableList(
            instance.getBuildIdsList());
      }
      /**
       * <pre>
       * Build ID metadata.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
       */
      @java.lang.Override
      public int getBuildIdsCount() {
        return instance.getBuildIdsCount();
      }/**
       * <pre>
       * Build ID metadata.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID getBuildIds(int index) {
        return instance.getBuildIds(index);
      }
      /**
       * <pre>
       * Build ID metadata.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
       */
      public Builder setBuildIds(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID value) {
        copyOnWrite();
        instance.setBuildIds(index, value);
        return this;
      }
      /**
       * <pre>
       * Build ID metadata.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
       */
      public Builder setBuildIds(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID.Builder builderForValue) {
        copyOnWrite();
        instance.setBuildIds(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Build ID metadata.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
       */
      public Builder addBuildIds(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID value) {
        copyOnWrite();
        instance.addBuildIds(value);
        return this;
      }
      /**
       * <pre>
       * Build ID metadata.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
       */
      public Builder addBuildIds(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID value) {
        copyOnWrite();
        instance.addBuildIds(index, value);
        return this;
      }
      /**
       * <pre>
       * Build ID metadata.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
       */
      public Builder addBuildIds(
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID.Builder builderForValue) {
        copyOnWrite();
        instance.addBuildIds(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Build ID metadata.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
       */
      public Builder addBuildIds(
          int index, org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID.Builder builderForValue) {
        copyOnWrite();
        instance.addBuildIds(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Build ID metadata.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
       */
      public Builder addAllBuildIds(
          java.lang.Iterable<? extends org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID> values) {
        copyOnWrite();
        instance.addAllBuildIds(values);
        return this;
      }
      /**
       * <pre>
       * Build ID metadata.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
       */
      public Builder clearBuildIds() {
        copyOnWrite();
        instance.clearBuildIds();
        return this;
      }
      /**
       * <pre>
       * Build ID metadata.
       * </pre>
       *
       * <code>repeated .metrics.PerfDataProto.PerfBuildID build_ids = 7;</code>
       */
      public Builder removeBuildIds(int index) {
        copyOnWrite();
        instance.removeBuildIds(index);
        return this;
      }

      /**
       * <pre>
       * All the string metadata from the perf data file.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;</code>
       */
      @java.lang.Override
      public boolean hasStringMetadata() {
        return instance.hasStringMetadata();
      }
      /**
       * <pre>
       * All the string metadata from the perf data file.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata getStringMetadata() {
        return instance.getStringMetadata();
      }
      /**
       * <pre>
       * All the string metadata from the perf data file.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;</code>
       */
      public Builder setStringMetadata(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata value) {
        copyOnWrite();
        instance.setStringMetadata(value);
        return this;
        }
      /**
       * <pre>
       * All the string metadata from the perf data file.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;</code>
       */
      public Builder setStringMetadata(
          org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata.Builder builderForValue) {
        copyOnWrite();
        instance.setStringMetadata(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * All the string metadata from the perf data file.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;</code>
       */
      public Builder mergeStringMetadata(org.chromium.components.metrics.PerfDataProtos.PerfDataProto.StringMetadata value) {
        copyOnWrite();
        instance.mergeStringMetadata(value);
        return this;
      }
      /**
       * <pre>
       * All the string metadata from the perf data file.
       * </pre>
       *
       * <code>optional .metrics.PerfDataProto.StringMetadata string_metadata = 13;</code>
       */
      public Builder clearStringMetadata() {  copyOnWrite();
        instance.clearStringMetadata();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:metrics.PerfDataProto)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.metrics.PerfDataProtos.PerfDataProto();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "fileAttrs_",
              org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfFileAttr.class,
              "events_",
              org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEvent.class,
              "timestampSec_",
              "stats_",
              "buildIds_",
              org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfBuildID.class,
              "eventTypes_",
              org.chromium.components.metrics.PerfDataProtos.PerfDataProto.PerfEventType.class,
              "stringMetadata_",
            };
            java.lang.String info =
                "\u0001\u0007\u0000\u0001\u0001\r\u0007\u0000\u0004\u0000\u0001\u001b\u0002\u001b" +
                "\u0003\u1003\u0000\u0004\u1009\u0001\u0007\u001b\n\u001b\r\u1009\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.metrics.PerfDataProtos.PerfDataProto.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.metrics.PerfDataProtos.PerfDataProto>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:metrics.PerfDataProto)
    private static final org.chromium.components.metrics.PerfDataProtos.PerfDataProto DEFAULT_INSTANCE;
    static {
      PerfDataProto defaultInstance = new PerfDataProto();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        PerfDataProto.class, defaultInstance);
    }

    public static org.chromium.components.metrics.PerfDataProtos.PerfDataProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PerfDataProto> PARSER;

    public static com.google.protobuf.Parser<PerfDataProto> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
