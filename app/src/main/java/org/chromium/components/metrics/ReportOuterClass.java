// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukm/report.proto

package org.chromium.components.metrics;

public final class ReportOuterClass {
  private ReportOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface ReportOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ukm.Report)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * A unique identifier for a Chrome install. This ID should be used only
     * in UKM reports, and not linked to any other data sources.
     * </pre>
     *
     * <code>optional fixed64 client_id = 1;</code>
     * @return Whether the clientId field is set.
     */
    boolean hasClientId();
    /**
     * <pre>
     * A unique identifier for a Chrome install. This ID should be used only
     * in UKM reports, and not linked to any other data sources.
     * </pre>
     *
     * <code>optional fixed64 client_id = 1;</code>
     * @return The clientId.
     */
    long getClientId();

    /**
     * <pre>
     * The product corresponding to this log. Note: The default value is Chrome,
     * so Chrome products will not transmit this field.
     * </pre>
     *
     * <code>optional .metrics.ChromeUserMetricsExtension.Product product = 12 [default = CHROME];</code>
     * @return Whether the product field is set.
     */
    boolean hasProduct();
    /**
     * <pre>
     * The product corresponding to this log. Note: The default value is Chrome,
     * so Chrome products will not transmit this field.
     * </pre>
     *
     * <code>optional .metrics.ChromeUserMetricsExtension.Product product = 12 [default = CHROME];</code>
     * @return The product.
     */
    org.chromium.components.metrics.ChromeUserMetricsExtensionProtos.ChromeUserMetricsExtension.Product getProduct();

    /**
     * <pre>
     * The session id for this record. This id is unique within a
     * particular Chrome session. The client keeps track of the session id
     * and sends it with each record. The session id is simply an integer
     * that is incremented each time the user relaunches Chrome.
     * </pre>
     *
     * <code>optional int32 session_id = 5;</code>
     * @return Whether the sessionId field is set.
     */
    boolean hasSessionId();
    /**
     * <pre>
     * The session id for this record. This id is unique within a
     * particular Chrome session. The client keeps track of the session id
     * and sends it with each record. The session id is simply an integer
     * that is incremented each time the user relaunches Chrome.
     * </pre>
     *
     * <code>optional int32 session_id = 5;</code>
     * @return The sessionId.
     */
    int getSessionId();

    /**
     * <pre>
     * The report id for this record.  Report ids increase sequentially from
     * one within a session.
     * </pre>
     *
     * <code>optional int32 report_id = 6;</code>
     * @return Whether the reportId field is set.
     */
    boolean hasReportId();
    /**
     * <pre>
     * The report id for this record.  Report ids increase sequentially from
     * one within a session.
     * </pre>
     *
     * <code>optional int32 report_id = 6;</code>
     * @return The reportId.
     */
    int getReportId();

    /**
     * <pre>
     * Indicates that recording was continuously enabled for the period of time
     * captured in this report.
     * </pre>
     *
     * <code>optional bool is_continuous = 8;</code>
     * @return Whether the isContinuous field is set.
     */
    boolean hasIsContinuous();
    /**
     * <pre>
     * Indicates that recording was continuously enabled for the period of time
     * captured in this report.
     * </pre>
     *
     * <code>optional bool is_continuous = 8;</code>
     * @return The isContinuous.
     */
    boolean getIsContinuous();

    /**
     * <code>optional .ukm.Report.LogRotationReason log_rotation_reason = 9;</code>
     * @return Whether the logRotationReason field is set.
     */
    boolean hasLogRotationReason();
    /**
     * <code>optional .ukm.Report.LogRotationReason log_rotation_reason = 9;</code>
     * @return The logRotationReason.
     */
    org.chromium.components.metrics.ReportOuterClass.Report.LogRotationReason getLogRotationReason();

    /**
     * <pre>
     * Information about the user's browser and system configuration.
     * </pre>
     *
     * <code>optional .metrics.SystemProfileProto system_profile = 2;</code>
     * @return Whether the systemProfile field is set.
     */
    boolean hasSystemProfile();
    /**
     * <pre>
     * Information about the user's browser and system configuration.
     * </pre>
     *
     * <code>optional .metrics.SystemProfileProto system_profile = 2;</code>
     * @return The systemProfile.
     */
    org.chromium.components.metrics.SystemProfileProtos.SystemProfileProto getSystemProfile();

    /**
     * <pre>
     * The user's demographic information that consists of their noised birth year
     * and gender. This data is made available to Chrome via syncable priority
     * pref, so is only available if the user is signed-in and syncing.
     * </pre>
     *
     * <code>optional .metrics.UserDemographicsProto user_demographics = 11;</code>
     * @return Whether the userDemographics field is set.
     */
    boolean hasUserDemographics();
    /**
     * <pre>
     * The user's demographic information that consists of their noised birth year
     * and gender. This data is made available to Chrome via syncable priority
     * pref, so is only available if the user is signed-in and syncing.
     * </pre>
     *
     * <code>optional .metrics.UserDemographicsProto user_demographics = 11;</code>
     * @return The userDemographics.
     */
    org.chromium.components.metrics.UserDemographicsProtos.UserDemographicsProto getUserDemographics();

    /**
     * <pre>
     * A list of the top-level navigations that data was collected for.
     * </pre>
     *
     * <code>repeated .ukm.Source sources = 3;</code>
     */
    java.util.List<org.chromium.components.metrics.SourceOuterClass.Source> 
        getSourcesList();
    /**
     * <pre>
     * A list of the top-level navigations that data was collected for.
     * </pre>
     *
     * <code>repeated .ukm.Source sources = 3;</code>
     */
    org.chromium.components.metrics.SourceOuterClass.Source getSources(int index);
    /**
     * <pre>
     * A list of the top-level navigations that data was collected for.
     * </pre>
     *
     * <code>repeated .ukm.Source sources = 3;</code>
     */
    int getSourcesCount();

    /**
     * <code>optional .ukm.Report.SourceCounts source_counts = 10;</code>
     * @return Whether the sourceCounts field is set.
     */
    boolean hasSourceCounts();
    /**
     * <code>optional .ukm.Report.SourceCounts source_counts = 10;</code>
     * @return The sourceCounts.
     */
    org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts getSourceCounts();

    /**
     * <pre>
     * List of Entries containing the main UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Entry entries = 4;</code>
     */
    java.util.List<org.chromium.components.metrics.EntryOuterClass.Entry> 
        getEntriesList();
    /**
     * <pre>
     * List of Entries containing the main UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Entry entries = 4;</code>
     */
    org.chromium.components.metrics.EntryOuterClass.Entry getEntries(int index);
    /**
     * <pre>
     * List of Entries containing the main UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Entry entries = 4;</code>
     */
    int getEntriesCount();

    /**
     * <pre>
     * List of Entries containing aggregated UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Aggregate aggregates = 7;</code>
     */
    java.util.List<org.chromium.components.metrics.AggregateOuterClass.Aggregate> 
        getAggregatesList();
    /**
     * <pre>
     * List of Entries containing aggregated UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Aggregate aggregates = 7;</code>
     */
    org.chromium.components.metrics.AggregateOuterClass.Aggregate getAggregates(int index);
    /**
     * <pre>
     * List of Entries containing aggregated UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Aggregate aggregates = 7;</code>
     */
    int getAggregatesCount();
  }
  /**
   * <pre>
   * This is the message type sent from Chrome to the UKM collector.
   * Next tag: 13
   * </pre>
   *
   * Protobuf type {@code ukm.Report}
   */
  public  static final class Report extends
      com.google.protobuf.GeneratedMessageLite<
          Report, Report.Builder> implements
      // @@protoc_insertion_point(message_implements:ukm.Report)
      ReportOrBuilder {
    private Report() {
      sources_ = emptyProtobufList();
      entries_ = emptyProtobufList();
      aggregates_ = emptyProtobufList();
    }
    /**
     * Protobuf enum {@code ukm.Report.LogRotationReason}
     */
    public enum LogRotationReason
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNKNOWN = 0;</code>
       */
      UNKNOWN(0),
      /**
       * <code>SCHEDULED_ROTATION = 1;</code>
       */
      SCHEDULED_ROTATION(1),
      /**
       * <code>BACKGROUNDED = 2;</code>
       */
      BACKGROUNDED(2),
      /**
       * <code>SHUTDOWN = 3;</code>
       */
      SHUTDOWN(3),
      ;

      /**
       * <code>UNKNOWN = 0;</code>
       */
      public static final int UNKNOWN_VALUE = 0;
      /**
       * <code>SCHEDULED_ROTATION = 1;</code>
       */
      public static final int SCHEDULED_ROTATION_VALUE = 1;
      /**
       * <code>BACKGROUNDED = 2;</code>
       */
      public static final int BACKGROUNDED_VALUE = 2;
      /**
       * <code>SHUTDOWN = 3;</code>
       */
      public static final int SHUTDOWN_VALUE = 3;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LogRotationReason valueOf(int value) {
        return forNumber(value);
      }

      public static LogRotationReason forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN;
          case 1: return SCHEDULED_ROTATION;
          case 2: return BACKGROUNDED;
          case 3: return SHUTDOWN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LogRotationReason>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          LogRotationReason> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LogRotationReason>() {
              @java.lang.Override
              public LogRotationReason findValueByNumber(int number) {
                return LogRotationReason.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return LogRotationReasonVerifier.INSTANCE;
      }

      private static final class LogRotationReasonVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new LogRotationReasonVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return LogRotationReason.forNumber(number) != null;
              }
            };

      private final int value;

      private LogRotationReason(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:ukm.Report.LogRotationReason)
    }

    public interface SourceCountsOrBuilder extends
        // @@protoc_insertion_point(interface_extends:ukm.Report.SourceCounts)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * Number of unique sources that URLs were observed for. This counts
       * includes sources which were dropped or deferred, but not sources
       * carried over from a previous interval.
       * </pre>
       *
       * <code>optional int32 observed = 1;</code>
       * @return Whether the observed field is set.
       */
      boolean hasObserved();
      /**
       * <pre>
       * Number of unique sources that URLs were observed for. This counts
       * includes sources which were dropped or deferred, but not sources
       * carried over from a previous interval.
       * </pre>
       *
       * <code>optional int32 observed = 1;</code>
       * @return The observed.
       */
      int getObserved();

      /**
       * <pre>
       * Number of navigation sources that URLs were observed for, including
       * sources dropped due to limits.
       * </pre>
       *
       * <code>optional int32 navigation_sources = 2;</code>
       * @return Whether the navigationSources field is set.
       */
      boolean hasNavigationSources();
      /**
       * <pre>
       * Number of navigation sources that URLs were observed for, including
       * sources dropped due to limits.
       * </pre>
       *
       * <code>optional int32 navigation_sources = 2;</code>
       * @return The navigationSources.
       */
      int getNavigationSources();

      /**
       * <pre>
       * Number of sources discarded due to not matching a navigation URL.
       * </pre>
       *
       * <code>optional int32 unmatched_sources = 3;</code>
       * @return Whether the unmatchedSources field is set.
       */
      boolean hasUnmatchedSources();
      /**
       * <pre>
       * Number of sources discarded due to not matching a navigation URL.
       * </pre>
       *
       * <code>optional int32 unmatched_sources = 3;</code>
       * @return The unmatchedSources.
       */
      int getUnmatchedSources();

      /**
       * <pre>
       * Number of sources deferred from a previous interval.
       * </pre>
       *
       * <code>optional int32 carryover_sources = 4;</code>
       * @return Whether the carryoverSources field is set.
       */
      boolean hasCarryoverSources();
      /**
       * <pre>
       * Number of sources deferred from a previous interval.
       * </pre>
       *
       * <code>optional int32 carryover_sources = 4;</code>
       * @return The carryoverSources.
       */
      int getCarryoverSources();

      /**
       * <pre>
       * Number of sources deferred to the next interval. Sources corresponding to
       * opened tabs that could emit more events in the future are kept in memory
       * and deferred to the next interval for inclusion in next reports, up to a
       * max limit on number of sources.
       * </pre>
       *
       * <code>optional int32 deferred_sources = 5;</code>
       * @return Whether the deferredSources field is set.
       */
      boolean hasDeferredSources();
      /**
       * <pre>
       * Number of sources deferred to the next interval. Sources corresponding to
       * opened tabs that could emit more events in the future are kept in memory
       * and deferred to the next interval for inclusion in next reports, up to a
       * max limit on number of sources.
       * </pre>
       *
       * <code>optional int32 deferred_sources = 5;</code>
       * @return The deferredSources.
       */
      int getDeferredSources();

      /**
       * <pre>
       * Number of sources deferred to the next interval due to lack of events.
       * </pre>
       *
       * <code>optional int32 entryless_sources = 6;</code>
       * @return Whether the entrylessSources field is set.
       */
      boolean hasEntrylessSources();
      /**
       * <pre>
       * Number of sources deferred to the next interval due to lack of events.
       * </pre>
       *
       * <code>optional int32 entryless_sources = 6;</code>
       * @return The entrylessSources.
       */
      int getEntrylessSources();

      /**
       * <pre>
       * Time elapsed in seconds from the moment the newest truncated source was
       * created to the moment it was discarded from memory, if pruning happened
       * due to number of sources exceeding the max threshold.
       * </pre>
       *
       * <code>optional int32 pruned_sources_age_seconds = 7;</code>
       * @return Whether the prunedSourcesAgeSeconds field is set.
       */
      boolean hasPrunedSourcesAgeSeconds();
      /**
       * <pre>
       * Time elapsed in seconds from the moment the newest truncated source was
       * created to the moment it was discarded from memory, if pruning happened
       * due to number of sources exceeding the max threshold.
       * </pre>
       *
       * <code>optional int32 pruned_sources_age_seconds = 7;</code>
       * @return The prunedSourcesAgeSeconds.
       */
      int getPrunedSourcesAgeSeconds();
    }
    /**
     * <pre>
     * Counts of different types of sources in this interval, including sources
     * which may not be in the report due to dropping or deferral.
     * </pre>
     *
     * Protobuf type {@code ukm.Report.SourceCounts}
     */
    public  static final class SourceCounts extends
        com.google.protobuf.GeneratedMessageLite<
            SourceCounts, SourceCounts.Builder> implements
        // @@protoc_insertion_point(message_implements:ukm.Report.SourceCounts)
        SourceCountsOrBuilder {
      private SourceCounts() {
      }
      private int bitField0_;
      public static final int OBSERVED_FIELD_NUMBER = 1;
      private int observed_;
      /**
       * <pre>
       * Number of unique sources that URLs were observed for. This counts
       * includes sources which were dropped or deferred, but not sources
       * carried over from a previous interval.
       * </pre>
       *
       * <code>optional int32 observed = 1;</code>
       * @return Whether the observed field is set.
       */
      @java.lang.Override
      public boolean hasObserved() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Number of unique sources that URLs were observed for. This counts
       * includes sources which were dropped or deferred, but not sources
       * carried over from a previous interval.
       * </pre>
       *
       * <code>optional int32 observed = 1;</code>
       * @return The observed.
       */
      @java.lang.Override
      public int getObserved() {
        return observed_;
      }
      /**
       * <pre>
       * Number of unique sources that URLs were observed for. This counts
       * includes sources which were dropped or deferred, but not sources
       * carried over from a previous interval.
       * </pre>
       *
       * <code>optional int32 observed = 1;</code>
       * @param value The observed to set.
       */
      private void setObserved(int value) {
        bitField0_ |= 0x00000001;
        observed_ = value;
      }
      /**
       * <pre>
       * Number of unique sources that URLs were observed for. This counts
       * includes sources which were dropped or deferred, but not sources
       * carried over from a previous interval.
       * </pre>
       *
       * <code>optional int32 observed = 1;</code>
       */
      private void clearObserved() {
        bitField0_ = (bitField0_ & ~0x00000001);
        observed_ = 0;
      }

      public static final int NAVIGATION_SOURCES_FIELD_NUMBER = 2;
      private int navigationSources_;
      /**
       * <pre>
       * Number of navigation sources that URLs were observed for, including
       * sources dropped due to limits.
       * </pre>
       *
       * <code>optional int32 navigation_sources = 2;</code>
       * @return Whether the navigationSources field is set.
       */
      @java.lang.Override
      public boolean hasNavigationSources() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Number of navigation sources that URLs were observed for, including
       * sources dropped due to limits.
       * </pre>
       *
       * <code>optional int32 navigation_sources = 2;</code>
       * @return The navigationSources.
       */
      @java.lang.Override
      public int getNavigationSources() {
        return navigationSources_;
      }
      /**
       * <pre>
       * Number of navigation sources that URLs were observed for, including
       * sources dropped due to limits.
       * </pre>
       *
       * <code>optional int32 navigation_sources = 2;</code>
       * @param value The navigationSources to set.
       */
      private void setNavigationSources(int value) {
        bitField0_ |= 0x00000002;
        navigationSources_ = value;
      }
      /**
       * <pre>
       * Number of navigation sources that URLs were observed for, including
       * sources dropped due to limits.
       * </pre>
       *
       * <code>optional int32 navigation_sources = 2;</code>
       */
      private void clearNavigationSources() {
        bitField0_ = (bitField0_ & ~0x00000002);
        navigationSources_ = 0;
      }

      public static final int UNMATCHED_SOURCES_FIELD_NUMBER = 3;
      private int unmatchedSources_;
      /**
       * <pre>
       * Number of sources discarded due to not matching a navigation URL.
       * </pre>
       *
       * <code>optional int32 unmatched_sources = 3;</code>
       * @return Whether the unmatchedSources field is set.
       */
      @java.lang.Override
      public boolean hasUnmatchedSources() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Number of sources discarded due to not matching a navigation URL.
       * </pre>
       *
       * <code>optional int32 unmatched_sources = 3;</code>
       * @return The unmatchedSources.
       */
      @java.lang.Override
      public int getUnmatchedSources() {
        return unmatchedSources_;
      }
      /**
       * <pre>
       * Number of sources discarded due to not matching a navigation URL.
       * </pre>
       *
       * <code>optional int32 unmatched_sources = 3;</code>
       * @param value The unmatchedSources to set.
       */
      private void setUnmatchedSources(int value) {
        bitField0_ |= 0x00000004;
        unmatchedSources_ = value;
      }
      /**
       * <pre>
       * Number of sources discarded due to not matching a navigation URL.
       * </pre>
       *
       * <code>optional int32 unmatched_sources = 3;</code>
       */
      private void clearUnmatchedSources() {
        bitField0_ = (bitField0_ & ~0x00000004);
        unmatchedSources_ = 0;
      }

      public static final int CARRYOVER_SOURCES_FIELD_NUMBER = 4;
      private int carryoverSources_;
      /**
       * <pre>
       * Number of sources deferred from a previous interval.
       * </pre>
       *
       * <code>optional int32 carryover_sources = 4;</code>
       * @return Whether the carryoverSources field is set.
       */
      @java.lang.Override
      public boolean hasCarryoverSources() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Number of sources deferred from a previous interval.
       * </pre>
       *
       * <code>optional int32 carryover_sources = 4;</code>
       * @return The carryoverSources.
       */
      @java.lang.Override
      public int getCarryoverSources() {
        return carryoverSources_;
      }
      /**
       * <pre>
       * Number of sources deferred from a previous interval.
       * </pre>
       *
       * <code>optional int32 carryover_sources = 4;</code>
       * @param value The carryoverSources to set.
       */
      private void setCarryoverSources(int value) {
        bitField0_ |= 0x00000008;
        carryoverSources_ = value;
      }
      /**
       * <pre>
       * Number of sources deferred from a previous interval.
       * </pre>
       *
       * <code>optional int32 carryover_sources = 4;</code>
       */
      private void clearCarryoverSources() {
        bitField0_ = (bitField0_ & ~0x00000008);
        carryoverSources_ = 0;
      }

      public static final int DEFERRED_SOURCES_FIELD_NUMBER = 5;
      private int deferredSources_;
      /**
       * <pre>
       * Number of sources deferred to the next interval. Sources corresponding to
       * opened tabs that could emit more events in the future are kept in memory
       * and deferred to the next interval for inclusion in next reports, up to a
       * max limit on number of sources.
       * </pre>
       *
       * <code>optional int32 deferred_sources = 5;</code>
       * @return Whether the deferredSources field is set.
       */
      @java.lang.Override
      public boolean hasDeferredSources() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Number of sources deferred to the next interval. Sources corresponding to
       * opened tabs that could emit more events in the future are kept in memory
       * and deferred to the next interval for inclusion in next reports, up to a
       * max limit on number of sources.
       * </pre>
       *
       * <code>optional int32 deferred_sources = 5;</code>
       * @return The deferredSources.
       */
      @java.lang.Override
      public int getDeferredSources() {
        return deferredSources_;
      }
      /**
       * <pre>
       * Number of sources deferred to the next interval. Sources corresponding to
       * opened tabs that could emit more events in the future are kept in memory
       * and deferred to the next interval for inclusion in next reports, up to a
       * max limit on number of sources.
       * </pre>
       *
       * <code>optional int32 deferred_sources = 5;</code>
       * @param value The deferredSources to set.
       */
      private void setDeferredSources(int value) {
        bitField0_ |= 0x00000010;
        deferredSources_ = value;
      }
      /**
       * <pre>
       * Number of sources deferred to the next interval. Sources corresponding to
       * opened tabs that could emit more events in the future are kept in memory
       * and deferred to the next interval for inclusion in next reports, up to a
       * max limit on number of sources.
       * </pre>
       *
       * <code>optional int32 deferred_sources = 5;</code>
       */
      private void clearDeferredSources() {
        bitField0_ = (bitField0_ & ~0x00000010);
        deferredSources_ = 0;
      }

      public static final int ENTRYLESS_SOURCES_FIELD_NUMBER = 6;
      private int entrylessSources_;
      /**
       * <pre>
       * Number of sources deferred to the next interval due to lack of events.
       * </pre>
       *
       * <code>optional int32 entryless_sources = 6;</code>
       * @return Whether the entrylessSources field is set.
       */
      @java.lang.Override
      public boolean hasEntrylessSources() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Number of sources deferred to the next interval due to lack of events.
       * </pre>
       *
       * <code>optional int32 entryless_sources = 6;</code>
       * @return The entrylessSources.
       */
      @java.lang.Override
      public int getEntrylessSources() {
        return entrylessSources_;
      }
      /**
       * <pre>
       * Number of sources deferred to the next interval due to lack of events.
       * </pre>
       *
       * <code>optional int32 entryless_sources = 6;</code>
       * @param value The entrylessSources to set.
       */
      private void setEntrylessSources(int value) {
        bitField0_ |= 0x00000020;
        entrylessSources_ = value;
      }
      /**
       * <pre>
       * Number of sources deferred to the next interval due to lack of events.
       * </pre>
       *
       * <code>optional int32 entryless_sources = 6;</code>
       */
      private void clearEntrylessSources() {
        bitField0_ = (bitField0_ & ~0x00000020);
        entrylessSources_ = 0;
      }

      public static final int PRUNED_SOURCES_AGE_SECONDS_FIELD_NUMBER = 7;
      private int prunedSourcesAgeSeconds_;
      /**
       * <pre>
       * Time elapsed in seconds from the moment the newest truncated source was
       * created to the moment it was discarded from memory, if pruning happened
       * due to number of sources exceeding the max threshold.
       * </pre>
       *
       * <code>optional int32 pruned_sources_age_seconds = 7;</code>
       * @return Whether the prunedSourcesAgeSeconds field is set.
       */
      @java.lang.Override
      public boolean hasPrunedSourcesAgeSeconds() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * Time elapsed in seconds from the moment the newest truncated source was
       * created to the moment it was discarded from memory, if pruning happened
       * due to number of sources exceeding the max threshold.
       * </pre>
       *
       * <code>optional int32 pruned_sources_age_seconds = 7;</code>
       * @return The prunedSourcesAgeSeconds.
       */
      @java.lang.Override
      public int getPrunedSourcesAgeSeconds() {
        return prunedSourcesAgeSeconds_;
      }
      /**
       * <pre>
       * Time elapsed in seconds from the moment the newest truncated source was
       * created to the moment it was discarded from memory, if pruning happened
       * due to number of sources exceeding the max threshold.
       * </pre>
       *
       * <code>optional int32 pruned_sources_age_seconds = 7;</code>
       * @param value The prunedSourcesAgeSeconds to set.
       */
      private void setPrunedSourcesAgeSeconds(int value) {
        bitField0_ |= 0x00000040;
        prunedSourcesAgeSeconds_ = value;
      }
      /**
       * <pre>
       * Time elapsed in seconds from the moment the newest truncated source was
       * created to the moment it was discarded from memory, if pruning happened
       * due to number of sources exceeding the max threshold.
       * </pre>
       *
       * <code>optional int32 pruned_sources_age_seconds = 7;</code>
       */
      private void clearPrunedSourcesAgeSeconds() {
        bitField0_ = (bitField0_ & ~0x00000040);
        prunedSourcesAgeSeconds_ = 0;
      }

      public static org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Counts of different types of sources in this interval, including sources
       * which may not be in the report due to dropping or deferral.
       * </pre>
       *
       * Protobuf type {@code ukm.Report.SourceCounts}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts, Builder> implements
          // @@protoc_insertion_point(builder_implements:ukm.Report.SourceCounts)
          org.chromium.components.metrics.ReportOuterClass.Report.SourceCountsOrBuilder {
        // Construct using org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * Number of unique sources that URLs were observed for. This counts
         * includes sources which were dropped or deferred, but not sources
         * carried over from a previous interval.
         * </pre>
         *
         * <code>optional int32 observed = 1;</code>
         * @return Whether the observed field is set.
         */
        @java.lang.Override
        public boolean hasObserved() {
          return instance.hasObserved();
        }
        /**
         * <pre>
         * Number of unique sources that URLs were observed for. This counts
         * includes sources which were dropped or deferred, but not sources
         * carried over from a previous interval.
         * </pre>
         *
         * <code>optional int32 observed = 1;</code>
         * @return The observed.
         */
        @java.lang.Override
        public int getObserved() {
          return instance.getObserved();
        }
        /**
         * <pre>
         * Number of unique sources that URLs were observed for. This counts
         * includes sources which were dropped or deferred, but not sources
         * carried over from a previous interval.
         * </pre>
         *
         * <code>optional int32 observed = 1;</code>
         * @param value The observed to set.
         * @return This builder for chaining.
         */
        public Builder setObserved(int value) {
          copyOnWrite();
          instance.setObserved(value);
          return this;
        }
        /**
         * <pre>
         * Number of unique sources that URLs were observed for. This counts
         * includes sources which were dropped or deferred, but not sources
         * carried over from a previous interval.
         * </pre>
         *
         * <code>optional int32 observed = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearObserved() {
          copyOnWrite();
          instance.clearObserved();
          return this;
        }

        /**
         * <pre>
         * Number of navigation sources that URLs were observed for, including
         * sources dropped due to limits.
         * </pre>
         *
         * <code>optional int32 navigation_sources = 2;</code>
         * @return Whether the navigationSources field is set.
         */
        @java.lang.Override
        public boolean hasNavigationSources() {
          return instance.hasNavigationSources();
        }
        /**
         * <pre>
         * Number of navigation sources that URLs were observed for, including
         * sources dropped due to limits.
         * </pre>
         *
         * <code>optional int32 navigation_sources = 2;</code>
         * @return The navigationSources.
         */
        @java.lang.Override
        public int getNavigationSources() {
          return instance.getNavigationSources();
        }
        /**
         * <pre>
         * Number of navigation sources that URLs were observed for, including
         * sources dropped due to limits.
         * </pre>
         *
         * <code>optional int32 navigation_sources = 2;</code>
         * @param value The navigationSources to set.
         * @return This builder for chaining.
         */
        public Builder setNavigationSources(int value) {
          copyOnWrite();
          instance.setNavigationSources(value);
          return this;
        }
        /**
         * <pre>
         * Number of navigation sources that URLs were observed for, including
         * sources dropped due to limits.
         * </pre>
         *
         * <code>optional int32 navigation_sources = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearNavigationSources() {
          copyOnWrite();
          instance.clearNavigationSources();
          return this;
        }

        /**
         * <pre>
         * Number of sources discarded due to not matching a navigation URL.
         * </pre>
         *
         * <code>optional int32 unmatched_sources = 3;</code>
         * @return Whether the unmatchedSources field is set.
         */
        @java.lang.Override
        public boolean hasUnmatchedSources() {
          return instance.hasUnmatchedSources();
        }
        /**
         * <pre>
         * Number of sources discarded due to not matching a navigation URL.
         * </pre>
         *
         * <code>optional int32 unmatched_sources = 3;</code>
         * @return The unmatchedSources.
         */
        @java.lang.Override
        public int getUnmatchedSources() {
          return instance.getUnmatchedSources();
        }
        /**
         * <pre>
         * Number of sources discarded due to not matching a navigation URL.
         * </pre>
         *
         * <code>optional int32 unmatched_sources = 3;</code>
         * @param value The unmatchedSources to set.
         * @return This builder for chaining.
         */
        public Builder setUnmatchedSources(int value) {
          copyOnWrite();
          instance.setUnmatchedSources(value);
          return this;
        }
        /**
         * <pre>
         * Number of sources discarded due to not matching a navigation URL.
         * </pre>
         *
         * <code>optional int32 unmatched_sources = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearUnmatchedSources() {
          copyOnWrite();
          instance.clearUnmatchedSources();
          return this;
        }

        /**
         * <pre>
         * Number of sources deferred from a previous interval.
         * </pre>
         *
         * <code>optional int32 carryover_sources = 4;</code>
         * @return Whether the carryoverSources field is set.
         */
        @java.lang.Override
        public boolean hasCarryoverSources() {
          return instance.hasCarryoverSources();
        }
        /**
         * <pre>
         * Number of sources deferred from a previous interval.
         * </pre>
         *
         * <code>optional int32 carryover_sources = 4;</code>
         * @return The carryoverSources.
         */
        @java.lang.Override
        public int getCarryoverSources() {
          return instance.getCarryoverSources();
        }
        /**
         * <pre>
         * Number of sources deferred from a previous interval.
         * </pre>
         *
         * <code>optional int32 carryover_sources = 4;</code>
         * @param value The carryoverSources to set.
         * @return This builder for chaining.
         */
        public Builder setCarryoverSources(int value) {
          copyOnWrite();
          instance.setCarryoverSources(value);
          return this;
        }
        /**
         * <pre>
         * Number of sources deferred from a previous interval.
         * </pre>
         *
         * <code>optional int32 carryover_sources = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearCarryoverSources() {
          copyOnWrite();
          instance.clearCarryoverSources();
          return this;
        }

        /**
         * <pre>
         * Number of sources deferred to the next interval. Sources corresponding to
         * opened tabs that could emit more events in the future are kept in memory
         * and deferred to the next interval for inclusion in next reports, up to a
         * max limit on number of sources.
         * </pre>
         *
         * <code>optional int32 deferred_sources = 5;</code>
         * @return Whether the deferredSources field is set.
         */
        @java.lang.Override
        public boolean hasDeferredSources() {
          return instance.hasDeferredSources();
        }
        /**
         * <pre>
         * Number of sources deferred to the next interval. Sources corresponding to
         * opened tabs that could emit more events in the future are kept in memory
         * and deferred to the next interval for inclusion in next reports, up to a
         * max limit on number of sources.
         * </pre>
         *
         * <code>optional int32 deferred_sources = 5;</code>
         * @return The deferredSources.
         */
        @java.lang.Override
        public int getDeferredSources() {
          return instance.getDeferredSources();
        }
        /**
         * <pre>
         * Number of sources deferred to the next interval. Sources corresponding to
         * opened tabs that could emit more events in the future are kept in memory
         * and deferred to the next interval for inclusion in next reports, up to a
         * max limit on number of sources.
         * </pre>
         *
         * <code>optional int32 deferred_sources = 5;</code>
         * @param value The deferredSources to set.
         * @return This builder for chaining.
         */
        public Builder setDeferredSources(int value) {
          copyOnWrite();
          instance.setDeferredSources(value);
          return this;
        }
        /**
         * <pre>
         * Number of sources deferred to the next interval. Sources corresponding to
         * opened tabs that could emit more events in the future are kept in memory
         * and deferred to the next interval for inclusion in next reports, up to a
         * max limit on number of sources.
         * </pre>
         *
         * <code>optional int32 deferred_sources = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearDeferredSources() {
          copyOnWrite();
          instance.clearDeferredSources();
          return this;
        }

        /**
         * <pre>
         * Number of sources deferred to the next interval due to lack of events.
         * </pre>
         *
         * <code>optional int32 entryless_sources = 6;</code>
         * @return Whether the entrylessSources field is set.
         */
        @java.lang.Override
        public boolean hasEntrylessSources() {
          return instance.hasEntrylessSources();
        }
        /**
         * <pre>
         * Number of sources deferred to the next interval due to lack of events.
         * </pre>
         *
         * <code>optional int32 entryless_sources = 6;</code>
         * @return The entrylessSources.
         */
        @java.lang.Override
        public int getEntrylessSources() {
          return instance.getEntrylessSources();
        }
        /**
         * <pre>
         * Number of sources deferred to the next interval due to lack of events.
         * </pre>
         *
         * <code>optional int32 entryless_sources = 6;</code>
         * @param value The entrylessSources to set.
         * @return This builder for chaining.
         */
        public Builder setEntrylessSources(int value) {
          copyOnWrite();
          instance.setEntrylessSources(value);
          return this;
        }
        /**
         * <pre>
         * Number of sources deferred to the next interval due to lack of events.
         * </pre>
         *
         * <code>optional int32 entryless_sources = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearEntrylessSources() {
          copyOnWrite();
          instance.clearEntrylessSources();
          return this;
        }

        /**
         * <pre>
         * Time elapsed in seconds from the moment the newest truncated source was
         * created to the moment it was discarded from memory, if pruning happened
         * due to number of sources exceeding the max threshold.
         * </pre>
         *
         * <code>optional int32 pruned_sources_age_seconds = 7;</code>
         * @return Whether the prunedSourcesAgeSeconds field is set.
         */
        @java.lang.Override
        public boolean hasPrunedSourcesAgeSeconds() {
          return instance.hasPrunedSourcesAgeSeconds();
        }
        /**
         * <pre>
         * Time elapsed in seconds from the moment the newest truncated source was
         * created to the moment it was discarded from memory, if pruning happened
         * due to number of sources exceeding the max threshold.
         * </pre>
         *
         * <code>optional int32 pruned_sources_age_seconds = 7;</code>
         * @return The prunedSourcesAgeSeconds.
         */
        @java.lang.Override
        public int getPrunedSourcesAgeSeconds() {
          return instance.getPrunedSourcesAgeSeconds();
        }
        /**
         * <pre>
         * Time elapsed in seconds from the moment the newest truncated source was
         * created to the moment it was discarded from memory, if pruning happened
         * due to number of sources exceeding the max threshold.
         * </pre>
         *
         * <code>optional int32 pruned_sources_age_seconds = 7;</code>
         * @param value The prunedSourcesAgeSeconds to set.
         * @return This builder for chaining.
         */
        public Builder setPrunedSourcesAgeSeconds(int value) {
          copyOnWrite();
          instance.setPrunedSourcesAgeSeconds(value);
          return this;
        }
        /**
         * <pre>
         * Time elapsed in seconds from the moment the newest truncated source was
         * created to the moment it was discarded from memory, if pruning happened
         * due to number of sources exceeding the max threshold.
         * </pre>
         *
         * <code>optional int32 pruned_sources_age_seconds = 7;</code>
         * @return This builder for chaining.
         */
        public Builder clearPrunedSourcesAgeSeconds() {
          copyOnWrite();
          instance.clearPrunedSourcesAgeSeconds();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:ukm.Report.SourceCounts)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "observed_",
                "navigationSources_",
                "unmatchedSources_",
                "carryoverSources_",
                "deferredSources_",
                "entrylessSources_",
                "prunedSourcesAgeSeconds_",
              };
              java.lang.String info =
                  "\u0001\u0007\u0000\u0001\u0001\u0007\u0007\u0000\u0000\u0000\u0001\u1004\u0000\u0002" +
                  "\u1004\u0001\u0003\u1004\u0002\u0004\u1004\u0003\u0005\u1004\u0004\u0006\u1004\u0005" +
                  "\u0007\u1004\u0006";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts> parser = PARSER;
            if (parser == null) {
              synchronized (org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:ukm.Report.SourceCounts)
      private static final org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts DEFAULT_INSTANCE;
      static {
        SourceCounts defaultInstance = new SourceCounts();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          SourceCounts.class, defaultInstance);
      }

      public static org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<SourceCounts> PARSER;

      public static com.google.protobuf.Parser<SourceCounts> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    public static final int CLIENT_ID_FIELD_NUMBER = 1;
    private long clientId_;
    /**
     * <pre>
     * A unique identifier for a Chrome install. This ID should be used only
     * in UKM reports, and not linked to any other data sources.
     * </pre>
     *
     * <code>optional fixed64 client_id = 1;</code>
     * @return Whether the clientId field is set.
     */
    @java.lang.Override
    public boolean hasClientId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * A unique identifier for a Chrome install. This ID should be used only
     * in UKM reports, and not linked to any other data sources.
     * </pre>
     *
     * <code>optional fixed64 client_id = 1;</code>
     * @return The clientId.
     */
    @java.lang.Override
    public long getClientId() {
      return clientId_;
    }
    /**
     * <pre>
     * A unique identifier for a Chrome install. This ID should be used only
     * in UKM reports, and not linked to any other data sources.
     * </pre>
     *
     * <code>optional fixed64 client_id = 1;</code>
     * @param value The clientId to set.
     */
    private void setClientId(long value) {
      bitField0_ |= 0x00000001;
      clientId_ = value;
    }
    /**
     * <pre>
     * A unique identifier for a Chrome install. This ID should be used only
     * in UKM reports, and not linked to any other data sources.
     * </pre>
     *
     * <code>optional fixed64 client_id = 1;</code>
     */
    private void clearClientId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      clientId_ = 0L;
    }

    public static final int PRODUCT_FIELD_NUMBER = 12;
    private int product_;
    /**
     * <pre>
     * The product corresponding to this log. Note: The default value is Chrome,
     * so Chrome products will not transmit this field.
     * </pre>
     *
     * <code>optional .metrics.ChromeUserMetricsExtension.Product product = 12 [default = CHROME];</code>
     * @return Whether the product field is set.
     */
    @java.lang.Override
    public boolean hasProduct() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The product corresponding to this log. Note: The default value is Chrome,
     * so Chrome products will not transmit this field.
     * </pre>
     *
     * <code>optional .metrics.ChromeUserMetricsExtension.Product product = 12 [default = CHROME];</code>
     * @return The product.
     */
    @java.lang.Override
    public org.chromium.components.metrics.ChromeUserMetricsExtensionProtos.ChromeUserMetricsExtension.Product getProduct() {
      org.chromium.components.metrics.ChromeUserMetricsExtensionProtos.ChromeUserMetricsExtension.Product result = org.chromium.components.metrics.ChromeUserMetricsExtensionProtos.ChromeUserMetricsExtension.Product.forNumber(product_);
      return result == null ? org.chromium.components.metrics.ChromeUserMetricsExtensionProtos.ChromeUserMetricsExtension.Product.CHROME : result;
    }
    /**
     * <pre>
     * The product corresponding to this log. Note: The default value is Chrome,
     * so Chrome products will not transmit this field.
     * </pre>
     *
     * <code>optional .metrics.ChromeUserMetricsExtension.Product product = 12 [default = CHROME];</code>
     * @param value The product to set.
     */
    private void setProduct(org.chromium.components.metrics.ChromeUserMetricsExtensionProtos.ChromeUserMetricsExtension.Product value) {
      product_ = value.getNumber();
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * The product corresponding to this log. Note: The default value is Chrome,
     * so Chrome products will not transmit this field.
     * </pre>
     *
     * <code>optional .metrics.ChromeUserMetricsExtension.Product product = 12 [default = CHROME];</code>
     */
    private void clearProduct() {
      bitField0_ = (bitField0_ & ~0x00000002);
      product_ = 0;
    }

    public static final int SESSION_ID_FIELD_NUMBER = 5;
    private int sessionId_;
    /**
     * <pre>
     * The session id for this record. This id is unique within a
     * particular Chrome session. The client keeps track of the session id
     * and sends it with each record. The session id is simply an integer
     * that is incremented each time the user relaunches Chrome.
     * </pre>
     *
     * <code>optional int32 session_id = 5;</code>
     * @return Whether the sessionId field is set.
     */
    @java.lang.Override
    public boolean hasSessionId() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The session id for this record. This id is unique within a
     * particular Chrome session. The client keeps track of the session id
     * and sends it with each record. The session id is simply an integer
     * that is incremented each time the user relaunches Chrome.
     * </pre>
     *
     * <code>optional int32 session_id = 5;</code>
     * @return The sessionId.
     */
    @java.lang.Override
    public int getSessionId() {
      return sessionId_;
    }
    /**
     * <pre>
     * The session id for this record. This id is unique within a
     * particular Chrome session. The client keeps track of the session id
     * and sends it with each record. The session id is simply an integer
     * that is incremented each time the user relaunches Chrome.
     * </pre>
     *
     * <code>optional int32 session_id = 5;</code>
     * @param value The sessionId to set.
     */
    private void setSessionId(int value) {
      bitField0_ |= 0x00000004;
      sessionId_ = value;
    }
    /**
     * <pre>
     * The session id for this record. This id is unique within a
     * particular Chrome session. The client keeps track of the session id
     * and sends it with each record. The session id is simply an integer
     * that is incremented each time the user relaunches Chrome.
     * </pre>
     *
     * <code>optional int32 session_id = 5;</code>
     */
    private void clearSessionId() {
      bitField0_ = (bitField0_ & ~0x00000004);
      sessionId_ = 0;
    }

    public static final int REPORT_ID_FIELD_NUMBER = 6;
    private int reportId_;
    /**
     * <pre>
     * The report id for this record.  Report ids increase sequentially from
     * one within a session.
     * </pre>
     *
     * <code>optional int32 report_id = 6;</code>
     * @return Whether the reportId field is set.
     */
    @java.lang.Override
    public boolean hasReportId() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The report id for this record.  Report ids increase sequentially from
     * one within a session.
     * </pre>
     *
     * <code>optional int32 report_id = 6;</code>
     * @return The reportId.
     */
    @java.lang.Override
    public int getReportId() {
      return reportId_;
    }
    /**
     * <pre>
     * The report id for this record.  Report ids increase sequentially from
     * one within a session.
     * </pre>
     *
     * <code>optional int32 report_id = 6;</code>
     * @param value The reportId to set.
     */
    private void setReportId(int value) {
      bitField0_ |= 0x00000008;
      reportId_ = value;
    }
    /**
     * <pre>
     * The report id for this record.  Report ids increase sequentially from
     * one within a session.
     * </pre>
     *
     * <code>optional int32 report_id = 6;</code>
     */
    private void clearReportId() {
      bitField0_ = (bitField0_ & ~0x00000008);
      reportId_ = 0;
    }

    public static final int IS_CONTINUOUS_FIELD_NUMBER = 8;
    private boolean isContinuous_;
    /**
     * <pre>
     * Indicates that recording was continuously enabled for the period of time
     * captured in this report.
     * </pre>
     *
     * <code>optional bool is_continuous = 8;</code>
     * @return Whether the isContinuous field is set.
     */
    @java.lang.Override
    public boolean hasIsContinuous() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Indicates that recording was continuously enabled for the period of time
     * captured in this report.
     * </pre>
     *
     * <code>optional bool is_continuous = 8;</code>
     * @return The isContinuous.
     */
    @java.lang.Override
    public boolean getIsContinuous() {
      return isContinuous_;
    }
    /**
     * <pre>
     * Indicates that recording was continuously enabled for the period of time
     * captured in this report.
     * </pre>
     *
     * <code>optional bool is_continuous = 8;</code>
     * @param value The isContinuous to set.
     */
    private void setIsContinuous(boolean value) {
      bitField0_ |= 0x00000010;
      isContinuous_ = value;
    }
    /**
     * <pre>
     * Indicates that recording was continuously enabled for the period of time
     * captured in this report.
     * </pre>
     *
     * <code>optional bool is_continuous = 8;</code>
     */
    private void clearIsContinuous() {
      bitField0_ = (bitField0_ & ~0x00000010);
      isContinuous_ = false;
    }

    public static final int LOG_ROTATION_REASON_FIELD_NUMBER = 9;
    private int logRotationReason_;
    /**
     * <code>optional .ukm.Report.LogRotationReason log_rotation_reason = 9;</code>
     * @return Whether the logRotationReason field is set.
     */
    @java.lang.Override
    public boolean hasLogRotationReason() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional .ukm.Report.LogRotationReason log_rotation_reason = 9;</code>
     * @return The logRotationReason.
     */
    @java.lang.Override
    public org.chromium.components.metrics.ReportOuterClass.Report.LogRotationReason getLogRotationReason() {
      org.chromium.components.metrics.ReportOuterClass.Report.LogRotationReason result = org.chromium.components.metrics.ReportOuterClass.Report.LogRotationReason.forNumber(logRotationReason_);
      return result == null ? org.chromium.components.metrics.ReportOuterClass.Report.LogRotationReason.UNKNOWN : result;
    }
    /**
     * <code>optional .ukm.Report.LogRotationReason log_rotation_reason = 9;</code>
     * @param value The logRotationReason to set.
     */
    private void setLogRotationReason(org.chromium.components.metrics.ReportOuterClass.Report.LogRotationReason value) {
      logRotationReason_ = value.getNumber();
      bitField0_ |= 0x00000020;
    }
    /**
     * <code>optional .ukm.Report.LogRotationReason log_rotation_reason = 9;</code>
     */
    private void clearLogRotationReason() {
      bitField0_ = (bitField0_ & ~0x00000020);
      logRotationReason_ = 0;
    }

    public static final int SYSTEM_PROFILE_FIELD_NUMBER = 2;
    private org.chromium.components.metrics.SystemProfileProtos.SystemProfileProto systemProfile_;
    /**
     * <pre>
     * Information about the user's browser and system configuration.
     * </pre>
     *
     * <code>optional .metrics.SystemProfileProto system_profile = 2;</code>
     */
    @java.lang.Override
    public boolean hasSystemProfile() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Information about the user's browser and system configuration.
     * </pre>
     *
     * <code>optional .metrics.SystemProfileProto system_profile = 2;</code>
     */
    @java.lang.Override
    public org.chromium.components.metrics.SystemProfileProtos.SystemProfileProto getSystemProfile() {
      return systemProfile_ == null ? org.chromium.components.metrics.SystemProfileProtos.SystemProfileProto.getDefaultInstance() : systemProfile_;
    }
    /**
     * <pre>
     * Information about the user's browser and system configuration.
     * </pre>
     *
     * <code>optional .metrics.SystemProfileProto system_profile = 2;</code>
     */
    private void setSystemProfile(org.chromium.components.metrics.SystemProfileProtos.SystemProfileProto value) {
      value.getClass();
  systemProfile_ = value;
      bitField0_ |= 0x00000040;
      }
    /**
     * <pre>
     * Information about the user's browser and system configuration.
     * </pre>
     *
     * <code>optional .metrics.SystemProfileProto system_profile = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeSystemProfile(org.chromium.components.metrics.SystemProfileProtos.SystemProfileProto value) {
      value.getClass();
  if (systemProfile_ != null &&
          systemProfile_ != org.chromium.components.metrics.SystemProfileProtos.SystemProfileProto.getDefaultInstance()) {
        systemProfile_ =
          org.chromium.components.metrics.SystemProfileProtos.SystemProfileProto.newBuilder(systemProfile_).mergeFrom(value).buildPartial();
      } else {
        systemProfile_ = value;
      }
      bitField0_ |= 0x00000040;
    }
    /**
     * <pre>
     * Information about the user's browser and system configuration.
     * </pre>
     *
     * <code>optional .metrics.SystemProfileProto system_profile = 2;</code>
     */
    private void clearSystemProfile() {  systemProfile_ = null;
      bitField0_ = (bitField0_ & ~0x00000040);
    }

    public static final int USER_DEMOGRAPHICS_FIELD_NUMBER = 11;
    private org.chromium.components.metrics.UserDemographicsProtos.UserDemographicsProto userDemographics_;
    /**
     * <pre>
     * The user's demographic information that consists of their noised birth year
     * and gender. This data is made available to Chrome via syncable priority
     * pref, so is only available if the user is signed-in and syncing.
     * </pre>
     *
     * <code>optional .metrics.UserDemographicsProto user_demographics = 11;</code>
     */
    @java.lang.Override
    public boolean hasUserDemographics() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * The user's demographic information that consists of their noised birth year
     * and gender. This data is made available to Chrome via syncable priority
     * pref, so is only available if the user is signed-in and syncing.
     * </pre>
     *
     * <code>optional .metrics.UserDemographicsProto user_demographics = 11;</code>
     */
    @java.lang.Override
    public org.chromium.components.metrics.UserDemographicsProtos.UserDemographicsProto getUserDemographics() {
      return userDemographics_ == null ? org.chromium.components.metrics.UserDemographicsProtos.UserDemographicsProto.getDefaultInstance() : userDemographics_;
    }
    /**
     * <pre>
     * The user's demographic information that consists of their noised birth year
     * and gender. This data is made available to Chrome via syncable priority
     * pref, so is only available if the user is signed-in and syncing.
     * </pre>
     *
     * <code>optional .metrics.UserDemographicsProto user_demographics = 11;</code>
     */
    private void setUserDemographics(org.chromium.components.metrics.UserDemographicsProtos.UserDemographicsProto value) {
      value.getClass();
  userDemographics_ = value;
      bitField0_ |= 0x00000080;
      }
    /**
     * <pre>
     * The user's demographic information that consists of their noised birth year
     * and gender. This data is made available to Chrome via syncable priority
     * pref, so is only available if the user is signed-in and syncing.
     * </pre>
     *
     * <code>optional .metrics.UserDemographicsProto user_demographics = 11;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeUserDemographics(org.chromium.components.metrics.UserDemographicsProtos.UserDemographicsProto value) {
      value.getClass();
  if (userDemographics_ != null &&
          userDemographics_ != org.chromium.components.metrics.UserDemographicsProtos.UserDemographicsProto.getDefaultInstance()) {
        userDemographics_ =
          org.chromium.components.metrics.UserDemographicsProtos.UserDemographicsProto.newBuilder(userDemographics_).mergeFrom(value).buildPartial();
      } else {
        userDemographics_ = value;
      }
      bitField0_ |= 0x00000080;
    }
    /**
     * <pre>
     * The user's demographic information that consists of their noised birth year
     * and gender. This data is made available to Chrome via syncable priority
     * pref, so is only available if the user is signed-in and syncing.
     * </pre>
     *
     * <code>optional .metrics.UserDemographicsProto user_demographics = 11;</code>
     */
    private void clearUserDemographics() {  userDemographics_ = null;
      bitField0_ = (bitField0_ & ~0x00000080);
    }

    public static final int SOURCES_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.SourceOuterClass.Source> sources_;
    /**
     * <pre>
     * A list of the top-level navigations that data was collected for.
     * </pre>
     *
     * <code>repeated .ukm.Source sources = 3;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.components.metrics.SourceOuterClass.Source> getSourcesList() {
      return sources_;
    }
    /**
     * <pre>
     * A list of the top-level navigations that data was collected for.
     * </pre>
     *
     * <code>repeated .ukm.Source sources = 3;</code>
     */
    public java.util.List<? extends org.chromium.components.metrics.SourceOuterClass.SourceOrBuilder> 
        getSourcesOrBuilderList() {
      return sources_;
    }
    /**
     * <pre>
     * A list of the top-level navigations that data was collected for.
     * </pre>
     *
     * <code>repeated .ukm.Source sources = 3;</code>
     */
    @java.lang.Override
    public int getSourcesCount() {
      return sources_.size();
    }
    /**
     * <pre>
     * A list of the top-level navigations that data was collected for.
     * </pre>
     *
     * <code>repeated .ukm.Source sources = 3;</code>
     */
    @java.lang.Override
    public org.chromium.components.metrics.SourceOuterClass.Source getSources(int index) {
      return sources_.get(index);
    }
    /**
     * <pre>
     * A list of the top-level navigations that data was collected for.
     * </pre>
     *
     * <code>repeated .ukm.Source sources = 3;</code>
     */
    public org.chromium.components.metrics.SourceOuterClass.SourceOrBuilder getSourcesOrBuilder(
        int index) {
      return sources_.get(index);
    }
    private void ensureSourcesIsMutable() {
      com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.SourceOuterClass.Source> tmp = sources_;
      if (!tmp.isModifiable()) {
        sources_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * A list of the top-level navigations that data was collected for.
     * </pre>
     *
     * <code>repeated .ukm.Source sources = 3;</code>
     */
    private void setSources(
        int index, org.chromium.components.metrics.SourceOuterClass.Source value) {
      value.getClass();
  ensureSourcesIsMutable();
      sources_.set(index, value);
    }
    /**
     * <pre>
     * A list of the top-level navigations that data was collected for.
     * </pre>
     *
     * <code>repeated .ukm.Source sources = 3;</code>
     */
    private void addSources(org.chromium.components.metrics.SourceOuterClass.Source value) {
      value.getClass();
  ensureSourcesIsMutable();
      sources_.add(value);
    }
    /**
     * <pre>
     * A list of the top-level navigations that data was collected for.
     * </pre>
     *
     * <code>repeated .ukm.Source sources = 3;</code>
     */
    private void addSources(
        int index, org.chromium.components.metrics.SourceOuterClass.Source value) {
      value.getClass();
  ensureSourcesIsMutable();
      sources_.add(index, value);
    }
    /**
     * <pre>
     * A list of the top-level navigations that data was collected for.
     * </pre>
     *
     * <code>repeated .ukm.Source sources = 3;</code>
     */
    private void addAllSources(
        java.lang.Iterable<? extends org.chromium.components.metrics.SourceOuterClass.Source> values) {
      ensureSourcesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, sources_);
    }
    /**
     * <pre>
     * A list of the top-level navigations that data was collected for.
     * </pre>
     *
     * <code>repeated .ukm.Source sources = 3;</code>
     */
    private void clearSources() {
      sources_ = emptyProtobufList();
    }
    /**
     * <pre>
     * A list of the top-level navigations that data was collected for.
     * </pre>
     *
     * <code>repeated .ukm.Source sources = 3;</code>
     */
    private void removeSources(int index) {
      ensureSourcesIsMutable();
      sources_.remove(index);
    }

    public static final int SOURCE_COUNTS_FIELD_NUMBER = 10;
    private org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts sourceCounts_;
    /**
     * <code>optional .ukm.Report.SourceCounts source_counts = 10;</code>
     */
    @java.lang.Override
    public boolean hasSourceCounts() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional .ukm.Report.SourceCounts source_counts = 10;</code>
     */
    @java.lang.Override
    public org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts getSourceCounts() {
      return sourceCounts_ == null ? org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts.getDefaultInstance() : sourceCounts_;
    }
    /**
     * <code>optional .ukm.Report.SourceCounts source_counts = 10;</code>
     */
    private void setSourceCounts(org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts value) {
      value.getClass();
  sourceCounts_ = value;
      bitField0_ |= 0x00000100;
      }
    /**
     * <code>optional .ukm.Report.SourceCounts source_counts = 10;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeSourceCounts(org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts value) {
      value.getClass();
  if (sourceCounts_ != null &&
          sourceCounts_ != org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts.getDefaultInstance()) {
        sourceCounts_ =
          org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts.newBuilder(sourceCounts_).mergeFrom(value).buildPartial();
      } else {
        sourceCounts_ = value;
      }
      bitField0_ |= 0x00000100;
    }
    /**
     * <code>optional .ukm.Report.SourceCounts source_counts = 10;</code>
     */
    private void clearSourceCounts() {  sourceCounts_ = null;
      bitField0_ = (bitField0_ & ~0x00000100);
    }

    public static final int ENTRIES_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.EntryOuterClass.Entry> entries_;
    /**
     * <pre>
     * List of Entries containing the main UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Entry entries = 4;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.components.metrics.EntryOuterClass.Entry> getEntriesList() {
      return entries_;
    }
    /**
     * <pre>
     * List of Entries containing the main UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Entry entries = 4;</code>
     */
    public java.util.List<? extends org.chromium.components.metrics.EntryOuterClass.EntryOrBuilder> 
        getEntriesOrBuilderList() {
      return entries_;
    }
    /**
     * <pre>
     * List of Entries containing the main UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Entry entries = 4;</code>
     */
    @java.lang.Override
    public int getEntriesCount() {
      return entries_.size();
    }
    /**
     * <pre>
     * List of Entries containing the main UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Entry entries = 4;</code>
     */
    @java.lang.Override
    public org.chromium.components.metrics.EntryOuterClass.Entry getEntries(int index) {
      return entries_.get(index);
    }
    /**
     * <pre>
     * List of Entries containing the main UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Entry entries = 4;</code>
     */
    public org.chromium.components.metrics.EntryOuterClass.EntryOrBuilder getEntriesOrBuilder(
        int index) {
      return entries_.get(index);
    }
    private void ensureEntriesIsMutable() {
      com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.EntryOuterClass.Entry> tmp = entries_;
      if (!tmp.isModifiable()) {
        entries_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * List of Entries containing the main UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Entry entries = 4;</code>
     */
    private void setEntries(
        int index, org.chromium.components.metrics.EntryOuterClass.Entry value) {
      value.getClass();
  ensureEntriesIsMutable();
      entries_.set(index, value);
    }
    /**
     * <pre>
     * List of Entries containing the main UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Entry entries = 4;</code>
     */
    private void addEntries(org.chromium.components.metrics.EntryOuterClass.Entry value) {
      value.getClass();
  ensureEntriesIsMutable();
      entries_.add(value);
    }
    /**
     * <pre>
     * List of Entries containing the main UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Entry entries = 4;</code>
     */
    private void addEntries(
        int index, org.chromium.components.metrics.EntryOuterClass.Entry value) {
      value.getClass();
  ensureEntriesIsMutable();
      entries_.add(index, value);
    }
    /**
     * <pre>
     * List of Entries containing the main UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Entry entries = 4;</code>
     */
    private void addAllEntries(
        java.lang.Iterable<? extends org.chromium.components.metrics.EntryOuterClass.Entry> values) {
      ensureEntriesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, entries_);
    }
    /**
     * <pre>
     * List of Entries containing the main UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Entry entries = 4;</code>
     */
    private void clearEntries() {
      entries_ = emptyProtobufList();
    }
    /**
     * <pre>
     * List of Entries containing the main UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Entry entries = 4;</code>
     */
    private void removeEntries(int index) {
      ensureEntriesIsMutable();
      entries_.remove(index);
    }

    public static final int AGGREGATES_FIELD_NUMBER = 7;
    private com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.AggregateOuterClass.Aggregate> aggregates_;
    /**
     * <pre>
     * List of Entries containing aggregated UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Aggregate aggregates = 7;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.components.metrics.AggregateOuterClass.Aggregate> getAggregatesList() {
      return aggregates_;
    }
    /**
     * <pre>
     * List of Entries containing aggregated UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Aggregate aggregates = 7;</code>
     */
    public java.util.List<? extends org.chromium.components.metrics.AggregateOuterClass.AggregateOrBuilder> 
        getAggregatesOrBuilderList() {
      return aggregates_;
    }
    /**
     * <pre>
     * List of Entries containing aggregated UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Aggregate aggregates = 7;</code>
     */
    @java.lang.Override
    public int getAggregatesCount() {
      return aggregates_.size();
    }
    /**
     * <pre>
     * List of Entries containing aggregated UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Aggregate aggregates = 7;</code>
     */
    @java.lang.Override
    public org.chromium.components.metrics.AggregateOuterClass.Aggregate getAggregates(int index) {
      return aggregates_.get(index);
    }
    /**
     * <pre>
     * List of Entries containing aggregated UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Aggregate aggregates = 7;</code>
     */
    public org.chromium.components.metrics.AggregateOuterClass.AggregateOrBuilder getAggregatesOrBuilder(
        int index) {
      return aggregates_.get(index);
    }
    private void ensureAggregatesIsMutable() {
      com.google.protobuf.Internal.ProtobufList<org.chromium.components.metrics.AggregateOuterClass.Aggregate> tmp = aggregates_;
      if (!tmp.isModifiable()) {
        aggregates_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * List of Entries containing aggregated UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Aggregate aggregates = 7;</code>
     */
    private void setAggregates(
        int index, org.chromium.components.metrics.AggregateOuterClass.Aggregate value) {
      value.getClass();
  ensureAggregatesIsMutable();
      aggregates_.set(index, value);
    }
    /**
     * <pre>
     * List of Entries containing aggregated UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Aggregate aggregates = 7;</code>
     */
    private void addAggregates(org.chromium.components.metrics.AggregateOuterClass.Aggregate value) {
      value.getClass();
  ensureAggregatesIsMutable();
      aggregates_.add(value);
    }
    /**
     * <pre>
     * List of Entries containing aggregated UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Aggregate aggregates = 7;</code>
     */
    private void addAggregates(
        int index, org.chromium.components.metrics.AggregateOuterClass.Aggregate value) {
      value.getClass();
  ensureAggregatesIsMutable();
      aggregates_.add(index, value);
    }
    /**
     * <pre>
     * List of Entries containing aggregated UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Aggregate aggregates = 7;</code>
     */
    private void addAllAggregates(
        java.lang.Iterable<? extends org.chromium.components.metrics.AggregateOuterClass.Aggregate> values) {
      ensureAggregatesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, aggregates_);
    }
    /**
     * <pre>
     * List of Entries containing aggregated UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Aggregate aggregates = 7;</code>
     */
    private void clearAggregates() {
      aggregates_ = emptyProtobufList();
    }
    /**
     * <pre>
     * List of Entries containing aggregated UKM data.
     * </pre>
     *
     * <code>repeated .ukm.Aggregate aggregates = 7;</code>
     */
    private void removeAggregates(int index) {
      ensureAggregatesIsMutable();
      aggregates_.remove(index);
    }

    public static org.chromium.components.metrics.ReportOuterClass.Report parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.metrics.ReportOuterClass.Report parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.metrics.ReportOuterClass.Report parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.metrics.ReportOuterClass.Report parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.metrics.ReportOuterClass.Report parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.metrics.ReportOuterClass.Report parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.metrics.ReportOuterClass.Report parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.metrics.ReportOuterClass.Report parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.metrics.ReportOuterClass.Report parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.metrics.ReportOuterClass.Report parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.metrics.ReportOuterClass.Report parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.metrics.ReportOuterClass.Report parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.metrics.ReportOuterClass.Report prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * This is the message type sent from Chrome to the UKM collector.
     * Next tag: 13
     * </pre>
     *
     * Protobuf type {@code ukm.Report}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.metrics.ReportOuterClass.Report, Builder> implements
        // @@protoc_insertion_point(builder_implements:ukm.Report)
        org.chromium.components.metrics.ReportOuterClass.ReportOrBuilder {
      // Construct using org.chromium.components.metrics.ReportOuterClass.Report.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * A unique identifier for a Chrome install. This ID should be used only
       * in UKM reports, and not linked to any other data sources.
       * </pre>
       *
       * <code>optional fixed64 client_id = 1;</code>
       * @return Whether the clientId field is set.
       */
      @java.lang.Override
      public boolean hasClientId() {
        return instance.hasClientId();
      }
      /**
       * <pre>
       * A unique identifier for a Chrome install. This ID should be used only
       * in UKM reports, and not linked to any other data sources.
       * </pre>
       *
       * <code>optional fixed64 client_id = 1;</code>
       * @return The clientId.
       */
      @java.lang.Override
      public long getClientId() {
        return instance.getClientId();
      }
      /**
       * <pre>
       * A unique identifier for a Chrome install. This ID should be used only
       * in UKM reports, and not linked to any other data sources.
       * </pre>
       *
       * <code>optional fixed64 client_id = 1;</code>
       * @param value The clientId to set.
       * @return This builder for chaining.
       */
      public Builder setClientId(long value) {
        copyOnWrite();
        instance.setClientId(value);
        return this;
      }
      /**
       * <pre>
       * A unique identifier for a Chrome install. This ID should be used only
       * in UKM reports, and not linked to any other data sources.
       * </pre>
       *
       * <code>optional fixed64 client_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearClientId() {
        copyOnWrite();
        instance.clearClientId();
        return this;
      }

      /**
       * <pre>
       * The product corresponding to this log. Note: The default value is Chrome,
       * so Chrome products will not transmit this field.
       * </pre>
       *
       * <code>optional .metrics.ChromeUserMetricsExtension.Product product = 12 [default = CHROME];</code>
       * @return Whether the product field is set.
       */
      @java.lang.Override
      public boolean hasProduct() {
        return instance.hasProduct();
      }
      /**
       * <pre>
       * The product corresponding to this log. Note: The default value is Chrome,
       * so Chrome products will not transmit this field.
       * </pre>
       *
       * <code>optional .metrics.ChromeUserMetricsExtension.Product product = 12 [default = CHROME];</code>
       * @return The product.
       */
      @java.lang.Override
      public org.chromium.components.metrics.ChromeUserMetricsExtensionProtos.ChromeUserMetricsExtension.Product getProduct() {
        return instance.getProduct();
      }
      /**
       * <pre>
       * The product corresponding to this log. Note: The default value is Chrome,
       * so Chrome products will not transmit this field.
       * </pre>
       *
       * <code>optional .metrics.ChromeUserMetricsExtension.Product product = 12 [default = CHROME];</code>
       * @param value The enum numeric value on the wire for product to set.
       * @return This builder for chaining.
       */
      public Builder setProduct(org.chromium.components.metrics.ChromeUserMetricsExtensionProtos.ChromeUserMetricsExtension.Product value) {
        copyOnWrite();
        instance.setProduct(value);
        return this;
      }
      /**
       * <pre>
       * The product corresponding to this log. Note: The default value is Chrome,
       * so Chrome products will not transmit this field.
       * </pre>
       *
       * <code>optional .metrics.ChromeUserMetricsExtension.Product product = 12 [default = CHROME];</code>
       * @return This builder for chaining.
       */
      public Builder clearProduct() {
        copyOnWrite();
        instance.clearProduct();
        return this;
      }

      /**
       * <pre>
       * The session id for this record. This id is unique within a
       * particular Chrome session. The client keeps track of the session id
       * and sends it with each record. The session id is simply an integer
       * that is incremented each time the user relaunches Chrome.
       * </pre>
       *
       * <code>optional int32 session_id = 5;</code>
       * @return Whether the sessionId field is set.
       */
      @java.lang.Override
      public boolean hasSessionId() {
        return instance.hasSessionId();
      }
      /**
       * <pre>
       * The session id for this record. This id is unique within a
       * particular Chrome session. The client keeps track of the session id
       * and sends it with each record. The session id is simply an integer
       * that is incremented each time the user relaunches Chrome.
       * </pre>
       *
       * <code>optional int32 session_id = 5;</code>
       * @return The sessionId.
       */
      @java.lang.Override
      public int getSessionId() {
        return instance.getSessionId();
      }
      /**
       * <pre>
       * The session id for this record. This id is unique within a
       * particular Chrome session. The client keeps track of the session id
       * and sends it with each record. The session id is simply an integer
       * that is incremented each time the user relaunches Chrome.
       * </pre>
       *
       * <code>optional int32 session_id = 5;</code>
       * @param value The sessionId to set.
       * @return This builder for chaining.
       */
      public Builder setSessionId(int value) {
        copyOnWrite();
        instance.setSessionId(value);
        return this;
      }
      /**
       * <pre>
       * The session id for this record. This id is unique within a
       * particular Chrome session. The client keeps track of the session id
       * and sends it with each record. The session id is simply an integer
       * that is incremented each time the user relaunches Chrome.
       * </pre>
       *
       * <code>optional int32 session_id = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearSessionId() {
        copyOnWrite();
        instance.clearSessionId();
        return this;
      }

      /**
       * <pre>
       * The report id for this record.  Report ids increase sequentially from
       * one within a session.
       * </pre>
       *
       * <code>optional int32 report_id = 6;</code>
       * @return Whether the reportId field is set.
       */
      @java.lang.Override
      public boolean hasReportId() {
        return instance.hasReportId();
      }
      /**
       * <pre>
       * The report id for this record.  Report ids increase sequentially from
       * one within a session.
       * </pre>
       *
       * <code>optional int32 report_id = 6;</code>
       * @return The reportId.
       */
      @java.lang.Override
      public int getReportId() {
        return instance.getReportId();
      }
      /**
       * <pre>
       * The report id for this record.  Report ids increase sequentially from
       * one within a session.
       * </pre>
       *
       * <code>optional int32 report_id = 6;</code>
       * @param value The reportId to set.
       * @return This builder for chaining.
       */
      public Builder setReportId(int value) {
        copyOnWrite();
        instance.setReportId(value);
        return this;
      }
      /**
       * <pre>
       * The report id for this record.  Report ids increase sequentially from
       * one within a session.
       * </pre>
       *
       * <code>optional int32 report_id = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearReportId() {
        copyOnWrite();
        instance.clearReportId();
        return this;
      }

      /**
       * <pre>
       * Indicates that recording was continuously enabled for the period of time
       * captured in this report.
       * </pre>
       *
       * <code>optional bool is_continuous = 8;</code>
       * @return Whether the isContinuous field is set.
       */
      @java.lang.Override
      public boolean hasIsContinuous() {
        return instance.hasIsContinuous();
      }
      /**
       * <pre>
       * Indicates that recording was continuously enabled for the period of time
       * captured in this report.
       * </pre>
       *
       * <code>optional bool is_continuous = 8;</code>
       * @return The isContinuous.
       */
      @java.lang.Override
      public boolean getIsContinuous() {
        return instance.getIsContinuous();
      }
      /**
       * <pre>
       * Indicates that recording was continuously enabled for the period of time
       * captured in this report.
       * </pre>
       *
       * <code>optional bool is_continuous = 8;</code>
       * @param value The isContinuous to set.
       * @return This builder for chaining.
       */
      public Builder setIsContinuous(boolean value) {
        copyOnWrite();
        instance.setIsContinuous(value);
        return this;
      }
      /**
       * <pre>
       * Indicates that recording was continuously enabled for the period of time
       * captured in this report.
       * </pre>
       *
       * <code>optional bool is_continuous = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsContinuous() {
        copyOnWrite();
        instance.clearIsContinuous();
        return this;
      }

      /**
       * <code>optional .ukm.Report.LogRotationReason log_rotation_reason = 9;</code>
       * @return Whether the logRotationReason field is set.
       */
      @java.lang.Override
      public boolean hasLogRotationReason() {
        return instance.hasLogRotationReason();
      }
      /**
       * <code>optional .ukm.Report.LogRotationReason log_rotation_reason = 9;</code>
       * @return The logRotationReason.
       */
      @java.lang.Override
      public org.chromium.components.metrics.ReportOuterClass.Report.LogRotationReason getLogRotationReason() {
        return instance.getLogRotationReason();
      }
      /**
       * <code>optional .ukm.Report.LogRotationReason log_rotation_reason = 9;</code>
       * @param value The enum numeric value on the wire for logRotationReason to set.
       * @return This builder for chaining.
       */
      public Builder setLogRotationReason(org.chromium.components.metrics.ReportOuterClass.Report.LogRotationReason value) {
        copyOnWrite();
        instance.setLogRotationReason(value);
        return this;
      }
      /**
       * <code>optional .ukm.Report.LogRotationReason log_rotation_reason = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearLogRotationReason() {
        copyOnWrite();
        instance.clearLogRotationReason();
        return this;
      }

      /**
       * <pre>
       * Information about the user's browser and system configuration.
       * </pre>
       *
       * <code>optional .metrics.SystemProfileProto system_profile = 2;</code>
       */
      @java.lang.Override
      public boolean hasSystemProfile() {
        return instance.hasSystemProfile();
      }
      /**
       * <pre>
       * Information about the user's browser and system configuration.
       * </pre>
       *
       * <code>optional .metrics.SystemProfileProto system_profile = 2;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.SystemProfileProtos.SystemProfileProto getSystemProfile() {
        return instance.getSystemProfile();
      }
      /**
       * <pre>
       * Information about the user's browser and system configuration.
       * </pre>
       *
       * <code>optional .metrics.SystemProfileProto system_profile = 2;</code>
       */
      public Builder setSystemProfile(org.chromium.components.metrics.SystemProfileProtos.SystemProfileProto value) {
        copyOnWrite();
        instance.setSystemProfile(value);
        return this;
        }
      /**
       * <pre>
       * Information about the user's browser and system configuration.
       * </pre>
       *
       * <code>optional .metrics.SystemProfileProto system_profile = 2;</code>
       */
      public Builder setSystemProfile(
          org.chromium.components.metrics.SystemProfileProtos.SystemProfileProto.Builder builderForValue) {
        copyOnWrite();
        instance.setSystemProfile(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Information about the user's browser and system configuration.
       * </pre>
       *
       * <code>optional .metrics.SystemProfileProto system_profile = 2;</code>
       */
      public Builder mergeSystemProfile(org.chromium.components.metrics.SystemProfileProtos.SystemProfileProto value) {
        copyOnWrite();
        instance.mergeSystemProfile(value);
        return this;
      }
      /**
       * <pre>
       * Information about the user's browser and system configuration.
       * </pre>
       *
       * <code>optional .metrics.SystemProfileProto system_profile = 2;</code>
       */
      public Builder clearSystemProfile() {  copyOnWrite();
        instance.clearSystemProfile();
        return this;
      }

      /**
       * <pre>
       * The user's demographic information that consists of their noised birth year
       * and gender. This data is made available to Chrome via syncable priority
       * pref, so is only available if the user is signed-in and syncing.
       * </pre>
       *
       * <code>optional .metrics.UserDemographicsProto user_demographics = 11;</code>
       */
      @java.lang.Override
      public boolean hasUserDemographics() {
        return instance.hasUserDemographics();
      }
      /**
       * <pre>
       * The user's demographic information that consists of their noised birth year
       * and gender. This data is made available to Chrome via syncable priority
       * pref, so is only available if the user is signed-in and syncing.
       * </pre>
       *
       * <code>optional .metrics.UserDemographicsProto user_demographics = 11;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.UserDemographicsProtos.UserDemographicsProto getUserDemographics() {
        return instance.getUserDemographics();
      }
      /**
       * <pre>
       * The user's demographic information that consists of their noised birth year
       * and gender. This data is made available to Chrome via syncable priority
       * pref, so is only available if the user is signed-in and syncing.
       * </pre>
       *
       * <code>optional .metrics.UserDemographicsProto user_demographics = 11;</code>
       */
      public Builder setUserDemographics(org.chromium.components.metrics.UserDemographicsProtos.UserDemographicsProto value) {
        copyOnWrite();
        instance.setUserDemographics(value);
        return this;
        }
      /**
       * <pre>
       * The user's demographic information that consists of their noised birth year
       * and gender. This data is made available to Chrome via syncable priority
       * pref, so is only available if the user is signed-in and syncing.
       * </pre>
       *
       * <code>optional .metrics.UserDemographicsProto user_demographics = 11;</code>
       */
      public Builder setUserDemographics(
          org.chromium.components.metrics.UserDemographicsProtos.UserDemographicsProto.Builder builderForValue) {
        copyOnWrite();
        instance.setUserDemographics(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The user's demographic information that consists of their noised birth year
       * and gender. This data is made available to Chrome via syncable priority
       * pref, so is only available if the user is signed-in and syncing.
       * </pre>
       *
       * <code>optional .metrics.UserDemographicsProto user_demographics = 11;</code>
       */
      public Builder mergeUserDemographics(org.chromium.components.metrics.UserDemographicsProtos.UserDemographicsProto value) {
        copyOnWrite();
        instance.mergeUserDemographics(value);
        return this;
      }
      /**
       * <pre>
       * The user's demographic information that consists of their noised birth year
       * and gender. This data is made available to Chrome via syncable priority
       * pref, so is only available if the user is signed-in and syncing.
       * </pre>
       *
       * <code>optional .metrics.UserDemographicsProto user_demographics = 11;</code>
       */
      public Builder clearUserDemographics() {  copyOnWrite();
        instance.clearUserDemographics();
        return this;
      }

      /**
       * <pre>
       * A list of the top-level navigations that data was collected for.
       * </pre>
       *
       * <code>repeated .ukm.Source sources = 3;</code>
       */
      @java.lang.Override
      public java.util.List<org.chromium.components.metrics.SourceOuterClass.Source> getSourcesList() {
        return java.util.Collections.unmodifiableList(
            instance.getSourcesList());
      }
      /**
       * <pre>
       * A list of the top-level navigations that data was collected for.
       * </pre>
       *
       * <code>repeated .ukm.Source sources = 3;</code>
       */
      @java.lang.Override
      public int getSourcesCount() {
        return instance.getSourcesCount();
      }/**
       * <pre>
       * A list of the top-level navigations that data was collected for.
       * </pre>
       *
       * <code>repeated .ukm.Source sources = 3;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.SourceOuterClass.Source getSources(int index) {
        return instance.getSources(index);
      }
      /**
       * <pre>
       * A list of the top-level navigations that data was collected for.
       * </pre>
       *
       * <code>repeated .ukm.Source sources = 3;</code>
       */
      public Builder setSources(
          int index, org.chromium.components.metrics.SourceOuterClass.Source value) {
        copyOnWrite();
        instance.setSources(index, value);
        return this;
      }
      /**
       * <pre>
       * A list of the top-level navigations that data was collected for.
       * </pre>
       *
       * <code>repeated .ukm.Source sources = 3;</code>
       */
      public Builder setSources(
          int index, org.chromium.components.metrics.SourceOuterClass.Source.Builder builderForValue) {
        copyOnWrite();
        instance.setSources(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A list of the top-level navigations that data was collected for.
       * </pre>
       *
       * <code>repeated .ukm.Source sources = 3;</code>
       */
      public Builder addSources(org.chromium.components.metrics.SourceOuterClass.Source value) {
        copyOnWrite();
        instance.addSources(value);
        return this;
      }
      /**
       * <pre>
       * A list of the top-level navigations that data was collected for.
       * </pre>
       *
       * <code>repeated .ukm.Source sources = 3;</code>
       */
      public Builder addSources(
          int index, org.chromium.components.metrics.SourceOuterClass.Source value) {
        copyOnWrite();
        instance.addSources(index, value);
        return this;
      }
      /**
       * <pre>
       * A list of the top-level navigations that data was collected for.
       * </pre>
       *
       * <code>repeated .ukm.Source sources = 3;</code>
       */
      public Builder addSources(
          org.chromium.components.metrics.SourceOuterClass.Source.Builder builderForValue) {
        copyOnWrite();
        instance.addSources(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A list of the top-level navigations that data was collected for.
       * </pre>
       *
       * <code>repeated .ukm.Source sources = 3;</code>
       */
      public Builder addSources(
          int index, org.chromium.components.metrics.SourceOuterClass.Source.Builder builderForValue) {
        copyOnWrite();
        instance.addSources(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A list of the top-level navigations that data was collected for.
       * </pre>
       *
       * <code>repeated .ukm.Source sources = 3;</code>
       */
      public Builder addAllSources(
          java.lang.Iterable<? extends org.chromium.components.metrics.SourceOuterClass.Source> values) {
        copyOnWrite();
        instance.addAllSources(values);
        return this;
      }
      /**
       * <pre>
       * A list of the top-level navigations that data was collected for.
       * </pre>
       *
       * <code>repeated .ukm.Source sources = 3;</code>
       */
      public Builder clearSources() {
        copyOnWrite();
        instance.clearSources();
        return this;
      }
      /**
       * <pre>
       * A list of the top-level navigations that data was collected for.
       * </pre>
       *
       * <code>repeated .ukm.Source sources = 3;</code>
       */
      public Builder removeSources(int index) {
        copyOnWrite();
        instance.removeSources(index);
        return this;
      }

      /**
       * <code>optional .ukm.Report.SourceCounts source_counts = 10;</code>
       */
      @java.lang.Override
      public boolean hasSourceCounts() {
        return instance.hasSourceCounts();
      }
      /**
       * <code>optional .ukm.Report.SourceCounts source_counts = 10;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts getSourceCounts() {
        return instance.getSourceCounts();
      }
      /**
       * <code>optional .ukm.Report.SourceCounts source_counts = 10;</code>
       */
      public Builder setSourceCounts(org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts value) {
        copyOnWrite();
        instance.setSourceCounts(value);
        return this;
        }
      /**
       * <code>optional .ukm.Report.SourceCounts source_counts = 10;</code>
       */
      public Builder setSourceCounts(
          org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts.Builder builderForValue) {
        copyOnWrite();
        instance.setSourceCounts(builderForValue.build());
        return this;
      }
      /**
       * <code>optional .ukm.Report.SourceCounts source_counts = 10;</code>
       */
      public Builder mergeSourceCounts(org.chromium.components.metrics.ReportOuterClass.Report.SourceCounts value) {
        copyOnWrite();
        instance.mergeSourceCounts(value);
        return this;
      }
      /**
       * <code>optional .ukm.Report.SourceCounts source_counts = 10;</code>
       */
      public Builder clearSourceCounts() {  copyOnWrite();
        instance.clearSourceCounts();
        return this;
      }

      /**
       * <pre>
       * List of Entries containing the main UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Entry entries = 4;</code>
       */
      @java.lang.Override
      public java.util.List<org.chromium.components.metrics.EntryOuterClass.Entry> getEntriesList() {
        return java.util.Collections.unmodifiableList(
            instance.getEntriesList());
      }
      /**
       * <pre>
       * List of Entries containing the main UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Entry entries = 4;</code>
       */
      @java.lang.Override
      public int getEntriesCount() {
        return instance.getEntriesCount();
      }/**
       * <pre>
       * List of Entries containing the main UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Entry entries = 4;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.EntryOuterClass.Entry getEntries(int index) {
        return instance.getEntries(index);
      }
      /**
       * <pre>
       * List of Entries containing the main UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Entry entries = 4;</code>
       */
      public Builder setEntries(
          int index, org.chromium.components.metrics.EntryOuterClass.Entry value) {
        copyOnWrite();
        instance.setEntries(index, value);
        return this;
      }
      /**
       * <pre>
       * List of Entries containing the main UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Entry entries = 4;</code>
       */
      public Builder setEntries(
          int index, org.chromium.components.metrics.EntryOuterClass.Entry.Builder builderForValue) {
        copyOnWrite();
        instance.setEntries(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * List of Entries containing the main UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Entry entries = 4;</code>
       */
      public Builder addEntries(org.chromium.components.metrics.EntryOuterClass.Entry value) {
        copyOnWrite();
        instance.addEntries(value);
        return this;
      }
      /**
       * <pre>
       * List of Entries containing the main UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Entry entries = 4;</code>
       */
      public Builder addEntries(
          int index, org.chromium.components.metrics.EntryOuterClass.Entry value) {
        copyOnWrite();
        instance.addEntries(index, value);
        return this;
      }
      /**
       * <pre>
       * List of Entries containing the main UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Entry entries = 4;</code>
       */
      public Builder addEntries(
          org.chromium.components.metrics.EntryOuterClass.Entry.Builder builderForValue) {
        copyOnWrite();
        instance.addEntries(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * List of Entries containing the main UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Entry entries = 4;</code>
       */
      public Builder addEntries(
          int index, org.chromium.components.metrics.EntryOuterClass.Entry.Builder builderForValue) {
        copyOnWrite();
        instance.addEntries(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * List of Entries containing the main UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Entry entries = 4;</code>
       */
      public Builder addAllEntries(
          java.lang.Iterable<? extends org.chromium.components.metrics.EntryOuterClass.Entry> values) {
        copyOnWrite();
        instance.addAllEntries(values);
        return this;
      }
      /**
       * <pre>
       * List of Entries containing the main UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Entry entries = 4;</code>
       */
      public Builder clearEntries() {
        copyOnWrite();
        instance.clearEntries();
        return this;
      }
      /**
       * <pre>
       * List of Entries containing the main UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Entry entries = 4;</code>
       */
      public Builder removeEntries(int index) {
        copyOnWrite();
        instance.removeEntries(index);
        return this;
      }

      /**
       * <pre>
       * List of Entries containing aggregated UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Aggregate aggregates = 7;</code>
       */
      @java.lang.Override
      public java.util.List<org.chromium.components.metrics.AggregateOuterClass.Aggregate> getAggregatesList() {
        return java.util.Collections.unmodifiableList(
            instance.getAggregatesList());
      }
      /**
       * <pre>
       * List of Entries containing aggregated UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Aggregate aggregates = 7;</code>
       */
      @java.lang.Override
      public int getAggregatesCount() {
        return instance.getAggregatesCount();
      }/**
       * <pre>
       * List of Entries containing aggregated UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Aggregate aggregates = 7;</code>
       */
      @java.lang.Override
      public org.chromium.components.metrics.AggregateOuterClass.Aggregate getAggregates(int index) {
        return instance.getAggregates(index);
      }
      /**
       * <pre>
       * List of Entries containing aggregated UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Aggregate aggregates = 7;</code>
       */
      public Builder setAggregates(
          int index, org.chromium.components.metrics.AggregateOuterClass.Aggregate value) {
        copyOnWrite();
        instance.setAggregates(index, value);
        return this;
      }
      /**
       * <pre>
       * List of Entries containing aggregated UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Aggregate aggregates = 7;</code>
       */
      public Builder setAggregates(
          int index, org.chromium.components.metrics.AggregateOuterClass.Aggregate.Builder builderForValue) {
        copyOnWrite();
        instance.setAggregates(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * List of Entries containing aggregated UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Aggregate aggregates = 7;</code>
       */
      public Builder addAggregates(org.chromium.components.metrics.AggregateOuterClass.Aggregate value) {
        copyOnWrite();
        instance.addAggregates(value);
        return this;
      }
      /**
       * <pre>
       * List of Entries containing aggregated UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Aggregate aggregates = 7;</code>
       */
      public Builder addAggregates(
          int index, org.chromium.components.metrics.AggregateOuterClass.Aggregate value) {
        copyOnWrite();
        instance.addAggregates(index, value);
        return this;
      }
      /**
       * <pre>
       * List of Entries containing aggregated UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Aggregate aggregates = 7;</code>
       */
      public Builder addAggregates(
          org.chromium.components.metrics.AggregateOuterClass.Aggregate.Builder builderForValue) {
        copyOnWrite();
        instance.addAggregates(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * List of Entries containing aggregated UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Aggregate aggregates = 7;</code>
       */
      public Builder addAggregates(
          int index, org.chromium.components.metrics.AggregateOuterClass.Aggregate.Builder builderForValue) {
        copyOnWrite();
        instance.addAggregates(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * List of Entries containing aggregated UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Aggregate aggregates = 7;</code>
       */
      public Builder addAllAggregates(
          java.lang.Iterable<? extends org.chromium.components.metrics.AggregateOuterClass.Aggregate> values) {
        copyOnWrite();
        instance.addAllAggregates(values);
        return this;
      }
      /**
       * <pre>
       * List of Entries containing aggregated UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Aggregate aggregates = 7;</code>
       */
      public Builder clearAggregates() {
        copyOnWrite();
        instance.clearAggregates();
        return this;
      }
      /**
       * <pre>
       * List of Entries containing aggregated UKM data.
       * </pre>
       *
       * <code>repeated .ukm.Aggregate aggregates = 7;</code>
       */
      public Builder removeAggregates(int index) {
        copyOnWrite();
        instance.removeAggregates(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ukm.Report)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.metrics.ReportOuterClass.Report();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "clientId_",
              "systemProfile_",
              "sources_",
              org.chromium.components.metrics.SourceOuterClass.Source.class,
              "entries_",
              org.chromium.components.metrics.EntryOuterClass.Entry.class,
              "sessionId_",
              "reportId_",
              "aggregates_",
              org.chromium.components.metrics.AggregateOuterClass.Aggregate.class,
              "isContinuous_",
              "logRotationReason_",
              org.chromium.components.metrics.ReportOuterClass.Report.LogRotationReason.internalGetVerifier(),
              "sourceCounts_",
              "userDemographics_",
              "product_",
              org.chromium.components.metrics.ChromeUserMetricsExtensionProtos.ChromeUserMetricsExtension.Product.internalGetVerifier(),
            };
            java.lang.String info =
                "\u0001\f\u0000\u0001\u0001\f\f\u0000\u0003\u0000\u0001\u1005\u0000\u0002\u1009\u0006" +
                "\u0003\u001b\u0004\u001b\u0005\u1004\u0002\u0006\u1004\u0003\u0007\u001b\b\u1007" +
                "\u0004\t\u100c\u0005\n\u1009\b\u000b\u1009\u0007\f\u100c\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.metrics.ReportOuterClass.Report> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.metrics.ReportOuterClass.Report.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.metrics.ReportOuterClass.Report>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:ukm.Report)
    private static final org.chromium.components.metrics.ReportOuterClass.Report DEFAULT_INSTANCE;
    static {
      Report defaultInstance = new Report();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Report.class, defaultInstance);
    }

    public static org.chromium.components.metrics.ReportOuterClass.Report getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Report> PARSER;

    public static com.google.protobuf.Parser<Report> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
