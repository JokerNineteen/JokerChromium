// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: execution_context.proto

package org.chromium.components.metrics;

public final class ExecutionContextProtos {
  private ExecutionContextProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   * Chrome process type. Derived from content/public/common/process_type.h.
   * </pre>
   *
   * Protobuf enum {@code metrics.Process}
   */
  public enum Process
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>UNKNOWN_PROCESS = 0;</code>
     */
    UNKNOWN_PROCESS(0),
    /**
     * <code>BROWSER_PROCESS = 1;</code>
     */
    BROWSER_PROCESS(1),
    /**
     * <code>RENDERER_PROCESS = 2;</code>
     */
    RENDERER_PROCESS(2),
    /**
     * <code>GPU_PROCESS = 3;</code>
     */
    GPU_PROCESS(3),
    /**
     * <code>UTILITY_PROCESS = 4;</code>
     */
    UTILITY_PROCESS(4),
    /**
     * <code>ZYGOTE_PROCESS = 5;</code>
     */
    ZYGOTE_PROCESS(5),
    /**
     * <code>SANDBOX_HELPER_PROCESS = 6;</code>
     */
    SANDBOX_HELPER_PROCESS(6),
    /**
     * <code>PPAPI_PLUGIN_PROCESS = 7;</code>
     */
    PPAPI_PLUGIN_PROCESS(7),
    /**
     * <code>PPAPI_BROKER_PROCESS = 8;</code>
     */
    PPAPI_BROKER_PROCESS(8),
    /**
     * <code>NETWORK_SERVICE_PROCESS = 10;</code>
     */
    NETWORK_SERVICE_PROCESS(10),
    /**
     * <pre>
     * A Chrome process not identified by any other enum. Defined for the benefit
     * of Chrome OS. Do not use for the Chrome sampling profiler; define a new
     * enum instead.
     * </pre>
     *
     * <code>OTHER_PROCESS = 9;</code>
     */
    OTHER_PROCESS(9),
    ;

    /**
     * <code>UNKNOWN_PROCESS = 0;</code>
     */
    public static final int UNKNOWN_PROCESS_VALUE = 0;
    /**
     * <code>BROWSER_PROCESS = 1;</code>
     */
    public static final int BROWSER_PROCESS_VALUE = 1;
    /**
     * <code>RENDERER_PROCESS = 2;</code>
     */
    public static final int RENDERER_PROCESS_VALUE = 2;
    /**
     * <code>GPU_PROCESS = 3;</code>
     */
    public static final int GPU_PROCESS_VALUE = 3;
    /**
     * <code>UTILITY_PROCESS = 4;</code>
     */
    public static final int UTILITY_PROCESS_VALUE = 4;
    /**
     * <code>ZYGOTE_PROCESS = 5;</code>
     */
    public static final int ZYGOTE_PROCESS_VALUE = 5;
    /**
     * <code>SANDBOX_HELPER_PROCESS = 6;</code>
     */
    public static final int SANDBOX_HELPER_PROCESS_VALUE = 6;
    /**
     * <code>PPAPI_PLUGIN_PROCESS = 7;</code>
     */
    public static final int PPAPI_PLUGIN_PROCESS_VALUE = 7;
    /**
     * <code>PPAPI_BROKER_PROCESS = 8;</code>
     */
    public static final int PPAPI_BROKER_PROCESS_VALUE = 8;
    /**
     * <code>NETWORK_SERVICE_PROCESS = 10;</code>
     */
    public static final int NETWORK_SERVICE_PROCESS_VALUE = 10;
    /**
     * <pre>
     * A Chrome process not identified by any other enum. Defined for the benefit
     * of Chrome OS. Do not use for the Chrome sampling profiler; define a new
     * enum instead.
     * </pre>
     *
     * <code>OTHER_PROCESS = 9;</code>
     */
    public static final int OTHER_PROCESS_VALUE = 9;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Process valueOf(int value) {
      return forNumber(value);
    }

    public static Process forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_PROCESS;
        case 1: return BROWSER_PROCESS;
        case 2: return RENDERER_PROCESS;
        case 3: return GPU_PROCESS;
        case 4: return UTILITY_PROCESS;
        case 5: return ZYGOTE_PROCESS;
        case 6: return SANDBOX_HELPER_PROCESS;
        case 7: return PPAPI_PLUGIN_PROCESS;
        case 8: return PPAPI_BROKER_PROCESS;
        case 10: return NETWORK_SERVICE_PROCESS;
        case 9: return OTHER_PROCESS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Process>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Process> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Process>() {
            @java.lang.Override
            public Process findValueByNumber(int number) {
              return Process.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return ProcessVerifier.INSTANCE;
    }

    private static final class ProcessVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new ProcessVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return Process.forNumber(number) != null;
            }
          };

    private final int value;

    private Process(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:metrics.Process)
  }

  /**
   * <pre>
   * Chrome thread. This list is not exhaustive.
   * </pre>
   *
   * Protobuf enum {@code metrics.Thread}
   */
  public enum Thread
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>UNKNOWN_THREAD = 0;</code>
     */
    UNKNOWN_THREAD(0),
    /**
     * <pre>
     * The 'main thread' in various processes. In browser process, this is
     * sometimes also called the 'ui thread'.
     * </pre>
     *
     * <code>MAIN_THREAD = 1;</code>
     */
    MAIN_THREAD(1),
    /**
     * <pre>
     * Deprecated.
     * </pre>
     *
     * <code>FILE_THREAD = 2;</code>
     */
    FILE_THREAD(2),
    /**
     * <pre>
     * Deprecated.
     * </pre>
     *
     * <code>FILE_USER_BLOCKING_THREAD = 3;</code>
     */
    FILE_USER_BLOCKING_THREAD(3),
    /**
     * <pre>
     * Deprecated.
     * </pre>
     *
     * <code>PROCESS_LAUNCHER_THREAD = 4;</code>
     */
    PROCESS_LAUNCHER_THREAD(4),
    /**
     * <pre>
     * Deprecated.
     * </pre>
     *
     * <code>CACHE_THREAD = 5;</code>
     */
    CACHE_THREAD(5),
    /**
     * <code>IO_THREAD = 6;</code>
     */
    IO_THREAD(6),
    /**
     * <pre>
     * Deprecated.
     * </pre>
     *
     * <code>DB_THREAD = 7;</code>
     */
    DB_THREAD(7),
    /**
     * <pre>
     * Deprecated.
     * </pre>
     *
     * <code>GPU_MAIN_THREAD = 8;</code>
     */
    GPU_MAIN_THREAD(8),
    /**
     * <pre>
     * Deprecated.
     * </pre>
     *
     * <code>RENDER_THREAD = 9;</code>
     */
    RENDER_THREAD(9),
    /**
     * <pre>
     * Deprecated.
     * </pre>
     *
     * <code>UTILITY_THREAD = 10;</code>
     */
    UTILITY_THREAD(10),
    /**
     * <pre>
     * Compositor thread (can be in both renderer and gpu processes).
     * </pre>
     *
     * <code>COMPOSITOR_THREAD = 11;</code>
     */
    COMPOSITOR_THREAD(11),
    /**
     * <pre>
     * Task scheduler thread.
     * </pre>
     *
     * <code>SCHEDULER_WORKER_THREAD = 13;</code>
     */
    SCHEDULER_WORKER_THREAD(13),
    /**
     * <code>COMPOSITOR_TILE_WORKER_THREAD = 14;</code>
     */
    COMPOSITOR_TILE_WORKER_THREAD(14),
    /**
     * <code>SERVICE_WORKER_THREAD = 15;</code>
     */
    SERVICE_WORKER_THREAD(15),
    /**
     * <pre>
     * DedicatedWorker thread in the renderer process.
     * </pre>
     *
     * <code>DEDICATED_WORKER_THREAD = 18;</code>
     */
    DEDICATED_WORKER_THREAD(18),
    /**
     * <pre>
     * Thread pool thread (can be in different Chrome processes).
     * </pre>
     *
     * <code>THREAD_POOL_THREAD = 16;</code>
     */
    THREAD_POOL_THREAD(16),
    /**
     * <pre>
     * GPU memory thread (in renderer process).
     * </pre>
     *
     * <code>GPU_MEMORY_THREAD = 17;</code>
     */
    GPU_MEMORY_THREAD(17),
    /**
     * <pre>
     * The thread for Chrome memory tracing (can be in different processes).
     * </pre>
     *
     * <code>MEMORY_INFRA_THREAD = 19;</code>
     */
    MEMORY_INFRA_THREAD(19),
    /**
     * <pre>
     * Media thread (in renderer process).
     * </pre>
     *
     * <code>MEDIA_THREAD = 20;</code>
     */
    MEDIA_THREAD(20),
    /**
     * <pre>
     * WebRTC threads, e.g. WebRTC_Signaling,WebRTC_Network (in renderer process).
     * </pre>
     *
     * <code>WEBRTC_THREAD = 21;</code>
     */
    WEBRTC_THREAD(21),
    /**
     * <pre>
     * A Chrome thread not identified by any other enum. Defined for the benefit
     * of Chrome OS. Do not use for the Chrome sampling profiler; define a new
     * enum instead.
     * </pre>
     *
     * <code>OTHER_THREAD = 12;</code>
     */
    OTHER_THREAD(12),
    ;

    /**
     * <code>UNKNOWN_THREAD = 0;</code>
     */
    public static final int UNKNOWN_THREAD_VALUE = 0;
    /**
     * <pre>
     * The 'main thread' in various processes. In browser process, this is
     * sometimes also called the 'ui thread'.
     * </pre>
     *
     * <code>MAIN_THREAD = 1;</code>
     */
    public static final int MAIN_THREAD_VALUE = 1;
    /**
     * <pre>
     * Deprecated.
     * </pre>
     *
     * <code>FILE_THREAD = 2;</code>
     */
    public static final int FILE_THREAD_VALUE = 2;
    /**
     * <pre>
     * Deprecated.
     * </pre>
     *
     * <code>FILE_USER_BLOCKING_THREAD = 3;</code>
     */
    public static final int FILE_USER_BLOCKING_THREAD_VALUE = 3;
    /**
     * <pre>
     * Deprecated.
     * </pre>
     *
     * <code>PROCESS_LAUNCHER_THREAD = 4;</code>
     */
    public static final int PROCESS_LAUNCHER_THREAD_VALUE = 4;
    /**
     * <pre>
     * Deprecated.
     * </pre>
     *
     * <code>CACHE_THREAD = 5;</code>
     */
    public static final int CACHE_THREAD_VALUE = 5;
    /**
     * <code>IO_THREAD = 6;</code>
     */
    public static final int IO_THREAD_VALUE = 6;
    /**
     * <pre>
     * Deprecated.
     * </pre>
     *
     * <code>DB_THREAD = 7;</code>
     */
    public static final int DB_THREAD_VALUE = 7;
    /**
     * <pre>
     * Deprecated.
     * </pre>
     *
     * <code>GPU_MAIN_THREAD = 8;</code>
     */
    public static final int GPU_MAIN_THREAD_VALUE = 8;
    /**
     * <pre>
     * Deprecated.
     * </pre>
     *
     * <code>RENDER_THREAD = 9;</code>
     */
    public static final int RENDER_THREAD_VALUE = 9;
    /**
     * <pre>
     * Deprecated.
     * </pre>
     *
     * <code>UTILITY_THREAD = 10;</code>
     */
    public static final int UTILITY_THREAD_VALUE = 10;
    /**
     * <pre>
     * Compositor thread (can be in both renderer and gpu processes).
     * </pre>
     *
     * <code>COMPOSITOR_THREAD = 11;</code>
     */
    public static final int COMPOSITOR_THREAD_VALUE = 11;
    /**
     * <pre>
     * Task scheduler thread.
     * </pre>
     *
     * <code>SCHEDULER_WORKER_THREAD = 13;</code>
     */
    public static final int SCHEDULER_WORKER_THREAD_VALUE = 13;
    /**
     * <code>COMPOSITOR_TILE_WORKER_THREAD = 14;</code>
     */
    public static final int COMPOSITOR_TILE_WORKER_THREAD_VALUE = 14;
    /**
     * <code>SERVICE_WORKER_THREAD = 15;</code>
     */
    public static final int SERVICE_WORKER_THREAD_VALUE = 15;
    /**
     * <pre>
     * DedicatedWorker thread in the renderer process.
     * </pre>
     *
     * <code>DEDICATED_WORKER_THREAD = 18;</code>
     */
    public static final int DEDICATED_WORKER_THREAD_VALUE = 18;
    /**
     * <pre>
     * Thread pool thread (can be in different Chrome processes).
     * </pre>
     *
     * <code>THREAD_POOL_THREAD = 16;</code>
     */
    public static final int THREAD_POOL_THREAD_VALUE = 16;
    /**
     * <pre>
     * GPU memory thread (in renderer process).
     * </pre>
     *
     * <code>GPU_MEMORY_THREAD = 17;</code>
     */
    public static final int GPU_MEMORY_THREAD_VALUE = 17;
    /**
     * <pre>
     * The thread for Chrome memory tracing (can be in different processes).
     * </pre>
     *
     * <code>MEMORY_INFRA_THREAD = 19;</code>
     */
    public static final int MEMORY_INFRA_THREAD_VALUE = 19;
    /**
     * <pre>
     * Media thread (in renderer process).
     * </pre>
     *
     * <code>MEDIA_THREAD = 20;</code>
     */
    public static final int MEDIA_THREAD_VALUE = 20;
    /**
     * <pre>
     * WebRTC threads, e.g. WebRTC_Signaling,WebRTC_Network (in renderer process).
     * </pre>
     *
     * <code>WEBRTC_THREAD = 21;</code>
     */
    public static final int WEBRTC_THREAD_VALUE = 21;
    /**
     * <pre>
     * A Chrome thread not identified by any other enum. Defined for the benefit
     * of Chrome OS. Do not use for the Chrome sampling profiler; define a new
     * enum instead.
     * </pre>
     *
     * <code>OTHER_THREAD = 12;</code>
     */
    public static final int OTHER_THREAD_VALUE = 12;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Thread valueOf(int value) {
      return forNumber(value);
    }

    public static Thread forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_THREAD;
        case 1: return MAIN_THREAD;
        case 2: return FILE_THREAD;
        case 3: return FILE_USER_BLOCKING_THREAD;
        case 4: return PROCESS_LAUNCHER_THREAD;
        case 5: return CACHE_THREAD;
        case 6: return IO_THREAD;
        case 7: return DB_THREAD;
        case 8: return GPU_MAIN_THREAD;
        case 9: return RENDER_THREAD;
        case 10: return UTILITY_THREAD;
        case 11: return COMPOSITOR_THREAD;
        case 13: return SCHEDULER_WORKER_THREAD;
        case 14: return COMPOSITOR_TILE_WORKER_THREAD;
        case 15: return SERVICE_WORKER_THREAD;
        case 18: return DEDICATED_WORKER_THREAD;
        case 16: return THREAD_POOL_THREAD;
        case 17: return GPU_MEMORY_THREAD;
        case 19: return MEMORY_INFRA_THREAD;
        case 20: return MEDIA_THREAD;
        case 21: return WEBRTC_THREAD;
        case 12: return OTHER_THREAD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Thread>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Thread> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Thread>() {
            @java.lang.Override
            public Thread findValueByNumber(int number) {
              return Thread.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return ThreadVerifier.INSTANCE;
    }

    private static final class ThreadVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new ThreadVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return Thread.forNumber(number) != null;
            }
          };

    private final int value;

    private Thread(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:metrics.Thread)
  }

  /**
   * <pre>
   * Process phases, or where in the lifetime of the process it is such as
   * startup, normal operation, shutdown, etc. These don't necessarily occur in
   * the order defined here so it's fine to add new ones to further segregrate
   * the lifetime of a process.
   * </pre>
   *
   * Protobuf enum {@code metrics.ProcessPhase}
   */
  public enum ProcessPhase
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * The browser's main message loop has been started.
     * Based on histogram Startup.MessageLoopStartTime
     * </pre>
     *
     * <code>MAIN_LOOP_START = 0;</code>
     */
    MAIN_LOOP_START(0),
    /**
     * <pre>
     * The beginning of navigation in the first web contents' main frame.
     * Based on histogram Startup.FirstWebContents.MainNavigationStart
     * </pre>
     *
     * <code>MAIN_NAVIGATION_START = 1;</code>
     */
    MAIN_NAVIGATION_START(1),
    /**
     * <pre>
     * The navigation is committed (first bytes received) in the first web
     * contents' main frame.
     * Based on histogram Startup.FirstWebContents.MainNavigationFinished
     * </pre>
     *
     * <code>MAIN_NAVIGATION_FINISHED = 2;</code>
     */
    MAIN_NAVIGATION_FINISHED(2),
    /**
     * <pre>
     * First non-empty paint of the first web contents.
     * Based on histogram Startup.FirstWebContents.NonEmptyPaint2
     * </pre>
     *
     * <code>FIRST_NONEMPTY_PAINT = 3;</code>
     */
    FIRST_NONEMPTY_PAINT(3),
    /**
     * <pre>
     * Process shutdown has begun.
     * </pre>
     *
     * <code>SHUTDOWN_START = 4;</code>
     */
    SHUTDOWN_START(4),
    ;

    /**
     * <pre>
     * The browser's main message loop has been started.
     * Based on histogram Startup.MessageLoopStartTime
     * </pre>
     *
     * <code>MAIN_LOOP_START = 0;</code>
     */
    public static final int MAIN_LOOP_START_VALUE = 0;
    /**
     * <pre>
     * The beginning of navigation in the first web contents' main frame.
     * Based on histogram Startup.FirstWebContents.MainNavigationStart
     * </pre>
     *
     * <code>MAIN_NAVIGATION_START = 1;</code>
     */
    public static final int MAIN_NAVIGATION_START_VALUE = 1;
    /**
     * <pre>
     * The navigation is committed (first bytes received) in the first web
     * contents' main frame.
     * Based on histogram Startup.FirstWebContents.MainNavigationFinished
     * </pre>
     *
     * <code>MAIN_NAVIGATION_FINISHED = 2;</code>
     */
    public static final int MAIN_NAVIGATION_FINISHED_VALUE = 2;
    /**
     * <pre>
     * First non-empty paint of the first web contents.
     * Based on histogram Startup.FirstWebContents.NonEmptyPaint2
     * </pre>
     *
     * <code>FIRST_NONEMPTY_PAINT = 3;</code>
     */
    public static final int FIRST_NONEMPTY_PAINT_VALUE = 3;
    /**
     * <pre>
     * Process shutdown has begun.
     * </pre>
     *
     * <code>SHUTDOWN_START = 4;</code>
     */
    public static final int SHUTDOWN_START_VALUE = 4;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ProcessPhase valueOf(int value) {
      return forNumber(value);
    }

    public static ProcessPhase forNumber(int value) {
      switch (value) {
        case 0: return MAIN_LOOP_START;
        case 1: return MAIN_NAVIGATION_START;
        case 2: return MAIN_NAVIGATION_FINISHED;
        case 3: return FIRST_NONEMPTY_PAINT;
        case 4: return SHUTDOWN_START;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ProcessPhase>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ProcessPhase> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ProcessPhase>() {
            @java.lang.Override
            public ProcessPhase findValueByNumber(int number) {
              return ProcessPhase.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return ProcessPhaseVerifier.INSTANCE;
    }

    private static final class ProcessPhaseVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new ProcessPhaseVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return ProcessPhase.forNumber(number) != null;
            }
          };

    private final int value;

    private ProcessPhase(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:metrics.ProcessPhase)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
