// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/ui/piet/shadows.proto

package org.chromium.components.feed.core.proto.ui.piet;

public final class ShadowsProto {
  private ShadowsProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface ShadowOrBuilder extends
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.Shadow)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * BoxShadow definition. Supported by the web and iOS clients.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.BoxShadow box_shadow = 1;</code>
     * @return Whether the boxShadow field is set.
     */
    boolean hasBoxShadow();
    /**
     * <pre>
     * BoxShadow definition. Supported by the web and iOS clients.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.BoxShadow box_shadow = 1;</code>
     * @return The boxShadow.
     */
    org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow getBoxShadow();

    /**
     * <pre>
     * Simple elevation-based shadow. Supported by Android.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ElevationShadow elevation_shadow = 2;</code>
     * @return Whether the elevationShadow field is set.
     */
    boolean hasElevationShadow();
    /**
     * <pre>
     * Simple elevation-based shadow. Supported by Android.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ElevationShadow elevation_shadow = 2;</code>
     * @return The elevationShadow.
     */
    org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow getElevationShadow();
  }
  /**
   * <pre>
   * Defines a shadow for a given element. This message has sub-messages that
   * correspond to different methods that define shadows. Each client might
   * support a subset of the methodologies, will ignore the ones it does not
   * support, and may have a priority order for which type is used when multiple
   * shadow messages are defined (probably defaulting to the most descriptive
   * shadow type supported by the platform).
   * See [INTERNAL LINK]
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.piet.Shadow}
   */
  public  static final class Shadow extends
      com.google.protobuf.GeneratedMessageLite<
          Shadow, Shadow.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.Shadow)
      ShadowOrBuilder {
    private Shadow() {
    }
    private int bitField0_;
    public static final int BOX_SHADOW_FIELD_NUMBER = 1;
    private org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow boxShadow_;
    /**
     * <pre>
     * BoxShadow definition. Supported by the web and iOS clients.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.BoxShadow box_shadow = 1;</code>
     */
    @java.lang.Override
    public boolean hasBoxShadow() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * BoxShadow definition. Supported by the web and iOS clients.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.BoxShadow box_shadow = 1;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow getBoxShadow() {
      return boxShadow_ == null ? org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow.getDefaultInstance() : boxShadow_;
    }
    /**
     * <pre>
     * BoxShadow definition. Supported by the web and iOS clients.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.BoxShadow box_shadow = 1;</code>
     */
    private void setBoxShadow(org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow value) {
      value.getClass();
  boxShadow_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * BoxShadow definition. Supported by the web and iOS clients.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.BoxShadow box_shadow = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeBoxShadow(org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow value) {
      value.getClass();
  if (boxShadow_ != null &&
          boxShadow_ != org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow.getDefaultInstance()) {
        boxShadow_ =
          org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow.newBuilder(boxShadow_).mergeFrom(value).buildPartial();
      } else {
        boxShadow_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * BoxShadow definition. Supported by the web and iOS clients.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.BoxShadow box_shadow = 1;</code>
     */
    private void clearBoxShadow() {  boxShadow_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int ELEVATION_SHADOW_FIELD_NUMBER = 2;
    private org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow elevationShadow_;
    /**
     * <pre>
     * Simple elevation-based shadow. Supported by Android.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ElevationShadow elevation_shadow = 2;</code>
     */
    @java.lang.Override
    public boolean hasElevationShadow() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Simple elevation-based shadow. Supported by Android.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ElevationShadow elevation_shadow = 2;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow getElevationShadow() {
      return elevationShadow_ == null ? org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow.getDefaultInstance() : elevationShadow_;
    }
    /**
     * <pre>
     * Simple elevation-based shadow. Supported by Android.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ElevationShadow elevation_shadow = 2;</code>
     */
    private void setElevationShadow(org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow value) {
      value.getClass();
  elevationShadow_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <pre>
     * Simple elevation-based shadow. Supported by Android.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ElevationShadow elevation_shadow = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeElevationShadow(org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow value) {
      value.getClass();
  if (elevationShadow_ != null &&
          elevationShadow_ != org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow.getDefaultInstance()) {
        elevationShadow_ =
          org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow.newBuilder(elevationShadow_).mergeFrom(value).buildPartial();
      } else {
        elevationShadow_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * Simple elevation-based shadow. Supported by Android.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ElevationShadow elevation_shadow = 2;</code>
     */
    private void clearElevationShadow() {  elevationShadow_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Defines a shadow for a given element. This message has sub-messages that
     * correspond to different methods that define shadows. Each client might
     * support a subset of the methodologies, will ignore the ones it does not
     * support, and may have a priority order for which type is used when multiple
     * shadow messages are defined (probably defaulting to the most descriptive
     * shadow type supported by the platform).
     * See [INTERNAL LINK]
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.piet.Shadow}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.Shadow)
        org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ShadowOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * BoxShadow definition. Supported by the web and iOS clients.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.BoxShadow box_shadow = 1;</code>
       */
      @java.lang.Override
      public boolean hasBoxShadow() {
        return instance.hasBoxShadow();
      }
      /**
       * <pre>
       * BoxShadow definition. Supported by the web and iOS clients.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.BoxShadow box_shadow = 1;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow getBoxShadow() {
        return instance.getBoxShadow();
      }
      /**
       * <pre>
       * BoxShadow definition. Supported by the web and iOS clients.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.BoxShadow box_shadow = 1;</code>
       */
      public Builder setBoxShadow(org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow value) {
        copyOnWrite();
        instance.setBoxShadow(value);
        return this;
        }
      /**
       * <pre>
       * BoxShadow definition. Supported by the web and iOS clients.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.BoxShadow box_shadow = 1;</code>
       */
      public Builder setBoxShadow(
          org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow.Builder builderForValue) {
        copyOnWrite();
        instance.setBoxShadow(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * BoxShadow definition. Supported by the web and iOS clients.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.BoxShadow box_shadow = 1;</code>
       */
      public Builder mergeBoxShadow(org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow value) {
        copyOnWrite();
        instance.mergeBoxShadow(value);
        return this;
      }
      /**
       * <pre>
       * BoxShadow definition. Supported by the web and iOS clients.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.BoxShadow box_shadow = 1;</code>
       */
      public Builder clearBoxShadow() {  copyOnWrite();
        instance.clearBoxShadow();
        return this;
      }

      /**
       * <pre>
       * Simple elevation-based shadow. Supported by Android.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ElevationShadow elevation_shadow = 2;</code>
       */
      @java.lang.Override
      public boolean hasElevationShadow() {
        return instance.hasElevationShadow();
      }
      /**
       * <pre>
       * Simple elevation-based shadow. Supported by Android.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ElevationShadow elevation_shadow = 2;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow getElevationShadow() {
        return instance.getElevationShadow();
      }
      /**
       * <pre>
       * Simple elevation-based shadow. Supported by Android.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ElevationShadow elevation_shadow = 2;</code>
       */
      public Builder setElevationShadow(org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow value) {
        copyOnWrite();
        instance.setElevationShadow(value);
        return this;
        }
      /**
       * <pre>
       * Simple elevation-based shadow. Supported by Android.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ElevationShadow elevation_shadow = 2;</code>
       */
      public Builder setElevationShadow(
          org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow.Builder builderForValue) {
        copyOnWrite();
        instance.setElevationShadow(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Simple elevation-based shadow. Supported by Android.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ElevationShadow elevation_shadow = 2;</code>
       */
      public Builder mergeElevationShadow(org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow value) {
        copyOnWrite();
        instance.mergeElevationShadow(value);
        return this;
      }
      /**
       * <pre>
       * Simple elevation-based shadow. Supported by Android.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ElevationShadow elevation_shadow = 2;</code>
       */
      public Builder clearElevationShadow() {  copyOnWrite();
        instance.clearElevationShadow();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.Shadow)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "boxShadow_",
              "elevationShadow_",
            };
            java.lang.String info =
                "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
                "\u1009\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.Shadow)
    private static final org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow DEFAULT_INSTANCE;
    static {
      Shadow defaultInstance = new Shadow();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Shadow.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Shadow> PARSER;

    public static com.google.protobuf.Parser<Shadow> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface BoxShadowOrBuilder extends
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.BoxShadow)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Defines the horizontal offset of the shadow.
     *  * A positive value puts the shadow on the right side of the box (does not
     *    flip in RTL presentation).
     *  * A negative value puts the shadow on the left side of the box.
     * </pre>
     *
     * <code>optional int32 offset_x = 1;</code>
     * @return Whether the offsetX field is set.
     */
    boolean hasOffsetX();
    /**
     * <pre>
     * Defines the horizontal offset of the shadow.
     *  * A positive value puts the shadow on the right side of the box (does not
     *    flip in RTL presentation).
     *  * A negative value puts the shadow on the left side of the box.
     * </pre>
     *
     * <code>optional int32 offset_x = 1;</code>
     * @return The offsetX.
     */
    int getOffsetX();

    /**
     * <pre>
     * Defines the vertical offset of the shadow.
     *  * A positive value puts the shadow below the box.
     *  * A negative value puts the shadow above the box.
     * </pre>
     *
     * <code>optional int32 offset_y = 2;</code>
     * @return Whether the offsetY field is set.
     */
    boolean hasOffsetY();
    /**
     * <pre>
     * Defines the vertical offset of the shadow.
     *  * A positive value puts the shadow below the box.
     *  * A negative value puts the shadow above the box.
     * </pre>
     *
     * <code>optional int32 offset_y = 2;</code>
     * @return The offsetY.
     */
    int getOffsetY();

    /**
     * <pre>
     * The blur radius of the shadow. The higher the number, the more blurred the
     * shadow will be.
     * </pre>
     *
     * <code>optional int32 blur_radius = 3;</code>
     * @return Whether the blurRadius field is set.
     */
    boolean hasBlurRadius();
    /**
     * <pre>
     * The blur radius of the shadow. The higher the number, the more blurred the
     * shadow will be.
     * </pre>
     *
     * <code>optional int32 blur_radius = 3;</code>
     * @return The blurRadius.
     */
    int getBlurRadius();

    /**
     * <pre>
     * The spread radius of the shadow. A positive value increases the size of the
     * shadow, a negative value decreases the size of the shadow.
     * Not supported by iOS.
     * </pre>
     *
     * <code>optional int32 spread_radius = 4;</code>
     * @return Whether the spreadRadius field is set.
     */
    boolean hasSpreadRadius();
    /**
     * <pre>
     * The spread radius of the shadow. A positive value increases the size of the
     * shadow, a negative value decreases the size of the shadow.
     * Not supported by iOS.
     * </pre>
     *
     * <code>optional int32 spread_radius = 4;</code>
     * @return The spreadRadius.
     */
    int getSpreadRadius();

    /**
     * <pre>
     * Defines whether the shadow should appear on the inside (is_inset == true),
     * or the outside (is_inset == false).
     * Not supported by iOS.
     * </pre>
     *
     * <code>optional bool is_inset = 5;</code>
     * @return Whether the isInset field is set.
     */
    boolean hasIsInset();
    /**
     * <pre>
     * Defines whether the shadow should appear on the inside (is_inset == true),
     * or the outside (is_inset == false).
     * Not supported by iOS.
     * </pre>
     *
     * <code>optional bool is_inset = 5;</code>
     * @return The isInset.
     */
    boolean getIsInset();

    /**
     * <pre>
     * The color of the shadow.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     * @return Whether the color field is set.
     */
    boolean hasColor();
    /**
     * <pre>
     * The color of the shadow.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     * @return The color.
     */
    int getColor();
  }
  /**
   * <pre>
   * Defines a box shadow, as described in the CSS spec:
   * https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow.
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.piet.BoxShadow}
   */
  public  static final class BoxShadow extends
      com.google.protobuf.GeneratedMessageLite<
          BoxShadow, BoxShadow.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.BoxShadow)
      BoxShadowOrBuilder {
    private BoxShadow() {
    }
    private int bitField0_;
    public static final int OFFSET_X_FIELD_NUMBER = 1;
    private int offsetX_;
    /**
     * <pre>
     * Defines the horizontal offset of the shadow.
     *  * A positive value puts the shadow on the right side of the box (does not
     *    flip in RTL presentation).
     *  * A negative value puts the shadow on the left side of the box.
     * </pre>
     *
     * <code>optional int32 offset_x = 1;</code>
     * @return Whether the offsetX field is set.
     */
    @java.lang.Override
    public boolean hasOffsetX() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Defines the horizontal offset of the shadow.
     *  * A positive value puts the shadow on the right side of the box (does not
     *    flip in RTL presentation).
     *  * A negative value puts the shadow on the left side of the box.
     * </pre>
     *
     * <code>optional int32 offset_x = 1;</code>
     * @return The offsetX.
     */
    @java.lang.Override
    public int getOffsetX() {
      return offsetX_;
    }
    /**
     * <pre>
     * Defines the horizontal offset of the shadow.
     *  * A positive value puts the shadow on the right side of the box (does not
     *    flip in RTL presentation).
     *  * A negative value puts the shadow on the left side of the box.
     * </pre>
     *
     * <code>optional int32 offset_x = 1;</code>
     * @param value The offsetX to set.
     */
    private void setOffsetX(int value) {
      bitField0_ |= 0x00000001;
      offsetX_ = value;
    }
    /**
     * <pre>
     * Defines the horizontal offset of the shadow.
     *  * A positive value puts the shadow on the right side of the box (does not
     *    flip in RTL presentation).
     *  * A negative value puts the shadow on the left side of the box.
     * </pre>
     *
     * <code>optional int32 offset_x = 1;</code>
     */
    private void clearOffsetX() {
      bitField0_ = (bitField0_ & ~0x00000001);
      offsetX_ = 0;
    }

    public static final int OFFSET_Y_FIELD_NUMBER = 2;
    private int offsetY_;
    /**
     * <pre>
     * Defines the vertical offset of the shadow.
     *  * A positive value puts the shadow below the box.
     *  * A negative value puts the shadow above the box.
     * </pre>
     *
     * <code>optional int32 offset_y = 2;</code>
     * @return Whether the offsetY field is set.
     */
    @java.lang.Override
    public boolean hasOffsetY() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Defines the vertical offset of the shadow.
     *  * A positive value puts the shadow below the box.
     *  * A negative value puts the shadow above the box.
     * </pre>
     *
     * <code>optional int32 offset_y = 2;</code>
     * @return The offsetY.
     */
    @java.lang.Override
    public int getOffsetY() {
      return offsetY_;
    }
    /**
     * <pre>
     * Defines the vertical offset of the shadow.
     *  * A positive value puts the shadow below the box.
     *  * A negative value puts the shadow above the box.
     * </pre>
     *
     * <code>optional int32 offset_y = 2;</code>
     * @param value The offsetY to set.
     */
    private void setOffsetY(int value) {
      bitField0_ |= 0x00000002;
      offsetY_ = value;
    }
    /**
     * <pre>
     * Defines the vertical offset of the shadow.
     *  * A positive value puts the shadow below the box.
     *  * A negative value puts the shadow above the box.
     * </pre>
     *
     * <code>optional int32 offset_y = 2;</code>
     */
    private void clearOffsetY() {
      bitField0_ = (bitField0_ & ~0x00000002);
      offsetY_ = 0;
    }

    public static final int BLUR_RADIUS_FIELD_NUMBER = 3;
    private int blurRadius_;
    /**
     * <pre>
     * The blur radius of the shadow. The higher the number, the more blurred the
     * shadow will be.
     * </pre>
     *
     * <code>optional int32 blur_radius = 3;</code>
     * @return Whether the blurRadius field is set.
     */
    @java.lang.Override
    public boolean hasBlurRadius() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The blur radius of the shadow. The higher the number, the more blurred the
     * shadow will be.
     * </pre>
     *
     * <code>optional int32 blur_radius = 3;</code>
     * @return The blurRadius.
     */
    @java.lang.Override
    public int getBlurRadius() {
      return blurRadius_;
    }
    /**
     * <pre>
     * The blur radius of the shadow. The higher the number, the more blurred the
     * shadow will be.
     * </pre>
     *
     * <code>optional int32 blur_radius = 3;</code>
     * @param value The blurRadius to set.
     */
    private void setBlurRadius(int value) {
      bitField0_ |= 0x00000004;
      blurRadius_ = value;
    }
    /**
     * <pre>
     * The blur radius of the shadow. The higher the number, the more blurred the
     * shadow will be.
     * </pre>
     *
     * <code>optional int32 blur_radius = 3;</code>
     */
    private void clearBlurRadius() {
      bitField0_ = (bitField0_ & ~0x00000004);
      blurRadius_ = 0;
    }

    public static final int SPREAD_RADIUS_FIELD_NUMBER = 4;
    private int spreadRadius_;
    /**
     * <pre>
     * The spread radius of the shadow. A positive value increases the size of the
     * shadow, a negative value decreases the size of the shadow.
     * Not supported by iOS.
     * </pre>
     *
     * <code>optional int32 spread_radius = 4;</code>
     * @return Whether the spreadRadius field is set.
     */
    @java.lang.Override
    public boolean hasSpreadRadius() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The spread radius of the shadow. A positive value increases the size of the
     * shadow, a negative value decreases the size of the shadow.
     * Not supported by iOS.
     * </pre>
     *
     * <code>optional int32 spread_radius = 4;</code>
     * @return The spreadRadius.
     */
    @java.lang.Override
    public int getSpreadRadius() {
      return spreadRadius_;
    }
    /**
     * <pre>
     * The spread radius of the shadow. A positive value increases the size of the
     * shadow, a negative value decreases the size of the shadow.
     * Not supported by iOS.
     * </pre>
     *
     * <code>optional int32 spread_radius = 4;</code>
     * @param value The spreadRadius to set.
     */
    private void setSpreadRadius(int value) {
      bitField0_ |= 0x00000008;
      spreadRadius_ = value;
    }
    /**
     * <pre>
     * The spread radius of the shadow. A positive value increases the size of the
     * shadow, a negative value decreases the size of the shadow.
     * Not supported by iOS.
     * </pre>
     *
     * <code>optional int32 spread_radius = 4;</code>
     */
    private void clearSpreadRadius() {
      bitField0_ = (bitField0_ & ~0x00000008);
      spreadRadius_ = 0;
    }

    public static final int IS_INSET_FIELD_NUMBER = 5;
    private boolean isInset_;
    /**
     * <pre>
     * Defines whether the shadow should appear on the inside (is_inset == true),
     * or the outside (is_inset == false).
     * Not supported by iOS.
     * </pre>
     *
     * <code>optional bool is_inset = 5;</code>
     * @return Whether the isInset field is set.
     */
    @java.lang.Override
    public boolean hasIsInset() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Defines whether the shadow should appear on the inside (is_inset == true),
     * or the outside (is_inset == false).
     * Not supported by iOS.
     * </pre>
     *
     * <code>optional bool is_inset = 5;</code>
     * @return The isInset.
     */
    @java.lang.Override
    public boolean getIsInset() {
      return isInset_;
    }
    /**
     * <pre>
     * Defines whether the shadow should appear on the inside (is_inset == true),
     * or the outside (is_inset == false).
     * Not supported by iOS.
     * </pre>
     *
     * <code>optional bool is_inset = 5;</code>
     * @param value The isInset to set.
     */
    private void setIsInset(boolean value) {
      bitField0_ |= 0x00000010;
      isInset_ = value;
    }
    /**
     * <pre>
     * Defines whether the shadow should appear on the inside (is_inset == true),
     * or the outside (is_inset == false).
     * Not supported by iOS.
     * </pre>
     *
     * <code>optional bool is_inset = 5;</code>
     */
    private void clearIsInset() {
      bitField0_ = (bitField0_ & ~0x00000010);
      isInset_ = false;
    }

    public static final int COLOR_FIELD_NUMBER = 6;
    private int color_;
    /**
     * <pre>
     * The color of the shadow.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     * @return Whether the color field is set.
     */
    @java.lang.Override
    public boolean hasColor() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * The color of the shadow.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     * @return The color.
     */
    @java.lang.Override
    public int getColor() {
      return color_;
    }
    /**
     * <pre>
     * The color of the shadow.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     * @param value The color to set.
     */
    private void setColor(int value) {
      bitField0_ |= 0x00000020;
      color_ = value;
    }
    /**
     * <pre>
     * The color of the shadow.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     */
    private void clearColor() {
      bitField0_ = (bitField0_ & ~0x00000020);
      color_ = 0;
    }

    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Defines a box shadow, as described in the CSS spec:
     * https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow.
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.piet.BoxShadow}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.BoxShadow)
        org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadowOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Defines the horizontal offset of the shadow.
       *  * A positive value puts the shadow on the right side of the box (does not
       *    flip in RTL presentation).
       *  * A negative value puts the shadow on the left side of the box.
       * </pre>
       *
       * <code>optional int32 offset_x = 1;</code>
       * @return Whether the offsetX field is set.
       */
      @java.lang.Override
      public boolean hasOffsetX() {
        return instance.hasOffsetX();
      }
      /**
       * <pre>
       * Defines the horizontal offset of the shadow.
       *  * A positive value puts the shadow on the right side of the box (does not
       *    flip in RTL presentation).
       *  * A negative value puts the shadow on the left side of the box.
       * </pre>
       *
       * <code>optional int32 offset_x = 1;</code>
       * @return The offsetX.
       */
      @java.lang.Override
      public int getOffsetX() {
        return instance.getOffsetX();
      }
      /**
       * <pre>
       * Defines the horizontal offset of the shadow.
       *  * A positive value puts the shadow on the right side of the box (does not
       *    flip in RTL presentation).
       *  * A negative value puts the shadow on the left side of the box.
       * </pre>
       *
       * <code>optional int32 offset_x = 1;</code>
       * @param value The offsetX to set.
       * @return This builder for chaining.
       */
      public Builder setOffsetX(int value) {
        copyOnWrite();
        instance.setOffsetX(value);
        return this;
      }
      /**
       * <pre>
       * Defines the horizontal offset of the shadow.
       *  * A positive value puts the shadow on the right side of the box (does not
       *    flip in RTL presentation).
       *  * A negative value puts the shadow on the left side of the box.
       * </pre>
       *
       * <code>optional int32 offset_x = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearOffsetX() {
        copyOnWrite();
        instance.clearOffsetX();
        return this;
      }

      /**
       * <pre>
       * Defines the vertical offset of the shadow.
       *  * A positive value puts the shadow below the box.
       *  * A negative value puts the shadow above the box.
       * </pre>
       *
       * <code>optional int32 offset_y = 2;</code>
       * @return Whether the offsetY field is set.
       */
      @java.lang.Override
      public boolean hasOffsetY() {
        return instance.hasOffsetY();
      }
      /**
       * <pre>
       * Defines the vertical offset of the shadow.
       *  * A positive value puts the shadow below the box.
       *  * A negative value puts the shadow above the box.
       * </pre>
       *
       * <code>optional int32 offset_y = 2;</code>
       * @return The offsetY.
       */
      @java.lang.Override
      public int getOffsetY() {
        return instance.getOffsetY();
      }
      /**
       * <pre>
       * Defines the vertical offset of the shadow.
       *  * A positive value puts the shadow below the box.
       *  * A negative value puts the shadow above the box.
       * </pre>
       *
       * <code>optional int32 offset_y = 2;</code>
       * @param value The offsetY to set.
       * @return This builder for chaining.
       */
      public Builder setOffsetY(int value) {
        copyOnWrite();
        instance.setOffsetY(value);
        return this;
      }
      /**
       * <pre>
       * Defines the vertical offset of the shadow.
       *  * A positive value puts the shadow below the box.
       *  * A negative value puts the shadow above the box.
       * </pre>
       *
       * <code>optional int32 offset_y = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearOffsetY() {
        copyOnWrite();
        instance.clearOffsetY();
        return this;
      }

      /**
       * <pre>
       * The blur radius of the shadow. The higher the number, the more blurred the
       * shadow will be.
       * </pre>
       *
       * <code>optional int32 blur_radius = 3;</code>
       * @return Whether the blurRadius field is set.
       */
      @java.lang.Override
      public boolean hasBlurRadius() {
        return instance.hasBlurRadius();
      }
      /**
       * <pre>
       * The blur radius of the shadow. The higher the number, the more blurred the
       * shadow will be.
       * </pre>
       *
       * <code>optional int32 blur_radius = 3;</code>
       * @return The blurRadius.
       */
      @java.lang.Override
      public int getBlurRadius() {
        return instance.getBlurRadius();
      }
      /**
       * <pre>
       * The blur radius of the shadow. The higher the number, the more blurred the
       * shadow will be.
       * </pre>
       *
       * <code>optional int32 blur_radius = 3;</code>
       * @param value The blurRadius to set.
       * @return This builder for chaining.
       */
      public Builder setBlurRadius(int value) {
        copyOnWrite();
        instance.setBlurRadius(value);
        return this;
      }
      /**
       * <pre>
       * The blur radius of the shadow. The higher the number, the more blurred the
       * shadow will be.
       * </pre>
       *
       * <code>optional int32 blur_radius = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearBlurRadius() {
        copyOnWrite();
        instance.clearBlurRadius();
        return this;
      }

      /**
       * <pre>
       * The spread radius of the shadow. A positive value increases the size of the
       * shadow, a negative value decreases the size of the shadow.
       * Not supported by iOS.
       * </pre>
       *
       * <code>optional int32 spread_radius = 4;</code>
       * @return Whether the spreadRadius field is set.
       */
      @java.lang.Override
      public boolean hasSpreadRadius() {
        return instance.hasSpreadRadius();
      }
      /**
       * <pre>
       * The spread radius of the shadow. A positive value increases the size of the
       * shadow, a negative value decreases the size of the shadow.
       * Not supported by iOS.
       * </pre>
       *
       * <code>optional int32 spread_radius = 4;</code>
       * @return The spreadRadius.
       */
      @java.lang.Override
      public int getSpreadRadius() {
        return instance.getSpreadRadius();
      }
      /**
       * <pre>
       * The spread radius of the shadow. A positive value increases the size of the
       * shadow, a negative value decreases the size of the shadow.
       * Not supported by iOS.
       * </pre>
       *
       * <code>optional int32 spread_radius = 4;</code>
       * @param value The spreadRadius to set.
       * @return This builder for chaining.
       */
      public Builder setSpreadRadius(int value) {
        copyOnWrite();
        instance.setSpreadRadius(value);
        return this;
      }
      /**
       * <pre>
       * The spread radius of the shadow. A positive value increases the size of the
       * shadow, a negative value decreases the size of the shadow.
       * Not supported by iOS.
       * </pre>
       *
       * <code>optional int32 spread_radius = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSpreadRadius() {
        copyOnWrite();
        instance.clearSpreadRadius();
        return this;
      }

      /**
       * <pre>
       * Defines whether the shadow should appear on the inside (is_inset == true),
       * or the outside (is_inset == false).
       * Not supported by iOS.
       * </pre>
       *
       * <code>optional bool is_inset = 5;</code>
       * @return Whether the isInset field is set.
       */
      @java.lang.Override
      public boolean hasIsInset() {
        return instance.hasIsInset();
      }
      /**
       * <pre>
       * Defines whether the shadow should appear on the inside (is_inset == true),
       * or the outside (is_inset == false).
       * Not supported by iOS.
       * </pre>
       *
       * <code>optional bool is_inset = 5;</code>
       * @return The isInset.
       */
      @java.lang.Override
      public boolean getIsInset() {
        return instance.getIsInset();
      }
      /**
       * <pre>
       * Defines whether the shadow should appear on the inside (is_inset == true),
       * or the outside (is_inset == false).
       * Not supported by iOS.
       * </pre>
       *
       * <code>optional bool is_inset = 5;</code>
       * @param value The isInset to set.
       * @return This builder for chaining.
       */
      public Builder setIsInset(boolean value) {
        copyOnWrite();
        instance.setIsInset(value);
        return this;
      }
      /**
       * <pre>
       * Defines whether the shadow should appear on the inside (is_inset == true),
       * or the outside (is_inset == false).
       * Not supported by iOS.
       * </pre>
       *
       * <code>optional bool is_inset = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsInset() {
        copyOnWrite();
        instance.clearIsInset();
        return this;
      }

      /**
       * <pre>
       * The color of the shadow.
       * </pre>
       *
       * <code>optional fixed32 color = 6;</code>
       * @return Whether the color field is set.
       */
      @java.lang.Override
      public boolean hasColor() {
        return instance.hasColor();
      }
      /**
       * <pre>
       * The color of the shadow.
       * </pre>
       *
       * <code>optional fixed32 color = 6;</code>
       * @return The color.
       */
      @java.lang.Override
      public int getColor() {
        return instance.getColor();
      }
      /**
       * <pre>
       * The color of the shadow.
       * </pre>
       *
       * <code>optional fixed32 color = 6;</code>
       * @param value The color to set.
       * @return This builder for chaining.
       */
      public Builder setColor(int value) {
        copyOnWrite();
        instance.setColor(value);
        return this;
      }
      /**
       * <pre>
       * The color of the shadow.
       * </pre>
       *
       * <code>optional fixed32 color = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearColor() {
        copyOnWrite();
        instance.clearColor();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.BoxShadow)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "offsetX_",
              "offsetY_",
              "blurRadius_",
              "spreadRadius_",
              "isInset_",
              "color_",
            };
            java.lang.String info =
                "\u0001\u0006\u0000\u0001\u0001\u0006\u0006\u0000\u0000\u0000\u0001\u1004\u0000\u0002" +
                "\u1004\u0001\u0003\u1004\u0002\u0004\u1004\u0003\u0005\u1007\u0004\u0006\u1006\u0005" +
                "";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.BoxShadow)
    private static final org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow DEFAULT_INSTANCE;
    static {
      BoxShadow defaultInstance = new BoxShadow();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        BoxShadow.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.BoxShadow getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<BoxShadow> PARSER;

    public static com.google.protobuf.Parser<BoxShadow> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ElevationShadowOrBuilder extends
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.ElevationShadow)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Elevation of the view in dp; higher elevation creates larger shadows.
     * </pre>
     *
     * <code>optional int32 elevation = 1;</code>
     * @return Whether the elevation field is set.
     */
    boolean hasElevation();
    /**
     * <pre>
     * Elevation of the view in dp; higher elevation creates larger shadows.
     * </pre>
     *
     * <code>optional int32 elevation = 1;</code>
     * @return The elevation.
     */
    int getElevation();
  }
  /**
   * <pre>
   * Defines a simple elevation-based shadow, as described in Material Design:
   * https://developer.android.com/training/material/shadows-clipping
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.piet.ElevationShadow}
   */
  public  static final class ElevationShadow extends
      com.google.protobuf.GeneratedMessageLite<
          ElevationShadow, ElevationShadow.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.ElevationShadow)
      ElevationShadowOrBuilder {
    private ElevationShadow() {
    }
    private int bitField0_;
    public static final int ELEVATION_FIELD_NUMBER = 1;
    private int elevation_;
    /**
     * <pre>
     * Elevation of the view in dp; higher elevation creates larger shadows.
     * </pre>
     *
     * <code>optional int32 elevation = 1;</code>
     * @return Whether the elevation field is set.
     */
    @java.lang.Override
    public boolean hasElevation() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Elevation of the view in dp; higher elevation creates larger shadows.
     * </pre>
     *
     * <code>optional int32 elevation = 1;</code>
     * @return The elevation.
     */
    @java.lang.Override
    public int getElevation() {
      return elevation_;
    }
    /**
     * <pre>
     * Elevation of the view in dp; higher elevation creates larger shadows.
     * </pre>
     *
     * <code>optional int32 elevation = 1;</code>
     * @param value The elevation to set.
     */
    private void setElevation(int value) {
      bitField0_ |= 0x00000001;
      elevation_ = value;
    }
    /**
     * <pre>
     * Elevation of the view in dp; higher elevation creates larger shadows.
     * </pre>
     *
     * <code>optional int32 elevation = 1;</code>
     */
    private void clearElevation() {
      bitField0_ = (bitField0_ & ~0x00000001);
      elevation_ = 0;
    }

    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Defines a simple elevation-based shadow, as described in Material Design:
     * https://developer.android.com/training/material/shadows-clipping
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.piet.ElevationShadow}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.ElevationShadow)
        org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadowOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Elevation of the view in dp; higher elevation creates larger shadows.
       * </pre>
       *
       * <code>optional int32 elevation = 1;</code>
       * @return Whether the elevation field is set.
       */
      @java.lang.Override
      public boolean hasElevation() {
        return instance.hasElevation();
      }
      /**
       * <pre>
       * Elevation of the view in dp; higher elevation creates larger shadows.
       * </pre>
       *
       * <code>optional int32 elevation = 1;</code>
       * @return The elevation.
       */
      @java.lang.Override
      public int getElevation() {
        return instance.getElevation();
      }
      /**
       * <pre>
       * Elevation of the view in dp; higher elevation creates larger shadows.
       * </pre>
       *
       * <code>optional int32 elevation = 1;</code>
       * @param value The elevation to set.
       * @return This builder for chaining.
       */
      public Builder setElevation(int value) {
        copyOnWrite();
        instance.setElevation(value);
        return this;
      }
      /**
       * <pre>
       * Elevation of the view in dp; higher elevation creates larger shadows.
       * </pre>
       *
       * <code>optional int32 elevation = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearElevation() {
        copyOnWrite();
        instance.clearElevation();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.ElevationShadow)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "elevation_",
            };
            java.lang.String info =
                "\u0001\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u1004\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.ElevationShadow)
    private static final org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow DEFAULT_INSTANCE;
    static {
      ElevationShadow defaultInstance = new ElevationShadow();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ElevationShadow.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.ElevationShadow getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ElevationShadow> PARSER;

    public static com.google.protobuf.Parser<ElevationShadow> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
