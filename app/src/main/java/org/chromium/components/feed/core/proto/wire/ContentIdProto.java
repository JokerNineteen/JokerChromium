// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/wire/content_id.proto

package org.chromium.components.feed.core.proto.wire;

public final class ContentIdProto {
  private ContentIdProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface ContentIdOrBuilder extends
      // @@protoc_insertion_point(interface_extends:feedwire1.ContentId)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The "domain" to which this content belongs. A domain specifies the party
     * responsible for generating the content, and this owner promises to specify
     * IDs (below) that match the owner's expectations of uniqueness.  The domain
     * differs from the table because multiple parties can create content which
     * are stored in the same table.
     * </pre>
     *
     * <code>optional string content_domain = 1;</code>
     * @return Whether the contentDomain field is set.
     */
    boolean hasContentDomain();
    /**
     * <pre>
     * The "domain" to which this content belongs. A domain specifies the party
     * responsible for generating the content, and this owner promises to specify
     * IDs (below) that match the owner's expectations of uniqueness.  The domain
     * differs from the table because multiple parties can create content which
     * are stored in the same table.
     * </pre>
     *
     * <code>optional string content_domain = 1;</code>
     * @return The contentDomain.
     */
    java.lang.String getContentDomain();
    /**
     * <pre>
     * The "domain" to which this content belongs. A domain specifies the party
     * responsible for generating the content, and this owner promises to specify
     * IDs (below) that match the owner's expectations of uniqueness.  The domain
     * differs from the table because multiple parties can create content which
     * are stored in the same table.
     * </pre>
     *
     * <code>optional string content_domain = 1;</code>
     * @return The bytes for contentDomain.
     */
    com.google.protobuf.ByteString
        getContentDomainBytes();

    /**
     * <pre>
     * In value to make the ContentId unique within the content_domain.
     * </pre>
     *
     * <code>optional fixed64 id = 2;</code>
     * @return Whether the id field is set.
     */
    boolean hasId();
    /**
     * <pre>
     * In value to make the ContentId unique within the content_domain.
     * </pre>
     *
     * <code>optional fixed64 id = 2;</code>
     * @return The id.
     */
    long getId();

    /**
     * <pre>
     * This represents namespace for the nodes found in the wire protocol.  The
     * storage architecture shares the wire protocol based upon the Table
     * (namespace).  The storage will be sharded into multiple Tables where
     * related content is stored within a single Table.  For example, Features
     * define the Structure and Content of the Stream and are stored in a single
     * table.  Notifications would be stored in their own table.
     * </pre>
     *
     * <code>optional string table = 3;</code>
     * @return Whether the table field is set.
     */
    boolean hasTable();
    /**
     * <pre>
     * This represents namespace for the nodes found in the wire protocol.  The
     * storage architecture shares the wire protocol based upon the Table
     * (namespace).  The storage will be sharded into multiple Tables where
     * related content is stored within a single Table.  For example, Features
     * define the Structure and Content of the Stream and are stored in a single
     * table.  Notifications would be stored in their own table.
     * </pre>
     *
     * <code>optional string table = 3;</code>
     * @return The table.
     */
    java.lang.String getTable();
    /**
     * <pre>
     * This represents namespace for the nodes found in the wire protocol.  The
     * storage architecture shares the wire protocol based upon the Table
     * (namespace).  The storage will be sharded into multiple Tables where
     * related content is stored within a single Table.  For example, Features
     * define the Structure and Content of the Stream and are stored in a single
     * table.  Notifications would be stored in their own table.
     * </pre>
     *
     * <code>optional string table = 3;</code>
     * @return The bytes for table.
     */
    com.google.protobuf.ByteString
        getTableBytes();
  }
  /**
   * <pre>
   * Feed Wire Protocol version of the ContentId.
   * </pre>
   *
   * Protobuf type {@code feedwire1.ContentId}
   */
  public  static final class ContentId extends
      com.google.protobuf.GeneratedMessageLite<
          ContentId, ContentId.Builder> implements
      // @@protoc_insertion_point(message_implements:feedwire1.ContentId)
      ContentIdOrBuilder {
    private ContentId() {
      contentDomain_ = "";
      table_ = "";
    }
    private int bitField0_;
    public static final int CONTENT_DOMAIN_FIELD_NUMBER = 1;
    private java.lang.String contentDomain_;
    /**
     * <pre>
     * The "domain" to which this content belongs. A domain specifies the party
     * responsible for generating the content, and this owner promises to specify
     * IDs (below) that match the owner's expectations of uniqueness.  The domain
     * differs from the table because multiple parties can create content which
     * are stored in the same table.
     * </pre>
     *
     * <code>optional string content_domain = 1;</code>
     * @return Whether the contentDomain field is set.
     */
    @java.lang.Override
    public boolean hasContentDomain() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The "domain" to which this content belongs. A domain specifies the party
     * responsible for generating the content, and this owner promises to specify
     * IDs (below) that match the owner's expectations of uniqueness.  The domain
     * differs from the table because multiple parties can create content which
     * are stored in the same table.
     * </pre>
     *
     * <code>optional string content_domain = 1;</code>
     * @return The contentDomain.
     */
    @java.lang.Override
    public java.lang.String getContentDomain() {
      return contentDomain_;
    }
    /**
     * <pre>
     * The "domain" to which this content belongs. A domain specifies the party
     * responsible for generating the content, and this owner promises to specify
     * IDs (below) that match the owner's expectations of uniqueness.  The domain
     * differs from the table because multiple parties can create content which
     * are stored in the same table.
     * </pre>
     *
     * <code>optional string content_domain = 1;</code>
     * @return The bytes for contentDomain.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getContentDomainBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(contentDomain_);
    }
    /**
     * <pre>
     * The "domain" to which this content belongs. A domain specifies the party
     * responsible for generating the content, and this owner promises to specify
     * IDs (below) that match the owner's expectations of uniqueness.  The domain
     * differs from the table because multiple parties can create content which
     * are stored in the same table.
     * </pre>
     *
     * <code>optional string content_domain = 1;</code>
     * @param value The contentDomain to set.
     */
    private void setContentDomain(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000001;
      contentDomain_ = value;
    }
    /**
     * <pre>
     * The "domain" to which this content belongs. A domain specifies the party
     * responsible for generating the content, and this owner promises to specify
     * IDs (below) that match the owner's expectations of uniqueness.  The domain
     * differs from the table because multiple parties can create content which
     * are stored in the same table.
     * </pre>
     *
     * <code>optional string content_domain = 1;</code>
     */
    private void clearContentDomain() {
      bitField0_ = (bitField0_ & ~0x00000001);
      contentDomain_ = getDefaultInstance().getContentDomain();
    }
    /**
     * <pre>
     * The "domain" to which this content belongs. A domain specifies the party
     * responsible for generating the content, and this owner promises to specify
     * IDs (below) that match the owner's expectations of uniqueness.  The domain
     * differs from the table because multiple parties can create content which
     * are stored in the same table.
     * </pre>
     *
     * <code>optional string content_domain = 1;</code>
     * @param value The bytes for contentDomain to set.
     */
    private void setContentDomainBytes(
        com.google.protobuf.ByteString value) {
      contentDomain_ = value.toStringUtf8();
      bitField0_ |= 0x00000001;
    }

    public static final int ID_FIELD_NUMBER = 2;
    private long id_;
    /**
     * <pre>
     * In value to make the ContentId unique within the content_domain.
     * </pre>
     *
     * <code>optional fixed64 id = 2;</code>
     * @return Whether the id field is set.
     */
    @java.lang.Override
    public boolean hasId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * In value to make the ContentId unique within the content_domain.
     * </pre>
     *
     * <code>optional fixed64 id = 2;</code>
     * @return The id.
     */
    @java.lang.Override
    public long getId() {
      return id_;
    }
    /**
     * <pre>
     * In value to make the ContentId unique within the content_domain.
     * </pre>
     *
     * <code>optional fixed64 id = 2;</code>
     * @param value The id to set.
     */
    private void setId(long value) {
      bitField0_ |= 0x00000002;
      id_ = value;
    }
    /**
     * <pre>
     * In value to make the ContentId unique within the content_domain.
     * </pre>
     *
     * <code>optional fixed64 id = 2;</code>
     */
    private void clearId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      id_ = 0L;
    }

    public static final int TABLE_FIELD_NUMBER = 3;
    private java.lang.String table_;
    /**
     * <pre>
     * This represents namespace for the nodes found in the wire protocol.  The
     * storage architecture shares the wire protocol based upon the Table
     * (namespace).  The storage will be sharded into multiple Tables where
     * related content is stored within a single Table.  For example, Features
     * define the Structure and Content of the Stream and are stored in a single
     * table.  Notifications would be stored in their own table.
     * </pre>
     *
     * <code>optional string table = 3;</code>
     * @return Whether the table field is set.
     */
    @java.lang.Override
    public boolean hasTable() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * This represents namespace for the nodes found in the wire protocol.  The
     * storage architecture shares the wire protocol based upon the Table
     * (namespace).  The storage will be sharded into multiple Tables where
     * related content is stored within a single Table.  For example, Features
     * define the Structure and Content of the Stream and are stored in a single
     * table.  Notifications would be stored in their own table.
     * </pre>
     *
     * <code>optional string table = 3;</code>
     * @return The table.
     */
    @java.lang.Override
    public java.lang.String getTable() {
      return table_;
    }
    /**
     * <pre>
     * This represents namespace for the nodes found in the wire protocol.  The
     * storage architecture shares the wire protocol based upon the Table
     * (namespace).  The storage will be sharded into multiple Tables where
     * related content is stored within a single Table.  For example, Features
     * define the Structure and Content of the Stream and are stored in a single
     * table.  Notifications would be stored in their own table.
     * </pre>
     *
     * <code>optional string table = 3;</code>
     * @return The bytes for table.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTableBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(table_);
    }
    /**
     * <pre>
     * This represents namespace for the nodes found in the wire protocol.  The
     * storage architecture shares the wire protocol based upon the Table
     * (namespace).  The storage will be sharded into multiple Tables where
     * related content is stored within a single Table.  For example, Features
     * define the Structure and Content of the Stream and are stored in a single
     * table.  Notifications would be stored in their own table.
     * </pre>
     *
     * <code>optional string table = 3;</code>
     * @param value The table to set.
     */
    private void setTable(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000004;
      table_ = value;
    }
    /**
     * <pre>
     * This represents namespace for the nodes found in the wire protocol.  The
     * storage architecture shares the wire protocol based upon the Table
     * (namespace).  The storage will be sharded into multiple Tables where
     * related content is stored within a single Table.  For example, Features
     * define the Structure and Content of the Stream and are stored in a single
     * table.  Notifications would be stored in their own table.
     * </pre>
     *
     * <code>optional string table = 3;</code>
     */
    private void clearTable() {
      bitField0_ = (bitField0_ & ~0x00000004);
      table_ = getDefaultInstance().getTable();
    }
    /**
     * <pre>
     * This represents namespace for the nodes found in the wire protocol.  The
     * storage architecture shares the wire protocol based upon the Table
     * (namespace).  The storage will be sharded into multiple Tables where
     * related content is stored within a single Table.  For example, Features
     * define the Structure and Content of the Stream and are stored in a single
     * table.  Notifications would be stored in their own table.
     * </pre>
     *
     * <code>optional string table = 3;</code>
     * @param value The bytes for table to set.
     */
    private void setTableBytes(
        com.google.protobuf.ByteString value) {
      table_ = value.toStringUtf8();
      bitField0_ |= 0x00000004;
    }

    public static org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Feed Wire Protocol version of the ContentId.
     * </pre>
     *
     * Protobuf type {@code feedwire1.ContentId}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId, Builder> implements
        // @@protoc_insertion_point(builder_implements:feedwire1.ContentId)
        org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentIdOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The "domain" to which this content belongs. A domain specifies the party
       * responsible for generating the content, and this owner promises to specify
       * IDs (below) that match the owner's expectations of uniqueness.  The domain
       * differs from the table because multiple parties can create content which
       * are stored in the same table.
       * </pre>
       *
       * <code>optional string content_domain = 1;</code>
       * @return Whether the contentDomain field is set.
       */
      @java.lang.Override
      public boolean hasContentDomain() {
        return instance.hasContentDomain();
      }
      /**
       * <pre>
       * The "domain" to which this content belongs. A domain specifies the party
       * responsible for generating the content, and this owner promises to specify
       * IDs (below) that match the owner's expectations of uniqueness.  The domain
       * differs from the table because multiple parties can create content which
       * are stored in the same table.
       * </pre>
       *
       * <code>optional string content_domain = 1;</code>
       * @return The contentDomain.
       */
      @java.lang.Override
      public java.lang.String getContentDomain() {
        return instance.getContentDomain();
      }
      /**
       * <pre>
       * The "domain" to which this content belongs. A domain specifies the party
       * responsible for generating the content, and this owner promises to specify
       * IDs (below) that match the owner's expectations of uniqueness.  The domain
       * differs from the table because multiple parties can create content which
       * are stored in the same table.
       * </pre>
       *
       * <code>optional string content_domain = 1;</code>
       * @return The bytes for contentDomain.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getContentDomainBytes() {
        return instance.getContentDomainBytes();
      }
      /**
       * <pre>
       * The "domain" to which this content belongs. A domain specifies the party
       * responsible for generating the content, and this owner promises to specify
       * IDs (below) that match the owner's expectations of uniqueness.  The domain
       * differs from the table because multiple parties can create content which
       * are stored in the same table.
       * </pre>
       *
       * <code>optional string content_domain = 1;</code>
       * @param value The contentDomain to set.
       * @return This builder for chaining.
       */
      public Builder setContentDomain(
          java.lang.String value) {
        copyOnWrite();
        instance.setContentDomain(value);
        return this;
      }
      /**
       * <pre>
       * The "domain" to which this content belongs. A domain specifies the party
       * responsible for generating the content, and this owner promises to specify
       * IDs (below) that match the owner's expectations of uniqueness.  The domain
       * differs from the table because multiple parties can create content which
       * are stored in the same table.
       * </pre>
       *
       * <code>optional string content_domain = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearContentDomain() {
        copyOnWrite();
        instance.clearContentDomain();
        return this;
      }
      /**
       * <pre>
       * The "domain" to which this content belongs. A domain specifies the party
       * responsible for generating the content, and this owner promises to specify
       * IDs (below) that match the owner's expectations of uniqueness.  The domain
       * differs from the table because multiple parties can create content which
       * are stored in the same table.
       * </pre>
       *
       * <code>optional string content_domain = 1;</code>
       * @param value The bytes for contentDomain to set.
       * @return This builder for chaining.
       */
      public Builder setContentDomainBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setContentDomainBytes(value);
        return this;
      }

      /**
       * <pre>
       * In value to make the ContentId unique within the content_domain.
       * </pre>
       *
       * <code>optional fixed64 id = 2;</code>
       * @return Whether the id field is set.
       */
      @java.lang.Override
      public boolean hasId() {
        return instance.hasId();
      }
      /**
       * <pre>
       * In value to make the ContentId unique within the content_domain.
       * </pre>
       *
       * <code>optional fixed64 id = 2;</code>
       * @return The id.
       */
      @java.lang.Override
      public long getId() {
        return instance.getId();
      }
      /**
       * <pre>
       * In value to make the ContentId unique within the content_domain.
       * </pre>
       *
       * <code>optional fixed64 id = 2;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(long value) {
        copyOnWrite();
        instance.setId(value);
        return this;
      }
      /**
       * <pre>
       * In value to make the ContentId unique within the content_domain.
       * </pre>
       *
       * <code>optional fixed64 id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        copyOnWrite();
        instance.clearId();
        return this;
      }

      /**
       * <pre>
       * This represents namespace for the nodes found in the wire protocol.  The
       * storage architecture shares the wire protocol based upon the Table
       * (namespace).  The storage will be sharded into multiple Tables where
       * related content is stored within a single Table.  For example, Features
       * define the Structure and Content of the Stream and are stored in a single
       * table.  Notifications would be stored in their own table.
       * </pre>
       *
       * <code>optional string table = 3;</code>
       * @return Whether the table field is set.
       */
      @java.lang.Override
      public boolean hasTable() {
        return instance.hasTable();
      }
      /**
       * <pre>
       * This represents namespace for the nodes found in the wire protocol.  The
       * storage architecture shares the wire protocol based upon the Table
       * (namespace).  The storage will be sharded into multiple Tables where
       * related content is stored within a single Table.  For example, Features
       * define the Structure and Content of the Stream and are stored in a single
       * table.  Notifications would be stored in their own table.
       * </pre>
       *
       * <code>optional string table = 3;</code>
       * @return The table.
       */
      @java.lang.Override
      public java.lang.String getTable() {
        return instance.getTable();
      }
      /**
       * <pre>
       * This represents namespace for the nodes found in the wire protocol.  The
       * storage architecture shares the wire protocol based upon the Table
       * (namespace).  The storage will be sharded into multiple Tables where
       * related content is stored within a single Table.  For example, Features
       * define the Structure and Content of the Stream and are stored in a single
       * table.  Notifications would be stored in their own table.
       * </pre>
       *
       * <code>optional string table = 3;</code>
       * @return The bytes for table.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTableBytes() {
        return instance.getTableBytes();
      }
      /**
       * <pre>
       * This represents namespace for the nodes found in the wire protocol.  The
       * storage architecture shares the wire protocol based upon the Table
       * (namespace).  The storage will be sharded into multiple Tables where
       * related content is stored within a single Table.  For example, Features
       * define the Structure and Content of the Stream and are stored in a single
       * table.  Notifications would be stored in their own table.
       * </pre>
       *
       * <code>optional string table = 3;</code>
       * @param value The table to set.
       * @return This builder for chaining.
       */
      public Builder setTable(
          java.lang.String value) {
        copyOnWrite();
        instance.setTable(value);
        return this;
      }
      /**
       * <pre>
       * This represents namespace for the nodes found in the wire protocol.  The
       * storage architecture shares the wire protocol based upon the Table
       * (namespace).  The storage will be sharded into multiple Tables where
       * related content is stored within a single Table.  For example, Features
       * define the Structure and Content of the Stream and are stored in a single
       * table.  Notifications would be stored in their own table.
       * </pre>
       *
       * <code>optional string table = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTable() {
        copyOnWrite();
        instance.clearTable();
        return this;
      }
      /**
       * <pre>
       * This represents namespace for the nodes found in the wire protocol.  The
       * storage architecture shares the wire protocol based upon the Table
       * (namespace).  The storage will be sharded into multiple Tables where
       * related content is stored within a single Table.  For example, Features
       * define the Structure and Content of the Stream and are stored in a single
       * table.  Notifications would be stored in their own table.
       * </pre>
       *
       * <code>optional string table = 3;</code>
       * @param value The bytes for table to set.
       * @return This builder for chaining.
       */
      public Builder setTableBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTableBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:feedwire1.ContentId)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "contentDomain_",
              "id_",
              "table_",
            };
            java.lang.String info =
                "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u1008\u0000\u0002" +
                "\u1005\u0001\u0003\u1008\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:feedwire1.ContentId)
    private static final org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId DEFAULT_INSTANCE;
    static {
      ContentId defaultInstance = new ContentId();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ContentId.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ContentId> PARSER;

    public static com.google.protobuf.Parser<ContentId> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
