// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/ui/piet/styles.proto

package org.chromium.components.feed.core.proto.ui.piet;

public final class StylesProto {
  private StylesProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   * Set a dimension relative to content or parent.
   * If a parent's size is set to FIT_CONTENT, and the child's size is
   * set to FILL_PARENT, the resulting size of the child should be the size of
   * the child's content.
   * </pre>
   *
   * Protobuf enum {@code components.feed.core.proto.ui.piet.RelativeSize}
   */
  public enum RelativeSize
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * Undefined behavior; use the default dimensions specified by the parent
     * container.
     * </pre>
     *
     * <code>RELATIVE_SIZE_UNDEFINED = 0;</code>
     */
    RELATIVE_SIZE_UNDEFINED(0),
    /**
     * <pre>
     * Make this Element request just as much space as its content requires.
     * </pre>
     *
     * <code>FIT_CONTENT = 1;</code>
     */
    FIT_CONTENT(1),
    /**
     * <pre>
     * Make this Element request to fill whatever space is allocated to it.
     * </pre>
     *
     * <code>FILL_PARENT = 2;</code>
     */
    FILL_PARENT(2),
    ;

    /**
     * <pre>
     * Undefined behavior; use the default dimensions specified by the parent
     * container.
     * </pre>
     *
     * <code>RELATIVE_SIZE_UNDEFINED = 0;</code>
     */
    public static final int RELATIVE_SIZE_UNDEFINED_VALUE = 0;
    /**
     * <pre>
     * Make this Element request just as much space as its content requires.
     * </pre>
     *
     * <code>FIT_CONTENT = 1;</code>
     */
    public static final int FIT_CONTENT_VALUE = 1;
    /**
     * <pre>
     * Make this Element request to fill whatever space is allocated to it.
     * </pre>
     *
     * <code>FILL_PARENT = 2;</code>
     */
    public static final int FILL_PARENT_VALUE = 2;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RelativeSize valueOf(int value) {
      return forNumber(value);
    }

    public static RelativeSize forNumber(int value) {
      switch (value) {
        case 0: return RELATIVE_SIZE_UNDEFINED;
        case 1: return FIT_CONTENT;
        case 2: return FILL_PARENT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RelativeSize>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        RelativeSize> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RelativeSize>() {
            @java.lang.Override
            public RelativeSize findValueByNumber(int number) {
              return RelativeSize.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return RelativeSizeVerifier.INSTANCE;
    }

    private static final class RelativeSizeVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new RelativeSizeVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return RelativeSize.forNumber(number) != null;
            }
          };

    private final int value;

    private RelativeSize(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:components.feed.core.proto.ui.piet.RelativeSize)
  }

  /**
   * <pre>
   * Horizontal alignment of text within a TextElement.
   * </pre>
   *
   * Protobuf enum {@code components.feed.core.proto.ui.piet.TextAlignmentHorizontal}
   */
  public enum TextAlignmentHorizontal
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * This value should never be used.
     * </pre>
     *
     * <code>TEXT_ALIGNMENT_HORIZONTAL_UNSPECIFIED = 0;</code>
     */
    TEXT_ALIGNMENT_HORIZONTAL_UNSPECIFIED(0),
    /**
     * <pre>
     * Align with the start side (left in LTR layouts)
     * </pre>
     *
     * <code>TEXT_ALIGNMENT_START = 1;</code>
     */
    TEXT_ALIGNMENT_START(1),
    /**
     * <pre>
     * Align with the end side (right in LTR layouts)
     * </pre>
     *
     * <code>TEXT_ALIGNMENT_END = 2;</code>
     */
    TEXT_ALIGNMENT_END(2),
    /**
     * <pre>
     * Align centered
     * </pre>
     *
     * <code>TEXT_ALIGNMENT_CENTER = 3;</code>
     */
    TEXT_ALIGNMENT_CENTER(3),
    ;

    /**
     * <pre>
     * This value should never be used.
     * </pre>
     *
     * <code>TEXT_ALIGNMENT_HORIZONTAL_UNSPECIFIED = 0;</code>
     */
    public static final int TEXT_ALIGNMENT_HORIZONTAL_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Align with the start side (left in LTR layouts)
     * </pre>
     *
     * <code>TEXT_ALIGNMENT_START = 1;</code>
     */
    public static final int TEXT_ALIGNMENT_START_VALUE = 1;
    /**
     * <pre>
     * Align with the end side (right in LTR layouts)
     * </pre>
     *
     * <code>TEXT_ALIGNMENT_END = 2;</code>
     */
    public static final int TEXT_ALIGNMENT_END_VALUE = 2;
    /**
     * <pre>
     * Align centered
     * </pre>
     *
     * <code>TEXT_ALIGNMENT_CENTER = 3;</code>
     */
    public static final int TEXT_ALIGNMENT_CENTER_VALUE = 3;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TextAlignmentHorizontal valueOf(int value) {
      return forNumber(value);
    }

    public static TextAlignmentHorizontal forNumber(int value) {
      switch (value) {
        case 0: return TEXT_ALIGNMENT_HORIZONTAL_UNSPECIFIED;
        case 1: return TEXT_ALIGNMENT_START;
        case 2: return TEXT_ALIGNMENT_END;
        case 3: return TEXT_ALIGNMENT_CENTER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TextAlignmentHorizontal>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TextAlignmentHorizontal> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TextAlignmentHorizontal>() {
            @java.lang.Override
            public TextAlignmentHorizontal findValueByNumber(int number) {
              return TextAlignmentHorizontal.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return TextAlignmentHorizontalVerifier.INSTANCE;
    }

    private static final class TextAlignmentHorizontalVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new TextAlignmentHorizontalVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return TextAlignmentHorizontal.forNumber(number) != null;
            }
          };

    private final int value;

    private TextAlignmentHorizontal(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:components.feed.core.proto.ui.piet.TextAlignmentHorizontal)
  }

  /**
   * <pre>
   * Vertical alignment of text within a TextElement.
   * </pre>
   *
   * Protobuf enum {@code components.feed.core.proto.ui.piet.TextAlignmentVertical}
   */
  public enum TextAlignmentVertical
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * This value should never be used.
     * </pre>
     *
     * <code>TEXT_ALIGNMENT_VERTICAL_UNSPECIFIED = 0;</code>
     */
    TEXT_ALIGNMENT_VERTICAL_UNSPECIFIED(0),
    /**
     * <pre>
     * Align top edge of text to top edge of element
     * </pre>
     *
     * <code>TEXT_ALIGNMENT_TOP = 1;</code>
     */
    TEXT_ALIGNMENT_TOP(1),
    /**
     * <pre>
     * Align bottom edge of text to bottom edge of element
     * </pre>
     *
     * <code>TEXT_ALIGNMENT_BOTTOM = 2;</code>
     */
    TEXT_ALIGNMENT_BOTTOM(2),
    /**
     * <pre>
     * Align centered vertically
     * </pre>
     *
     * <code>TEXT_ALIGNMENT_MIDDLE = 3;</code>
     */
    TEXT_ALIGNMENT_MIDDLE(3),
    ;

    /**
     * <pre>
     * This value should never be used.
     * </pre>
     *
     * <code>TEXT_ALIGNMENT_VERTICAL_UNSPECIFIED = 0;</code>
     */
    public static final int TEXT_ALIGNMENT_VERTICAL_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Align top edge of text to top edge of element
     * </pre>
     *
     * <code>TEXT_ALIGNMENT_TOP = 1;</code>
     */
    public static final int TEXT_ALIGNMENT_TOP_VALUE = 1;
    /**
     * <pre>
     * Align bottom edge of text to bottom edge of element
     * </pre>
     *
     * <code>TEXT_ALIGNMENT_BOTTOM = 2;</code>
     */
    public static final int TEXT_ALIGNMENT_BOTTOM_VALUE = 2;
    /**
     * <pre>
     * Align centered vertically
     * </pre>
     *
     * <code>TEXT_ALIGNMENT_MIDDLE = 3;</code>
     */
    public static final int TEXT_ALIGNMENT_MIDDLE_VALUE = 3;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TextAlignmentVertical valueOf(int value) {
      return forNumber(value);
    }

    public static TextAlignmentVertical forNumber(int value) {
      switch (value) {
        case 0: return TEXT_ALIGNMENT_VERTICAL_UNSPECIFIED;
        case 1: return TEXT_ALIGNMENT_TOP;
        case 2: return TEXT_ALIGNMENT_BOTTOM;
        case 3: return TEXT_ALIGNMENT_MIDDLE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TextAlignmentVertical>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TextAlignmentVertical> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TextAlignmentVertical>() {
            @java.lang.Override
            public TextAlignmentVertical findValueByNumber(int number) {
              return TextAlignmentVertical.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return TextAlignmentVerticalVerifier.INSTANCE;
    }

    private static final class TextAlignmentVerticalVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new TextAlignmentVerticalVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return TextAlignmentVertical.forNumber(number) != null;
            }
          };

    private final int value;

    private TextAlignmentVertical(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:components.feed.core.proto.ui.piet.TextAlignmentVertical)
  }

  /**
   * <pre>
   * Specifies gravity on the horizontal axis.
   * </pre>
   *
   * Protobuf enum {@code components.feed.core.proto.ui.piet.GravityHorizontal}
   */
  public enum GravityHorizontal
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>GRAVITY_HORIZONTAL_UNSPECIFIED = 0;</code>
     */
    GRAVITY_HORIZONTAL_UNSPECIFIED(0),
    /**
     * <pre>
     * Align with the start side (left in LTR layouts)
     * </pre>
     *
     * <code>GRAVITY_START = 1;</code>
     */
    GRAVITY_START(1),
    /**
     * <pre>
     * Align with the end side (right in LTR layouts)
     * </pre>
     *
     * <code>GRAVITY_END = 2;</code>
     */
    GRAVITY_END(2),
    /**
     * <pre>
     * Align centered
     * </pre>
     *
     * <code>GRAVITY_CENTER = 3;</code>
     */
    GRAVITY_CENTER(3),
    ;

    /**
     * <code>GRAVITY_HORIZONTAL_UNSPECIFIED = 0;</code>
     */
    public static final int GRAVITY_HORIZONTAL_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Align with the start side (left in LTR layouts)
     * </pre>
     *
     * <code>GRAVITY_START = 1;</code>
     */
    public static final int GRAVITY_START_VALUE = 1;
    /**
     * <pre>
     * Align with the end side (right in LTR layouts)
     * </pre>
     *
     * <code>GRAVITY_END = 2;</code>
     */
    public static final int GRAVITY_END_VALUE = 2;
    /**
     * <pre>
     * Align centered
     * </pre>
     *
     * <code>GRAVITY_CENTER = 3;</code>
     */
    public static final int GRAVITY_CENTER_VALUE = 3;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GravityHorizontal valueOf(int value) {
      return forNumber(value);
    }

    public static GravityHorizontal forNumber(int value) {
      switch (value) {
        case 0: return GRAVITY_HORIZONTAL_UNSPECIFIED;
        case 1: return GRAVITY_START;
        case 2: return GRAVITY_END;
        case 3: return GRAVITY_CENTER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GravityHorizontal>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        GravityHorizontal> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GravityHorizontal>() {
            @java.lang.Override
            public GravityHorizontal findValueByNumber(int number) {
              return GravityHorizontal.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return GravityHorizontalVerifier.INSTANCE;
    }

    private static final class GravityHorizontalVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new GravityHorizontalVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return GravityHorizontal.forNumber(number) != null;
            }
          };

    private final int value;

    private GravityHorizontal(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:components.feed.core.proto.ui.piet.GravityHorizontal)
  }

  /**
   * <pre>
   * Specifies gravity on the vertical axis.
   * </pre>
   *
   * Protobuf enum {@code components.feed.core.proto.ui.piet.GravityVertical}
   */
  public enum GravityVertical
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>GRAVITY_VERTICAL_UNSPECIFIED = 0;</code>
     */
    GRAVITY_VERTICAL_UNSPECIFIED(0),
    /**
     * <pre>
     * Align with the top side
     * </pre>
     *
     * <code>GRAVITY_TOP = 1;</code>
     */
    GRAVITY_TOP(1),
    /**
     * <pre>
     * Align vertically centered
     * </pre>
     *
     * <code>GRAVITY_MIDDLE = 2;</code>
     */
    GRAVITY_MIDDLE(2),
    /**
     * <pre>
     * Align with the bottom side
     * </pre>
     *
     * <code>GRAVITY_BOTTOM = 3;</code>
     */
    GRAVITY_BOTTOM(3),
    ;

    /**
     * <code>GRAVITY_VERTICAL_UNSPECIFIED = 0;</code>
     */
    public static final int GRAVITY_VERTICAL_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Align with the top side
     * </pre>
     *
     * <code>GRAVITY_TOP = 1;</code>
     */
    public static final int GRAVITY_TOP_VALUE = 1;
    /**
     * <pre>
     * Align vertically centered
     * </pre>
     *
     * <code>GRAVITY_MIDDLE = 2;</code>
     */
    public static final int GRAVITY_MIDDLE_VALUE = 2;
    /**
     * <pre>
     * Align with the bottom side
     * </pre>
     *
     * <code>GRAVITY_BOTTOM = 3;</code>
     */
    public static final int GRAVITY_BOTTOM_VALUE = 3;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GravityVertical valueOf(int value) {
      return forNumber(value);
    }

    public static GravityVertical forNumber(int value) {
      switch (value) {
        case 0: return GRAVITY_VERTICAL_UNSPECIFIED;
        case 1: return GRAVITY_TOP;
        case 2: return GRAVITY_MIDDLE;
        case 3: return GRAVITY_BOTTOM;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GravityVertical>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        GravityVertical> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GravityVertical>() {
            @java.lang.Override
            public GravityVertical findValueByNumber(int number) {
              return GravityVertical.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return GravityVerticalVerifier.INSTANCE;
    }

    private static final class GravityVerticalVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new GravityVerticalVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return GravityVertical.forNumber(number) != null;
            }
          };

    private final int value;

    private GravityVertical(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:components.feed.core.proto.ui.piet.GravityVertical)
  }

  public interface StyleIdsStackOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.StyleIdsStack)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                StyleIdsStack, StyleIdsStack.Builder> {

    /**
     * <pre>
     * Style IDs that are proto-merged in order from first to last.
     * </pre>
     *
     * <code>repeated string style_ids = 1;</code>
     * @return A list containing the styleIds.
     */
    java.util.List<java.lang.String>
        getStyleIdsList();
    /**
     * <pre>
     * Style IDs that are proto-merged in order from first to last.
     * </pre>
     *
     * <code>repeated string style_ids = 1;</code>
     * @return The count of styleIds.
     */
    int getStyleIdsCount();
    /**
     * <pre>
     * Style IDs that are proto-merged in order from first to last.
     * </pre>
     *
     * <code>repeated string style_ids = 1;</code>
     * @param index The index of the element to return.
     * @return The styleIds at the given index.
     */
    java.lang.String getStyleIds(int index);
    /**
     * <pre>
     * Style IDs that are proto-merged in order from first to last.
     * </pre>
     *
     * <code>repeated string style_ids = 1;</code>
     * @param index The index of the element to return.
     * @return The styleIds at the given index.
     */
    com.google.protobuf.ByteString
        getStyleIdsBytes(int index);

    /**
     * <pre>
     * Optional style binding that override the styles in the given style_ids.
     * See message comment for exact use.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.StyleBindingRef style_binding = 2;</code>
     * @return Whether the styleBinding field is set.
     */
    boolean hasStyleBinding();
    /**
     * <pre>
     * Optional style binding that override the styles in the given style_ids.
     * See message comment for exact use.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.StyleBindingRef style_binding = 2;</code>
     * @return The styleBinding.
     */
    org.chromium.components.feed.core.proto.ui.piet.BindingRefsProto.StyleBindingRef getStyleBinding();
  }
  /**
   * <pre>
   * A stack of style_ids used to evaluate the style of an element. The final
   * applicable style is computed by proto-merging each style one by one, in order
   * starting from the first. Later attributes override earlier attributes. If a
   * style_id cannot be found, ERR_MISSING_STYLE is raised.
   * After the style_ids are merged, in case a bound_style is given, its values
   * override the ones produced by the merge.
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.piet.StyleIdsStack}
   */
  public  static final class StyleIdsStack extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        StyleIdsStack, StyleIdsStack.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.StyleIdsStack)
      StyleIdsStackOrBuilder {
    private StyleIdsStack() {
      styleIds_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    private int bitField0_;
    public static final int STYLE_IDS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<java.lang.String> styleIds_;
    /**
     * <pre>
     * Style IDs that are proto-merged in order from first to last.
     * </pre>
     *
     * <code>repeated string style_ids = 1;</code>
     * @return A list containing the styleIds.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getStyleIdsList() {
      return styleIds_;
    }
    /**
     * <pre>
     * Style IDs that are proto-merged in order from first to last.
     * </pre>
     *
     * <code>repeated string style_ids = 1;</code>
     * @return The count of styleIds.
     */
    @java.lang.Override
    public int getStyleIdsCount() {
      return styleIds_.size();
    }
    /**
     * <pre>
     * Style IDs that are proto-merged in order from first to last.
     * </pre>
     *
     * <code>repeated string style_ids = 1;</code>
     * @param index The index of the element to return.
     * @return The styleIds at the given index.
     */
    @java.lang.Override
    public java.lang.String getStyleIds(int index) {
      return styleIds_.get(index);
    }
    /**
     * <pre>
     * Style IDs that are proto-merged in order from first to last.
     * </pre>
     *
     * <code>repeated string style_ids = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the styleIds at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStyleIdsBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          styleIds_.get(index));
    }
    private void ensureStyleIdsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          styleIds_;  if (!tmp.isModifiable()) {
        styleIds_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * Style IDs that are proto-merged in order from first to last.
     * </pre>
     *
     * <code>repeated string style_ids = 1;</code>
     * @param index The index to set the value at.
     * @param value The styleIds to set.
     */
    private void setStyleIds(
        int index, java.lang.String value) {
      value.getClass();
  ensureStyleIdsIsMutable();
      styleIds_.set(index, value);
    }
    /**
     * <pre>
     * Style IDs that are proto-merged in order from first to last.
     * </pre>
     *
     * <code>repeated string style_ids = 1;</code>
     * @param value The styleIds to add.
     */
    private void addStyleIds(
        java.lang.String value) {
      value.getClass();
  ensureStyleIdsIsMutable();
      styleIds_.add(value);
    }
    /**
     * <pre>
     * Style IDs that are proto-merged in order from first to last.
     * </pre>
     *
     * <code>repeated string style_ids = 1;</code>
     * @param values The styleIds to add.
     */
    private void addAllStyleIds(
        java.lang.Iterable<java.lang.String> values) {
      ensureStyleIdsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, styleIds_);
    }
    /**
     * <pre>
     * Style IDs that are proto-merged in order from first to last.
     * </pre>
     *
     * <code>repeated string style_ids = 1;</code>
     */
    private void clearStyleIds() {
      styleIds_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     * Style IDs that are proto-merged in order from first to last.
     * </pre>
     *
     * <code>repeated string style_ids = 1;</code>
     * @param value The bytes of the styleIds to add.
     */
    private void addStyleIdsBytes(
        com.google.protobuf.ByteString value) {
      ensureStyleIdsIsMutable();
      styleIds_.add(value.toStringUtf8());
    }

    public static final int STYLE_BINDING_FIELD_NUMBER = 2;
    private org.chromium.components.feed.core.proto.ui.piet.BindingRefsProto.StyleBindingRef styleBinding_;
    /**
     * <pre>
     * Optional style binding that override the styles in the given style_ids.
     * See message comment for exact use.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.StyleBindingRef style_binding = 2;</code>
     */
    @java.lang.Override
    public boolean hasStyleBinding() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Optional style binding that override the styles in the given style_ids.
     * See message comment for exact use.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.StyleBindingRef style_binding = 2;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.BindingRefsProto.StyleBindingRef getStyleBinding() {
      return styleBinding_ == null ? org.chromium.components.feed.core.proto.ui.piet.BindingRefsProto.StyleBindingRef.getDefaultInstance() : styleBinding_;
    }
    /**
     * <pre>
     * Optional style binding that override the styles in the given style_ids.
     * See message comment for exact use.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.StyleBindingRef style_binding = 2;</code>
     */
    private void setStyleBinding(org.chromium.components.feed.core.proto.ui.piet.BindingRefsProto.StyleBindingRef value) {
      value.getClass();
  styleBinding_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * Optional style binding that override the styles in the given style_ids.
     * See message comment for exact use.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.StyleBindingRef style_binding = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeStyleBinding(org.chromium.components.feed.core.proto.ui.piet.BindingRefsProto.StyleBindingRef value) {
      value.getClass();
  if (styleBinding_ != null &&
          styleBinding_ != org.chromium.components.feed.core.proto.ui.piet.BindingRefsProto.StyleBindingRef.getDefaultInstance()) {
        styleBinding_ =
          org.chromium.components.feed.core.proto.ui.piet.BindingRefsProto.StyleBindingRef.newBuilder(styleBinding_).mergeFrom(value).buildPartial();
      } else {
        styleBinding_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * Optional style binding that override the styles in the given style_ids.
     * See message comment for exact use.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.StyleBindingRef style_binding = 2;</code>
     */
    private void clearStyleBinding() {  styleBinding_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A stack of style_ids used to evaluate the style of an element. The final
     * applicable style is computed by proto-merging each style one by one, in order
     * starting from the first. Later attributes override earlier attributes. If a
     * style_id cannot be found, ERR_MISSING_STYLE is raised.
     * After the style_ids are merged, in case a bound_style is given, its values
     * override the ones produced by the merge.
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.piet.StyleIdsStack}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.StyleIdsStack)
        org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStackOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Style IDs that are proto-merged in order from first to last.
       * </pre>
       *
       * <code>repeated string style_ids = 1;</code>
       * @return A list containing the styleIds.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getStyleIdsList() {
        return java.util.Collections.unmodifiableList(
            instance.getStyleIdsList());
      }
      /**
       * <pre>
       * Style IDs that are proto-merged in order from first to last.
       * </pre>
       *
       * <code>repeated string style_ids = 1;</code>
       * @return The count of styleIds.
       */
      @java.lang.Override
      public int getStyleIdsCount() {
        return instance.getStyleIdsCount();
      }
      /**
       * <pre>
       * Style IDs that are proto-merged in order from first to last.
       * </pre>
       *
       * <code>repeated string style_ids = 1;</code>
       * @param index The index of the element to return.
       * @return The styleIds at the given index.
       */
      @java.lang.Override
      public java.lang.String getStyleIds(int index) {
        return instance.getStyleIds(index);
      }
      /**
       * <pre>
       * Style IDs that are proto-merged in order from first to last.
       * </pre>
       *
       * <code>repeated string style_ids = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the styleIds at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getStyleIdsBytes(int index) {
        return instance.getStyleIdsBytes(index);
      }
      /**
       * <pre>
       * Style IDs that are proto-merged in order from first to last.
       * </pre>
       *
       * <code>repeated string style_ids = 1;</code>
       * @param index The index to set the value at.
       * @param value The styleIds to set.
       * @return This builder for chaining.
       */
      public Builder setStyleIds(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setStyleIds(index, value);
        return this;
      }
      /**
       * <pre>
       * Style IDs that are proto-merged in order from first to last.
       * </pre>
       *
       * <code>repeated string style_ids = 1;</code>
       * @param value The styleIds to add.
       * @return This builder for chaining.
       */
      public Builder addStyleIds(
          java.lang.String value) {
        copyOnWrite();
        instance.addStyleIds(value);
        return this;
      }
      /**
       * <pre>
       * Style IDs that are proto-merged in order from first to last.
       * </pre>
       *
       * <code>repeated string style_ids = 1;</code>
       * @param values The styleIds to add.
       * @return This builder for chaining.
       */
      public Builder addAllStyleIds(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllStyleIds(values);
        return this;
      }
      /**
       * <pre>
       * Style IDs that are proto-merged in order from first to last.
       * </pre>
       *
       * <code>repeated string style_ids = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStyleIds() {
        copyOnWrite();
        instance.clearStyleIds();
        return this;
      }
      /**
       * <pre>
       * Style IDs that are proto-merged in order from first to last.
       * </pre>
       *
       * <code>repeated string style_ids = 1;</code>
       * @param value The bytes of the styleIds to add.
       * @return This builder for chaining.
       */
      public Builder addStyleIdsBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addStyleIdsBytes(value);
        return this;
      }

      /**
       * <pre>
       * Optional style binding that override the styles in the given style_ids.
       * See message comment for exact use.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.StyleBindingRef style_binding = 2;</code>
       */
      @java.lang.Override
      public boolean hasStyleBinding() {
        return instance.hasStyleBinding();
      }
      /**
       * <pre>
       * Optional style binding that override the styles in the given style_ids.
       * See message comment for exact use.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.StyleBindingRef style_binding = 2;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.BindingRefsProto.StyleBindingRef getStyleBinding() {
        return instance.getStyleBinding();
      }
      /**
       * <pre>
       * Optional style binding that override the styles in the given style_ids.
       * See message comment for exact use.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.StyleBindingRef style_binding = 2;</code>
       */
      public Builder setStyleBinding(org.chromium.components.feed.core.proto.ui.piet.BindingRefsProto.StyleBindingRef value) {
        copyOnWrite();
        instance.setStyleBinding(value);
        return this;
        }
      /**
       * <pre>
       * Optional style binding that override the styles in the given style_ids.
       * See message comment for exact use.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.StyleBindingRef style_binding = 2;</code>
       */
      public Builder setStyleBinding(
          org.chromium.components.feed.core.proto.ui.piet.BindingRefsProto.StyleBindingRef.Builder builderForValue) {
        copyOnWrite();
        instance.setStyleBinding(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Optional style binding that override the styles in the given style_ids.
       * See message comment for exact use.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.StyleBindingRef style_binding = 2;</code>
       */
      public Builder mergeStyleBinding(org.chromium.components.feed.core.proto.ui.piet.BindingRefsProto.StyleBindingRef value) {
        copyOnWrite();
        instance.mergeStyleBinding(value);
        return this;
      }
      /**
       * <pre>
       * Optional style binding that override the styles in the given style_ids.
       * See message comment for exact use.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.StyleBindingRef style_binding = 2;</code>
       */
      public Builder clearStyleBinding() {  copyOnWrite();
        instance.clearStyleBinding();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.StyleIdsStack)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "styleIds_",
              "styleBinding_",
            };
            java.lang.String info =
                "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0001\u0000\u0001\u001a\u0002\u1009" +
                "\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.StyleIdsStack)
    private static final org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack DEFAULT_INSTANCE;
    static {
      StyleIdsStack defaultInstance = new StyleIdsStack();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        StyleIdsStack.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleIdsStack getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<StyleIdsStack> PARSER;

    public static com.google.protobuf.Parser<StyleIdsStack> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface StyleOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.Style)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                Style, Style.Builder> {

    /**
     * <pre>
     * Every style must have a name that is unique within the StyleSheet. But
     * don’t go overboard in naming these with namespaced constructs because
     * longer strings lead to more bytes on the wire.
     * </pre>
     *
     * <code>optional string style_id = 1;</code>
     * @return Whether the styleId field is set.
     */
    boolean hasStyleId();
    /**
     * <pre>
     * Every style must have a name that is unique within the StyleSheet. But
     * don’t go overboard in naming these with namespaced constructs because
     * longer strings lead to more bytes on the wire.
     * </pre>
     *
     * <code>optional string style_id = 1;</code>
     * @return The styleId.
     */
    java.lang.String getStyleId();
    /**
     * <pre>
     * Every style must have a name that is unique within the StyleSheet. But
     * don’t go overboard in naming these with namespaced constructs because
     * longer strings lead to more bytes on the wire.
     * </pre>
     *
     * <code>optional string style_id = 1;</code>
     * @return The bytes for styleId.
     */
    com.google.protobuf.ByteString
        getStyleIdBytes();

    /**
     * <pre>
     * This Style is only eligible to be used if *all* the conditions
     * enumerated below are met. Multiple styles can have the same style id if
     * their conditions are disjoint.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
     */
    java.util.List<org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition> 
        getConditionsList();
    /**
     * <pre>
     * This Style is only eligible to be used if *all* the conditions
     * enumerated below are met. Multiple styles can have the same style id if
     * their conditions are disjoint.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
     */
    org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition getConditions(int index);
    /**
     * <pre>
     * This Style is only eligible to be used if *all* the conditions
     * enumerated below are met. Multiple styles can have the same style id if
     * their conditions are disjoint.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
     */
    int getConditionsCount();

    /**
     * <pre>
     * When applied to an image, this will replace all non-transparent pixels with
     * the specified color. This is used for changing the color of icons which are
     * provided as a monochrome bitmap. If this optional field is not provided,
     * the image will not be modified.
     * </pre>
     *
     * <code>optional fixed32 color = 2 [default = 3724541952];</code>
     * @return Whether the color field is set.
     */
    boolean hasColor();
    /**
     * <pre>
     * When applied to an image, this will replace all non-transparent pixels with
     * the specified color. This is used for changing the color of icons which are
     * provided as a monochrome bitmap. If this optional field is not provided,
     * the image will not be modified.
     * </pre>
     *
     * <code>optional fixed32 color = 2 [default = 3724541952];</code>
     * @return The color.
     */
    int getColor();

    /**
     * <pre>
     * Defines the background fill, either as a solid color, or a gradient.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Fill background = 3;</code>
     * @return Whether the background field is set.
     */
    boolean hasBackground();
    /**
     * <pre>
     * Defines the background fill, either as a solid color, or a gradient.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Fill background = 3;</code>
     * @return The background.
     */
    org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill getBackground();

    /**
     * <pre>
     * Configuration for image loading behavior (such as fading in)
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 17;</code>
     * @return Whether the imageLoadingSettings field is set.
     */
    boolean hasImageLoadingSettings();
    /**
     * <pre>
     * Configuration for image loading behavior (such as fading in)
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 17;</code>
     * @return The imageLoadingSettings.
     */
    org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings getImageLoadingSettings();

    /**
     * <pre>
     * Font information applicable to text elements.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Font font = 4;</code>
     * @return Whether the font field is set.
     */
    boolean hasFont();
    /**
     * <pre>
     * Font information applicable to text elements.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Font font = 4;</code>
     * @return The font.
     */
    org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font getFont();

    /**
     * <pre>
     * Text alignment
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentHorizontal text_alignment_horizontal = 21 [default = TEXT_ALIGNMENT_START];</code>
     * @return Whether the textAlignmentHorizontal field is set.
     */
    boolean hasTextAlignmentHorizontal();
    /**
     * <pre>
     * Text alignment
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentHorizontal text_alignment_horizontal = 21 [default = TEXT_ALIGNMENT_START];</code>
     * @return The textAlignmentHorizontal.
     */
    org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentHorizontal getTextAlignmentHorizontal();

    /**
     * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentVertical text_alignment_vertical = 22 [default = TEXT_ALIGNMENT_TOP];</code>
     * @return Whether the textAlignmentVertical field is set.
     */
    boolean hasTextAlignmentVertical();
    /**
     * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentVertical text_alignment_vertical = 22 [default = TEXT_ALIGNMENT_TOP];</code>
     * @return The textAlignmentVertical.
     */
    org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentVertical getTextAlignmentVertical();

    /**
     * <pre>
     * Margins around the item
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths margins = 5;</code>
     * @return Whether the margins field is set.
     */
    boolean hasMargins();
    /**
     * <pre>
     * Margins around the item
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths margins = 5;</code>
     * @return The margins.
     */
    org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths getMargins();

    /**
     * <pre>
     * Borders
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Borders borders = 6;</code>
     * @return Whether the borders field is set.
     */
    boolean hasBorders();
    /**
     * <pre>
     * Borders
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Borders borders = 6;</code>
     * @return The borders.
     */
    org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders getBorders();

    /**
     * <pre>
     * Padding around the item
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths padding = 7;</code>
     * @return Whether the padding field is set.
     */
    boolean hasPadding();
    /**
     * <pre>
     * Padding around the item
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths padding = 7;</code>
     * @return The padding.
     */
    org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths getPadding();

    /**
     * <pre>
     * Width of an element.
     * </pre>
     *
     * <code>uint32 width = 8;</code>
     * @return Whether the width field is set.
     */
    boolean hasWidth();
    /**
     * <pre>
     * Width of an element.
     * </pre>
     *
     * <code>uint32 width = 8;</code>
     * @return The width.
     */
    int getWidth();

    /**
     * <pre>
     * Width relative to content or parent Element
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_width = 23;</code>
     * @return Whether the relativeWidth field is set.
     */
    boolean hasRelativeWidth();
    /**
     * <pre>
     * Width relative to content or parent Element
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_width = 23;</code>
     * @return The relativeWidth.
     */
    org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize getRelativeWidth();

    /**
     * <pre>
     * Constant height in DP
     * </pre>
     *
     * <code>uint32 height = 9;</code>
     * @return Whether the height field is set.
     */
    boolean hasHeight();
    /**
     * <pre>
     * Constant height in DP
     * </pre>
     *
     * <code>uint32 height = 9;</code>
     * @return The height.
     */
    int getHeight();

    /**
     * <pre>
     * Height relative to content or parent Element
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_height = 24;</code>
     * @return Whether the relativeHeight field is set.
     */
    boolean hasRelativeHeight();
    /**
     * <pre>
     * Height relative to content or parent Element
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_height = 24;</code>
     * @return The relativeHeight.
     */
    org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize getRelativeHeight();

    /**
     * <pre>
     * Minimum height for an element.
     * </pre>
     *
     * <code>optional uint32 min_height = 10;</code>
     * @return Whether the minHeight field is set.
     */
    boolean hasMinHeight();
    /**
     * <pre>
     * Minimum height for an element.
     * </pre>
     *
     * <code>optional uint32 min_height = 10;</code>
     * @return The minHeight.
     */
    int getMinHeight();

    /**
     * <pre>
     * Maximum number of text lines to display
     * </pre>
     *
     * <code>optional uint32 max_lines = 11;</code>
     * @return Whether the maxLines field is set.
     */
    boolean hasMaxLines();
    /**
     * <pre>
     * Maximum number of text lines to display
     * </pre>
     *
     * <code>optional uint32 max_lines = 11;</code>
     * @return The maxLines.
     */
    int getMaxLines();

    /**
     * <pre>
     * If there is a background fill, allow the background (including borders) to
     * have rounded corners.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.RoundedCorners rounded_corners = 12;</code>
     * @return Whether the roundedCorners field is set.
     */
    boolean hasRoundedCorners();
    /**
     * <pre>
     * If there is a background fill, allow the background (including borders) to
     * have rounded corners.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.RoundedCorners rounded_corners = 12;</code>
     * @return The roundedCorners.
     */
    org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners getRoundedCorners();

    /**
     * <pre>
     * Opacity. This affects the element with the current style, and also all its
     * descendants. For example, Opacity of a GridRow will affect all the
     * GridCells under it, and their descendants. This value comes on top of the
     * alpha value of colors.
     * Values between [0..1] are valid; those outside this range will be clamped.
     * </pre>
     *
     * <code>optional float opacity = 13 [default = 1];</code>
     * @return Whether the opacity field is set.
     */
    boolean hasOpacity();
    /**
     * <pre>
     * Opacity. This affects the element with the current style, and also all its
     * descendants. For example, Opacity of a GridRow will affect all the
     * GridCells under it, and their descendants. This value comes on top of the
     * alpha value of colors.
     * Values between [0..1] are valid; those outside this range will be clamped.
     * </pre>
     *
     * <code>optional float opacity = 13 [default = 1];</code>
     * @return The opacity.
     */
    float getOpacity();

    /**
     * <pre>
     * Defines a shadow for an element.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Shadow shadow = 14;</code>
     * @return Whether the shadow field is set.
     */
    boolean hasShadow();
    /**
     * <pre>
     * Defines a shadow for an element.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Shadow shadow = 14;</code>
     * @return The shadow.
     */
    org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow getShadow();

    /**
     * <pre>
     * Scale type for images
     * This may not be supported for images in ChunkedText for all platforms.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 18 [default = CENTER_INSIDE];</code>
     * @return Whether the scaleType field is set.
     */
    boolean hasScaleType();
    /**
     * <pre>
     * Scale type for images
     * This may not be supported for images in ChunkedText for all platforms.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 18 [default = CENTER_INSIDE];</code>
     * @return The scaleType.
     */
    org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType getScaleType();

    /**
     * <pre>
     * Horizontal gravity of this element's content within the parent container
     * Not respected in GridRow
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.GravityHorizontal gravity_horizontal = 19;</code>
     * @return Whether the gravityHorizontal field is set.
     */
    boolean hasGravityHorizontal();
    /**
     * <pre>
     * Horizontal gravity of this element's content within the parent container
     * Not respected in GridRow
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.GravityHorizontal gravity_horizontal = 19;</code>
     * @return The gravityHorizontal.
     */
    org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityHorizontal getGravityHorizontal();

    /**
     * <pre>
     * Vertical gravity of this element's content within the parent container
     * Not respected in ElementList
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.GravityVertical gravity_vertical = 20;</code>
     * @return Whether the gravityVertical field is set.
     */
    boolean hasGravityVertical();
    /**
     * <pre>
     * Vertical gravity of this element's content within the parent container
     * Not respected in ElementList
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.GravityVertical gravity_vertical = 20;</code>
     * @return The gravityVertical.
     */
    org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityVertical getGravityVertical();

    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style.WidthSpecCase getWidthSpecCase();

    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style.HeightSpecCase getHeightSpecCase();
  }
  /**
   * <pre>
   * A collection of attributes describing an element’s visual properties.
   * NextId: 25
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.piet.Style}
   */
  public  static final class Style extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        Style, Style.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.Style)
      StyleOrBuilder {
    private Style() {
      styleId_ = "";
      conditions_ = emptyProtobufList();
      color_ = -570425344;
      textAlignmentHorizontal_ = 1;
      textAlignmentVertical_ = 1;
      opacity_ = 1F;
      scaleType_ = 1;
    }
    private int bitField0_;
    private int widthSpecCase_ = 0;
    private java.lang.Object widthSpec_;
    public enum WidthSpecCase {
      WIDTH(8),
      RELATIVE_WIDTH(23),
      WIDTHSPEC_NOT_SET(0);
      private final int value;
      private WidthSpecCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static WidthSpecCase valueOf(int value) {
        return forNumber(value);
      }

      public static WidthSpecCase forNumber(int value) {
        switch (value) {
          case 8: return WIDTH;
          case 23: return RELATIVE_WIDTH;
          case 0: return WIDTHSPEC_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @java.lang.Override
    public WidthSpecCase
    getWidthSpecCase() {
      return WidthSpecCase.forNumber(
          widthSpecCase_);
    }

    private void clearWidthSpec() {
      widthSpecCase_ = 0;
      widthSpec_ = null;
    }

    private int heightSpecCase_ = 0;
    private java.lang.Object heightSpec_;
    public enum HeightSpecCase {
      HEIGHT(9),
      RELATIVE_HEIGHT(24),
      HEIGHTSPEC_NOT_SET(0);
      private final int value;
      private HeightSpecCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static HeightSpecCase valueOf(int value) {
        return forNumber(value);
      }

      public static HeightSpecCase forNumber(int value) {
        switch (value) {
          case 9: return HEIGHT;
          case 24: return RELATIVE_HEIGHT;
          case 0: return HEIGHTSPEC_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @java.lang.Override
    public HeightSpecCase
    getHeightSpecCase() {
      return HeightSpecCase.forNumber(
          heightSpecCase_);
    }

    private void clearHeightSpec() {
      heightSpecCase_ = 0;
      heightSpec_ = null;
    }

    public static final int STYLE_ID_FIELD_NUMBER = 1;
    private java.lang.String styleId_;
    /**
     * <pre>
     * Every style must have a name that is unique within the StyleSheet. But
     * don’t go overboard in naming these with namespaced constructs because
     * longer strings lead to more bytes on the wire.
     * </pre>
     *
     * <code>optional string style_id = 1;</code>
     * @return Whether the styleId field is set.
     */
    @java.lang.Override
    public boolean hasStyleId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Every style must have a name that is unique within the StyleSheet. But
     * don’t go overboard in naming these with namespaced constructs because
     * longer strings lead to more bytes on the wire.
     * </pre>
     *
     * <code>optional string style_id = 1;</code>
     * @return The styleId.
     */
    @java.lang.Override
    public java.lang.String getStyleId() {
      return styleId_;
    }
    /**
     * <pre>
     * Every style must have a name that is unique within the StyleSheet. But
     * don’t go overboard in naming these with namespaced constructs because
     * longer strings lead to more bytes on the wire.
     * </pre>
     *
     * <code>optional string style_id = 1;</code>
     * @return The bytes for styleId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStyleIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(styleId_);
    }
    /**
     * <pre>
     * Every style must have a name that is unique within the StyleSheet. But
     * don’t go overboard in naming these with namespaced constructs because
     * longer strings lead to more bytes on the wire.
     * </pre>
     *
     * <code>optional string style_id = 1;</code>
     * @param value The styleId to set.
     */
    private void setStyleId(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000001;
      styleId_ = value;
    }
    /**
     * <pre>
     * Every style must have a name that is unique within the StyleSheet. But
     * don’t go overboard in naming these with namespaced constructs because
     * longer strings lead to more bytes on the wire.
     * </pre>
     *
     * <code>optional string style_id = 1;</code>
     */
    private void clearStyleId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      styleId_ = getDefaultInstance().getStyleId();
    }
    /**
     * <pre>
     * Every style must have a name that is unique within the StyleSheet. But
     * don’t go overboard in naming these with namespaced constructs because
     * longer strings lead to more bytes on the wire.
     * </pre>
     *
     * <code>optional string style_id = 1;</code>
     * @param value The bytes for styleId to set.
     */
    private void setStyleIdBytes(
        com.google.protobuf.ByteString value) {
      styleId_ = value.toStringUtf8();
      bitField0_ |= 0x00000001;
    }

    public static final int CONDITIONS_FIELD_NUMBER = 16;
    private com.google.protobuf.Internal.ProtobufList<org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition> conditions_;
    /**
     * <pre>
     * This Style is only eligible to be used if *all* the conditions
     * enumerated below are met. Multiple styles can have the same style id if
     * their conditions are disjoint.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition> getConditionsList() {
      return conditions_;
    }
    /**
     * <pre>
     * This Style is only eligible to be used if *all* the conditions
     * enumerated below are met. Multiple styles can have the same style id if
     * their conditions are disjoint.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
     */
    public java.util.List<? extends org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryConditionOrBuilder> 
        getConditionsOrBuilderList() {
      return conditions_;
    }
    /**
     * <pre>
     * This Style is only eligible to be used if *all* the conditions
     * enumerated below are met. Multiple styles can have the same style id if
     * their conditions are disjoint.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
     */
    @java.lang.Override
    public int getConditionsCount() {
      return conditions_.size();
    }
    /**
     * <pre>
     * This Style is only eligible to be used if *all* the conditions
     * enumerated below are met. Multiple styles can have the same style id if
     * their conditions are disjoint.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition getConditions(int index) {
      return conditions_.get(index);
    }
    /**
     * <pre>
     * This Style is only eligible to be used if *all* the conditions
     * enumerated below are met. Multiple styles can have the same style id if
     * their conditions are disjoint.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
     */
    public org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryConditionOrBuilder getConditionsOrBuilder(
        int index) {
      return conditions_.get(index);
    }
    private void ensureConditionsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition> tmp = conditions_;
      if (!tmp.isModifiable()) {
        conditions_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * This Style is only eligible to be used if *all* the conditions
     * enumerated below are met. Multiple styles can have the same style id if
     * their conditions are disjoint.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
     */
    private void setConditions(
        int index, org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition value) {
      value.getClass();
  ensureConditionsIsMutable();
      conditions_.set(index, value);
    }
    /**
     * <pre>
     * This Style is only eligible to be used if *all* the conditions
     * enumerated below are met. Multiple styles can have the same style id if
     * their conditions are disjoint.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
     */
    private void addConditions(org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition value) {
      value.getClass();
  ensureConditionsIsMutable();
      conditions_.add(value);
    }
    /**
     * <pre>
     * This Style is only eligible to be used if *all* the conditions
     * enumerated below are met. Multiple styles can have the same style id if
     * their conditions are disjoint.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
     */
    private void addConditions(
        int index, org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition value) {
      value.getClass();
  ensureConditionsIsMutable();
      conditions_.add(index, value);
    }
    /**
     * <pre>
     * This Style is only eligible to be used if *all* the conditions
     * enumerated below are met. Multiple styles can have the same style id if
     * their conditions are disjoint.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
     */
    private void addAllConditions(
        java.lang.Iterable<? extends org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition> values) {
      ensureConditionsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, conditions_);
    }
    /**
     * <pre>
     * This Style is only eligible to be used if *all* the conditions
     * enumerated below are met. Multiple styles can have the same style id if
     * their conditions are disjoint.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
     */
    private void clearConditions() {
      conditions_ = emptyProtobufList();
    }
    /**
     * <pre>
     * This Style is only eligible to be used if *all* the conditions
     * enumerated below are met. Multiple styles can have the same style id if
     * their conditions are disjoint.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
     */
    private void removeConditions(int index) {
      ensureConditionsIsMutable();
      conditions_.remove(index);
    }

    public static final int COLOR_FIELD_NUMBER = 2;
    private int color_;
    /**
     * <pre>
     * When applied to an image, this will replace all non-transparent pixels with
     * the specified color. This is used for changing the color of icons which are
     * provided as a monochrome bitmap. If this optional field is not provided,
     * the image will not be modified.
     * </pre>
     *
     * <code>optional fixed32 color = 2 [default = 3724541952];</code>
     * @return Whether the color field is set.
     */
    @java.lang.Override
    public boolean hasColor() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * When applied to an image, this will replace all non-transparent pixels with
     * the specified color. This is used for changing the color of icons which are
     * provided as a monochrome bitmap. If this optional field is not provided,
     * the image will not be modified.
     * </pre>
     *
     * <code>optional fixed32 color = 2 [default = 3724541952];</code>
     * @return The color.
     */
    @java.lang.Override
    public int getColor() {
      return color_;
    }
    /**
     * <pre>
     * When applied to an image, this will replace all non-transparent pixels with
     * the specified color. This is used for changing the color of icons which are
     * provided as a monochrome bitmap. If this optional field is not provided,
     * the image will not be modified.
     * </pre>
     *
     * <code>optional fixed32 color = 2 [default = 3724541952];</code>
     * @param value The color to set.
     */
    private void setColor(int value) {
      bitField0_ |= 0x00000002;
      color_ = value;
    }
    /**
     * <pre>
     * When applied to an image, this will replace all non-transparent pixels with
     * the specified color. This is used for changing the color of icons which are
     * provided as a monochrome bitmap. If this optional field is not provided,
     * the image will not be modified.
     * </pre>
     *
     * <code>optional fixed32 color = 2 [default = 3724541952];</code>
     */
    private void clearColor() {
      bitField0_ = (bitField0_ & ~0x00000002);
      color_ = -570425344;
    }

    public static final int BACKGROUND_FIELD_NUMBER = 3;
    private org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill background_;
    /**
     * <pre>
     * Defines the background fill, either as a solid color, or a gradient.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Fill background = 3;</code>
     */
    @java.lang.Override
    public boolean hasBackground() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Defines the background fill, either as a solid color, or a gradient.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Fill background = 3;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill getBackground() {
      return background_ == null ? org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill.getDefaultInstance() : background_;
    }
    /**
     * <pre>
     * Defines the background fill, either as a solid color, or a gradient.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Fill background = 3;</code>
     */
    private void setBackground(org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill value) {
      value.getClass();
  background_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <pre>
     * Defines the background fill, either as a solid color, or a gradient.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Fill background = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeBackground(org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill value) {
      value.getClass();
  if (background_ != null &&
          background_ != org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill.getDefaultInstance()) {
        background_ =
          org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill.newBuilder(background_).mergeFrom(value).buildPartial();
      } else {
        background_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <pre>
     * Defines the background fill, either as a solid color, or a gradient.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Fill background = 3;</code>
     */
    private void clearBackground() {  background_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static final int IMAGE_LOADING_SETTINGS_FIELD_NUMBER = 17;
    private org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings imageLoadingSettings_;
    /**
     * <pre>
     * Configuration for image loading behavior (such as fading in)
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 17;</code>
     */
    @java.lang.Override
    public boolean hasImageLoadingSettings() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Configuration for image loading behavior (such as fading in)
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 17;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings getImageLoadingSettings() {
      return imageLoadingSettings_ == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings.getDefaultInstance() : imageLoadingSettings_;
    }
    /**
     * <pre>
     * Configuration for image loading behavior (such as fading in)
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 17;</code>
     */
    private void setImageLoadingSettings(org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings value) {
      value.getClass();
  imageLoadingSettings_ = value;
      bitField0_ |= 0x00000008;
      }
    /**
     * <pre>
     * Configuration for image loading behavior (such as fading in)
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 17;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeImageLoadingSettings(org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings value) {
      value.getClass();
  if (imageLoadingSettings_ != null &&
          imageLoadingSettings_ != org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings.getDefaultInstance()) {
        imageLoadingSettings_ =
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings.newBuilder(imageLoadingSettings_).mergeFrom(value).buildPartial();
      } else {
        imageLoadingSettings_ = value;
      }
      bitField0_ |= 0x00000008;
    }
    /**
     * <pre>
     * Configuration for image loading behavior (such as fading in)
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 17;</code>
     */
    private void clearImageLoadingSettings() {  imageLoadingSettings_ = null;
      bitField0_ = (bitField0_ & ~0x00000008);
    }

    public static final int FONT_FIELD_NUMBER = 4;
    private org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font font_;
    /**
     * <pre>
     * Font information applicable to text elements.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Font font = 4;</code>
     */
    @java.lang.Override
    public boolean hasFont() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Font information applicable to text elements.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Font font = 4;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font getFont() {
      return font_ == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font.getDefaultInstance() : font_;
    }
    /**
     * <pre>
     * Font information applicable to text elements.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Font font = 4;</code>
     */
    private void setFont(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font value) {
      value.getClass();
  font_ = value;
      bitField0_ |= 0x00000010;
      }
    /**
     * <pre>
     * Font information applicable to text elements.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Font font = 4;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeFont(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font value) {
      value.getClass();
  if (font_ != null &&
          font_ != org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font.getDefaultInstance()) {
        font_ =
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font.newBuilder(font_).mergeFrom(value).buildPartial();
      } else {
        font_ = value;
      }
      bitField0_ |= 0x00000010;
    }
    /**
     * <pre>
     * Font information applicable to text elements.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Font font = 4;</code>
     */
    private void clearFont() {  font_ = null;
      bitField0_ = (bitField0_ & ~0x00000010);
    }

    public static final int TEXT_ALIGNMENT_HORIZONTAL_FIELD_NUMBER = 21;
    private int textAlignmentHorizontal_;
    /**
     * <pre>
     * Text alignment
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentHorizontal text_alignment_horizontal = 21 [default = TEXT_ALIGNMENT_START];</code>
     * @return Whether the textAlignmentHorizontal field is set.
     */
    @java.lang.Override
    public boolean hasTextAlignmentHorizontal() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Text alignment
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentHorizontal text_alignment_horizontal = 21 [default = TEXT_ALIGNMENT_START];</code>
     * @return The textAlignmentHorizontal.
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentHorizontal getTextAlignmentHorizontal() {
      org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentHorizontal result = org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentHorizontal.forNumber(textAlignmentHorizontal_);
      return result == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentHorizontal.TEXT_ALIGNMENT_START : result;
    }
    /**
     * <pre>
     * Text alignment
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentHorizontal text_alignment_horizontal = 21 [default = TEXT_ALIGNMENT_START];</code>
     * @param value The textAlignmentHorizontal to set.
     */
    private void setTextAlignmentHorizontal(org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentHorizontal value) {
      textAlignmentHorizontal_ = value.getNumber();
      bitField0_ |= 0x00000020;
    }
    /**
     * <pre>
     * Text alignment
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentHorizontal text_alignment_horizontal = 21 [default = TEXT_ALIGNMENT_START];</code>
     */
    private void clearTextAlignmentHorizontal() {
      bitField0_ = (bitField0_ & ~0x00000020);
      textAlignmentHorizontal_ = 1;
    }

    public static final int TEXT_ALIGNMENT_VERTICAL_FIELD_NUMBER = 22;
    private int textAlignmentVertical_;
    /**
     * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentVertical text_alignment_vertical = 22 [default = TEXT_ALIGNMENT_TOP];</code>
     * @return Whether the textAlignmentVertical field is set.
     */
    @java.lang.Override
    public boolean hasTextAlignmentVertical() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentVertical text_alignment_vertical = 22 [default = TEXT_ALIGNMENT_TOP];</code>
     * @return The textAlignmentVertical.
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentVertical getTextAlignmentVertical() {
      org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentVertical result = org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentVertical.forNumber(textAlignmentVertical_);
      return result == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentVertical.TEXT_ALIGNMENT_TOP : result;
    }
    /**
     * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentVertical text_alignment_vertical = 22 [default = TEXT_ALIGNMENT_TOP];</code>
     * @param value The textAlignmentVertical to set.
     */
    private void setTextAlignmentVertical(org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentVertical value) {
      textAlignmentVertical_ = value.getNumber();
      bitField0_ |= 0x00000040;
    }
    /**
     * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentVertical text_alignment_vertical = 22 [default = TEXT_ALIGNMENT_TOP];</code>
     */
    private void clearTextAlignmentVertical() {
      bitField0_ = (bitField0_ & ~0x00000040);
      textAlignmentVertical_ = 1;
    }

    public static final int MARGINS_FIELD_NUMBER = 5;
    private org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths margins_;
    /**
     * <pre>
     * Margins around the item
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths margins = 5;</code>
     */
    @java.lang.Override
    public boolean hasMargins() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Margins around the item
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths margins = 5;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths getMargins() {
      return margins_ == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths.getDefaultInstance() : margins_;
    }
    /**
     * <pre>
     * Margins around the item
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths margins = 5;</code>
     */
    private void setMargins(org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths value) {
      value.getClass();
  margins_ = value;
      bitField0_ |= 0x00000080;
      }
    /**
     * <pre>
     * Margins around the item
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths margins = 5;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeMargins(org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths value) {
      value.getClass();
  if (margins_ != null &&
          margins_ != org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths.getDefaultInstance()) {
        margins_ =
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths.newBuilder(margins_).mergeFrom(value).buildPartial();
      } else {
        margins_ = value;
      }
      bitField0_ |= 0x00000080;
    }
    /**
     * <pre>
     * Margins around the item
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths margins = 5;</code>
     */
    private void clearMargins() {  margins_ = null;
      bitField0_ = (bitField0_ & ~0x00000080);
    }

    public static final int BORDERS_FIELD_NUMBER = 6;
    private org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders borders_;
    /**
     * <pre>
     * Borders
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Borders borders = 6;</code>
     */
    @java.lang.Override
    public boolean hasBorders() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Borders
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Borders borders = 6;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders getBorders() {
      return borders_ == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders.getDefaultInstance() : borders_;
    }
    /**
     * <pre>
     * Borders
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Borders borders = 6;</code>
     */
    private void setBorders(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders value) {
      value.getClass();
  borders_ = value;
      bitField0_ |= 0x00000100;
      }
    /**
     * <pre>
     * Borders
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Borders borders = 6;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeBorders(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders value) {
      value.getClass();
  if (borders_ != null &&
          borders_ != org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders.getDefaultInstance()) {
        borders_ =
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders.newBuilder(borders_).mergeFrom(value).buildPartial();
      } else {
        borders_ = value;
      }
      bitField0_ |= 0x00000100;
    }
    /**
     * <pre>
     * Borders
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Borders borders = 6;</code>
     */
    private void clearBorders() {  borders_ = null;
      bitField0_ = (bitField0_ & ~0x00000100);
    }

    public static final int PADDING_FIELD_NUMBER = 7;
    private org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths padding_;
    /**
     * <pre>
     * Padding around the item
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths padding = 7;</code>
     */
    @java.lang.Override
    public boolean hasPadding() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * Padding around the item
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths padding = 7;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths getPadding() {
      return padding_ == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths.getDefaultInstance() : padding_;
    }
    /**
     * <pre>
     * Padding around the item
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths padding = 7;</code>
     */
    private void setPadding(org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths value) {
      value.getClass();
  padding_ = value;
      bitField0_ |= 0x00000200;
      }
    /**
     * <pre>
     * Padding around the item
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths padding = 7;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergePadding(org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths value) {
      value.getClass();
  if (padding_ != null &&
          padding_ != org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths.getDefaultInstance()) {
        padding_ =
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths.newBuilder(padding_).mergeFrom(value).buildPartial();
      } else {
        padding_ = value;
      }
      bitField0_ |= 0x00000200;
    }
    /**
     * <pre>
     * Padding around the item
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths padding = 7;</code>
     */
    private void clearPadding() {  padding_ = null;
      bitField0_ = (bitField0_ & ~0x00000200);
    }

    public static final int WIDTH_FIELD_NUMBER = 8;
    /**
     * <pre>
     * Width of an element.
     * </pre>
     *
     * <code>uint32 width = 8;</code>
     * @return Whether the width field is set.
     */
    @java.lang.Override
    public boolean hasWidth() {
      return widthSpecCase_ == 8;
    }
    /**
     * <pre>
     * Width of an element.
     * </pre>
     *
     * <code>uint32 width = 8;</code>
     * @return The width.
     */
    @java.lang.Override
    public int getWidth() {
      if (widthSpecCase_ == 8) {
        return (java.lang.Integer) widthSpec_;
      }
      return 0;
    }
    /**
     * <pre>
     * Width of an element.
     * </pre>
     *
     * <code>uint32 width = 8;</code>
     * @param value The width to set.
     */
    private void setWidth(int value) {
      widthSpecCase_ = 8;
      widthSpec_ = value;
    }
    /**
     * <pre>
     * Width of an element.
     * </pre>
     *
     * <code>uint32 width = 8;</code>
     */
    private void clearWidth() {
      if (widthSpecCase_ == 8) {
        widthSpecCase_ = 0;
        widthSpec_ = null;
      }
    }

    public static final int RELATIVE_WIDTH_FIELD_NUMBER = 23;
    /**
     * <pre>
     * Width relative to content or parent Element
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_width = 23;</code>
     * @return Whether the relativeWidth field is set.
     */
    @java.lang.Override
    public boolean hasRelativeWidth() {
      return widthSpecCase_ == 23;
    }
    /**
     * <pre>
     * Width relative to content or parent Element
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_width = 23;</code>
     * @return The relativeWidth.
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize getRelativeWidth() {
      if (widthSpecCase_ == 23) {
        org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize result = org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize.forNumber((java.lang.Integer) widthSpec_);
        return result == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize.RELATIVE_SIZE_UNDEFINED : result;
      }
      return org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize.RELATIVE_SIZE_UNDEFINED;
    }
    /**
     * <pre>
     * Width relative to content or parent Element
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_width = 23;</code>
     * @param value The relativeWidth to set.
     */
    private void setRelativeWidth(org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize value) {
      widthSpec_ = value.getNumber();
      widthSpecCase_ = 23;
    }
    /**
     * <pre>
     * Width relative to content or parent Element
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_width = 23;</code>
     */
    private void clearRelativeWidth() {
      if (widthSpecCase_ == 23) {
        widthSpecCase_ = 0;
        widthSpec_ = null;
      }
    }

    public static final int HEIGHT_FIELD_NUMBER = 9;
    /**
     * <pre>
     * Constant height in DP
     * </pre>
     *
     * <code>uint32 height = 9;</code>
     * @return Whether the height field is set.
     */
    @java.lang.Override
    public boolean hasHeight() {
      return heightSpecCase_ == 9;
    }
    /**
     * <pre>
     * Constant height in DP
     * </pre>
     *
     * <code>uint32 height = 9;</code>
     * @return The height.
     */
    @java.lang.Override
    public int getHeight() {
      if (heightSpecCase_ == 9) {
        return (java.lang.Integer) heightSpec_;
      }
      return 0;
    }
    /**
     * <pre>
     * Constant height in DP
     * </pre>
     *
     * <code>uint32 height = 9;</code>
     * @param value The height to set.
     */
    private void setHeight(int value) {
      heightSpecCase_ = 9;
      heightSpec_ = value;
    }
    /**
     * <pre>
     * Constant height in DP
     * </pre>
     *
     * <code>uint32 height = 9;</code>
     */
    private void clearHeight() {
      if (heightSpecCase_ == 9) {
        heightSpecCase_ = 0;
        heightSpec_ = null;
      }
    }

    public static final int RELATIVE_HEIGHT_FIELD_NUMBER = 24;
    /**
     * <pre>
     * Height relative to content or parent Element
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_height = 24;</code>
     * @return Whether the relativeHeight field is set.
     */
    @java.lang.Override
    public boolean hasRelativeHeight() {
      return heightSpecCase_ == 24;
    }
    /**
     * <pre>
     * Height relative to content or parent Element
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_height = 24;</code>
     * @return The relativeHeight.
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize getRelativeHeight() {
      if (heightSpecCase_ == 24) {
        org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize result = org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize.forNumber((java.lang.Integer) heightSpec_);
        return result == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize.RELATIVE_SIZE_UNDEFINED : result;
      }
      return org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize.RELATIVE_SIZE_UNDEFINED;
    }
    /**
     * <pre>
     * Height relative to content or parent Element
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_height = 24;</code>
     * @param value The relativeHeight to set.
     */
    private void setRelativeHeight(org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize value) {
      heightSpec_ = value.getNumber();
      heightSpecCase_ = 24;
    }
    /**
     * <pre>
     * Height relative to content or parent Element
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_height = 24;</code>
     */
    private void clearRelativeHeight() {
      if (heightSpecCase_ == 24) {
        heightSpecCase_ = 0;
        heightSpec_ = null;
      }
    }

    public static final int MIN_HEIGHT_FIELD_NUMBER = 10;
    private int minHeight_;
    /**
     * <pre>
     * Minimum height for an element.
     * </pre>
     *
     * <code>optional uint32 min_height = 10;</code>
     * @return Whether the minHeight field is set.
     */
    @java.lang.Override
    public boolean hasMinHeight() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <pre>
     * Minimum height for an element.
     * </pre>
     *
     * <code>optional uint32 min_height = 10;</code>
     * @return The minHeight.
     */
    @java.lang.Override
    public int getMinHeight() {
      return minHeight_;
    }
    /**
     * <pre>
     * Minimum height for an element.
     * </pre>
     *
     * <code>optional uint32 min_height = 10;</code>
     * @param value The minHeight to set.
     */
    private void setMinHeight(int value) {
      bitField0_ |= 0x00004000;
      minHeight_ = value;
    }
    /**
     * <pre>
     * Minimum height for an element.
     * </pre>
     *
     * <code>optional uint32 min_height = 10;</code>
     */
    private void clearMinHeight() {
      bitField0_ = (bitField0_ & ~0x00004000);
      minHeight_ = 0;
    }

    public static final int MAX_LINES_FIELD_NUMBER = 11;
    private int maxLines_;
    /**
     * <pre>
     * Maximum number of text lines to display
     * </pre>
     *
     * <code>optional uint32 max_lines = 11;</code>
     * @return Whether the maxLines field is set.
     */
    @java.lang.Override
    public boolean hasMaxLines() {
      return ((bitField0_ & 0x00008000) != 0);
    }
    /**
     * <pre>
     * Maximum number of text lines to display
     * </pre>
     *
     * <code>optional uint32 max_lines = 11;</code>
     * @return The maxLines.
     */
    @java.lang.Override
    public int getMaxLines() {
      return maxLines_;
    }
    /**
     * <pre>
     * Maximum number of text lines to display
     * </pre>
     *
     * <code>optional uint32 max_lines = 11;</code>
     * @param value The maxLines to set.
     */
    private void setMaxLines(int value) {
      bitField0_ |= 0x00008000;
      maxLines_ = value;
    }
    /**
     * <pre>
     * Maximum number of text lines to display
     * </pre>
     *
     * <code>optional uint32 max_lines = 11;</code>
     */
    private void clearMaxLines() {
      bitField0_ = (bitField0_ & ~0x00008000);
      maxLines_ = 0;
    }

    public static final int ROUNDED_CORNERS_FIELD_NUMBER = 12;
    private org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners roundedCorners_;
    /**
     * <pre>
     * If there is a background fill, allow the background (including borders) to
     * have rounded corners.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.RoundedCorners rounded_corners = 12;</code>
     */
    @java.lang.Override
    public boolean hasRoundedCorners() {
      return ((bitField0_ & 0x00010000) != 0);
    }
    /**
     * <pre>
     * If there is a background fill, allow the background (including borders) to
     * have rounded corners.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.RoundedCorners rounded_corners = 12;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners getRoundedCorners() {
      return roundedCorners_ == null ? org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners.getDefaultInstance() : roundedCorners_;
    }
    /**
     * <pre>
     * If there is a background fill, allow the background (including borders) to
     * have rounded corners.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.RoundedCorners rounded_corners = 12;</code>
     */
    private void setRoundedCorners(org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners value) {
      value.getClass();
  roundedCorners_ = value;
      bitField0_ |= 0x00010000;
      }
    /**
     * <pre>
     * If there is a background fill, allow the background (including borders) to
     * have rounded corners.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.RoundedCorners rounded_corners = 12;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeRoundedCorners(org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners value) {
      value.getClass();
  if (roundedCorners_ != null &&
          roundedCorners_ != org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners.getDefaultInstance()) {
        roundedCorners_ =
          org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners.newBuilder(roundedCorners_).mergeFrom(value).buildPartial();
      } else {
        roundedCorners_ = value;
      }
      bitField0_ |= 0x00010000;
    }
    /**
     * <pre>
     * If there is a background fill, allow the background (including borders) to
     * have rounded corners.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.RoundedCorners rounded_corners = 12;</code>
     */
    private void clearRoundedCorners() {  roundedCorners_ = null;
      bitField0_ = (bitField0_ & ~0x00010000);
    }

    public static final int OPACITY_FIELD_NUMBER = 13;
    private float opacity_;
    /**
     * <pre>
     * Opacity. This affects the element with the current style, and also all its
     * descendants. For example, Opacity of a GridRow will affect all the
     * GridCells under it, and their descendants. This value comes on top of the
     * alpha value of colors.
     * Values between [0..1] are valid; those outside this range will be clamped.
     * </pre>
     *
     * <code>optional float opacity = 13 [default = 1];</code>
     * @return Whether the opacity field is set.
     */
    @java.lang.Override
    public boolean hasOpacity() {
      return ((bitField0_ & 0x00020000) != 0);
    }
    /**
     * <pre>
     * Opacity. This affects the element with the current style, and also all its
     * descendants. For example, Opacity of a GridRow will affect all the
     * GridCells under it, and their descendants. This value comes on top of the
     * alpha value of colors.
     * Values between [0..1] are valid; those outside this range will be clamped.
     * </pre>
     *
     * <code>optional float opacity = 13 [default = 1];</code>
     * @return The opacity.
     */
    @java.lang.Override
    public float getOpacity() {
      return opacity_;
    }
    /**
     * <pre>
     * Opacity. This affects the element with the current style, and also all its
     * descendants. For example, Opacity of a GridRow will affect all the
     * GridCells under it, and their descendants. This value comes on top of the
     * alpha value of colors.
     * Values between [0..1] are valid; those outside this range will be clamped.
     * </pre>
     *
     * <code>optional float opacity = 13 [default = 1];</code>
     * @param value The opacity to set.
     */
    private void setOpacity(float value) {
      bitField0_ |= 0x00020000;
      opacity_ = value;
    }
    /**
     * <pre>
     * Opacity. This affects the element with the current style, and also all its
     * descendants. For example, Opacity of a GridRow will affect all the
     * GridCells under it, and their descendants. This value comes on top of the
     * alpha value of colors.
     * Values between [0..1] are valid; those outside this range will be clamped.
     * </pre>
     *
     * <code>optional float opacity = 13 [default = 1];</code>
     */
    private void clearOpacity() {
      bitField0_ = (bitField0_ & ~0x00020000);
      opacity_ = 1F;
    }

    public static final int SHADOW_FIELD_NUMBER = 14;
    private org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow shadow_;
    /**
     * <pre>
     * Defines a shadow for an element.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Shadow shadow = 14;</code>
     */
    @java.lang.Override
    public boolean hasShadow() {
      return ((bitField0_ & 0x00040000) != 0);
    }
    /**
     * <pre>
     * Defines a shadow for an element.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Shadow shadow = 14;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow getShadow() {
      return shadow_ == null ? org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow.getDefaultInstance() : shadow_;
    }
    /**
     * <pre>
     * Defines a shadow for an element.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Shadow shadow = 14;</code>
     */
    private void setShadow(org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow value) {
      value.getClass();
  shadow_ = value;
      bitField0_ |= 0x00040000;
      }
    /**
     * <pre>
     * Defines a shadow for an element.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Shadow shadow = 14;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeShadow(org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow value) {
      value.getClass();
  if (shadow_ != null &&
          shadow_ != org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow.getDefaultInstance()) {
        shadow_ =
          org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow.newBuilder(shadow_).mergeFrom(value).buildPartial();
      } else {
        shadow_ = value;
      }
      bitField0_ |= 0x00040000;
    }
    /**
     * <pre>
     * Defines a shadow for an element.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Shadow shadow = 14;</code>
     */
    private void clearShadow() {  shadow_ = null;
      bitField0_ = (bitField0_ & ~0x00040000);
    }

    public static final int SCALE_TYPE_FIELD_NUMBER = 18;
    private int scaleType_;
    /**
     * <pre>
     * Scale type for images
     * This may not be supported for images in ChunkedText for all platforms.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 18 [default = CENTER_INSIDE];</code>
     * @return Whether the scaleType field is set.
     */
    @java.lang.Override
    public boolean hasScaleType() {
      return ((bitField0_ & 0x00080000) != 0);
    }
    /**
     * <pre>
     * Scale type for images
     * This may not be supported for images in ChunkedText for all platforms.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 18 [default = CENTER_INSIDE];</code>
     * @return The scaleType.
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType getScaleType() {
      org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType result = org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType.forNumber(scaleType_);
      return result == null ? org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType.CENTER_INSIDE : result;
    }
    /**
     * <pre>
     * Scale type for images
     * This may not be supported for images in ChunkedText for all platforms.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 18 [default = CENTER_INSIDE];</code>
     * @param value The scaleType to set.
     */
    private void setScaleType(org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType value) {
      scaleType_ = value.getNumber();
      bitField0_ |= 0x00080000;
    }
    /**
     * <pre>
     * Scale type for images
     * This may not be supported for images in ChunkedText for all platforms.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 18 [default = CENTER_INSIDE];</code>
     */
    private void clearScaleType() {
      bitField0_ = (bitField0_ & ~0x00080000);
      scaleType_ = 1;
    }

    public static final int GRAVITY_HORIZONTAL_FIELD_NUMBER = 19;
    private int gravityHorizontal_;
    /**
     * <pre>
     * Horizontal gravity of this element's content within the parent container
     * Not respected in GridRow
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.GravityHorizontal gravity_horizontal = 19;</code>
     * @return Whether the gravityHorizontal field is set.
     */
    @java.lang.Override
    public boolean hasGravityHorizontal() {
      return ((bitField0_ & 0x00100000) != 0);
    }
    /**
     * <pre>
     * Horizontal gravity of this element's content within the parent container
     * Not respected in GridRow
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.GravityHorizontal gravity_horizontal = 19;</code>
     * @return The gravityHorizontal.
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityHorizontal getGravityHorizontal() {
      org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityHorizontal result = org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityHorizontal.forNumber(gravityHorizontal_);
      return result == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityHorizontal.GRAVITY_HORIZONTAL_UNSPECIFIED : result;
    }
    /**
     * <pre>
     * Horizontal gravity of this element's content within the parent container
     * Not respected in GridRow
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.GravityHorizontal gravity_horizontal = 19;</code>
     * @param value The gravityHorizontal to set.
     */
    private void setGravityHorizontal(org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityHorizontal value) {
      gravityHorizontal_ = value.getNumber();
      bitField0_ |= 0x00100000;
    }
    /**
     * <pre>
     * Horizontal gravity of this element's content within the parent container
     * Not respected in GridRow
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.GravityHorizontal gravity_horizontal = 19;</code>
     */
    private void clearGravityHorizontal() {
      bitField0_ = (bitField0_ & ~0x00100000);
      gravityHorizontal_ = 0;
    }

    public static final int GRAVITY_VERTICAL_FIELD_NUMBER = 20;
    private int gravityVertical_;
    /**
     * <pre>
     * Vertical gravity of this element's content within the parent container
     * Not respected in ElementList
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.GravityVertical gravity_vertical = 20;</code>
     * @return Whether the gravityVertical field is set.
     */
    @java.lang.Override
    public boolean hasGravityVertical() {
      return ((bitField0_ & 0x00200000) != 0);
    }
    /**
     * <pre>
     * Vertical gravity of this element's content within the parent container
     * Not respected in ElementList
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.GravityVertical gravity_vertical = 20;</code>
     * @return The gravityVertical.
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityVertical getGravityVertical() {
      org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityVertical result = org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityVertical.forNumber(gravityVertical_);
      return result == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityVertical.GRAVITY_VERTICAL_UNSPECIFIED : result;
    }
    /**
     * <pre>
     * Vertical gravity of this element's content within the parent container
     * Not respected in ElementList
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.GravityVertical gravity_vertical = 20;</code>
     * @param value The gravityVertical to set.
     */
    private void setGravityVertical(org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityVertical value) {
      gravityVertical_ = value.getNumber();
      bitField0_ |= 0x00200000;
    }
    /**
     * <pre>
     * Vertical gravity of this element's content within the parent container
     * Not respected in ElementList
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.GravityVertical gravity_vertical = 20;</code>
     */
    private void clearGravityVertical() {
      bitField0_ = (bitField0_ & ~0x00200000);
      gravityVertical_ = 0;
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A collection of attributes describing an element’s visual properties.
     * NextId: 25
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.piet.Style}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.Style)
        org.chromium.components.feed.core.proto.ui.piet.StylesProto.StyleOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      @java.lang.Override
      public WidthSpecCase
          getWidthSpecCase() {
        return instance.getWidthSpecCase();
      }

      public Builder clearWidthSpec() {
        copyOnWrite();
        instance.clearWidthSpec();
        return this;
      }

      @java.lang.Override
      public HeightSpecCase
          getHeightSpecCase() {
        return instance.getHeightSpecCase();
      }

      public Builder clearHeightSpec() {
        copyOnWrite();
        instance.clearHeightSpec();
        return this;
      }


      /**
       * <pre>
       * Every style must have a name that is unique within the StyleSheet. But
       * don’t go overboard in naming these with namespaced constructs because
       * longer strings lead to more bytes on the wire.
       * </pre>
       *
       * <code>optional string style_id = 1;</code>
       * @return Whether the styleId field is set.
       */
      @java.lang.Override
      public boolean hasStyleId() {
        return instance.hasStyleId();
      }
      /**
       * <pre>
       * Every style must have a name that is unique within the StyleSheet. But
       * don’t go overboard in naming these with namespaced constructs because
       * longer strings lead to more bytes on the wire.
       * </pre>
       *
       * <code>optional string style_id = 1;</code>
       * @return The styleId.
       */
      @java.lang.Override
      public java.lang.String getStyleId() {
        return instance.getStyleId();
      }
      /**
       * <pre>
       * Every style must have a name that is unique within the StyleSheet. But
       * don’t go overboard in naming these with namespaced constructs because
       * longer strings lead to more bytes on the wire.
       * </pre>
       *
       * <code>optional string style_id = 1;</code>
       * @return The bytes for styleId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getStyleIdBytes() {
        return instance.getStyleIdBytes();
      }
      /**
       * <pre>
       * Every style must have a name that is unique within the StyleSheet. But
       * don’t go overboard in naming these with namespaced constructs because
       * longer strings lead to more bytes on the wire.
       * </pre>
       *
       * <code>optional string style_id = 1;</code>
       * @param value The styleId to set.
       * @return This builder for chaining.
       */
      public Builder setStyleId(
          java.lang.String value) {
        copyOnWrite();
        instance.setStyleId(value);
        return this;
      }
      /**
       * <pre>
       * Every style must have a name that is unique within the StyleSheet. But
       * don’t go overboard in naming these with namespaced constructs because
       * longer strings lead to more bytes on the wire.
       * </pre>
       *
       * <code>optional string style_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStyleId() {
        copyOnWrite();
        instance.clearStyleId();
        return this;
      }
      /**
       * <pre>
       * Every style must have a name that is unique within the StyleSheet. But
       * don’t go overboard in naming these with namespaced constructs because
       * longer strings lead to more bytes on the wire.
       * </pre>
       *
       * <code>optional string style_id = 1;</code>
       * @param value The bytes for styleId to set.
       * @return This builder for chaining.
       */
      public Builder setStyleIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setStyleIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * This Style is only eligible to be used if *all* the conditions
       * enumerated below are met. Multiple styles can have the same style id if
       * their conditions are disjoint.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
       */
      @java.lang.Override
      public java.util.List<org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition> getConditionsList() {
        return java.util.Collections.unmodifiableList(
            instance.getConditionsList());
      }
      /**
       * <pre>
       * This Style is only eligible to be used if *all* the conditions
       * enumerated below are met. Multiple styles can have the same style id if
       * their conditions are disjoint.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
       */
      @java.lang.Override
      public int getConditionsCount() {
        return instance.getConditionsCount();
      }/**
       * <pre>
       * This Style is only eligible to be used if *all* the conditions
       * enumerated below are met. Multiple styles can have the same style id if
       * their conditions are disjoint.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition getConditions(int index) {
        return instance.getConditions(index);
      }
      /**
       * <pre>
       * This Style is only eligible to be used if *all* the conditions
       * enumerated below are met. Multiple styles can have the same style id if
       * their conditions are disjoint.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
       */
      public Builder setConditions(
          int index, org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition value) {
        copyOnWrite();
        instance.setConditions(index, value);
        return this;
      }
      /**
       * <pre>
       * This Style is only eligible to be used if *all* the conditions
       * enumerated below are met. Multiple styles can have the same style id if
       * their conditions are disjoint.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
       */
      public Builder setConditions(
          int index, org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition.Builder builderForValue) {
        copyOnWrite();
        instance.setConditions(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * This Style is only eligible to be used if *all* the conditions
       * enumerated below are met. Multiple styles can have the same style id if
       * their conditions are disjoint.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
       */
      public Builder addConditions(org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition value) {
        copyOnWrite();
        instance.addConditions(value);
        return this;
      }
      /**
       * <pre>
       * This Style is only eligible to be used if *all* the conditions
       * enumerated below are met. Multiple styles can have the same style id if
       * their conditions are disjoint.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
       */
      public Builder addConditions(
          int index, org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition value) {
        copyOnWrite();
        instance.addConditions(index, value);
        return this;
      }
      /**
       * <pre>
       * This Style is only eligible to be used if *all* the conditions
       * enumerated below are met. Multiple styles can have the same style id if
       * their conditions are disjoint.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
       */
      public Builder addConditions(
          org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition.Builder builderForValue) {
        copyOnWrite();
        instance.addConditions(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * This Style is only eligible to be used if *all* the conditions
       * enumerated below are met. Multiple styles can have the same style id if
       * their conditions are disjoint.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
       */
      public Builder addConditions(
          int index, org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition.Builder builderForValue) {
        copyOnWrite();
        instance.addConditions(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * This Style is only eligible to be used if *all* the conditions
       * enumerated below are met. Multiple styles can have the same style id if
       * their conditions are disjoint.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
       */
      public Builder addAllConditions(
          java.lang.Iterable<? extends org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition> values) {
        copyOnWrite();
        instance.addAllConditions(values);
        return this;
      }
      /**
       * <pre>
       * This Style is only eligible to be used if *all* the conditions
       * enumerated below are met. Multiple styles can have the same style id if
       * their conditions are disjoint.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
       */
      public Builder clearConditions() {
        copyOnWrite();
        instance.clearConditions();
        return this;
      }
      /**
       * <pre>
       * This Style is only eligible to be used if *all* the conditions
       * enumerated below are met. Multiple styles can have the same style id if
       * their conditions are disjoint.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.MediaQueryCondition conditions = 16;</code>
       */
      public Builder removeConditions(int index) {
        copyOnWrite();
        instance.removeConditions(index);
        return this;
      }

      /**
       * <pre>
       * When applied to an image, this will replace all non-transparent pixels with
       * the specified color. This is used for changing the color of icons which are
       * provided as a monochrome bitmap. If this optional field is not provided,
       * the image will not be modified.
       * </pre>
       *
       * <code>optional fixed32 color = 2 [default = 3724541952];</code>
       * @return Whether the color field is set.
       */
      @java.lang.Override
      public boolean hasColor() {
        return instance.hasColor();
      }
      /**
       * <pre>
       * When applied to an image, this will replace all non-transparent pixels with
       * the specified color. This is used for changing the color of icons which are
       * provided as a monochrome bitmap. If this optional field is not provided,
       * the image will not be modified.
       * </pre>
       *
       * <code>optional fixed32 color = 2 [default = 3724541952];</code>
       * @return The color.
       */
      @java.lang.Override
      public int getColor() {
        return instance.getColor();
      }
      /**
       * <pre>
       * When applied to an image, this will replace all non-transparent pixels with
       * the specified color. This is used for changing the color of icons which are
       * provided as a monochrome bitmap. If this optional field is not provided,
       * the image will not be modified.
       * </pre>
       *
       * <code>optional fixed32 color = 2 [default = 3724541952];</code>
       * @param value The color to set.
       * @return This builder for chaining.
       */
      public Builder setColor(int value) {
        copyOnWrite();
        instance.setColor(value);
        return this;
      }
      /**
       * <pre>
       * When applied to an image, this will replace all non-transparent pixels with
       * the specified color. This is used for changing the color of icons which are
       * provided as a monochrome bitmap. If this optional field is not provided,
       * the image will not be modified.
       * </pre>
       *
       * <code>optional fixed32 color = 2 [default = 3724541952];</code>
       * @return This builder for chaining.
       */
      public Builder clearColor() {
        copyOnWrite();
        instance.clearColor();
        return this;
      }

      /**
       * <pre>
       * Defines the background fill, either as a solid color, or a gradient.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Fill background = 3;</code>
       */
      @java.lang.Override
      public boolean hasBackground() {
        return instance.hasBackground();
      }
      /**
       * <pre>
       * Defines the background fill, either as a solid color, or a gradient.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Fill background = 3;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill getBackground() {
        return instance.getBackground();
      }
      /**
       * <pre>
       * Defines the background fill, either as a solid color, or a gradient.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Fill background = 3;</code>
       */
      public Builder setBackground(org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill value) {
        copyOnWrite();
        instance.setBackground(value);
        return this;
        }
      /**
       * <pre>
       * Defines the background fill, either as a solid color, or a gradient.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Fill background = 3;</code>
       */
      public Builder setBackground(
          org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill.Builder builderForValue) {
        copyOnWrite();
        instance.setBackground(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Defines the background fill, either as a solid color, or a gradient.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Fill background = 3;</code>
       */
      public Builder mergeBackground(org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill value) {
        copyOnWrite();
        instance.mergeBackground(value);
        return this;
      }
      /**
       * <pre>
       * Defines the background fill, either as a solid color, or a gradient.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Fill background = 3;</code>
       */
      public Builder clearBackground() {  copyOnWrite();
        instance.clearBackground();
        return this;
      }

      /**
       * <pre>
       * Configuration for image loading behavior (such as fading in)
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 17;</code>
       */
      @java.lang.Override
      public boolean hasImageLoadingSettings() {
        return instance.hasImageLoadingSettings();
      }
      /**
       * <pre>
       * Configuration for image loading behavior (such as fading in)
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 17;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings getImageLoadingSettings() {
        return instance.getImageLoadingSettings();
      }
      /**
       * <pre>
       * Configuration for image loading behavior (such as fading in)
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 17;</code>
       */
      public Builder setImageLoadingSettings(org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings value) {
        copyOnWrite();
        instance.setImageLoadingSettings(value);
        return this;
        }
      /**
       * <pre>
       * Configuration for image loading behavior (such as fading in)
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 17;</code>
       */
      public Builder setImageLoadingSettings(
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings.Builder builderForValue) {
        copyOnWrite();
        instance.setImageLoadingSettings(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Configuration for image loading behavior (such as fading in)
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 17;</code>
       */
      public Builder mergeImageLoadingSettings(org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings value) {
        copyOnWrite();
        instance.mergeImageLoadingSettings(value);
        return this;
      }
      /**
       * <pre>
       * Configuration for image loading behavior (such as fading in)
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 17;</code>
       */
      public Builder clearImageLoadingSettings() {  copyOnWrite();
        instance.clearImageLoadingSettings();
        return this;
      }

      /**
       * <pre>
       * Font information applicable to text elements.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Font font = 4;</code>
       */
      @java.lang.Override
      public boolean hasFont() {
        return instance.hasFont();
      }
      /**
       * <pre>
       * Font information applicable to text elements.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Font font = 4;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font getFont() {
        return instance.getFont();
      }
      /**
       * <pre>
       * Font information applicable to text elements.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Font font = 4;</code>
       */
      public Builder setFont(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font value) {
        copyOnWrite();
        instance.setFont(value);
        return this;
        }
      /**
       * <pre>
       * Font information applicable to text elements.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Font font = 4;</code>
       */
      public Builder setFont(
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font.Builder builderForValue) {
        copyOnWrite();
        instance.setFont(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Font information applicable to text elements.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Font font = 4;</code>
       */
      public Builder mergeFont(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font value) {
        copyOnWrite();
        instance.mergeFont(value);
        return this;
      }
      /**
       * <pre>
       * Font information applicable to text elements.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Font font = 4;</code>
       */
      public Builder clearFont() {  copyOnWrite();
        instance.clearFont();
        return this;
      }

      /**
       * <pre>
       * Text alignment
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentHorizontal text_alignment_horizontal = 21 [default = TEXT_ALIGNMENT_START];</code>
       * @return Whether the textAlignmentHorizontal field is set.
       */
      @java.lang.Override
      public boolean hasTextAlignmentHorizontal() {
        return instance.hasTextAlignmentHorizontal();
      }
      /**
       * <pre>
       * Text alignment
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentHorizontal text_alignment_horizontal = 21 [default = TEXT_ALIGNMENT_START];</code>
       * @return The textAlignmentHorizontal.
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentHorizontal getTextAlignmentHorizontal() {
        return instance.getTextAlignmentHorizontal();
      }
      /**
       * <pre>
       * Text alignment
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentHorizontal text_alignment_horizontal = 21 [default = TEXT_ALIGNMENT_START];</code>
       * @param value The enum numeric value on the wire for textAlignmentHorizontal to set.
       * @return This builder for chaining.
       */
      public Builder setTextAlignmentHorizontal(org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentHorizontal value) {
        copyOnWrite();
        instance.setTextAlignmentHorizontal(value);
        return this;
      }
      /**
       * <pre>
       * Text alignment
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentHorizontal text_alignment_horizontal = 21 [default = TEXT_ALIGNMENT_START];</code>
       * @return This builder for chaining.
       */
      public Builder clearTextAlignmentHorizontal() {
        copyOnWrite();
        instance.clearTextAlignmentHorizontal();
        return this;
      }

      /**
       * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentVertical text_alignment_vertical = 22 [default = TEXT_ALIGNMENT_TOP];</code>
       * @return Whether the textAlignmentVertical field is set.
       */
      @java.lang.Override
      public boolean hasTextAlignmentVertical() {
        return instance.hasTextAlignmentVertical();
      }
      /**
       * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentVertical text_alignment_vertical = 22 [default = TEXT_ALIGNMENT_TOP];</code>
       * @return The textAlignmentVertical.
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentVertical getTextAlignmentVertical() {
        return instance.getTextAlignmentVertical();
      }
      /**
       * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentVertical text_alignment_vertical = 22 [default = TEXT_ALIGNMENT_TOP];</code>
       * @param value The enum numeric value on the wire for textAlignmentVertical to set.
       * @return This builder for chaining.
       */
      public Builder setTextAlignmentVertical(org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentVertical value) {
        copyOnWrite();
        instance.setTextAlignmentVertical(value);
        return this;
      }
      /**
       * <code>optional .components.feed.core.proto.ui.piet.TextAlignmentVertical text_alignment_vertical = 22 [default = TEXT_ALIGNMENT_TOP];</code>
       * @return This builder for chaining.
       */
      public Builder clearTextAlignmentVertical() {
        copyOnWrite();
        instance.clearTextAlignmentVertical();
        return this;
      }

      /**
       * <pre>
       * Margins around the item
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths margins = 5;</code>
       */
      @java.lang.Override
      public boolean hasMargins() {
        return instance.hasMargins();
      }
      /**
       * <pre>
       * Margins around the item
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths margins = 5;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths getMargins() {
        return instance.getMargins();
      }
      /**
       * <pre>
       * Margins around the item
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths margins = 5;</code>
       */
      public Builder setMargins(org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths value) {
        copyOnWrite();
        instance.setMargins(value);
        return this;
        }
      /**
       * <pre>
       * Margins around the item
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths margins = 5;</code>
       */
      public Builder setMargins(
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths.Builder builderForValue) {
        copyOnWrite();
        instance.setMargins(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Margins around the item
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths margins = 5;</code>
       */
      public Builder mergeMargins(org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths value) {
        copyOnWrite();
        instance.mergeMargins(value);
        return this;
      }
      /**
       * <pre>
       * Margins around the item
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths margins = 5;</code>
       */
      public Builder clearMargins() {  copyOnWrite();
        instance.clearMargins();
        return this;
      }

      /**
       * <pre>
       * Borders
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Borders borders = 6;</code>
       */
      @java.lang.Override
      public boolean hasBorders() {
        return instance.hasBorders();
      }
      /**
       * <pre>
       * Borders
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Borders borders = 6;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders getBorders() {
        return instance.getBorders();
      }
      /**
       * <pre>
       * Borders
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Borders borders = 6;</code>
       */
      public Builder setBorders(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders value) {
        copyOnWrite();
        instance.setBorders(value);
        return this;
        }
      /**
       * <pre>
       * Borders
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Borders borders = 6;</code>
       */
      public Builder setBorders(
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders.Builder builderForValue) {
        copyOnWrite();
        instance.setBorders(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Borders
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Borders borders = 6;</code>
       */
      public Builder mergeBorders(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders value) {
        copyOnWrite();
        instance.mergeBorders(value);
        return this;
      }
      /**
       * <pre>
       * Borders
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Borders borders = 6;</code>
       */
      public Builder clearBorders() {  copyOnWrite();
        instance.clearBorders();
        return this;
      }

      /**
       * <pre>
       * Padding around the item
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths padding = 7;</code>
       */
      @java.lang.Override
      public boolean hasPadding() {
        return instance.hasPadding();
      }
      /**
       * <pre>
       * Padding around the item
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths padding = 7;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths getPadding() {
        return instance.getPadding();
      }
      /**
       * <pre>
       * Padding around the item
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths padding = 7;</code>
       */
      public Builder setPadding(org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths value) {
        copyOnWrite();
        instance.setPadding(value);
        return this;
        }
      /**
       * <pre>
       * Padding around the item
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths padding = 7;</code>
       */
      public Builder setPadding(
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths.Builder builderForValue) {
        copyOnWrite();
        instance.setPadding(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Padding around the item
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths padding = 7;</code>
       */
      public Builder mergePadding(org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths value) {
        copyOnWrite();
        instance.mergePadding(value);
        return this;
      }
      /**
       * <pre>
       * Padding around the item
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.EdgeWidths padding = 7;</code>
       */
      public Builder clearPadding() {  copyOnWrite();
        instance.clearPadding();
        return this;
      }

      /**
       * <pre>
       * Width of an element.
       * </pre>
       *
       * <code>uint32 width = 8;</code>
       * @return Whether the width field is set.
       */
      @java.lang.Override
      public boolean hasWidth() {
        return instance.hasWidth();
      }
      /**
       * <pre>
       * Width of an element.
       * </pre>
       *
       * <code>uint32 width = 8;</code>
       * @return The width.
       */
      @java.lang.Override
      public int getWidth() {
        return instance.getWidth();
      }
      /**
       * <pre>
       * Width of an element.
       * </pre>
       *
       * <code>uint32 width = 8;</code>
       * @param value The width to set.
       * @return This builder for chaining.
       */
      public Builder setWidth(int value) {
        copyOnWrite();
        instance.setWidth(value);
        return this;
      }
      /**
       * <pre>
       * Width of an element.
       * </pre>
       *
       * <code>uint32 width = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearWidth() {
        copyOnWrite();
        instance.clearWidth();
        return this;
      }

      /**
       * <pre>
       * Width relative to content or parent Element
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_width = 23;</code>
       * @return Whether the relativeWidth field is set.
       */
      @java.lang.Override
      public boolean hasRelativeWidth() {
        return instance.hasRelativeWidth();
      }
      /**
       * <pre>
       * Width relative to content or parent Element
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_width = 23;</code>
       * @return The relativeWidth.
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize getRelativeWidth() {
        return instance.getRelativeWidth();
      }
      /**
       * <pre>
       * Width relative to content or parent Element
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_width = 23;</code>
       * @param value The relativeWidth to set.
       * @return This builder for chaining.
       */
      public Builder setRelativeWidth(org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize value) {
        copyOnWrite();
        instance.setRelativeWidth(value);
        return this;
      }
      /**
       * <pre>
       * Width relative to content or parent Element
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_width = 23;</code>
       * @return This builder for chaining.
       */
      public Builder clearRelativeWidth() {
        copyOnWrite();
        instance.clearRelativeWidth();
        return this;
      }

      /**
       * <pre>
       * Constant height in DP
       * </pre>
       *
       * <code>uint32 height = 9;</code>
       * @return Whether the height field is set.
       */
      @java.lang.Override
      public boolean hasHeight() {
        return instance.hasHeight();
      }
      /**
       * <pre>
       * Constant height in DP
       * </pre>
       *
       * <code>uint32 height = 9;</code>
       * @return The height.
       */
      @java.lang.Override
      public int getHeight() {
        return instance.getHeight();
      }
      /**
       * <pre>
       * Constant height in DP
       * </pre>
       *
       * <code>uint32 height = 9;</code>
       * @param value The height to set.
       * @return This builder for chaining.
       */
      public Builder setHeight(int value) {
        copyOnWrite();
        instance.setHeight(value);
        return this;
      }
      /**
       * <pre>
       * Constant height in DP
       * </pre>
       *
       * <code>uint32 height = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeight() {
        copyOnWrite();
        instance.clearHeight();
        return this;
      }

      /**
       * <pre>
       * Height relative to content or parent Element
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_height = 24;</code>
       * @return Whether the relativeHeight field is set.
       */
      @java.lang.Override
      public boolean hasRelativeHeight() {
        return instance.hasRelativeHeight();
      }
      /**
       * <pre>
       * Height relative to content or parent Element
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_height = 24;</code>
       * @return The relativeHeight.
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize getRelativeHeight() {
        return instance.getRelativeHeight();
      }
      /**
       * <pre>
       * Height relative to content or parent Element
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_height = 24;</code>
       * @param value The relativeHeight to set.
       * @return This builder for chaining.
       */
      public Builder setRelativeHeight(org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize value) {
        copyOnWrite();
        instance.setRelativeHeight(value);
        return this;
      }
      /**
       * <pre>
       * Height relative to content or parent Element
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.RelativeSize relative_height = 24;</code>
       * @return This builder for chaining.
       */
      public Builder clearRelativeHeight() {
        copyOnWrite();
        instance.clearRelativeHeight();
        return this;
      }

      /**
       * <pre>
       * Minimum height for an element.
       * </pre>
       *
       * <code>optional uint32 min_height = 10;</code>
       * @return Whether the minHeight field is set.
       */
      @java.lang.Override
      public boolean hasMinHeight() {
        return instance.hasMinHeight();
      }
      /**
       * <pre>
       * Minimum height for an element.
       * </pre>
       *
       * <code>optional uint32 min_height = 10;</code>
       * @return The minHeight.
       */
      @java.lang.Override
      public int getMinHeight() {
        return instance.getMinHeight();
      }
      /**
       * <pre>
       * Minimum height for an element.
       * </pre>
       *
       * <code>optional uint32 min_height = 10;</code>
       * @param value The minHeight to set.
       * @return This builder for chaining.
       */
      public Builder setMinHeight(int value) {
        copyOnWrite();
        instance.setMinHeight(value);
        return this;
      }
      /**
       * <pre>
       * Minimum height for an element.
       * </pre>
       *
       * <code>optional uint32 min_height = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearMinHeight() {
        copyOnWrite();
        instance.clearMinHeight();
        return this;
      }

      /**
       * <pre>
       * Maximum number of text lines to display
       * </pre>
       *
       * <code>optional uint32 max_lines = 11;</code>
       * @return Whether the maxLines field is set.
       */
      @java.lang.Override
      public boolean hasMaxLines() {
        return instance.hasMaxLines();
      }
      /**
       * <pre>
       * Maximum number of text lines to display
       * </pre>
       *
       * <code>optional uint32 max_lines = 11;</code>
       * @return The maxLines.
       */
      @java.lang.Override
      public int getMaxLines() {
        return instance.getMaxLines();
      }
      /**
       * <pre>
       * Maximum number of text lines to display
       * </pre>
       *
       * <code>optional uint32 max_lines = 11;</code>
       * @param value The maxLines to set.
       * @return This builder for chaining.
       */
      public Builder setMaxLines(int value) {
        copyOnWrite();
        instance.setMaxLines(value);
        return this;
      }
      /**
       * <pre>
       * Maximum number of text lines to display
       * </pre>
       *
       * <code>optional uint32 max_lines = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxLines() {
        copyOnWrite();
        instance.clearMaxLines();
        return this;
      }

      /**
       * <pre>
       * If there is a background fill, allow the background (including borders) to
       * have rounded corners.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.RoundedCorners rounded_corners = 12;</code>
       */
      @java.lang.Override
      public boolean hasRoundedCorners() {
        return instance.hasRoundedCorners();
      }
      /**
       * <pre>
       * If there is a background fill, allow the background (including borders) to
       * have rounded corners.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.RoundedCorners rounded_corners = 12;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners getRoundedCorners() {
        return instance.getRoundedCorners();
      }
      /**
       * <pre>
       * If there is a background fill, allow the background (including borders) to
       * have rounded corners.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.RoundedCorners rounded_corners = 12;</code>
       */
      public Builder setRoundedCorners(org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners value) {
        copyOnWrite();
        instance.setRoundedCorners(value);
        return this;
        }
      /**
       * <pre>
       * If there is a background fill, allow the background (including borders) to
       * have rounded corners.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.RoundedCorners rounded_corners = 12;</code>
       */
      public Builder setRoundedCorners(
          org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners.Builder builderForValue) {
        copyOnWrite();
        instance.setRoundedCorners(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * If there is a background fill, allow the background (including borders) to
       * have rounded corners.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.RoundedCorners rounded_corners = 12;</code>
       */
      public Builder mergeRoundedCorners(org.chromium.components.feed.core.proto.ui.piet.RoundedCornersProto.RoundedCorners value) {
        copyOnWrite();
        instance.mergeRoundedCorners(value);
        return this;
      }
      /**
       * <pre>
       * If there is a background fill, allow the background (including borders) to
       * have rounded corners.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.RoundedCorners rounded_corners = 12;</code>
       */
      public Builder clearRoundedCorners() {  copyOnWrite();
        instance.clearRoundedCorners();
        return this;
      }

      /**
       * <pre>
       * Opacity. This affects the element with the current style, and also all its
       * descendants. For example, Opacity of a GridRow will affect all the
       * GridCells under it, and their descendants. This value comes on top of the
       * alpha value of colors.
       * Values between [0..1] are valid; those outside this range will be clamped.
       * </pre>
       *
       * <code>optional float opacity = 13 [default = 1];</code>
       * @return Whether the opacity field is set.
       */
      @java.lang.Override
      public boolean hasOpacity() {
        return instance.hasOpacity();
      }
      /**
       * <pre>
       * Opacity. This affects the element with the current style, and also all its
       * descendants. For example, Opacity of a GridRow will affect all the
       * GridCells under it, and their descendants. This value comes on top of the
       * alpha value of colors.
       * Values between [0..1] are valid; those outside this range will be clamped.
       * </pre>
       *
       * <code>optional float opacity = 13 [default = 1];</code>
       * @return The opacity.
       */
      @java.lang.Override
      public float getOpacity() {
        return instance.getOpacity();
      }
      /**
       * <pre>
       * Opacity. This affects the element with the current style, and also all its
       * descendants. For example, Opacity of a GridRow will affect all the
       * GridCells under it, and their descendants. This value comes on top of the
       * alpha value of colors.
       * Values between [0..1] are valid; those outside this range will be clamped.
       * </pre>
       *
       * <code>optional float opacity = 13 [default = 1];</code>
       * @param value The opacity to set.
       * @return This builder for chaining.
       */
      public Builder setOpacity(float value) {
        copyOnWrite();
        instance.setOpacity(value);
        return this;
      }
      /**
       * <pre>
       * Opacity. This affects the element with the current style, and also all its
       * descendants. For example, Opacity of a GridRow will affect all the
       * GridCells under it, and their descendants. This value comes on top of the
       * alpha value of colors.
       * Values between [0..1] are valid; those outside this range will be clamped.
       * </pre>
       *
       * <code>optional float opacity = 13 [default = 1];</code>
       * @return This builder for chaining.
       */
      public Builder clearOpacity() {
        copyOnWrite();
        instance.clearOpacity();
        return this;
      }

      /**
       * <pre>
       * Defines a shadow for an element.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Shadow shadow = 14;</code>
       */
      @java.lang.Override
      public boolean hasShadow() {
        return instance.hasShadow();
      }
      /**
       * <pre>
       * Defines a shadow for an element.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Shadow shadow = 14;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow getShadow() {
        return instance.getShadow();
      }
      /**
       * <pre>
       * Defines a shadow for an element.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Shadow shadow = 14;</code>
       */
      public Builder setShadow(org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow value) {
        copyOnWrite();
        instance.setShadow(value);
        return this;
        }
      /**
       * <pre>
       * Defines a shadow for an element.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Shadow shadow = 14;</code>
       */
      public Builder setShadow(
          org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow.Builder builderForValue) {
        copyOnWrite();
        instance.setShadow(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Defines a shadow for an element.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Shadow shadow = 14;</code>
       */
      public Builder mergeShadow(org.chromium.components.feed.core.proto.ui.piet.ShadowsProto.Shadow value) {
        copyOnWrite();
        instance.mergeShadow(value);
        return this;
      }
      /**
       * <pre>
       * Defines a shadow for an element.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Shadow shadow = 14;</code>
       */
      public Builder clearShadow() {  copyOnWrite();
        instance.clearShadow();
        return this;
      }

      /**
       * <pre>
       * Scale type for images
       * This may not be supported for images in ChunkedText for all platforms.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 18 [default = CENTER_INSIDE];</code>
       * @return Whether the scaleType field is set.
       */
      @java.lang.Override
      public boolean hasScaleType() {
        return instance.hasScaleType();
      }
      /**
       * <pre>
       * Scale type for images
       * This may not be supported for images in ChunkedText for all platforms.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 18 [default = CENTER_INSIDE];</code>
       * @return The scaleType.
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType getScaleType() {
        return instance.getScaleType();
      }
      /**
       * <pre>
       * Scale type for images
       * This may not be supported for images in ChunkedText for all platforms.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 18 [default = CENTER_INSIDE];</code>
       * @param value The enum numeric value on the wire for scaleType to set.
       * @return This builder for chaining.
       */
      public Builder setScaleType(org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType value) {
        copyOnWrite();
        instance.setScaleType(value);
        return this;
      }
      /**
       * <pre>
       * Scale type for images
       * This may not be supported for images in ChunkedText for all platforms.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 18 [default = CENTER_INSIDE];</code>
       * @return This builder for chaining.
       */
      public Builder clearScaleType() {
        copyOnWrite();
        instance.clearScaleType();
        return this;
      }

      /**
       * <pre>
       * Horizontal gravity of this element's content within the parent container
       * Not respected in GridRow
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.GravityHorizontal gravity_horizontal = 19;</code>
       * @return Whether the gravityHorizontal field is set.
       */
      @java.lang.Override
      public boolean hasGravityHorizontal() {
        return instance.hasGravityHorizontal();
      }
      /**
       * <pre>
       * Horizontal gravity of this element's content within the parent container
       * Not respected in GridRow
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.GravityHorizontal gravity_horizontal = 19;</code>
       * @return The gravityHorizontal.
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityHorizontal getGravityHorizontal() {
        return instance.getGravityHorizontal();
      }
      /**
       * <pre>
       * Horizontal gravity of this element's content within the parent container
       * Not respected in GridRow
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.GravityHorizontal gravity_horizontal = 19;</code>
       * @param value The enum numeric value on the wire for gravityHorizontal to set.
       * @return This builder for chaining.
       */
      public Builder setGravityHorizontal(org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityHorizontal value) {
        copyOnWrite();
        instance.setGravityHorizontal(value);
        return this;
      }
      /**
       * <pre>
       * Horizontal gravity of this element's content within the parent container
       * Not respected in GridRow
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.GravityHorizontal gravity_horizontal = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearGravityHorizontal() {
        copyOnWrite();
        instance.clearGravityHorizontal();
        return this;
      }

      /**
       * <pre>
       * Vertical gravity of this element's content within the parent container
       * Not respected in ElementList
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.GravityVertical gravity_vertical = 20;</code>
       * @return Whether the gravityVertical field is set.
       */
      @java.lang.Override
      public boolean hasGravityVertical() {
        return instance.hasGravityVertical();
      }
      /**
       * <pre>
       * Vertical gravity of this element's content within the parent container
       * Not respected in ElementList
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.GravityVertical gravity_vertical = 20;</code>
       * @return The gravityVertical.
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityVertical getGravityVertical() {
        return instance.getGravityVertical();
      }
      /**
       * <pre>
       * Vertical gravity of this element's content within the parent container
       * Not respected in ElementList
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.GravityVertical gravity_vertical = 20;</code>
       * @param value The enum numeric value on the wire for gravityVertical to set.
       * @return This builder for chaining.
       */
      public Builder setGravityVertical(org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityVertical value) {
        copyOnWrite();
        instance.setGravityVertical(value);
        return this;
      }
      /**
       * <pre>
       * Vertical gravity of this element's content within the parent container
       * Not respected in ElementList
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.GravityVertical gravity_vertical = 20;</code>
       * @return This builder for chaining.
       */
      public Builder clearGravityVertical() {
        copyOnWrite();
        instance.clearGravityVertical();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.Style)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "widthSpec_",
              "widthSpecCase_",
              "heightSpec_",
              "heightSpecCase_",
              "bitField0_",
              "styleId_",
              "color_",
              "background_",
              "font_",
              "margins_",
              "borders_",
              "padding_",
              "minHeight_",
              "maxLines_",
              "roundedCorners_",
              "opacity_",
              "shadow_",
              "conditions_",
              org.chromium.components.feed.core.proto.ui.piet.MediaQueriesProto.MediaQueryCondition.class,
              "imageLoadingSettings_",
              "scaleType_",
              org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType.internalGetVerifier(),
              "gravityHorizontal_",
              org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityHorizontal.internalGetVerifier(),
              "gravityVertical_",
              org.chromium.components.feed.core.proto.ui.piet.StylesProto.GravityVertical.internalGetVerifier(),
              "textAlignmentHorizontal_",
              org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentHorizontal.internalGetVerifier(),
              "textAlignmentVertical_",
              org.chromium.components.feed.core.proto.ui.piet.StylesProto.TextAlignmentVertical.internalGetVerifier(),
              org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize.internalGetVerifier(),
              org.chromium.components.feed.core.proto.ui.piet.StylesProto.RelativeSize.internalGetVerifier(),
            };
            java.lang.String info =
                "\u0001\u0017\u0002\u0001\u0001\u0018\u0017\u0000\u0001\u0003\u0001\u1008\u0000\u0002" +
                "\u1006\u0001\u0003\u1009\u0002\u0004\u1009\u0004\u0005\u1009\u0007\u0006\u1409\b" +
                "\u0007\u1009\t\b\u103e\u0000\t\u103e\u0001\n\u100b\u000e\u000b\u100b\u000f\f\u1409" +
                "\u0010\r\u1001\u0011\u000e\u1009\u0012\u0010\u001b\u0011\u1409\u0003\u0012\u100c" +
                "\u0013\u0013\u100c\u0014\u0014\u100c\u0015\u0015\u100c\u0005\u0016\u100c\u0006\u0017" +
                "\u103f\u0000\u0018\u103f\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.Style)
    private static final org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style DEFAULT_INSTANCE;
    static {
      Style defaultInstance = new Style();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Style.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Style getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Style> PARSER;

    public static com.google.protobuf.Parser<Style> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ImageLoadingSettingsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.ImageLoadingSettings)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * If this is set, images will fade in after loading asynchronously.
     * May not be supported on all platforms.
     * </pre>
     *
     * <code>optional bool fade_in_image_on_load = 1;</code>
     * @return Whether the fadeInImageOnLoad field is set.
     */
    boolean hasFadeInImageOnLoad();
    /**
     * <pre>
     * If this is set, images will fade in after loading asynchronously.
     * May not be supported on all platforms.
     * </pre>
     *
     * <code>optional bool fade_in_image_on_load = 1;</code>
     * @return The fadeInImageOnLoad.
     */
    boolean getFadeInImageOnLoad();

    /**
     * <pre>
     * Defines a placeholder fill applied before an image loads.
     * This will be replaced by the Image when it loads asynchronously.
     * Not relevant for platforms where image loading is synchronous.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Fill pre_load_fill = 2;</code>
     * @return Whether the preLoadFill field is set.
     */
    boolean hasPreLoadFill();
    /**
     * <pre>
     * Defines a placeholder fill applied before an image loads.
     * This will be replaced by the Image when it loads asynchronously.
     * Not relevant for platforms where image loading is synchronous.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Fill pre_load_fill = 2;</code>
     * @return The preLoadFill.
     */
    org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill getPreLoadFill();

    /**
     * <pre>
     * Defines a placeholder image applied before an image loads.
     * This will be replaced by the Image when it loads asynchronously.
     * This should be an on-device asset; it doesn't make sense to have the pre-
     * load image also load asynchronously.
     * Not relevant for platforms where image loading is synchronous.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Image pre_load_image = 3;</code>
     * @return Whether the preLoadImage field is set.
     */
    boolean hasPreLoadImage();
    /**
     * <pre>
     * Defines a placeholder image applied before an image loads.
     * This will be replaced by the Image when it loads asynchronously.
     * This should be an on-device asset; it doesn't make sense to have the pre-
     * load image also load asynchronously.
     * Not relevant for platforms where image loading is synchronous.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Image pre_load_image = 3;</code>
     * @return The preLoadImage.
     */
    org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image getPreLoadImage();

    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings.PreloadCase getPreloadCase();
  }
  /**
   * <pre>
   * Various configuration parameters for image loading
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.piet.ImageLoadingSettings}
   */
  public  static final class ImageLoadingSettings extends
      com.google.protobuf.GeneratedMessageLite<
          ImageLoadingSettings, ImageLoadingSettings.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.ImageLoadingSettings)
      ImageLoadingSettingsOrBuilder {
    private ImageLoadingSettings() {
    }
    private int bitField0_;
    private int preloadCase_ = 0;
    private java.lang.Object preload_;
    public enum PreloadCase {
      PRE_LOAD_FILL(2),
      PRE_LOAD_IMAGE(3),
      PRELOAD_NOT_SET(0);
      private final int value;
      private PreloadCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static PreloadCase valueOf(int value) {
        return forNumber(value);
      }

      public static PreloadCase forNumber(int value) {
        switch (value) {
          case 2: return PRE_LOAD_FILL;
          case 3: return PRE_LOAD_IMAGE;
          case 0: return PRELOAD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @java.lang.Override
    public PreloadCase
    getPreloadCase() {
      return PreloadCase.forNumber(
          preloadCase_);
    }

    private void clearPreload() {
      preloadCase_ = 0;
      preload_ = null;
    }

    public static final int FADE_IN_IMAGE_ON_LOAD_FIELD_NUMBER = 1;
    private boolean fadeInImageOnLoad_;
    /**
     * <pre>
     * If this is set, images will fade in after loading asynchronously.
     * May not be supported on all platforms.
     * </pre>
     *
     * <code>optional bool fade_in_image_on_load = 1;</code>
     * @return Whether the fadeInImageOnLoad field is set.
     */
    @java.lang.Override
    public boolean hasFadeInImageOnLoad() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * If this is set, images will fade in after loading asynchronously.
     * May not be supported on all platforms.
     * </pre>
     *
     * <code>optional bool fade_in_image_on_load = 1;</code>
     * @return The fadeInImageOnLoad.
     */
    @java.lang.Override
    public boolean getFadeInImageOnLoad() {
      return fadeInImageOnLoad_;
    }
    /**
     * <pre>
     * If this is set, images will fade in after loading asynchronously.
     * May not be supported on all platforms.
     * </pre>
     *
     * <code>optional bool fade_in_image_on_load = 1;</code>
     * @param value The fadeInImageOnLoad to set.
     */
    private void setFadeInImageOnLoad(boolean value) {
      bitField0_ |= 0x00000001;
      fadeInImageOnLoad_ = value;
    }
    /**
     * <pre>
     * If this is set, images will fade in after loading asynchronously.
     * May not be supported on all platforms.
     * </pre>
     *
     * <code>optional bool fade_in_image_on_load = 1;</code>
     */
    private void clearFadeInImageOnLoad() {
      bitField0_ = (bitField0_ & ~0x00000001);
      fadeInImageOnLoad_ = false;
    }

    public static final int PRE_LOAD_FILL_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Defines a placeholder fill applied before an image loads.
     * This will be replaced by the Image when it loads asynchronously.
     * Not relevant for platforms where image loading is synchronous.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Fill pre_load_fill = 2;</code>
     */
    @java.lang.Override
    public boolean hasPreLoadFill() {
      return preloadCase_ == 2;
    }
    /**
     * <pre>
     * Defines a placeholder fill applied before an image loads.
     * This will be replaced by the Image when it loads asynchronously.
     * Not relevant for platforms where image loading is synchronous.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Fill pre_load_fill = 2;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill getPreLoadFill() {
      if (preloadCase_ == 2) {
         return (org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill) preload_;
      }
      return org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill.getDefaultInstance();
    }
    /**
     * <pre>
     * Defines a placeholder fill applied before an image loads.
     * This will be replaced by the Image when it loads asynchronously.
     * Not relevant for platforms where image loading is synchronous.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Fill pre_load_fill = 2;</code>
     */
    private void setPreLoadFill(org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill value) {
      value.getClass();
  preload_ = value;
      preloadCase_ = 2;
    }
    /**
     * <pre>
     * Defines a placeholder fill applied before an image loads.
     * This will be replaced by the Image when it loads asynchronously.
     * Not relevant for platforms where image loading is synchronous.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Fill pre_load_fill = 2;</code>
     */
    private void mergePreLoadFill(org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill value) {
      value.getClass();
  if (preloadCase_ == 2 &&
          preload_ != org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill.getDefaultInstance()) {
        preload_ = org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill.newBuilder((org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill) preload_)
            .mergeFrom(value).buildPartial();
      } else {
        preload_ = value;
      }
      preloadCase_ = 2;
    }
    /**
     * <pre>
     * Defines a placeholder fill applied before an image loads.
     * This will be replaced by the Image when it loads asynchronously.
     * Not relevant for platforms where image loading is synchronous.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Fill pre_load_fill = 2;</code>
     */
    private void clearPreLoadFill() {
      if (preloadCase_ == 2) {
        preloadCase_ = 0;
        preload_ = null;
      }
    }

    public static final int PRE_LOAD_IMAGE_FIELD_NUMBER = 3;
    /**
     * <pre>
     * Defines a placeholder image applied before an image loads.
     * This will be replaced by the Image when it loads asynchronously.
     * This should be an on-device asset; it doesn't make sense to have the pre-
     * load image also load asynchronously.
     * Not relevant for platforms where image loading is synchronous.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Image pre_load_image = 3;</code>
     */
    @java.lang.Override
    public boolean hasPreLoadImage() {
      return preloadCase_ == 3;
    }
    /**
     * <pre>
     * Defines a placeholder image applied before an image loads.
     * This will be replaced by the Image when it loads asynchronously.
     * This should be an on-device asset; it doesn't make sense to have the pre-
     * load image also load asynchronously.
     * Not relevant for platforms where image loading is synchronous.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Image pre_load_image = 3;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image getPreLoadImage() {
      if (preloadCase_ == 3) {
         return (org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image) preload_;
      }
      return org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.getDefaultInstance();
    }
    /**
     * <pre>
     * Defines a placeholder image applied before an image loads.
     * This will be replaced by the Image when it loads asynchronously.
     * This should be an on-device asset; it doesn't make sense to have the pre-
     * load image also load asynchronously.
     * Not relevant for platforms where image loading is synchronous.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Image pre_load_image = 3;</code>
     */
    private void setPreLoadImage(org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image value) {
      value.getClass();
  preload_ = value;
      preloadCase_ = 3;
    }
    /**
     * <pre>
     * Defines a placeholder image applied before an image loads.
     * This will be replaced by the Image when it loads asynchronously.
     * This should be an on-device asset; it doesn't make sense to have the pre-
     * load image also load asynchronously.
     * Not relevant for platforms where image loading is synchronous.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Image pre_load_image = 3;</code>
     */
    private void mergePreLoadImage(org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image value) {
      value.getClass();
  if (preloadCase_ == 3 &&
          preload_ != org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.getDefaultInstance()) {
        preload_ = org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.newBuilder((org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image) preload_)
            .mergeFrom(value).buildPartial();
      } else {
        preload_ = value;
      }
      preloadCase_ = 3;
    }
    /**
     * <pre>
     * Defines a placeholder image applied before an image loads.
     * This will be replaced by the Image when it loads asynchronously.
     * This should be an on-device asset; it doesn't make sense to have the pre-
     * load image also load asynchronously.
     * Not relevant for platforms where image loading is synchronous.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Image pre_load_image = 3;</code>
     */
    private void clearPreLoadImage() {
      if (preloadCase_ == 3) {
        preloadCase_ = 0;
        preload_ = null;
      }
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Various configuration parameters for image loading
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.piet.ImageLoadingSettings}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.ImageLoadingSettings)
        org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettingsOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      @java.lang.Override
      public PreloadCase
          getPreloadCase() {
        return instance.getPreloadCase();
      }

      public Builder clearPreload() {
        copyOnWrite();
        instance.clearPreload();
        return this;
      }


      /**
       * <pre>
       * If this is set, images will fade in after loading asynchronously.
       * May not be supported on all platforms.
       * </pre>
       *
       * <code>optional bool fade_in_image_on_load = 1;</code>
       * @return Whether the fadeInImageOnLoad field is set.
       */
      @java.lang.Override
      public boolean hasFadeInImageOnLoad() {
        return instance.hasFadeInImageOnLoad();
      }
      /**
       * <pre>
       * If this is set, images will fade in after loading asynchronously.
       * May not be supported on all platforms.
       * </pre>
       *
       * <code>optional bool fade_in_image_on_load = 1;</code>
       * @return The fadeInImageOnLoad.
       */
      @java.lang.Override
      public boolean getFadeInImageOnLoad() {
        return instance.getFadeInImageOnLoad();
      }
      /**
       * <pre>
       * If this is set, images will fade in after loading asynchronously.
       * May not be supported on all platforms.
       * </pre>
       *
       * <code>optional bool fade_in_image_on_load = 1;</code>
       * @param value The fadeInImageOnLoad to set.
       * @return This builder for chaining.
       */
      public Builder setFadeInImageOnLoad(boolean value) {
        copyOnWrite();
        instance.setFadeInImageOnLoad(value);
        return this;
      }
      /**
       * <pre>
       * If this is set, images will fade in after loading asynchronously.
       * May not be supported on all platforms.
       * </pre>
       *
       * <code>optional bool fade_in_image_on_load = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFadeInImageOnLoad() {
        copyOnWrite();
        instance.clearFadeInImageOnLoad();
        return this;
      }

      /**
       * <pre>
       * Defines a placeholder fill applied before an image loads.
       * This will be replaced by the Image when it loads asynchronously.
       * Not relevant for platforms where image loading is synchronous.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Fill pre_load_fill = 2;</code>
       */
      @java.lang.Override
      public boolean hasPreLoadFill() {
        return instance.hasPreLoadFill();
      }
      /**
       * <pre>
       * Defines a placeholder fill applied before an image loads.
       * This will be replaced by the Image when it loads asynchronously.
       * Not relevant for platforms where image loading is synchronous.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Fill pre_load_fill = 2;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill getPreLoadFill() {
        return instance.getPreLoadFill();
      }
      /**
       * <pre>
       * Defines a placeholder fill applied before an image loads.
       * This will be replaced by the Image when it loads asynchronously.
       * Not relevant for platforms where image loading is synchronous.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Fill pre_load_fill = 2;</code>
       */
      public Builder setPreLoadFill(org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill value) {
        copyOnWrite();
        instance.setPreLoadFill(value);
        return this;
      }
      /**
       * <pre>
       * Defines a placeholder fill applied before an image loads.
       * This will be replaced by the Image when it loads asynchronously.
       * Not relevant for platforms where image loading is synchronous.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Fill pre_load_fill = 2;</code>
       */
      public Builder setPreLoadFill(
          org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill.Builder builderForValue) {
        copyOnWrite();
        instance.setPreLoadFill(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Defines a placeholder fill applied before an image loads.
       * This will be replaced by the Image when it loads asynchronously.
       * Not relevant for platforms where image loading is synchronous.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Fill pre_load_fill = 2;</code>
       */
      public Builder mergePreLoadFill(org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill value) {
        copyOnWrite();
        instance.mergePreLoadFill(value);
        return this;
      }
      /**
       * <pre>
       * Defines a placeholder fill applied before an image loads.
       * This will be replaced by the Image when it loads asynchronously.
       * Not relevant for platforms where image loading is synchronous.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Fill pre_load_fill = 2;</code>
       */
      public Builder clearPreLoadFill() {
        copyOnWrite();
        instance.clearPreLoadFill();
        return this;
      }

      /**
       * <pre>
       * Defines a placeholder image applied before an image loads.
       * This will be replaced by the Image when it loads asynchronously.
       * This should be an on-device asset; it doesn't make sense to have the pre-
       * load image also load asynchronously.
       * Not relevant for platforms where image loading is synchronous.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Image pre_load_image = 3;</code>
       */
      @java.lang.Override
      public boolean hasPreLoadImage() {
        return instance.hasPreLoadImage();
      }
      /**
       * <pre>
       * Defines a placeholder image applied before an image loads.
       * This will be replaced by the Image when it loads asynchronously.
       * This should be an on-device asset; it doesn't make sense to have the pre-
       * load image also load asynchronously.
       * Not relevant for platforms where image loading is synchronous.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Image pre_load_image = 3;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image getPreLoadImage() {
        return instance.getPreLoadImage();
      }
      /**
       * <pre>
       * Defines a placeholder image applied before an image loads.
       * This will be replaced by the Image when it loads asynchronously.
       * This should be an on-device asset; it doesn't make sense to have the pre-
       * load image also load asynchronously.
       * Not relevant for platforms where image loading is synchronous.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Image pre_load_image = 3;</code>
       */
      public Builder setPreLoadImage(org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image value) {
        copyOnWrite();
        instance.setPreLoadImage(value);
        return this;
      }
      /**
       * <pre>
       * Defines a placeholder image applied before an image loads.
       * This will be replaced by the Image when it loads asynchronously.
       * This should be an on-device asset; it doesn't make sense to have the pre-
       * load image also load asynchronously.
       * Not relevant for platforms where image loading is synchronous.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Image pre_load_image = 3;</code>
       */
      public Builder setPreLoadImage(
          org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.Builder builderForValue) {
        copyOnWrite();
        instance.setPreLoadImage(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Defines a placeholder image applied before an image loads.
       * This will be replaced by the Image when it loads asynchronously.
       * This should be an on-device asset; it doesn't make sense to have the pre-
       * load image also load asynchronously.
       * Not relevant for platforms where image loading is synchronous.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Image pre_load_image = 3;</code>
       */
      public Builder mergePreLoadImage(org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image value) {
        copyOnWrite();
        instance.mergePreLoadImage(value);
        return this;
      }
      /**
       * <pre>
       * Defines a placeholder image applied before an image loads.
       * This will be replaced by the Image when it loads asynchronously.
       * This should be an on-device asset; it doesn't make sense to have the pre-
       * load image also load asynchronously.
       * Not relevant for platforms where image loading is synchronous.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Image pre_load_image = 3;</code>
       */
      public Builder clearPreLoadImage() {
        copyOnWrite();
        instance.clearPreLoadImage();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.ImageLoadingSettings)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "preload_",
              "preloadCase_",
              "bitField0_",
              "fadeInImageOnLoad_",
              org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill.class,
              org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.class,
            };
            java.lang.String info =
                "\u0001\u0003\u0001\u0001\u0001\u0003\u0003\u0000\u0000\u0001\u0001\u1007\u0000\u0002" +
                "\u103c\u0000\u0003\u143c\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.ImageLoadingSettings)
    private static final org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings DEFAULT_INSTANCE;
    static {
      ImageLoadingSettings defaultInstance = new ImageLoadingSettings();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        ImageLoadingSettings.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ImageLoadingSettings> PARSER;

    public static com.google.protobuf.Parser<ImageLoadingSettings> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface BoundStyleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.BoundStyle)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * See comments for Style.color.
     * </pre>
     *
     * <code>optional fixed32 color = 1;</code>
     * @return Whether the color field is set.
     */
    boolean hasColor();
    /**
     * <pre>
     * See comments for Style.color.
     * </pre>
     *
     * <code>optional fixed32 color = 1;</code>
     * @return The color.
     */
    int getColor();

    /**
     * <pre>
     * See comments for Style.background.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Fill background = 2;</code>
     * @return Whether the background field is set.
     */
    boolean hasBackground();
    /**
     * <pre>
     * See comments for Style.background.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Fill background = 2;</code>
     * @return The background.
     */
    org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill getBackground();

    /**
     * <pre>
     * See comments for Style.image_loading_settings
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 4;</code>
     * @return Whether the imageLoadingSettings field is set.
     */
    boolean hasImageLoadingSettings();
    /**
     * <pre>
     * See comments for Style.image_loading_settings
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 4;</code>
     * @return The imageLoadingSettings.
     */
    org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings getImageLoadingSettings();

    /**
     * <pre>
     * See comments for Style.scale_type
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 5;</code>
     * @return Whether the scaleType field is set.
     */
    boolean hasScaleType();
    /**
     * <pre>
     * See comments for Style.scale_type
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 5;</code>
     * @return The scaleType.
     */
    org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType getScaleType();
  }
  /**
   * <pre>
   * Style that can be bound to an element. Not all style attributes can be bound
   * due to performance (specifically, this affects view recycling).
   * PLEASE NOTE: Field names inside this message should bear the exact same names
   *     as their counterparts in the Style message.
   * LINT.IfChange
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.piet.BoundStyle}
   */
  public  static final class BoundStyle extends
      com.google.protobuf.GeneratedMessageLite<
          BoundStyle, BoundStyle.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.BoundStyle)
      BoundStyleOrBuilder {
    private BoundStyle() {
    }
    private int bitField0_;
    public static final int COLOR_FIELD_NUMBER = 1;
    private int color_;
    /**
     * <pre>
     * See comments for Style.color.
     * </pre>
     *
     * <code>optional fixed32 color = 1;</code>
     * @return Whether the color field is set.
     */
    @java.lang.Override
    public boolean hasColor() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * See comments for Style.color.
     * </pre>
     *
     * <code>optional fixed32 color = 1;</code>
     * @return The color.
     */
    @java.lang.Override
    public int getColor() {
      return color_;
    }
    /**
     * <pre>
     * See comments for Style.color.
     * </pre>
     *
     * <code>optional fixed32 color = 1;</code>
     * @param value The color to set.
     */
    private void setColor(int value) {
      bitField0_ |= 0x00000001;
      color_ = value;
    }
    /**
     * <pre>
     * See comments for Style.color.
     * </pre>
     *
     * <code>optional fixed32 color = 1;</code>
     */
    private void clearColor() {
      bitField0_ = (bitField0_ & ~0x00000001);
      color_ = 0;
    }

    public static final int BACKGROUND_FIELD_NUMBER = 2;
    private org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill background_;
    /**
     * <pre>
     * See comments for Style.background.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Fill background = 2;</code>
     */
    @java.lang.Override
    public boolean hasBackground() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * See comments for Style.background.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Fill background = 2;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill getBackground() {
      return background_ == null ? org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill.getDefaultInstance() : background_;
    }
    /**
     * <pre>
     * See comments for Style.background.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Fill background = 2;</code>
     */
    private void setBackground(org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill value) {
      value.getClass();
  background_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <pre>
     * See comments for Style.background.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Fill background = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeBackground(org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill value) {
      value.getClass();
  if (background_ != null &&
          background_ != org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill.getDefaultInstance()) {
        background_ =
          org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill.newBuilder(background_).mergeFrom(value).buildPartial();
      } else {
        background_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * See comments for Style.background.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Fill background = 2;</code>
     */
    private void clearBackground() {  background_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static final int IMAGE_LOADING_SETTINGS_FIELD_NUMBER = 4;
    private org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings imageLoadingSettings_;
    /**
     * <pre>
     * See comments for Style.image_loading_settings
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 4;</code>
     */
    @java.lang.Override
    public boolean hasImageLoadingSettings() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * See comments for Style.image_loading_settings
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 4;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings getImageLoadingSettings() {
      return imageLoadingSettings_ == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings.getDefaultInstance() : imageLoadingSettings_;
    }
    /**
     * <pre>
     * See comments for Style.image_loading_settings
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 4;</code>
     */
    private void setImageLoadingSettings(org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings value) {
      value.getClass();
  imageLoadingSettings_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <pre>
     * See comments for Style.image_loading_settings
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 4;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeImageLoadingSettings(org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings value) {
      value.getClass();
  if (imageLoadingSettings_ != null &&
          imageLoadingSettings_ != org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings.getDefaultInstance()) {
        imageLoadingSettings_ =
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings.newBuilder(imageLoadingSettings_).mergeFrom(value).buildPartial();
      } else {
        imageLoadingSettings_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <pre>
     * See comments for Style.image_loading_settings
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 4;</code>
     */
    private void clearImageLoadingSettings() {  imageLoadingSettings_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static final int SCALE_TYPE_FIELD_NUMBER = 5;
    private int scaleType_;
    /**
     * <pre>
     * See comments for Style.scale_type
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 5;</code>
     * @return Whether the scaleType field is set.
     */
    @java.lang.Override
    public boolean hasScaleType() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * See comments for Style.scale_type
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 5;</code>
     * @return The scaleType.
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType getScaleType() {
      org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType result = org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType.forNumber(scaleType_);
      return result == null ? org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType.SCALE_TYPE_UNSPECIFIED : result;
    }
    /**
     * <pre>
     * See comments for Style.scale_type
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 5;</code>
     * @param value The scaleType to set.
     */
    private void setScaleType(org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType value) {
      scaleType_ = value.getNumber();
      bitField0_ |= 0x00000008;
    }
    /**
     * <pre>
     * See comments for Style.scale_type
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 5;</code>
     */
    private void clearScaleType() {
      bitField0_ = (bitField0_ & ~0x00000008);
      scaleType_ = 0;
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Style that can be bound to an element. Not all style attributes can be bound
     * due to performance (specifically, this affects view recycling).
     * PLEASE NOTE: Field names inside this message should bear the exact same names
     *     as their counterparts in the Style message.
     * LINT.IfChange
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.piet.BoundStyle}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.BoundStyle)
        org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyleOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * See comments for Style.color.
       * </pre>
       *
       * <code>optional fixed32 color = 1;</code>
       * @return Whether the color field is set.
       */
      @java.lang.Override
      public boolean hasColor() {
        return instance.hasColor();
      }
      /**
       * <pre>
       * See comments for Style.color.
       * </pre>
       *
       * <code>optional fixed32 color = 1;</code>
       * @return The color.
       */
      @java.lang.Override
      public int getColor() {
        return instance.getColor();
      }
      /**
       * <pre>
       * See comments for Style.color.
       * </pre>
       *
       * <code>optional fixed32 color = 1;</code>
       * @param value The color to set.
       * @return This builder for chaining.
       */
      public Builder setColor(int value) {
        copyOnWrite();
        instance.setColor(value);
        return this;
      }
      /**
       * <pre>
       * See comments for Style.color.
       * </pre>
       *
       * <code>optional fixed32 color = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearColor() {
        copyOnWrite();
        instance.clearColor();
        return this;
      }

      /**
       * <pre>
       * See comments for Style.background.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Fill background = 2;</code>
       */
      @java.lang.Override
      public boolean hasBackground() {
        return instance.hasBackground();
      }
      /**
       * <pre>
       * See comments for Style.background.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Fill background = 2;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill getBackground() {
        return instance.getBackground();
      }
      /**
       * <pre>
       * See comments for Style.background.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Fill background = 2;</code>
       */
      public Builder setBackground(org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill value) {
        copyOnWrite();
        instance.setBackground(value);
        return this;
        }
      /**
       * <pre>
       * See comments for Style.background.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Fill background = 2;</code>
       */
      public Builder setBackground(
          org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill.Builder builderForValue) {
        copyOnWrite();
        instance.setBackground(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * See comments for Style.background.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Fill background = 2;</code>
       */
      public Builder mergeBackground(org.chromium.components.feed.core.proto.ui.piet.GradientsProto.Fill value) {
        copyOnWrite();
        instance.mergeBackground(value);
        return this;
      }
      /**
       * <pre>
       * See comments for Style.background.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Fill background = 2;</code>
       */
      public Builder clearBackground() {  copyOnWrite();
        instance.clearBackground();
        return this;
      }

      /**
       * <pre>
       * See comments for Style.image_loading_settings
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 4;</code>
       */
      @java.lang.Override
      public boolean hasImageLoadingSettings() {
        return instance.hasImageLoadingSettings();
      }
      /**
       * <pre>
       * See comments for Style.image_loading_settings
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 4;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings getImageLoadingSettings() {
        return instance.getImageLoadingSettings();
      }
      /**
       * <pre>
       * See comments for Style.image_loading_settings
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 4;</code>
       */
      public Builder setImageLoadingSettings(org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings value) {
        copyOnWrite();
        instance.setImageLoadingSettings(value);
        return this;
        }
      /**
       * <pre>
       * See comments for Style.image_loading_settings
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 4;</code>
       */
      public Builder setImageLoadingSettings(
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings.Builder builderForValue) {
        copyOnWrite();
        instance.setImageLoadingSettings(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * See comments for Style.image_loading_settings
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 4;</code>
       */
      public Builder mergeImageLoadingSettings(org.chromium.components.feed.core.proto.ui.piet.StylesProto.ImageLoadingSettings value) {
        copyOnWrite();
        instance.mergeImageLoadingSettings(value);
        return this;
      }
      /**
       * <pre>
       * See comments for Style.image_loading_settings
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.ImageLoadingSettings image_loading_settings = 4;</code>
       */
      public Builder clearImageLoadingSettings() {  copyOnWrite();
        instance.clearImageLoadingSettings();
        return this;
      }

      /**
       * <pre>
       * See comments for Style.scale_type
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 5;</code>
       * @return Whether the scaleType field is set.
       */
      @java.lang.Override
      public boolean hasScaleType() {
        return instance.hasScaleType();
      }
      /**
       * <pre>
       * See comments for Style.scale_type
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 5;</code>
       * @return The scaleType.
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType getScaleType() {
        return instance.getScaleType();
      }
      /**
       * <pre>
       * See comments for Style.scale_type
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 5;</code>
       * @param value The enum numeric value on the wire for scaleType to set.
       * @return This builder for chaining.
       */
      public Builder setScaleType(org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType value) {
        copyOnWrite();
        instance.setScaleType(value);
        return this;
      }
      /**
       * <pre>
       * See comments for Style.scale_type
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Image.ScaleType scale_type = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearScaleType() {
        copyOnWrite();
        instance.clearScaleType();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.BoundStyle)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "color_",
              "background_",
              "imageLoadingSettings_",
              "scaleType_",
              org.chromium.components.feed.core.proto.ui.piet.ImagesProto.Image.ScaleType.internalGetVerifier(),
            };
            java.lang.String info =
                "\u0001\u0004\u0000\u0001\u0001\u0005\u0004\u0000\u0000\u0001\u0001\u1006\u0000\u0002" +
                "\u1009\u0001\u0004\u1409\u0002\u0005\u100c\u0003";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.BoundStyle)
    private static final org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle DEFAULT_INSTANCE;
    static {
      BoundStyle defaultInstance = new BoundStyle();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        BoundStyle.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.BoundStyle getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<BoundStyle> PARSER;

    public static com.google.protobuf.Parser<BoundStyle> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface FontOrBuilder extends
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.Font)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The size of the text in scaled pixels (sp). For devices with a scaling
     * factor of 1.0, this size is equivalent to display pixels.
     * Certain OS-level accessibility features allow users to increase/decrease
     * font size by a scaling factor (e.g. iOS &gt; Dynamic Type, or Android Settings
     * &gt; Font Size, or Android &gt; Accessibility &gt; Large Text). If the user has
     * turned on text scaling, the Host App should apply that scaling factor to
     * this numeric font size before rendering.
     * Note that other related metrics such as width and height are NOT
     * automatically scaled, but line height does scale.
     * </pre>
     *
     * <code>optional int32 size = 1 [default = 14];</code>
     * @return Whether the size field is set.
     */
    boolean hasSize();
    /**
     * <pre>
     * The size of the text in scaled pixels (sp). For devices with a scaling
     * factor of 1.0, this size is equivalent to display pixels.
     * Certain OS-level accessibility features allow users to increase/decrease
     * font size by a scaling factor (e.g. iOS &gt; Dynamic Type, or Android Settings
     * &gt; Font Size, or Android &gt; Accessibility &gt; Large Text). If the user has
     * turned on text scaling, the Host App should apply that scaling factor to
     * this numeric font size before rendering.
     * Note that other related metrics such as width and height are NOT
     * automatically scaled, but line height does scale.
     * </pre>
     *
     * <code>optional int32 size = 1 [default = 14];</code>
     * @return The size.
     */
    int getSize();

    /**
     * <pre>
     * Line height, expressed as a multiple of size (hence the `_ratio` suffix).
     * The default value of 1.2 is intended to work well for most scenarios
     * without requiring feature authors to specify this explicitly.
     * Behavior matches that of CSS: extra space appears between lines and evenly
     * split above and below a block of text.
     * For example, if the ratio is 2.0 and the text is 12pt tall, there will be
     * 12pt of space between each pair of lines, and 6pt of space above and below
     * the block of text.
     * This field is deprecated. Please use line_height instead.
     * TODO Remove this field once the transition to line_height
     * is complete.
     * </pre>
     *
     * <code>optional float line_height_ratio = 2 [default = 1.2, deprecated = true];</code>
     * @return Whether the lineHeightRatio field is set.
     */
    @java.lang.Deprecated boolean hasLineHeightRatio();
    /**
     * <pre>
     * Line height, expressed as a multiple of size (hence the `_ratio` suffix).
     * The default value of 1.2 is intended to work well for most scenarios
     * without requiring feature authors to specify this explicitly.
     * Behavior matches that of CSS: extra space appears between lines and evenly
     * split above and below a block of text.
     * For example, if the ratio is 2.0 and the text is 12pt tall, there will be
     * 12pt of space between each pair of lines, and 6pt of space above and below
     * the block of text.
     * This field is deprecated. Please use line_height instead.
     * TODO Remove this field once the transition to line_height
     * is complete.
     * </pre>
     *
     * <code>optional float line_height_ratio = 2 [default = 1.2, deprecated = true];</code>
     * @return The lineHeightRatio.
     */
    @java.lang.Deprecated float getLineHeightRatio();

    /**
     * <pre>
     * Line height, expressed as scale-independent pixels (sp), meaning that it
     * scales with accessibility settings. If no line height is specified, the
     * default spacing for that font will be used. This is usually
     * approximately 1.2 times the height of the text, and should work well for
     * most platforms. Using the default does not guarantee the same height across
     * platforms; if that is needed, an explicit line height should be set.
     * Because line_height_ratio is deprecated, if both are specified, only
     * line_height will be used.
     * </pre>
     *
     * <code>optional uint32 line_height = 7;</code>
     * @return Whether the lineHeight field is set.
     */
    boolean hasLineHeight();
    /**
     * <pre>
     * Line height, expressed as scale-independent pixels (sp), meaning that it
     * scales with accessibility settings. If no line height is specified, the
     * default spacing for that font will be used. This is usually
     * approximately 1.2 times the height of the text, and should work well for
     * most platforms. Using the default does not guarantee the same height across
     * platforms; if that is needed, an explicit line height should be set.
     * Because line_height_ratio is deprecated, if both are specified, only
     * line_height will be used.
     * </pre>
     *
     * <code>optional uint32 line_height = 7;</code>
     * @return The lineHeight.
     */
    int getLineHeight();

    /**
     * <pre>
     * The font weight (boldness) to apply to the text.
     * This field is deprecated. Please use a Typeface, and either choose a
     * CommonFont, which has the weight built in, or include the weight as part of
     * the style definition for a custom_font.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Font.FontWeight weight = 3 [default = REGULAR, deprecated = true];</code>
     * @return Whether the weight field is set.
     */
    @java.lang.Deprecated boolean hasWeight();
    /**
     * <pre>
     * The font weight (boldness) to apply to the text.
     * This field is deprecated. Please use a Typeface, and either choose a
     * CommonFont, which has the weight built in, or include the weight as part of
     * the style definition for a custom_font.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Font.FontWeight weight = 3 [default = REGULAR, deprecated = true];</code>
     * @return The weight.
     */
    @java.lang.Deprecated org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font.FontWeight getWeight();

    /**
     * <pre>
     * Apply the italic style to the Font.
     * </pre>
     *
     * <code>optional bool italic = 4;</code>
     * @return Whether the italic field is set.
     */
    boolean hasItalic();
    /**
     * <pre>
     * Apply the italic style to the Font.
     * </pre>
     *
     * <code>optional bool italic = 4;</code>
     * @return The italic.
     */
    boolean getItalic();

    /**
     * <pre>
     * Sets text letter spacing in dp. This indicates how much space will be
     * added between characters. Negative values tighten text, whereas positive
     * values increase space between letters. Also known as “tracking” in
     * typography, or “character spacing” in image editing tools.
     * </pre>
     *
     * <code>optional float letter_spacing_dp = 9;</code>
     * @return Whether the letterSpacingDp field is set.
     */
    boolean hasLetterSpacingDp();
    /**
     * <pre>
     * Sets text letter spacing in dp. This indicates how much space will be
     * added between characters. Negative values tighten text, whereas positive
     * values increase space between letters. Also known as “tracking” in
     * typography, or “character spacing” in image editing tools.
     * </pre>
     *
     * <code>optional float letter_spacing_dp = 9;</code>
     * @return The letterSpacingDp.
     */
    float getLetterSpacingDp();

    /**
     * <pre>
     * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
     * Multiple typefaces can be specified by the server, and the first one that
     * is available on the client will be used. If none match, or if no typefaces
     * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
     * typeface on each platform will be used. Each typeface’s name is a custom
     * string, and should be negotiated between server and client to ensure that
     * typefaces requested by the server are available on the client. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * This field is deprecated. Please use the typeface field that uses a
     * Typeface message instead.
     * </pre>
     *
     * <code>repeated string typefaces = 6 [deprecated = true];</code>
     * @return A list containing the typefaces.
     */
    @java.lang.Deprecated java.util.List<java.lang.String>
        getTypefacesList();
    /**
     * <pre>
     * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
     * Multiple typefaces can be specified by the server, and the first one that
     * is available on the client will be used. If none match, or if no typefaces
     * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
     * typeface on each platform will be used. Each typeface’s name is a custom
     * string, and should be negotiated between server and client to ensure that
     * typefaces requested by the server are available on the client. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * This field is deprecated. Please use the typeface field that uses a
     * Typeface message instead.
     * </pre>
     *
     * <code>repeated string typefaces = 6 [deprecated = true];</code>
     * @return The count of typefaces.
     */
    @java.lang.Deprecated int getTypefacesCount();
    /**
     * <pre>
     * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
     * Multiple typefaces can be specified by the server, and the first one that
     * is available on the client will be used. If none match, or if no typefaces
     * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
     * typeface on each platform will be used. Each typeface’s name is a custom
     * string, and should be negotiated between server and client to ensure that
     * typefaces requested by the server are available on the client. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * This field is deprecated. Please use the typeface field that uses a
     * Typeface message instead.
     * </pre>
     *
     * <code>repeated string typefaces = 6 [deprecated = true];</code>
     * @param index The index of the element to return.
     * @return The typefaces at the given index.
     */
    @java.lang.Deprecated java.lang.String getTypefaces(int index);
    /**
     * <pre>
     * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
     * Multiple typefaces can be specified by the server, and the first one that
     * is available on the client will be used. If none match, or if no typefaces
     * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
     * typeface on each platform will be used. Each typeface’s name is a custom
     * string, and should be negotiated between server and client to ensure that
     * typefaces requested by the server are available on the client. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * This field is deprecated. Please use the typeface field that uses a
     * Typeface message instead.
     * </pre>
     *
     * <code>repeated string typefaces = 6 [deprecated = true];</code>
     * @param index The index of the element to return.
     * @return The typefaces at the given index.
     */
    @java.lang.Deprecated com.google.protobuf.ByteString
        getTypefacesBytes(int index);

    /**
     * <pre>
     * The typeface to use. Each typeface specified can either be a CommonTypeface
     * or a string naming a custom typeface. The CommonTypeface actually pairs
     * commonly-used typefaces with weights. The custom one can be used to
     * identify any typeface. Multiple typefaces can be specified by the server,
     * and the first one that is available on the client will be used. If none
     * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
     * raised, and the system default typeface on each platform will be used. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
     */
    java.util.List<org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface> 
        getTypefaceList();
    /**
     * <pre>
     * The typeface to use. Each typeface specified can either be a CommonTypeface
     * or a string naming a custom typeface. The CommonTypeface actually pairs
     * commonly-used typefaces with weights. The custom one can be used to
     * identify any typeface. Multiple typefaces can be specified by the server,
     * and the first one that is available on the client will be used. If none
     * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
     * raised, and the system default typeface on each platform will be used. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
     */
    org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface getTypeface(int index);
    /**
     * <pre>
     * The typeface to use. Each typeface specified can either be a CommonTypeface
     * or a string naming a custom typeface. The CommonTypeface actually pairs
     * commonly-used typefaces with weights. The custom one can be used to
     * identify any typeface. Multiple typefaces can be specified by the server,
     * and the first one that is available on the client will be used. If none
     * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
     * raised, and the system default typeface on each platform will be used. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
     */
    int getTypefaceCount();
  }
  /**
   * <pre>
   * Font definitions for text elements. In the interest of preserving
   * consistency, feature authors are highly encouraged to use Fonts as part of a
   * Style, instead of applying font definitions to individual elements.
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.piet.Font}
   */
  public  static final class Font extends
      com.google.protobuf.GeneratedMessageLite<
          Font, Font.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.Font)
      FontOrBuilder {
    private Font() {
      size_ = 14;
      lineHeightRatio_ = 1.2F;
      weight_ = 3;
      typefaces_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      typeface_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Material Design specifies six weights for a font, in order from thinnest
     * stroke to thickest stroke. Orthogonal to weight, a font can be either
     * normal or italic. Not all weights may be supported by every typeface or
     * every platform; see [INTERNAL LINK]
     * </pre>
     *
     * Protobuf enum {@code components.feed.core.proto.ui.piet.Font.FontWeight}
     */
    public enum FontWeight
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       * Unspecified font weight.
       * </pre>
       *
       * <code>FONT_WEIGHT_UNSPECIFIED = 0;</code>
       */
      FONT_WEIGHT_UNSPECIFIED(0),
      /**
       * <pre>
       * Thinnest font weight.
       * </pre>
       *
       * <code>THIN = 1;</code>
       */
      THIN(1),
      /**
       * <pre>
       * Light font weight.
       * </pre>
       *
       * <code>LIGHT = 2;</code>
       */
      LIGHT(2),
      /**
       * <pre>
       * Regular font weight (this is the default).
       * </pre>
       *
       * <code>REGULAR = 3;</code>
       */
      REGULAR(3),
      /**
       * <pre>
       * Medium font weight.
       * </pre>
       *
       * <code>MEDIUM = 4;</code>
       */
      MEDIUM(4),
      /**
       * <pre>
       * Bold font weight.
       * </pre>
       *
       * <code>BOLD = 5;</code>
       */
      BOLD(5),
      /**
       * <pre>
       * Black (extra-bold) font weight.
       * </pre>
       *
       * <code>BLACK = 6;</code>
       */
      BLACK(6),
      ;

      /**
       * <pre>
       * Unspecified font weight.
       * </pre>
       *
       * <code>FONT_WEIGHT_UNSPECIFIED = 0;</code>
       */
      public static final int FONT_WEIGHT_UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * Thinnest font weight.
       * </pre>
       *
       * <code>THIN = 1;</code>
       */
      public static final int THIN_VALUE = 1;
      /**
       * <pre>
       * Light font weight.
       * </pre>
       *
       * <code>LIGHT = 2;</code>
       */
      public static final int LIGHT_VALUE = 2;
      /**
       * <pre>
       * Regular font weight (this is the default).
       * </pre>
       *
       * <code>REGULAR = 3;</code>
       */
      public static final int REGULAR_VALUE = 3;
      /**
       * <pre>
       * Medium font weight.
       * </pre>
       *
       * <code>MEDIUM = 4;</code>
       */
      public static final int MEDIUM_VALUE = 4;
      /**
       * <pre>
       * Bold font weight.
       * </pre>
       *
       * <code>BOLD = 5;</code>
       */
      public static final int BOLD_VALUE = 5;
      /**
       * <pre>
       * Black (extra-bold) font weight.
       * </pre>
       *
       * <code>BLACK = 6;</code>
       */
      public static final int BLACK_VALUE = 6;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FontWeight valueOf(int value) {
        return forNumber(value);
      }

      public static FontWeight forNumber(int value) {
        switch (value) {
          case 0: return FONT_WEIGHT_UNSPECIFIED;
          case 1: return THIN;
          case 2: return LIGHT;
          case 3: return REGULAR;
          case 4: return MEDIUM;
          case 5: return BOLD;
          case 6: return BLACK;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FontWeight>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          FontWeight> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FontWeight>() {
              @java.lang.Override
              public FontWeight findValueByNumber(int number) {
                return FontWeight.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return FontWeightVerifier.INSTANCE;
      }

      private static final class FontWeightVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new FontWeightVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return FontWeight.forNumber(number) != null;
              }
            };

      private final int value;

      private FontWeight(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:components.feed.core.proto.ui.piet.Font.FontWeight)
    }

    private int bitField0_;
    public static final int SIZE_FIELD_NUMBER = 1;
    private int size_;
    /**
     * <pre>
     * The size of the text in scaled pixels (sp). For devices with a scaling
     * factor of 1.0, this size is equivalent to display pixels.
     * Certain OS-level accessibility features allow users to increase/decrease
     * font size by a scaling factor (e.g. iOS &gt; Dynamic Type, or Android Settings
     * &gt; Font Size, or Android &gt; Accessibility &gt; Large Text). If the user has
     * turned on text scaling, the Host App should apply that scaling factor to
     * this numeric font size before rendering.
     * Note that other related metrics such as width and height are NOT
     * automatically scaled, but line height does scale.
     * </pre>
     *
     * <code>optional int32 size = 1 [default = 14];</code>
     * @return Whether the size field is set.
     */
    @java.lang.Override
    public boolean hasSize() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The size of the text in scaled pixels (sp). For devices with a scaling
     * factor of 1.0, this size is equivalent to display pixels.
     * Certain OS-level accessibility features allow users to increase/decrease
     * font size by a scaling factor (e.g. iOS &gt; Dynamic Type, or Android Settings
     * &gt; Font Size, or Android &gt; Accessibility &gt; Large Text). If the user has
     * turned on text scaling, the Host App should apply that scaling factor to
     * this numeric font size before rendering.
     * Note that other related metrics such as width and height are NOT
     * automatically scaled, but line height does scale.
     * </pre>
     *
     * <code>optional int32 size = 1 [default = 14];</code>
     * @return The size.
     */
    @java.lang.Override
    public int getSize() {
      return size_;
    }
    /**
     * <pre>
     * The size of the text in scaled pixels (sp). For devices with a scaling
     * factor of 1.0, this size is equivalent to display pixels.
     * Certain OS-level accessibility features allow users to increase/decrease
     * font size by a scaling factor (e.g. iOS &gt; Dynamic Type, or Android Settings
     * &gt; Font Size, or Android &gt; Accessibility &gt; Large Text). If the user has
     * turned on text scaling, the Host App should apply that scaling factor to
     * this numeric font size before rendering.
     * Note that other related metrics such as width and height are NOT
     * automatically scaled, but line height does scale.
     * </pre>
     *
     * <code>optional int32 size = 1 [default = 14];</code>
     * @param value The size to set.
     */
    private void setSize(int value) {
      bitField0_ |= 0x00000001;
      size_ = value;
    }
    /**
     * <pre>
     * The size of the text in scaled pixels (sp). For devices with a scaling
     * factor of 1.0, this size is equivalent to display pixels.
     * Certain OS-level accessibility features allow users to increase/decrease
     * font size by a scaling factor (e.g. iOS &gt; Dynamic Type, or Android Settings
     * &gt; Font Size, or Android &gt; Accessibility &gt; Large Text). If the user has
     * turned on text scaling, the Host App should apply that scaling factor to
     * this numeric font size before rendering.
     * Note that other related metrics such as width and height are NOT
     * automatically scaled, but line height does scale.
     * </pre>
     *
     * <code>optional int32 size = 1 [default = 14];</code>
     */
    private void clearSize() {
      bitField0_ = (bitField0_ & ~0x00000001);
      size_ = 14;
    }

    public static final int LINE_HEIGHT_RATIO_FIELD_NUMBER = 2;
    private float lineHeightRatio_;
    /**
     * <pre>
     * Line height, expressed as a multiple of size (hence the `_ratio` suffix).
     * The default value of 1.2 is intended to work well for most scenarios
     * without requiring feature authors to specify this explicitly.
     * Behavior matches that of CSS: extra space appears between lines and evenly
     * split above and below a block of text.
     * For example, if the ratio is 2.0 and the text is 12pt tall, there will be
     * 12pt of space between each pair of lines, and 6pt of space above and below
     * the block of text.
     * This field is deprecated. Please use line_height instead.
     * TODO Remove this field once the transition to line_height
     * is complete.
     * </pre>
     *
     * <code>optional float line_height_ratio = 2 [default = 1.2, deprecated = true];</code>
     * @return Whether the lineHeightRatio field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasLineHeightRatio() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Line height, expressed as a multiple of size (hence the `_ratio` suffix).
     * The default value of 1.2 is intended to work well for most scenarios
     * without requiring feature authors to specify this explicitly.
     * Behavior matches that of CSS: extra space appears between lines and evenly
     * split above and below a block of text.
     * For example, if the ratio is 2.0 and the text is 12pt tall, there will be
     * 12pt of space between each pair of lines, and 6pt of space above and below
     * the block of text.
     * This field is deprecated. Please use line_height instead.
     * TODO Remove this field once the transition to line_height
     * is complete.
     * </pre>
     *
     * <code>optional float line_height_ratio = 2 [default = 1.2, deprecated = true];</code>
     * @return The lineHeightRatio.
     */
    @java.lang.Override
    @java.lang.Deprecated public float getLineHeightRatio() {
      return lineHeightRatio_;
    }
    /**
     * <pre>
     * Line height, expressed as a multiple of size (hence the `_ratio` suffix).
     * The default value of 1.2 is intended to work well for most scenarios
     * without requiring feature authors to specify this explicitly.
     * Behavior matches that of CSS: extra space appears between lines and evenly
     * split above and below a block of text.
     * For example, if the ratio is 2.0 and the text is 12pt tall, there will be
     * 12pt of space between each pair of lines, and 6pt of space above and below
     * the block of text.
     * This field is deprecated. Please use line_height instead.
     * TODO Remove this field once the transition to line_height
     * is complete.
     * </pre>
     *
     * <code>optional float line_height_ratio = 2 [default = 1.2, deprecated = true];</code>
     * @param value The lineHeightRatio to set.
     */
    private void setLineHeightRatio(float value) {
      bitField0_ |= 0x00000002;
      lineHeightRatio_ = value;
    }
    /**
     * <pre>
     * Line height, expressed as a multiple of size (hence the `_ratio` suffix).
     * The default value of 1.2 is intended to work well for most scenarios
     * without requiring feature authors to specify this explicitly.
     * Behavior matches that of CSS: extra space appears between lines and evenly
     * split above and below a block of text.
     * For example, if the ratio is 2.0 and the text is 12pt tall, there will be
     * 12pt of space between each pair of lines, and 6pt of space above and below
     * the block of text.
     * This field is deprecated. Please use line_height instead.
     * TODO Remove this field once the transition to line_height
     * is complete.
     * </pre>
     *
     * <code>optional float line_height_ratio = 2 [default = 1.2, deprecated = true];</code>
     */
    private void clearLineHeightRatio() {
      bitField0_ = (bitField0_ & ~0x00000002);
      lineHeightRatio_ = 1.2F;
    }

    public static final int LINE_HEIGHT_FIELD_NUMBER = 7;
    private int lineHeight_;
    /**
     * <pre>
     * Line height, expressed as scale-independent pixels (sp), meaning that it
     * scales with accessibility settings. If no line height is specified, the
     * default spacing for that font will be used. This is usually
     * approximately 1.2 times the height of the text, and should work well for
     * most platforms. Using the default does not guarantee the same height across
     * platforms; if that is needed, an explicit line height should be set.
     * Because line_height_ratio is deprecated, if both are specified, only
     * line_height will be used.
     * </pre>
     *
     * <code>optional uint32 line_height = 7;</code>
     * @return Whether the lineHeight field is set.
     */
    @java.lang.Override
    public boolean hasLineHeight() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Line height, expressed as scale-independent pixels (sp), meaning that it
     * scales with accessibility settings. If no line height is specified, the
     * default spacing for that font will be used. This is usually
     * approximately 1.2 times the height of the text, and should work well for
     * most platforms. Using the default does not guarantee the same height across
     * platforms; if that is needed, an explicit line height should be set.
     * Because line_height_ratio is deprecated, if both are specified, only
     * line_height will be used.
     * </pre>
     *
     * <code>optional uint32 line_height = 7;</code>
     * @return The lineHeight.
     */
    @java.lang.Override
    public int getLineHeight() {
      return lineHeight_;
    }
    /**
     * <pre>
     * Line height, expressed as scale-independent pixels (sp), meaning that it
     * scales with accessibility settings. If no line height is specified, the
     * default spacing for that font will be used. This is usually
     * approximately 1.2 times the height of the text, and should work well for
     * most platforms. Using the default does not guarantee the same height across
     * platforms; if that is needed, an explicit line height should be set.
     * Because line_height_ratio is deprecated, if both are specified, only
     * line_height will be used.
     * </pre>
     *
     * <code>optional uint32 line_height = 7;</code>
     * @param value The lineHeight to set.
     */
    private void setLineHeight(int value) {
      bitField0_ |= 0x00000004;
      lineHeight_ = value;
    }
    /**
     * <pre>
     * Line height, expressed as scale-independent pixels (sp), meaning that it
     * scales with accessibility settings. If no line height is specified, the
     * default spacing for that font will be used. This is usually
     * approximately 1.2 times the height of the text, and should work well for
     * most platforms. Using the default does not guarantee the same height across
     * platforms; if that is needed, an explicit line height should be set.
     * Because line_height_ratio is deprecated, if both are specified, only
     * line_height will be used.
     * </pre>
     *
     * <code>optional uint32 line_height = 7;</code>
     */
    private void clearLineHeight() {
      bitField0_ = (bitField0_ & ~0x00000004);
      lineHeight_ = 0;
    }

    public static final int WEIGHT_FIELD_NUMBER = 3;
    private int weight_;
    /**
     * <pre>
     * The font weight (boldness) to apply to the text.
     * This field is deprecated. Please use a Typeface, and either choose a
     * CommonFont, which has the weight built in, or include the weight as part of
     * the style definition for a custom_font.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Font.FontWeight weight = 3 [default = REGULAR, deprecated = true];</code>
     * @return Whether the weight field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasWeight() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The font weight (boldness) to apply to the text.
     * This field is deprecated. Please use a Typeface, and either choose a
     * CommonFont, which has the weight built in, or include the weight as part of
     * the style definition for a custom_font.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Font.FontWeight weight = 3 [default = REGULAR, deprecated = true];</code>
     * @return The weight.
     */
    @java.lang.Override
    @java.lang.Deprecated public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font.FontWeight getWeight() {
      org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font.FontWeight result = org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font.FontWeight.forNumber(weight_);
      return result == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font.FontWeight.REGULAR : result;
    }
    /**
     * <pre>
     * The font weight (boldness) to apply to the text.
     * This field is deprecated. Please use a Typeface, and either choose a
     * CommonFont, which has the weight built in, or include the weight as part of
     * the style definition for a custom_font.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Font.FontWeight weight = 3 [default = REGULAR, deprecated = true];</code>
     * @param value The weight to set.
     */
    private void setWeight(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font.FontWeight value) {
      weight_ = value.getNumber();
      bitField0_ |= 0x00000008;
    }
    /**
     * <pre>
     * The font weight (boldness) to apply to the text.
     * This field is deprecated. Please use a Typeface, and either choose a
     * CommonFont, which has the weight built in, or include the weight as part of
     * the style definition for a custom_font.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Font.FontWeight weight = 3 [default = REGULAR, deprecated = true];</code>
     */
    private void clearWeight() {
      bitField0_ = (bitField0_ & ~0x00000008);
      weight_ = 3;
    }

    public static final int ITALIC_FIELD_NUMBER = 4;
    private boolean italic_;
    /**
     * <pre>
     * Apply the italic style to the Font.
     * </pre>
     *
     * <code>optional bool italic = 4;</code>
     * @return Whether the italic field is set.
     */
    @java.lang.Override
    public boolean hasItalic() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Apply the italic style to the Font.
     * </pre>
     *
     * <code>optional bool italic = 4;</code>
     * @return The italic.
     */
    @java.lang.Override
    public boolean getItalic() {
      return italic_;
    }
    /**
     * <pre>
     * Apply the italic style to the Font.
     * </pre>
     *
     * <code>optional bool italic = 4;</code>
     * @param value The italic to set.
     */
    private void setItalic(boolean value) {
      bitField0_ |= 0x00000010;
      italic_ = value;
    }
    /**
     * <pre>
     * Apply the italic style to the Font.
     * </pre>
     *
     * <code>optional bool italic = 4;</code>
     */
    private void clearItalic() {
      bitField0_ = (bitField0_ & ~0x00000010);
      italic_ = false;
    }

    public static final int LETTER_SPACING_DP_FIELD_NUMBER = 9;
    private float letterSpacingDp_;
    /**
     * <pre>
     * Sets text letter spacing in dp. This indicates how much space will be
     * added between characters. Negative values tighten text, whereas positive
     * values increase space between letters. Also known as “tracking” in
     * typography, or “character spacing” in image editing tools.
     * </pre>
     *
     * <code>optional float letter_spacing_dp = 9;</code>
     * @return Whether the letterSpacingDp field is set.
     */
    @java.lang.Override
    public boolean hasLetterSpacingDp() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Sets text letter spacing in dp. This indicates how much space will be
     * added between characters. Negative values tighten text, whereas positive
     * values increase space between letters. Also known as “tracking” in
     * typography, or “character spacing” in image editing tools.
     * </pre>
     *
     * <code>optional float letter_spacing_dp = 9;</code>
     * @return The letterSpacingDp.
     */
    @java.lang.Override
    public float getLetterSpacingDp() {
      return letterSpacingDp_;
    }
    /**
     * <pre>
     * Sets text letter spacing in dp. This indicates how much space will be
     * added between characters. Negative values tighten text, whereas positive
     * values increase space between letters. Also known as “tracking” in
     * typography, or “character spacing” in image editing tools.
     * </pre>
     *
     * <code>optional float letter_spacing_dp = 9;</code>
     * @param value The letterSpacingDp to set.
     */
    private void setLetterSpacingDp(float value) {
      bitField0_ |= 0x00000020;
      letterSpacingDp_ = value;
    }
    /**
     * <pre>
     * Sets text letter spacing in dp. This indicates how much space will be
     * added between characters. Negative values tighten text, whereas positive
     * values increase space between letters. Also known as “tracking” in
     * typography, or “character spacing” in image editing tools.
     * </pre>
     *
     * <code>optional float letter_spacing_dp = 9;</code>
     */
    private void clearLetterSpacingDp() {
      bitField0_ = (bitField0_ & ~0x00000020);
      letterSpacingDp_ = 0F;
    }

    public static final int TYPEFACES_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.ProtobufList<java.lang.String> typefaces_;
    /**
     * <pre>
     * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
     * Multiple typefaces can be specified by the server, and the first one that
     * is available on the client will be used. If none match, or if no typefaces
     * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
     * typeface on each platform will be used. Each typeface’s name is a custom
     * string, and should be negotiated between server and client to ensure that
     * typefaces requested by the server are available on the client. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * This field is deprecated. Please use the typeface field that uses a
     * Typeface message instead.
     * </pre>
     *
     * <code>repeated string typefaces = 6 [deprecated = true];</code>
     * @return A list containing the typefaces.
     */
    @java.lang.Override
    @java.lang.Deprecated public java.util.List<java.lang.String> getTypefacesList() {
      return typefaces_;
    }
    /**
     * <pre>
     * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
     * Multiple typefaces can be specified by the server, and the first one that
     * is available on the client will be used. If none match, or if no typefaces
     * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
     * typeface on each platform will be used. Each typeface’s name is a custom
     * string, and should be negotiated between server and client to ensure that
     * typefaces requested by the server are available on the client. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * This field is deprecated. Please use the typeface field that uses a
     * Typeface message instead.
     * </pre>
     *
     * <code>repeated string typefaces = 6 [deprecated = true];</code>
     * @return The count of typefaces.
     */
    @java.lang.Override
    @java.lang.Deprecated public int getTypefacesCount() {
      return typefaces_.size();
    }
    /**
     * <pre>
     * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
     * Multiple typefaces can be specified by the server, and the first one that
     * is available on the client will be used. If none match, or if no typefaces
     * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
     * typeface on each platform will be used. Each typeface’s name is a custom
     * string, and should be negotiated between server and client to ensure that
     * typefaces requested by the server are available on the client. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * This field is deprecated. Please use the typeface field that uses a
     * Typeface message instead.
     * </pre>
     *
     * <code>repeated string typefaces = 6 [deprecated = true];</code>
     * @param index The index of the element to return.
     * @return The typefaces at the given index.
     */
    @java.lang.Override
    @java.lang.Deprecated public java.lang.String getTypefaces(int index) {
      return typefaces_.get(index);
    }
    /**
     * <pre>
     * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
     * Multiple typefaces can be specified by the server, and the first one that
     * is available on the client will be used. If none match, or if no typefaces
     * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
     * typeface on each platform will be used. Each typeface’s name is a custom
     * string, and should be negotiated between server and client to ensure that
     * typefaces requested by the server are available on the client. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * This field is deprecated. Please use the typeface field that uses a
     * Typeface message instead.
     * </pre>
     *
     * <code>repeated string typefaces = 6 [deprecated = true];</code>
     * @param index The index of the value to return.
     * @return The bytes of the typefaces at the given index.
     */
    @java.lang.Override
    @java.lang.Deprecated public com.google.protobuf.ByteString
        getTypefacesBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          typefaces_.get(index));
    }
    private void ensureTypefacesIsMutable() {
      com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          typefaces_;  if (!tmp.isModifiable()) {
        typefaces_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
     * Multiple typefaces can be specified by the server, and the first one that
     * is available on the client will be used. If none match, or if no typefaces
     * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
     * typeface on each platform will be used. Each typeface’s name is a custom
     * string, and should be negotiated between server and client to ensure that
     * typefaces requested by the server are available on the client. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * This field is deprecated. Please use the typeface field that uses a
     * Typeface message instead.
     * </pre>
     *
     * <code>repeated string typefaces = 6 [deprecated = true];</code>
     * @param index The index to set the value at.
     * @param value The typefaces to set.
     */
    private void setTypefaces(
        int index, java.lang.String value) {
      value.getClass();
  ensureTypefacesIsMutable();
      typefaces_.set(index, value);
    }
    /**
     * <pre>
     * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
     * Multiple typefaces can be specified by the server, and the first one that
     * is available on the client will be used. If none match, or if no typefaces
     * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
     * typeface on each platform will be used. Each typeface’s name is a custom
     * string, and should be negotiated between server and client to ensure that
     * typefaces requested by the server are available on the client. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * This field is deprecated. Please use the typeface field that uses a
     * Typeface message instead.
     * </pre>
     *
     * <code>repeated string typefaces = 6 [deprecated = true];</code>
     * @param value The typefaces to add.
     */
    private void addTypefaces(
        java.lang.String value) {
      value.getClass();
  ensureTypefacesIsMutable();
      typefaces_.add(value);
    }
    /**
     * <pre>
     * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
     * Multiple typefaces can be specified by the server, and the first one that
     * is available on the client will be used. If none match, or if no typefaces
     * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
     * typeface on each platform will be used. Each typeface’s name is a custom
     * string, and should be negotiated between server and client to ensure that
     * typefaces requested by the server are available on the client. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * This field is deprecated. Please use the typeface field that uses a
     * Typeface message instead.
     * </pre>
     *
     * <code>repeated string typefaces = 6 [deprecated = true];</code>
     * @param values The typefaces to add.
     */
    private void addAllTypefaces(
        java.lang.Iterable<java.lang.String> values) {
      ensureTypefacesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, typefaces_);
    }
    /**
     * <pre>
     * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
     * Multiple typefaces can be specified by the server, and the first one that
     * is available on the client will be used. If none match, or if no typefaces
     * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
     * typeface on each platform will be used. Each typeface’s name is a custom
     * string, and should be negotiated between server and client to ensure that
     * typefaces requested by the server are available on the client. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * This field is deprecated. Please use the typeface field that uses a
     * Typeface message instead.
     * </pre>
     *
     * <code>repeated string typefaces = 6 [deprecated = true];</code>
     */
    private void clearTypefaces() {
      typefaces_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
     * Multiple typefaces can be specified by the server, and the first one that
     * is available on the client will be used. If none match, or if no typefaces
     * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
     * typeface on each platform will be used. Each typeface’s name is a custom
     * string, and should be negotiated between server and client to ensure that
     * typefaces requested by the server are available on the client. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * This field is deprecated. Please use the typeface field that uses a
     * Typeface message instead.
     * </pre>
     *
     * <code>repeated string typefaces = 6 [deprecated = true];</code>
     * @param value The bytes of the typefaces to add.
     */
    private void addTypefacesBytes(
        com.google.protobuf.ByteString value) {
      ensureTypefacesIsMutable();
      typefaces_.add(value.toStringUtf8());
    }

    public static final int TYPEFACE_FIELD_NUMBER = 8;
    private com.google.protobuf.Internal.ProtobufList<org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface> typeface_;
    /**
     * <pre>
     * The typeface to use. Each typeface specified can either be a CommonTypeface
     * or a string naming a custom typeface. The CommonTypeface actually pairs
     * commonly-used typefaces with weights. The custom one can be used to
     * identify any typeface. Multiple typefaces can be specified by the server,
     * and the first one that is available on the client will be used. If none
     * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
     * raised, and the system default typeface on each platform will be used. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
     */
    @java.lang.Override
    public java.util.List<org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface> getTypefaceList() {
      return typeface_;
    }
    /**
     * <pre>
     * The typeface to use. Each typeface specified can either be a CommonTypeface
     * or a string naming a custom typeface. The CommonTypeface actually pairs
     * commonly-used typefaces with weights. The custom one can be used to
     * identify any typeface. Multiple typefaces can be specified by the server,
     * and the first one that is available on the client will be used. If none
     * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
     * raised, and the system default typeface on each platform will be used. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
     */
    public java.util.List<? extends org.chromium.components.feed.core.proto.ui.piet.StylesProto.TypefaceOrBuilder> 
        getTypefaceOrBuilderList() {
      return typeface_;
    }
    /**
     * <pre>
     * The typeface to use. Each typeface specified can either be a CommonTypeface
     * or a string naming a custom typeface. The CommonTypeface actually pairs
     * commonly-used typefaces with weights. The custom one can be used to
     * identify any typeface. Multiple typefaces can be specified by the server,
     * and the first one that is available on the client will be used. If none
     * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
     * raised, and the system default typeface on each platform will be used. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
     */
    @java.lang.Override
    public int getTypefaceCount() {
      return typeface_.size();
    }
    /**
     * <pre>
     * The typeface to use. Each typeface specified can either be a CommonTypeface
     * or a string naming a custom typeface. The CommonTypeface actually pairs
     * commonly-used typefaces with weights. The custom one can be used to
     * identify any typeface. Multiple typefaces can be specified by the server,
     * and the first one that is available on the client will be used. If none
     * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
     * raised, and the system default typeface on each platform will be used. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface getTypeface(int index) {
      return typeface_.get(index);
    }
    /**
     * <pre>
     * The typeface to use. Each typeface specified can either be a CommonTypeface
     * or a string naming a custom typeface. The CommonTypeface actually pairs
     * commonly-used typefaces with weights. The custom one can be used to
     * identify any typeface. Multiple typefaces can be specified by the server,
     * and the first one that is available on the client will be used. If none
     * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
     * raised, and the system default typeface on each platform will be used. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
     */
    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.TypefaceOrBuilder getTypefaceOrBuilder(
        int index) {
      return typeface_.get(index);
    }
    private void ensureTypefaceIsMutable() {
      com.google.protobuf.Internal.ProtobufList<org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface> tmp = typeface_;
      if (!tmp.isModifiable()) {
        typeface_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * The typeface to use. Each typeface specified can either be a CommonTypeface
     * or a string naming a custom typeface. The CommonTypeface actually pairs
     * commonly-used typefaces with weights. The custom one can be used to
     * identify any typeface. Multiple typefaces can be specified by the server,
     * and the first one that is available on the client will be used. If none
     * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
     * raised, and the system default typeface on each platform will be used. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
     */
    private void setTypeface(
        int index, org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface value) {
      value.getClass();
  ensureTypefaceIsMutable();
      typeface_.set(index, value);
    }
    /**
     * <pre>
     * The typeface to use. Each typeface specified can either be a CommonTypeface
     * or a string naming a custom typeface. The CommonTypeface actually pairs
     * commonly-used typefaces with weights. The custom one can be used to
     * identify any typeface. Multiple typefaces can be specified by the server,
     * and the first one that is available on the client will be used. If none
     * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
     * raised, and the system default typeface on each platform will be used. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
     */
    private void addTypeface(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface value) {
      value.getClass();
  ensureTypefaceIsMutable();
      typeface_.add(value);
    }
    /**
     * <pre>
     * The typeface to use. Each typeface specified can either be a CommonTypeface
     * or a string naming a custom typeface. The CommonTypeface actually pairs
     * commonly-used typefaces with weights. The custom one can be used to
     * identify any typeface. Multiple typefaces can be specified by the server,
     * and the first one that is available on the client will be used. If none
     * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
     * raised, and the system default typeface on each platform will be used. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
     */
    private void addTypeface(
        int index, org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface value) {
      value.getClass();
  ensureTypefaceIsMutable();
      typeface_.add(index, value);
    }
    /**
     * <pre>
     * The typeface to use. Each typeface specified can either be a CommonTypeface
     * or a string naming a custom typeface. The CommonTypeface actually pairs
     * commonly-used typefaces with weights. The custom one can be used to
     * identify any typeface. Multiple typefaces can be specified by the server,
     * and the first one that is available on the client will be used. If none
     * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
     * raised, and the system default typeface on each platform will be used. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
     */
    private void addAllTypeface(
        java.lang.Iterable<? extends org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface> values) {
      ensureTypefaceIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, typeface_);
    }
    /**
     * <pre>
     * The typeface to use. Each typeface specified can either be a CommonTypeface
     * or a string naming a custom typeface. The CommonTypeface actually pairs
     * commonly-used typefaces with weights. The custom one can be used to
     * identify any typeface. Multiple typefaces can be specified by the server,
     * and the first one that is available on the client will be used. If none
     * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
     * raised, and the system default typeface on each platform will be used. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
     */
    private void clearTypeface() {
      typeface_ = emptyProtobufList();
    }
    /**
     * <pre>
     * The typeface to use. Each typeface specified can either be a CommonTypeface
     * or a string naming a custom typeface. The CommonTypeface actually pairs
     * commonly-used typefaces with weights. The custom one can be used to
     * identify any typeface. Multiple typefaces can be specified by the server,
     * and the first one that is available on the client will be used. If none
     * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
     * raised, and the system default typeface on each platform will be used. Piet
     * provides no way to request that a particular font face be downloaded at
     * runtime; this should be done out-of-band if required.
     * </pre>
     *
     * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
     */
    private void removeTypeface(int index) {
      ensureTypefaceIsMutable();
      typeface_.remove(index);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Font definitions for text elements. In the interest of preserving
     * consistency, feature authors are highly encouraged to use Fonts as part of a
     * Style, instead of applying font definitions to individual elements.
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.piet.Font}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.Font)
        org.chromium.components.feed.core.proto.ui.piet.StylesProto.FontOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The size of the text in scaled pixels (sp). For devices with a scaling
       * factor of 1.0, this size is equivalent to display pixels.
       * Certain OS-level accessibility features allow users to increase/decrease
       * font size by a scaling factor (e.g. iOS &gt; Dynamic Type, or Android Settings
       * &gt; Font Size, or Android &gt; Accessibility &gt; Large Text). If the user has
       * turned on text scaling, the Host App should apply that scaling factor to
       * this numeric font size before rendering.
       * Note that other related metrics such as width and height are NOT
       * automatically scaled, but line height does scale.
       * </pre>
       *
       * <code>optional int32 size = 1 [default = 14];</code>
       * @return Whether the size field is set.
       */
      @java.lang.Override
      public boolean hasSize() {
        return instance.hasSize();
      }
      /**
       * <pre>
       * The size of the text in scaled pixels (sp). For devices with a scaling
       * factor of 1.0, this size is equivalent to display pixels.
       * Certain OS-level accessibility features allow users to increase/decrease
       * font size by a scaling factor (e.g. iOS &gt; Dynamic Type, or Android Settings
       * &gt; Font Size, or Android &gt; Accessibility &gt; Large Text). If the user has
       * turned on text scaling, the Host App should apply that scaling factor to
       * this numeric font size before rendering.
       * Note that other related metrics such as width and height are NOT
       * automatically scaled, but line height does scale.
       * </pre>
       *
       * <code>optional int32 size = 1 [default = 14];</code>
       * @return The size.
       */
      @java.lang.Override
      public int getSize() {
        return instance.getSize();
      }
      /**
       * <pre>
       * The size of the text in scaled pixels (sp). For devices with a scaling
       * factor of 1.0, this size is equivalent to display pixels.
       * Certain OS-level accessibility features allow users to increase/decrease
       * font size by a scaling factor (e.g. iOS &gt; Dynamic Type, or Android Settings
       * &gt; Font Size, or Android &gt; Accessibility &gt; Large Text). If the user has
       * turned on text scaling, the Host App should apply that scaling factor to
       * this numeric font size before rendering.
       * Note that other related metrics such as width and height are NOT
       * automatically scaled, but line height does scale.
       * </pre>
       *
       * <code>optional int32 size = 1 [default = 14];</code>
       * @param value The size to set.
       * @return This builder for chaining.
       */
      public Builder setSize(int value) {
        copyOnWrite();
        instance.setSize(value);
        return this;
      }
      /**
       * <pre>
       * The size of the text in scaled pixels (sp). For devices with a scaling
       * factor of 1.0, this size is equivalent to display pixels.
       * Certain OS-level accessibility features allow users to increase/decrease
       * font size by a scaling factor (e.g. iOS &gt; Dynamic Type, or Android Settings
       * &gt; Font Size, or Android &gt; Accessibility &gt; Large Text). If the user has
       * turned on text scaling, the Host App should apply that scaling factor to
       * this numeric font size before rendering.
       * Note that other related metrics such as width and height are NOT
       * automatically scaled, but line height does scale.
       * </pre>
       *
       * <code>optional int32 size = 1 [default = 14];</code>
       * @return This builder for chaining.
       */
      public Builder clearSize() {
        copyOnWrite();
        instance.clearSize();
        return this;
      }

      /**
       * <pre>
       * Line height, expressed as a multiple of size (hence the `_ratio` suffix).
       * The default value of 1.2 is intended to work well for most scenarios
       * without requiring feature authors to specify this explicitly.
       * Behavior matches that of CSS: extra space appears between lines and evenly
       * split above and below a block of text.
       * For example, if the ratio is 2.0 and the text is 12pt tall, there will be
       * 12pt of space between each pair of lines, and 6pt of space above and below
       * the block of text.
       * This field is deprecated. Please use line_height instead.
       * TODO Remove this field once the transition to line_height
       * is complete.
       * </pre>
       *
       * <code>optional float line_height_ratio = 2 [default = 1.2, deprecated = true];</code>
       * @return Whether the lineHeightRatio field is set.
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean hasLineHeightRatio() {
        return instance.hasLineHeightRatio();
      }
      /**
       * <pre>
       * Line height, expressed as a multiple of size (hence the `_ratio` suffix).
       * The default value of 1.2 is intended to work well for most scenarios
       * without requiring feature authors to specify this explicitly.
       * Behavior matches that of CSS: extra space appears between lines and evenly
       * split above and below a block of text.
       * For example, if the ratio is 2.0 and the text is 12pt tall, there will be
       * 12pt of space between each pair of lines, and 6pt of space above and below
       * the block of text.
       * This field is deprecated. Please use line_height instead.
       * TODO Remove this field once the transition to line_height
       * is complete.
       * </pre>
       *
       * <code>optional float line_height_ratio = 2 [default = 1.2, deprecated = true];</code>
       * @return The lineHeightRatio.
       */
      @java.lang.Override
      @java.lang.Deprecated public float getLineHeightRatio() {
        return instance.getLineHeightRatio();
      }
      /**
       * <pre>
       * Line height, expressed as a multiple of size (hence the `_ratio` suffix).
       * The default value of 1.2 is intended to work well for most scenarios
       * without requiring feature authors to specify this explicitly.
       * Behavior matches that of CSS: extra space appears between lines and evenly
       * split above and below a block of text.
       * For example, if the ratio is 2.0 and the text is 12pt tall, there will be
       * 12pt of space between each pair of lines, and 6pt of space above and below
       * the block of text.
       * This field is deprecated. Please use line_height instead.
       * TODO Remove this field once the transition to line_height
       * is complete.
       * </pre>
       *
       * <code>optional float line_height_ratio = 2 [default = 1.2, deprecated = true];</code>
       * @param value The lineHeightRatio to set.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder setLineHeightRatio(float value) {
        copyOnWrite();
        instance.setLineHeightRatio(value);
        return this;
      }
      /**
       * <pre>
       * Line height, expressed as a multiple of size (hence the `_ratio` suffix).
       * The default value of 1.2 is intended to work well for most scenarios
       * without requiring feature authors to specify this explicitly.
       * Behavior matches that of CSS: extra space appears between lines and evenly
       * split above and below a block of text.
       * For example, if the ratio is 2.0 and the text is 12pt tall, there will be
       * 12pt of space between each pair of lines, and 6pt of space above and below
       * the block of text.
       * This field is deprecated. Please use line_height instead.
       * TODO Remove this field once the transition to line_height
       * is complete.
       * </pre>
       *
       * <code>optional float line_height_ratio = 2 [default = 1.2, deprecated = true];</code>
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder clearLineHeightRatio() {
        copyOnWrite();
        instance.clearLineHeightRatio();
        return this;
      }

      /**
       * <pre>
       * Line height, expressed as scale-independent pixels (sp), meaning that it
       * scales with accessibility settings. If no line height is specified, the
       * default spacing for that font will be used. This is usually
       * approximately 1.2 times the height of the text, and should work well for
       * most platforms. Using the default does not guarantee the same height across
       * platforms; if that is needed, an explicit line height should be set.
       * Because line_height_ratio is deprecated, if both are specified, only
       * line_height will be used.
       * </pre>
       *
       * <code>optional uint32 line_height = 7;</code>
       * @return Whether the lineHeight field is set.
       */
      @java.lang.Override
      public boolean hasLineHeight() {
        return instance.hasLineHeight();
      }
      /**
       * <pre>
       * Line height, expressed as scale-independent pixels (sp), meaning that it
       * scales with accessibility settings. If no line height is specified, the
       * default spacing for that font will be used. This is usually
       * approximately 1.2 times the height of the text, and should work well for
       * most platforms. Using the default does not guarantee the same height across
       * platforms; if that is needed, an explicit line height should be set.
       * Because line_height_ratio is deprecated, if both are specified, only
       * line_height will be used.
       * </pre>
       *
       * <code>optional uint32 line_height = 7;</code>
       * @return The lineHeight.
       */
      @java.lang.Override
      public int getLineHeight() {
        return instance.getLineHeight();
      }
      /**
       * <pre>
       * Line height, expressed as scale-independent pixels (sp), meaning that it
       * scales with accessibility settings. If no line height is specified, the
       * default spacing for that font will be used. This is usually
       * approximately 1.2 times the height of the text, and should work well for
       * most platforms. Using the default does not guarantee the same height across
       * platforms; if that is needed, an explicit line height should be set.
       * Because line_height_ratio is deprecated, if both are specified, only
       * line_height will be used.
       * </pre>
       *
       * <code>optional uint32 line_height = 7;</code>
       * @param value The lineHeight to set.
       * @return This builder for chaining.
       */
      public Builder setLineHeight(int value) {
        copyOnWrite();
        instance.setLineHeight(value);
        return this;
      }
      /**
       * <pre>
       * Line height, expressed as scale-independent pixels (sp), meaning that it
       * scales with accessibility settings. If no line height is specified, the
       * default spacing for that font will be used. This is usually
       * approximately 1.2 times the height of the text, and should work well for
       * most platforms. Using the default does not guarantee the same height across
       * platforms; if that is needed, an explicit line height should be set.
       * Because line_height_ratio is deprecated, if both are specified, only
       * line_height will be used.
       * </pre>
       *
       * <code>optional uint32 line_height = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearLineHeight() {
        copyOnWrite();
        instance.clearLineHeight();
        return this;
      }

      /**
       * <pre>
       * The font weight (boldness) to apply to the text.
       * This field is deprecated. Please use a Typeface, and either choose a
       * CommonFont, which has the weight built in, or include the weight as part of
       * the style definition for a custom_font.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Font.FontWeight weight = 3 [default = REGULAR, deprecated = true];</code>
       * @return Whether the weight field is set.
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean hasWeight() {
        return instance.hasWeight();
      }
      /**
       * <pre>
       * The font weight (boldness) to apply to the text.
       * This field is deprecated. Please use a Typeface, and either choose a
       * CommonFont, which has the weight built in, or include the weight as part of
       * the style definition for a custom_font.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Font.FontWeight weight = 3 [default = REGULAR, deprecated = true];</code>
       * @return The weight.
       */
      @java.lang.Override
      @java.lang.Deprecated public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font.FontWeight getWeight() {
        return instance.getWeight();
      }
      /**
       * <pre>
       * The font weight (boldness) to apply to the text.
       * This field is deprecated. Please use a Typeface, and either choose a
       * CommonFont, which has the weight built in, or include the weight as part of
       * the style definition for a custom_font.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Font.FontWeight weight = 3 [default = REGULAR, deprecated = true];</code>
       * @param value The enum numeric value on the wire for weight to set.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder setWeight(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font.FontWeight value) {
        copyOnWrite();
        instance.setWeight(value);
        return this;
      }
      /**
       * <pre>
       * The font weight (boldness) to apply to the text.
       * This field is deprecated. Please use a Typeface, and either choose a
       * CommonFont, which has the weight built in, or include the weight as part of
       * the style definition for a custom_font.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Font.FontWeight weight = 3 [default = REGULAR, deprecated = true];</code>
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder clearWeight() {
        copyOnWrite();
        instance.clearWeight();
        return this;
      }

      /**
       * <pre>
       * Apply the italic style to the Font.
       * </pre>
       *
       * <code>optional bool italic = 4;</code>
       * @return Whether the italic field is set.
       */
      @java.lang.Override
      public boolean hasItalic() {
        return instance.hasItalic();
      }
      /**
       * <pre>
       * Apply the italic style to the Font.
       * </pre>
       *
       * <code>optional bool italic = 4;</code>
       * @return The italic.
       */
      @java.lang.Override
      public boolean getItalic() {
        return instance.getItalic();
      }
      /**
       * <pre>
       * Apply the italic style to the Font.
       * </pre>
       *
       * <code>optional bool italic = 4;</code>
       * @param value The italic to set.
       * @return This builder for chaining.
       */
      public Builder setItalic(boolean value) {
        copyOnWrite();
        instance.setItalic(value);
        return this;
      }
      /**
       * <pre>
       * Apply the italic style to the Font.
       * </pre>
       *
       * <code>optional bool italic = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearItalic() {
        copyOnWrite();
        instance.clearItalic();
        return this;
      }

      /**
       * <pre>
       * Sets text letter spacing in dp. This indicates how much space will be
       * added between characters. Negative values tighten text, whereas positive
       * values increase space between letters. Also known as “tracking” in
       * typography, or “character spacing” in image editing tools.
       * </pre>
       *
       * <code>optional float letter_spacing_dp = 9;</code>
       * @return Whether the letterSpacingDp field is set.
       */
      @java.lang.Override
      public boolean hasLetterSpacingDp() {
        return instance.hasLetterSpacingDp();
      }
      /**
       * <pre>
       * Sets text letter spacing in dp. This indicates how much space will be
       * added between characters. Negative values tighten text, whereas positive
       * values increase space between letters. Also known as “tracking” in
       * typography, or “character spacing” in image editing tools.
       * </pre>
       *
       * <code>optional float letter_spacing_dp = 9;</code>
       * @return The letterSpacingDp.
       */
      @java.lang.Override
      public float getLetterSpacingDp() {
        return instance.getLetterSpacingDp();
      }
      /**
       * <pre>
       * Sets text letter spacing in dp. This indicates how much space will be
       * added between characters. Negative values tighten text, whereas positive
       * values increase space between letters. Also known as “tracking” in
       * typography, or “character spacing” in image editing tools.
       * </pre>
       *
       * <code>optional float letter_spacing_dp = 9;</code>
       * @param value The letterSpacingDp to set.
       * @return This builder for chaining.
       */
      public Builder setLetterSpacingDp(float value) {
        copyOnWrite();
        instance.setLetterSpacingDp(value);
        return this;
      }
      /**
       * <pre>
       * Sets text letter spacing in dp. This indicates how much space will be
       * added between characters. Negative values tighten text, whereas positive
       * values increase space between letters. Also known as “tracking” in
       * typography, or “character spacing” in image editing tools.
       * </pre>
       *
       * <code>optional float letter_spacing_dp = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearLetterSpacingDp() {
        copyOnWrite();
        instance.clearLetterSpacingDp();
        return this;
      }

      /**
       * <pre>
       * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
       * Multiple typefaces can be specified by the server, and the first one that
       * is available on the client will be used. If none match, or if no typefaces
       * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
       * typeface on each platform will be used. Each typeface’s name is a custom
       * string, and should be negotiated between server and client to ensure that
       * typefaces requested by the server are available on the client. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * This field is deprecated. Please use the typeface field that uses a
       * Typeface message instead.
       * </pre>
       *
       * <code>repeated string typefaces = 6 [deprecated = true];</code>
       * @return A list containing the typefaces.
       */
      @java.lang.Override
      @java.lang.Deprecated public java.util.List<java.lang.String>
          getTypefacesList() {
        return java.util.Collections.unmodifiableList(
            instance.getTypefacesList());
      }
      /**
       * <pre>
       * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
       * Multiple typefaces can be specified by the server, and the first one that
       * is available on the client will be used. If none match, or if no typefaces
       * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
       * typeface on each platform will be used. Each typeface’s name is a custom
       * string, and should be negotiated between server and client to ensure that
       * typefaces requested by the server are available on the client. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * This field is deprecated. Please use the typeface field that uses a
       * Typeface message instead.
       * </pre>
       *
       * <code>repeated string typefaces = 6 [deprecated = true];</code>
       * @return The count of typefaces.
       */
      @java.lang.Override
      @java.lang.Deprecated public int getTypefacesCount() {
        return instance.getTypefacesCount();
      }
      /**
       * <pre>
       * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
       * Multiple typefaces can be specified by the server, and the first one that
       * is available on the client will be used. If none match, or if no typefaces
       * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
       * typeface on each platform will be used. Each typeface’s name is a custom
       * string, and should be negotiated between server and client to ensure that
       * typefaces requested by the server are available on the client. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * This field is deprecated. Please use the typeface field that uses a
       * Typeface message instead.
       * </pre>
       *
       * <code>repeated string typefaces = 6 [deprecated = true];</code>
       * @param index The index of the element to return.
       * @return The typefaces at the given index.
       */
      @java.lang.Override
      @java.lang.Deprecated public java.lang.String getTypefaces(int index) {
        return instance.getTypefaces(index);
      }
      /**
       * <pre>
       * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
       * Multiple typefaces can be specified by the server, and the first one that
       * is available on the client will be used. If none match, or if no typefaces
       * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
       * typeface on each platform will be used. Each typeface’s name is a custom
       * string, and should be negotiated between server and client to ensure that
       * typefaces requested by the server are available on the client. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * This field is deprecated. Please use the typeface field that uses a
       * Typeface message instead.
       * </pre>
       *
       * <code>repeated string typefaces = 6 [deprecated = true];</code>
       * @param index The index of the value to return.
       * @return The bytes of the typefaces at the given index.
       */
      @java.lang.Override
      @java.lang.Deprecated public com.google.protobuf.ByteString
          getTypefacesBytes(int index) {
        return instance.getTypefacesBytes(index);
      }
      /**
       * <pre>
       * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
       * Multiple typefaces can be specified by the server, and the first one that
       * is available on the client will be used. If none match, or if no typefaces
       * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
       * typeface on each platform will be used. Each typeface’s name is a custom
       * string, and should be negotiated between server and client to ensure that
       * typefaces requested by the server are available on the client. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * This field is deprecated. Please use the typeface field that uses a
       * Typeface message instead.
       * </pre>
       *
       * <code>repeated string typefaces = 6 [deprecated = true];</code>
       * @param index The index to set the value at.
       * @param value The typefaces to set.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder setTypefaces(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setTypefaces(index, value);
        return this;
      }
      /**
       * <pre>
       * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
       * Multiple typefaces can be specified by the server, and the first one that
       * is available on the client will be used. If none match, or if no typefaces
       * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
       * typeface on each platform will be used. Each typeface’s name is a custom
       * string, and should be negotiated between server and client to ensure that
       * typefaces requested by the server are available on the client. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * This field is deprecated. Please use the typeface field that uses a
       * Typeface message instead.
       * </pre>
       *
       * <code>repeated string typefaces = 6 [deprecated = true];</code>
       * @param value The typefaces to add.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder addTypefaces(
          java.lang.String value) {
        copyOnWrite();
        instance.addTypefaces(value);
        return this;
      }
      /**
       * <pre>
       * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
       * Multiple typefaces can be specified by the server, and the first one that
       * is available on the client will be used. If none match, or if no typefaces
       * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
       * typeface on each platform will be used. Each typeface’s name is a custom
       * string, and should be negotiated between server and client to ensure that
       * typefaces requested by the server are available on the client. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * This field is deprecated. Please use the typeface field that uses a
       * Typeface message instead.
       * </pre>
       *
       * <code>repeated string typefaces = 6 [deprecated = true];</code>
       * @param values The typefaces to add.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder addAllTypefaces(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllTypefaces(values);
        return this;
      }
      /**
       * <pre>
       * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
       * Multiple typefaces can be specified by the server, and the first one that
       * is available on the client will be used. If none match, or if no typefaces
       * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
       * typeface on each platform will be used. Each typeface’s name is a custom
       * string, and should be negotiated between server and client to ensure that
       * typefaces requested by the server are available on the client. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * This field is deprecated. Please use the typeface field that uses a
       * Typeface message instead.
       * </pre>
       *
       * <code>repeated string typefaces = 6 [deprecated = true];</code>
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder clearTypefaces() {
        copyOnWrite();
        instance.clearTypefaces();
        return this;
      }
      /**
       * <pre>
       * The typeface to use, e.g. "roboto", "open-sans", or "product-sans".
       * Multiple typefaces can be specified by the server, and the first one that
       * is available on the client will be used. If none match, or if no typefaces
       * are specified, then ERR_FONT_UNAVAILABLE is raised, and the system default
       * typeface on each platform will be used. Each typeface’s name is a custom
       * string, and should be negotiated between server and client to ensure that
       * typefaces requested by the server are available on the client. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * This field is deprecated. Please use the typeface field that uses a
       * Typeface message instead.
       * </pre>
       *
       * <code>repeated string typefaces = 6 [deprecated = true];</code>
       * @param value The bytes of the typefaces to add.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder addTypefacesBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addTypefacesBytes(value);
        return this;
      }

      /**
       * <pre>
       * The typeface to use. Each typeface specified can either be a CommonTypeface
       * or a string naming a custom typeface. The CommonTypeface actually pairs
       * commonly-used typefaces with weights. The custom one can be used to
       * identify any typeface. Multiple typefaces can be specified by the server,
       * and the first one that is available on the client will be used. If none
       * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
       * raised, and the system default typeface on each platform will be used. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
       */
      @java.lang.Override
      public java.util.List<org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface> getTypefaceList() {
        return java.util.Collections.unmodifiableList(
            instance.getTypefaceList());
      }
      /**
       * <pre>
       * The typeface to use. Each typeface specified can either be a CommonTypeface
       * or a string naming a custom typeface. The CommonTypeface actually pairs
       * commonly-used typefaces with weights. The custom one can be used to
       * identify any typeface. Multiple typefaces can be specified by the server,
       * and the first one that is available on the client will be used. If none
       * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
       * raised, and the system default typeface on each platform will be used. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
       */
      @java.lang.Override
      public int getTypefaceCount() {
        return instance.getTypefaceCount();
      }/**
       * <pre>
       * The typeface to use. Each typeface specified can either be a CommonTypeface
       * or a string naming a custom typeface. The CommonTypeface actually pairs
       * commonly-used typefaces with weights. The custom one can be used to
       * identify any typeface. Multiple typefaces can be specified by the server,
       * and the first one that is available on the client will be used. If none
       * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
       * raised, and the system default typeface on each platform will be used. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface getTypeface(int index) {
        return instance.getTypeface(index);
      }
      /**
       * <pre>
       * The typeface to use. Each typeface specified can either be a CommonTypeface
       * or a string naming a custom typeface. The CommonTypeface actually pairs
       * commonly-used typefaces with weights. The custom one can be used to
       * identify any typeface. Multiple typefaces can be specified by the server,
       * and the first one that is available on the client will be used. If none
       * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
       * raised, and the system default typeface on each platform will be used. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
       */
      public Builder setTypeface(
          int index, org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface value) {
        copyOnWrite();
        instance.setTypeface(index, value);
        return this;
      }
      /**
       * <pre>
       * The typeface to use. Each typeface specified can either be a CommonTypeface
       * or a string naming a custom typeface. The CommonTypeface actually pairs
       * commonly-used typefaces with weights. The custom one can be used to
       * identify any typeface. Multiple typefaces can be specified by the server,
       * and the first one that is available on the client will be used. If none
       * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
       * raised, and the system default typeface on each platform will be used. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
       */
      public Builder setTypeface(
          int index, org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface.Builder builderForValue) {
        copyOnWrite();
        instance.setTypeface(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The typeface to use. Each typeface specified can either be a CommonTypeface
       * or a string naming a custom typeface. The CommonTypeface actually pairs
       * commonly-used typefaces with weights. The custom one can be used to
       * identify any typeface. Multiple typefaces can be specified by the server,
       * and the first one that is available on the client will be used. If none
       * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
       * raised, and the system default typeface on each platform will be used. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
       */
      public Builder addTypeface(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface value) {
        copyOnWrite();
        instance.addTypeface(value);
        return this;
      }
      /**
       * <pre>
       * The typeface to use. Each typeface specified can either be a CommonTypeface
       * or a string naming a custom typeface. The CommonTypeface actually pairs
       * commonly-used typefaces with weights. The custom one can be used to
       * identify any typeface. Multiple typefaces can be specified by the server,
       * and the first one that is available on the client will be used. If none
       * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
       * raised, and the system default typeface on each platform will be used. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
       */
      public Builder addTypeface(
          int index, org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface value) {
        copyOnWrite();
        instance.addTypeface(index, value);
        return this;
      }
      /**
       * <pre>
       * The typeface to use. Each typeface specified can either be a CommonTypeface
       * or a string naming a custom typeface. The CommonTypeface actually pairs
       * commonly-used typefaces with weights. The custom one can be used to
       * identify any typeface. Multiple typefaces can be specified by the server,
       * and the first one that is available on the client will be used. If none
       * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
       * raised, and the system default typeface on each platform will be used. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
       */
      public Builder addTypeface(
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface.Builder builderForValue) {
        copyOnWrite();
        instance.addTypeface(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The typeface to use. Each typeface specified can either be a CommonTypeface
       * or a string naming a custom typeface. The CommonTypeface actually pairs
       * commonly-used typefaces with weights. The custom one can be used to
       * identify any typeface. Multiple typefaces can be specified by the server,
       * and the first one that is available on the client will be used. If none
       * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
       * raised, and the system default typeface on each platform will be used. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
       */
      public Builder addTypeface(
          int index, org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface.Builder builderForValue) {
        copyOnWrite();
        instance.addTypeface(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The typeface to use. Each typeface specified can either be a CommonTypeface
       * or a string naming a custom typeface. The CommonTypeface actually pairs
       * commonly-used typefaces with weights. The custom one can be used to
       * identify any typeface. Multiple typefaces can be specified by the server,
       * and the first one that is available on the client will be used. If none
       * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
       * raised, and the system default typeface on each platform will be used. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
       */
      public Builder addAllTypeface(
          java.lang.Iterable<? extends org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface> values) {
        copyOnWrite();
        instance.addAllTypeface(values);
        return this;
      }
      /**
       * <pre>
       * The typeface to use. Each typeface specified can either be a CommonTypeface
       * or a string naming a custom typeface. The CommonTypeface actually pairs
       * commonly-used typefaces with weights. The custom one can be used to
       * identify any typeface. Multiple typefaces can be specified by the server,
       * and the first one that is available on the client will be used. If none
       * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
       * raised, and the system default typeface on each platform will be used. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
       */
      public Builder clearTypeface() {
        copyOnWrite();
        instance.clearTypeface();
        return this;
      }
      /**
       * <pre>
       * The typeface to use. Each typeface specified can either be a CommonTypeface
       * or a string naming a custom typeface. The CommonTypeface actually pairs
       * commonly-used typefaces with weights. The custom one can be used to
       * identify any typeface. Multiple typefaces can be specified by the server,
       * and the first one that is available on the client will be used. If none
       * match, or if no typefaces are specified, then ERR_FONT_UNAVAILABLE is
       * raised, and the system default typeface on each platform will be used. Piet
       * provides no way to request that a particular font face be downloaded at
       * runtime; this should be done out-of-band if required.
       * </pre>
       *
       * <code>repeated .components.feed.core.proto.ui.piet.Typeface typeface = 8;</code>
       */
      public Builder removeTypeface(int index) {
        copyOnWrite();
        instance.removeTypeface(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.Font)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "size_",
              "lineHeightRatio_",
              "weight_",
              org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font.FontWeight.internalGetVerifier(),
              "italic_",
              "typefaces_",
              "lineHeight_",
              "typeface_",
              org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface.class,
              "letterSpacingDp_",
            };
            java.lang.String info =
                "\u0001\b\u0000\u0001\u0001\t\b\u0000\u0002\u0000\u0001\u1004\u0000\u0002\u1001\u0001" +
                "\u0003\u100c\u0003\u0004\u1007\u0004\u0006\u001a\u0007\u100b\u0002\b\u001b\t\u1001" +
                "\u0005";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.Font)
    private static final org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font DEFAULT_INSTANCE;
    static {
      Font defaultInstance = new Font();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Font.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Font getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Font> PARSER;

    public static com.google.protobuf.Parser<Font> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TypefaceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.Typeface)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Commonly used typefaces (with weights).
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Typeface.CommonTypeface common_typeface = 1;</code>
     * @return Whether the commonTypeface field is set.
     */
    boolean hasCommonTypeface();
    /**
     * <pre>
     * Commonly used typefaces (with weights).
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Typeface.CommonTypeface common_typeface = 1;</code>
     * @return The commonTypeface.
     */
    org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface.CommonTypeface getCommonTypeface();

    /**
     * <pre>
     * Any typeface needed that is not included in CommonTypeface should be
     * specified as a string here. Piet does not provide these typefaces, or any
     * way to download them at runtime. The host is meant to perform the lookup
     * and provide the correct typeface to Piet for rendering. If
     * platform-specific typefaces are needed, the string can be an identifier
     * (i.e. "group_of_typefaces_for_feature"), and each platform can look up
     * what that translates to. Piet will NOT parse the custom_typeface string
     * to set attributes such as font weight.
     * </pre>
     *
     * <code>string custom_typeface = 2;</code>
     * @return Whether the customTypeface field is set.
     */
    boolean hasCustomTypeface();
    /**
     * <pre>
     * Any typeface needed that is not included in CommonTypeface should be
     * specified as a string here. Piet does not provide these typefaces, or any
     * way to download them at runtime. The host is meant to perform the lookup
     * and provide the correct typeface to Piet for rendering. If
     * platform-specific typefaces are needed, the string can be an identifier
     * (i.e. "group_of_typefaces_for_feature"), and each platform can look up
     * what that translates to. Piet will NOT parse the custom_typeface string
     * to set attributes such as font weight.
     * </pre>
     *
     * <code>string custom_typeface = 2;</code>
     * @return The customTypeface.
     */
    java.lang.String getCustomTypeface();
    /**
     * <pre>
     * Any typeface needed that is not included in CommonTypeface should be
     * specified as a string here. Piet does not provide these typefaces, or any
     * way to download them at runtime. The host is meant to perform the lookup
     * and provide the correct typeface to Piet for rendering. If
     * platform-specific typefaces are needed, the string can be an identifier
     * (i.e. "group_of_typefaces_for_feature"), and each platform can look up
     * what that translates to. Piet will NOT parse the custom_typeface string
     * to set attributes such as font weight.
     * </pre>
     *
     * <code>string custom_typeface = 2;</code>
     * @return The bytes for customTypeface.
     */
    com.google.protobuf.ByteString
        getCustomTypefaceBytes();

    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface.TypefaceSpecifierCase getTypefaceSpecifierCase();
  }
  /**
   * Protobuf type {@code components.feed.core.proto.ui.piet.Typeface}
   */
  public  static final class Typeface extends
      com.google.protobuf.GeneratedMessageLite<
          Typeface, Typeface.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.Typeface)
      TypefaceOrBuilder {
    private Typeface() {
    }
    /**
     * <pre>
     * Defines a commonly-used typeface, paired with a weight. "PLATFORM_DEFAULT_"
     * uses the system default typeface on each platform, and sets the weight.
     * Google Sans is a cross-platform typeface that should render well on all
     * platforms. Note that Google Sans will only work if the client has bundled
     * it in properly.
     * </pre>
     *
     * Protobuf enum {@code components.feed.core.proto.ui.piet.Typeface.CommonTypeface}
     */
    public enum CommonTypeface
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       * The same as PLATFORM_DEFAULT_REGULAR.
       * </pre>
       *
       * <code>UNDEFINED = 0;</code>
       */
      UNDEFINED(0),
      /**
       * <code>PLATFORM_DEFAULT_LIGHT = 1;</code>
       */
      PLATFORM_DEFAULT_LIGHT(1),
      /**
       * <code>PLATFORM_DEFAULT_REGULAR = 2;</code>
       */
      PLATFORM_DEFAULT_REGULAR(2),
      /**
       * <code>PLATFORM_DEFAULT_MEDIUM = 3;</code>
       */
      PLATFORM_DEFAULT_MEDIUM(3),
      /**
       * <code>GOOGLE_SANS_REGULAR = 4;</code>
       */
      GOOGLE_SANS_REGULAR(4),
      /**
       * <code>GOOGLE_SANS_MEDIUM = 5;</code>
       */
      GOOGLE_SANS_MEDIUM(5),
      ;

      /**
       * <pre>
       * The same as PLATFORM_DEFAULT_REGULAR.
       * </pre>
       *
       * <code>UNDEFINED = 0;</code>
       */
      public static final int UNDEFINED_VALUE = 0;
      /**
       * <code>PLATFORM_DEFAULT_LIGHT = 1;</code>
       */
      public static final int PLATFORM_DEFAULT_LIGHT_VALUE = 1;
      /**
       * <code>PLATFORM_DEFAULT_REGULAR = 2;</code>
       */
      public static final int PLATFORM_DEFAULT_REGULAR_VALUE = 2;
      /**
       * <code>PLATFORM_DEFAULT_MEDIUM = 3;</code>
       */
      public static final int PLATFORM_DEFAULT_MEDIUM_VALUE = 3;
      /**
       * <code>GOOGLE_SANS_REGULAR = 4;</code>
       */
      public static final int GOOGLE_SANS_REGULAR_VALUE = 4;
      /**
       * <code>GOOGLE_SANS_MEDIUM = 5;</code>
       */
      public static final int GOOGLE_SANS_MEDIUM_VALUE = 5;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static CommonTypeface valueOf(int value) {
        return forNumber(value);
      }

      public static CommonTypeface forNumber(int value) {
        switch (value) {
          case 0: return UNDEFINED;
          case 1: return PLATFORM_DEFAULT_LIGHT;
          case 2: return PLATFORM_DEFAULT_REGULAR;
          case 3: return PLATFORM_DEFAULT_MEDIUM;
          case 4: return GOOGLE_SANS_REGULAR;
          case 5: return GOOGLE_SANS_MEDIUM;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CommonTypeface>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          CommonTypeface> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CommonTypeface>() {
              @java.lang.Override
              public CommonTypeface findValueByNumber(int number) {
                return CommonTypeface.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return CommonTypefaceVerifier.INSTANCE;
      }

      private static final class CommonTypefaceVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new CommonTypefaceVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return CommonTypeface.forNumber(number) != null;
              }
            };

      private final int value;

      private CommonTypeface(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:components.feed.core.proto.ui.piet.Typeface.CommonTypeface)
    }

    private int bitField0_;
    private int typefaceSpecifierCase_ = 0;
    private java.lang.Object typefaceSpecifier_;
    public enum TypefaceSpecifierCase {
      COMMON_TYPEFACE(1),
      CUSTOM_TYPEFACE(2),
      TYPEFACESPECIFIER_NOT_SET(0);
      private final int value;
      private TypefaceSpecifierCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TypefaceSpecifierCase valueOf(int value) {
        return forNumber(value);
      }

      public static TypefaceSpecifierCase forNumber(int value) {
        switch (value) {
          case 1: return COMMON_TYPEFACE;
          case 2: return CUSTOM_TYPEFACE;
          case 0: return TYPEFACESPECIFIER_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @java.lang.Override
    public TypefaceSpecifierCase
    getTypefaceSpecifierCase() {
      return TypefaceSpecifierCase.forNumber(
          typefaceSpecifierCase_);
    }

    private void clearTypefaceSpecifier() {
      typefaceSpecifierCase_ = 0;
      typefaceSpecifier_ = null;
    }

    public static final int COMMON_TYPEFACE_FIELD_NUMBER = 1;
    /**
     * <pre>
     * Commonly used typefaces (with weights).
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Typeface.CommonTypeface common_typeface = 1;</code>
     * @return Whether the commonTypeface field is set.
     */
    @java.lang.Override
    public boolean hasCommonTypeface() {
      return typefaceSpecifierCase_ == 1;
    }
    /**
     * <pre>
     * Commonly used typefaces (with weights).
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Typeface.CommonTypeface common_typeface = 1;</code>
     * @return The commonTypeface.
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface.CommonTypeface getCommonTypeface() {
      if (typefaceSpecifierCase_ == 1) {
        org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface.CommonTypeface result = org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface.CommonTypeface.forNumber((java.lang.Integer) typefaceSpecifier_);
        return result == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface.CommonTypeface.UNDEFINED : result;
      }
      return org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface.CommonTypeface.UNDEFINED;
    }
    /**
     * <pre>
     * Commonly used typefaces (with weights).
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Typeface.CommonTypeface common_typeface = 1;</code>
     * @param value The commonTypeface to set.
     */
    private void setCommonTypeface(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface.CommonTypeface value) {
      typefaceSpecifier_ = value.getNumber();
      typefaceSpecifierCase_ = 1;
    }
    /**
     * <pre>
     * Commonly used typefaces (with weights).
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Typeface.CommonTypeface common_typeface = 1;</code>
     */
    private void clearCommonTypeface() {
      if (typefaceSpecifierCase_ == 1) {
        typefaceSpecifierCase_ = 0;
        typefaceSpecifier_ = null;
      }
    }

    public static final int CUSTOM_TYPEFACE_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Any typeface needed that is not included in CommonTypeface should be
     * specified as a string here. Piet does not provide these typefaces, or any
     * way to download them at runtime. The host is meant to perform the lookup
     * and provide the correct typeface to Piet for rendering. If
     * platform-specific typefaces are needed, the string can be an identifier
     * (i.e. "group_of_typefaces_for_feature"), and each platform can look up
     * what that translates to. Piet will NOT parse the custom_typeface string
     * to set attributes such as font weight.
     * </pre>
     *
     * <code>string custom_typeface = 2;</code>
     * @return Whether the customTypeface field is set.
     */
    @java.lang.Override
    public boolean hasCustomTypeface() {
      return typefaceSpecifierCase_ == 2;
    }
    /**
     * <pre>
     * Any typeface needed that is not included in CommonTypeface should be
     * specified as a string here. Piet does not provide these typefaces, or any
     * way to download them at runtime. The host is meant to perform the lookup
     * and provide the correct typeface to Piet for rendering. If
     * platform-specific typefaces are needed, the string can be an identifier
     * (i.e. "group_of_typefaces_for_feature"), and each platform can look up
     * what that translates to. Piet will NOT parse the custom_typeface string
     * to set attributes such as font weight.
     * </pre>
     *
     * <code>string custom_typeface = 2;</code>
     * @return The customTypeface.
     */
    @java.lang.Override
    public java.lang.String getCustomTypeface() {
      java.lang.String ref = "";
      if (typefaceSpecifierCase_ == 2) {
        ref = (java.lang.String) typefaceSpecifier_;
      }
      return ref;
    }
    /**
     * <pre>
     * Any typeface needed that is not included in CommonTypeface should be
     * specified as a string here. Piet does not provide these typefaces, or any
     * way to download them at runtime. The host is meant to perform the lookup
     * and provide the correct typeface to Piet for rendering. If
     * platform-specific typefaces are needed, the string can be an identifier
     * (i.e. "group_of_typefaces_for_feature"), and each platform can look up
     * what that translates to. Piet will NOT parse the custom_typeface string
     * to set attributes such as font weight.
     * </pre>
     *
     * <code>string custom_typeface = 2;</code>
     * @return The bytes for customTypeface.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCustomTypefaceBytes() {
      java.lang.String ref = "";
      if (typefaceSpecifierCase_ == 2) {
        ref = (java.lang.String) typefaceSpecifier_;
      }
      return com.google.protobuf.ByteString.copyFromUtf8(ref);
    }
    /**
     * <pre>
     * Any typeface needed that is not included in CommonTypeface should be
     * specified as a string here. Piet does not provide these typefaces, or any
     * way to download them at runtime. The host is meant to perform the lookup
     * and provide the correct typeface to Piet for rendering. If
     * platform-specific typefaces are needed, the string can be an identifier
     * (i.e. "group_of_typefaces_for_feature"), and each platform can look up
     * what that translates to. Piet will NOT parse the custom_typeface string
     * to set attributes such as font weight.
     * </pre>
     *
     * <code>string custom_typeface = 2;</code>
     * @param value The customTypeface to set.
     */
    private void setCustomTypeface(
        java.lang.String value) {
      value.getClass();
  typefaceSpecifierCase_ = 2;
      typefaceSpecifier_ = value;
    }
    /**
     * <pre>
     * Any typeface needed that is not included in CommonTypeface should be
     * specified as a string here. Piet does not provide these typefaces, or any
     * way to download them at runtime. The host is meant to perform the lookup
     * and provide the correct typeface to Piet for rendering. If
     * platform-specific typefaces are needed, the string can be an identifier
     * (i.e. "group_of_typefaces_for_feature"), and each platform can look up
     * what that translates to. Piet will NOT parse the custom_typeface string
     * to set attributes such as font weight.
     * </pre>
     *
     * <code>string custom_typeface = 2;</code>
     */
    private void clearCustomTypeface() {
      if (typefaceSpecifierCase_ == 2) {
        typefaceSpecifierCase_ = 0;
        typefaceSpecifier_ = null;
      }
    }
    /**
     * <pre>
     * Any typeface needed that is not included in CommonTypeface should be
     * specified as a string here. Piet does not provide these typefaces, or any
     * way to download them at runtime. The host is meant to perform the lookup
     * and provide the correct typeface to Piet for rendering. If
     * platform-specific typefaces are needed, the string can be an identifier
     * (i.e. "group_of_typefaces_for_feature"), and each platform can look up
     * what that translates to. Piet will NOT parse the custom_typeface string
     * to set attributes such as font weight.
     * </pre>
     *
     * <code>string custom_typeface = 2;</code>
     * @param value The bytes for customTypeface to set.
     */
    private void setCustomTypefaceBytes(
        com.google.protobuf.ByteString value) {
      typefaceSpecifier_ = value.toStringUtf8();
      typefaceSpecifierCase_ = 2;
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code components.feed.core.proto.ui.piet.Typeface}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.Typeface)
        org.chromium.components.feed.core.proto.ui.piet.StylesProto.TypefaceOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      @java.lang.Override
      public TypefaceSpecifierCase
          getTypefaceSpecifierCase() {
        return instance.getTypefaceSpecifierCase();
      }

      public Builder clearTypefaceSpecifier() {
        copyOnWrite();
        instance.clearTypefaceSpecifier();
        return this;
      }


      /**
       * <pre>
       * Commonly used typefaces (with weights).
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Typeface.CommonTypeface common_typeface = 1;</code>
       * @return Whether the commonTypeface field is set.
       */
      @java.lang.Override
      public boolean hasCommonTypeface() {
        return instance.hasCommonTypeface();
      }
      /**
       * <pre>
       * Commonly used typefaces (with weights).
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Typeface.CommonTypeface common_typeface = 1;</code>
       * @return The commonTypeface.
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface.CommonTypeface getCommonTypeface() {
        return instance.getCommonTypeface();
      }
      /**
       * <pre>
       * Commonly used typefaces (with weights).
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Typeface.CommonTypeface common_typeface = 1;</code>
       * @param value The commonTypeface to set.
       * @return This builder for chaining.
       */
      public Builder setCommonTypeface(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface.CommonTypeface value) {
        copyOnWrite();
        instance.setCommonTypeface(value);
        return this;
      }
      /**
       * <pre>
       * Commonly used typefaces (with weights).
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Typeface.CommonTypeface common_typeface = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearCommonTypeface() {
        copyOnWrite();
        instance.clearCommonTypeface();
        return this;
      }

      /**
       * <pre>
       * Any typeface needed that is not included in CommonTypeface should be
       * specified as a string here. Piet does not provide these typefaces, or any
       * way to download them at runtime. The host is meant to perform the lookup
       * and provide the correct typeface to Piet for rendering. If
       * platform-specific typefaces are needed, the string can be an identifier
       * (i.e. "group_of_typefaces_for_feature"), and each platform can look up
       * what that translates to. Piet will NOT parse the custom_typeface string
       * to set attributes such as font weight.
       * </pre>
       *
       * <code>string custom_typeface = 2;</code>
       * @return Whether the customTypeface field is set.
       */
      @java.lang.Override
      public boolean hasCustomTypeface() {
        return instance.hasCustomTypeface();
      }
      /**
       * <pre>
       * Any typeface needed that is not included in CommonTypeface should be
       * specified as a string here. Piet does not provide these typefaces, or any
       * way to download them at runtime. The host is meant to perform the lookup
       * and provide the correct typeface to Piet for rendering. If
       * platform-specific typefaces are needed, the string can be an identifier
       * (i.e. "group_of_typefaces_for_feature"), and each platform can look up
       * what that translates to. Piet will NOT parse the custom_typeface string
       * to set attributes such as font weight.
       * </pre>
       *
       * <code>string custom_typeface = 2;</code>
       * @return The customTypeface.
       */
      @java.lang.Override
      public java.lang.String getCustomTypeface() {
        return instance.getCustomTypeface();
      }
      /**
       * <pre>
       * Any typeface needed that is not included in CommonTypeface should be
       * specified as a string here. Piet does not provide these typefaces, or any
       * way to download them at runtime. The host is meant to perform the lookup
       * and provide the correct typeface to Piet for rendering. If
       * platform-specific typefaces are needed, the string can be an identifier
       * (i.e. "group_of_typefaces_for_feature"), and each platform can look up
       * what that translates to. Piet will NOT parse the custom_typeface string
       * to set attributes such as font weight.
       * </pre>
       *
       * <code>string custom_typeface = 2;</code>
       * @return The bytes for customTypeface.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getCustomTypefaceBytes() {
        return instance.getCustomTypefaceBytes();
      }
      /**
       * <pre>
       * Any typeface needed that is not included in CommonTypeface should be
       * specified as a string here. Piet does not provide these typefaces, or any
       * way to download them at runtime. The host is meant to perform the lookup
       * and provide the correct typeface to Piet for rendering. If
       * platform-specific typefaces are needed, the string can be an identifier
       * (i.e. "group_of_typefaces_for_feature"), and each platform can look up
       * what that translates to. Piet will NOT parse the custom_typeface string
       * to set attributes such as font weight.
       * </pre>
       *
       * <code>string custom_typeface = 2;</code>
       * @param value The customTypeface to set.
       * @return This builder for chaining.
       */
      public Builder setCustomTypeface(
          java.lang.String value) {
        copyOnWrite();
        instance.setCustomTypeface(value);
        return this;
      }
      /**
       * <pre>
       * Any typeface needed that is not included in CommonTypeface should be
       * specified as a string here. Piet does not provide these typefaces, or any
       * way to download them at runtime. The host is meant to perform the lookup
       * and provide the correct typeface to Piet for rendering. If
       * platform-specific typefaces are needed, the string can be an identifier
       * (i.e. "group_of_typefaces_for_feature"), and each platform can look up
       * what that translates to. Piet will NOT parse the custom_typeface string
       * to set attributes such as font weight.
       * </pre>
       *
       * <code>string custom_typeface = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCustomTypeface() {
        copyOnWrite();
        instance.clearCustomTypeface();
        return this;
      }
      /**
       * <pre>
       * Any typeface needed that is not included in CommonTypeface should be
       * specified as a string here. Piet does not provide these typefaces, or any
       * way to download them at runtime. The host is meant to perform the lookup
       * and provide the correct typeface to Piet for rendering. If
       * platform-specific typefaces are needed, the string can be an identifier
       * (i.e. "group_of_typefaces_for_feature"), and each platform can look up
       * what that translates to. Piet will NOT parse the custom_typeface string
       * to set attributes such as font weight.
       * </pre>
       *
       * <code>string custom_typeface = 2;</code>
       * @param value The bytes for customTypeface to set.
       * @return This builder for chaining.
       */
      public Builder setCustomTypefaceBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setCustomTypefaceBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.Typeface)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "typefaceSpecifier_",
              "typefaceSpecifierCase_",
              "bitField0_",
              org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface.CommonTypeface.internalGetVerifier(),
            };
            java.lang.String info =
                "\u0001\u0002\u0001\u0001\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u103f\u0000\u0002" +
                "\u103b\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.Typeface)
    private static final org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface DEFAULT_INSTANCE;
    static {
      Typeface defaultInstance = new Typeface();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Typeface.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Typeface getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Typeface> PARSER;

    public static com.google.protobuf.Parser<Typeface> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  @java.lang.Deprecated public interface BorderOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.Border)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                Border, Border.Builder> {

    /**
     * <pre>
     * The color of the border.
     * </pre>
     *
     * <code>optional fixed32 color = 1;</code>
     * @return Whether the color field is set.
     */
    boolean hasColor();
    /**
     * <pre>
     * The color of the border.
     * </pre>
     *
     * <code>optional fixed32 color = 1;</code>
     * @return The color.
     */
    int getColor();

    /**
     * <pre>
     * The thickness of the border in DP.
     * </pre>
     *
     * <code>optional int32 width = 2;</code>
     * @return Whether the width field is set.
     */
    boolean hasWidth();
    /**
     * <pre>
     * The thickness of the border in DP.
     * </pre>
     *
     * <code>optional int32 width = 2;</code>
     * @return The width.
     */
    int getWidth();
  }
  /**
   * <pre>
   * Definition of a Border.
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.piet.Border}
   */
  @java.lang.Deprecated public  static final class Border extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        Border, Border.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.Border)
      BorderOrBuilder {
    private Border() {
    }
    private int bitField0_;
    public static final int COLOR_FIELD_NUMBER = 1;
    private int color_;
    /**
     * <pre>
     * The color of the border.
     * </pre>
     *
     * <code>optional fixed32 color = 1;</code>
     * @return Whether the color field is set.
     */
    @java.lang.Override
    public boolean hasColor() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The color of the border.
     * </pre>
     *
     * <code>optional fixed32 color = 1;</code>
     * @return The color.
     */
    @java.lang.Override
    public int getColor() {
      return color_;
    }
    /**
     * <pre>
     * The color of the border.
     * </pre>
     *
     * <code>optional fixed32 color = 1;</code>
     * @param value The color to set.
     */
    private void setColor(int value) {
      bitField0_ |= 0x00000001;
      color_ = value;
    }
    /**
     * <pre>
     * The color of the border.
     * </pre>
     *
     * <code>optional fixed32 color = 1;</code>
     */
    private void clearColor() {
      bitField0_ = (bitField0_ & ~0x00000001);
      color_ = 0;
    }

    public static final int WIDTH_FIELD_NUMBER = 2;
    private int width_;
    /**
     * <pre>
     * The thickness of the border in DP.
     * </pre>
     *
     * <code>optional int32 width = 2;</code>
     * @return Whether the width field is set.
     */
    @java.lang.Override
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The thickness of the border in DP.
     * </pre>
     *
     * <code>optional int32 width = 2;</code>
     * @return The width.
     */
    @java.lang.Override
    public int getWidth() {
      return width_;
    }
    /**
     * <pre>
     * The thickness of the border in DP.
     * </pre>
     *
     * <code>optional int32 width = 2;</code>
     * @param value The width to set.
     */
    private void setWidth(int value) {
      bitField0_ |= 0x00000002;
      width_ = value;
    }
    /**
     * <pre>
     * The thickness of the border in DP.
     * </pre>
     *
     * <code>optional int32 width = 2;</code>
     */
    private void clearWidth() {
      bitField0_ = (bitField0_ & ~0x00000002);
      width_ = 0;
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Definition of a Border.
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.piet.Border}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.Border)
        org.chromium.components.feed.core.proto.ui.piet.StylesProto.BorderOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The color of the border.
       * </pre>
       *
       * <code>optional fixed32 color = 1;</code>
       * @return Whether the color field is set.
       */
      @java.lang.Override
      public boolean hasColor() {
        return instance.hasColor();
      }
      /**
       * <pre>
       * The color of the border.
       * </pre>
       *
       * <code>optional fixed32 color = 1;</code>
       * @return The color.
       */
      @java.lang.Override
      public int getColor() {
        return instance.getColor();
      }
      /**
       * <pre>
       * The color of the border.
       * </pre>
       *
       * <code>optional fixed32 color = 1;</code>
       * @param value The color to set.
       * @return This builder for chaining.
       */
      public Builder setColor(int value) {
        copyOnWrite();
        instance.setColor(value);
        return this;
      }
      /**
       * <pre>
       * The color of the border.
       * </pre>
       *
       * <code>optional fixed32 color = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearColor() {
        copyOnWrite();
        instance.clearColor();
        return this;
      }

      /**
       * <pre>
       * The thickness of the border in DP.
       * </pre>
       *
       * <code>optional int32 width = 2;</code>
       * @return Whether the width field is set.
       */
      @java.lang.Override
      public boolean hasWidth() {
        return instance.hasWidth();
      }
      /**
       * <pre>
       * The thickness of the border in DP.
       * </pre>
       *
       * <code>optional int32 width = 2;</code>
       * @return The width.
       */
      @java.lang.Override
      public int getWidth() {
        return instance.getWidth();
      }
      /**
       * <pre>
       * The thickness of the border in DP.
       * </pre>
       *
       * <code>optional int32 width = 2;</code>
       * @param value The width to set.
       * @return This builder for chaining.
       */
      public Builder setWidth(int value) {
        copyOnWrite();
        instance.setWidth(value);
        return this;
      }
      /**
       * <pre>
       * The thickness of the border in DP.
       * </pre>
       *
       * <code>optional int32 width = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearWidth() {
        copyOnWrite();
        instance.clearWidth();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.Border)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "color_",
              "width_",
            };
            java.lang.String info =
                "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u1006\u0000\u0002" +
                "\u1004\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.Border)
    private static final org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border DEFAULT_INSTANCE;
    static {
      Border defaultInstance = new Border();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Border.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Border> PARSER;

    public static com.google.protobuf.Parser<Border> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface BordersOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.Borders)
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<
                Borders, Borders.Builder> {

    /**
     * <pre>
     * A bitmask representing which sides should have borders. Bit values are
     * defined by the `Edges` enum. If no sides are specified (the default), then
     * all sides will have a border.
     * NOTICE: having a rounded corner with a border only on one side is strongly
     * discouraged as it leads to undefined and inconsistent behavior across
     * platforms.
     * </pre>
     *
     * <code>optional int32 bitmask = 5;</code>
     * @return Whether the bitmask field is set.
     */
    boolean hasBitmask();
    /**
     * <pre>
     * A bitmask representing which sides should have borders. Bit values are
     * defined by the `Edges` enum. If no sides are specified (the default), then
     * all sides will have a border.
     * NOTICE: having a rounded corner with a border only on one side is strongly
     * discouraged as it leads to undefined and inconsistent behavior across
     * platforms.
     * </pre>
     *
     * <code>optional int32 bitmask = 5;</code>
     * @return The bitmask.
     */
    int getBitmask();

    /**
     * <pre>
     * The color of the border.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     * @return Whether the color field is set.
     */
    boolean hasColor();
    /**
     * <pre>
     * The color of the border.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     * @return The color.
     */
    int getColor();

    /**
     * <pre>
     * Width of the border.
     * </pre>
     *
     * <code>optional int32 width = 7;</code>
     * @return Whether the width field is set.
     */
    boolean hasWidth();
    /**
     * <pre>
     * Width of the border.
     * </pre>
     *
     * <code>optional int32 width = 7;</code>
     * @return The width.
     */
    int getWidth();

    /**
     * <pre>
     * Top border.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border top = 1 [deprecated = true];</code>
     * @return Whether the top field is set.
     */
    @java.lang.Deprecated boolean hasTop();
    /**
     * <pre>
     * Top border.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border top = 1 [deprecated = true];</code>
     * @return The top.
     */
    @java.lang.Deprecated org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border getTop();

    /**
     * <pre>
     * Bottom border.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border bottom = 2 [deprecated = true];</code>
     * @return Whether the bottom field is set.
     */
    @java.lang.Deprecated boolean hasBottom();
    /**
     * <pre>
     * Bottom border.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border bottom = 2 [deprecated = true];</code>
     * @return The bottom.
     */
    @java.lang.Deprecated org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border getBottom();

    /**
     * <pre>
     * Border for leading edge (left for LTR languages; right for RTL).
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border start = 3 [deprecated = true];</code>
     * @return Whether the start field is set.
     */
    @java.lang.Deprecated boolean hasStart();
    /**
     * <pre>
     * Border for leading edge (left for LTR languages; right for RTL).
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border start = 3 [deprecated = true];</code>
     * @return The start.
     */
    @java.lang.Deprecated org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border getStart();

    /**
     * <pre>
     * Border for trailing edge (right for LTR languages; left for RTL).
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border end = 4 [deprecated = true];</code>
     * @return Whether the end field is set.
     */
    @java.lang.Deprecated boolean hasEnd();
    /**
     * <pre>
     * Border for trailing edge (right for LTR languages; left for RTL).
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border end = 4 [deprecated = true];</code>
     * @return The end.
     */
    @java.lang.Deprecated org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border getEnd();
  }
  /**
   * <pre>
   * A set of four Borders for all four edges of a view.
   * NextId: 8
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.piet.Borders}
   */
  public  static final class Borders extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        Borders, Borders.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.Borders)
      BordersOrBuilder {
    private Borders() {
    }
    /**
     * Protobuf enum {@code components.feed.core.proto.ui.piet.Borders.Edges}
     */
    public enum Edges
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       * If unspecified, then all edges will have borders.
       * </pre>
       *
       * <code>EDGES_UNSPECIFIED = 0;</code>
       */
      EDGES_UNSPECIFIED(0),
      /**
       * <pre>
       * Indicates that the start side of the item should have a border
       * </pre>
       *
       * <code>START = 1;</code>
       */
      START(1),
      /**
       * <pre>
       * Indicates that the top side of the item should have a border
       * </pre>
       *
       * <code>TOP = 2;</code>
       */
      TOP(2),
      /**
       * <pre>
       * Indicates that the end side of the item should have a border
       * </pre>
       *
       * <code>END = 4;</code>
       */
      END(4),
      /**
       * <pre>
       * Indicates that the bottom side of the item should have a border
       * </pre>
       *
       * <code>BOTTOM = 8;</code>
       */
      BOTTOM(8),
      ;

      /**
       * <pre>
       * If unspecified, then all edges will have borders.
       * </pre>
       *
       * <code>EDGES_UNSPECIFIED = 0;</code>
       */
      public static final int EDGES_UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * Indicates that the start side of the item should have a border
       * </pre>
       *
       * <code>START = 1;</code>
       */
      public static final int START_VALUE = 1;
      /**
       * <pre>
       * Indicates that the top side of the item should have a border
       * </pre>
       *
       * <code>TOP = 2;</code>
       */
      public static final int TOP_VALUE = 2;
      /**
       * <pre>
       * Indicates that the end side of the item should have a border
       * </pre>
       *
       * <code>END = 4;</code>
       */
      public static final int END_VALUE = 4;
      /**
       * <pre>
       * Indicates that the bottom side of the item should have a border
       * </pre>
       *
       * <code>BOTTOM = 8;</code>
       */
      public static final int BOTTOM_VALUE = 8;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Edges valueOf(int value) {
        return forNumber(value);
      }

      public static Edges forNumber(int value) {
        switch (value) {
          case 0: return EDGES_UNSPECIFIED;
          case 1: return START;
          case 2: return TOP;
          case 4: return END;
          case 8: return BOTTOM;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Edges>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Edges> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Edges>() {
              @java.lang.Override
              public Edges findValueByNumber(int number) {
                return Edges.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return EdgesVerifier.INSTANCE;
      }

      private static final class EdgesVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new EdgesVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return Edges.forNumber(number) != null;
              }
            };

      private final int value;

      private Edges(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:components.feed.core.proto.ui.piet.Borders.Edges)
    }

    private int bitField0_;
    public static final int BITMASK_FIELD_NUMBER = 5;
    private int bitmask_;
    /**
     * <pre>
     * A bitmask representing which sides should have borders. Bit values are
     * defined by the `Edges` enum. If no sides are specified (the default), then
     * all sides will have a border.
     * NOTICE: having a rounded corner with a border only on one side is strongly
     * discouraged as it leads to undefined and inconsistent behavior across
     * platforms.
     * </pre>
     *
     * <code>optional int32 bitmask = 5;</code>
     * @return Whether the bitmask field is set.
     */
    @java.lang.Override
    public boolean hasBitmask() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * A bitmask representing which sides should have borders. Bit values are
     * defined by the `Edges` enum. If no sides are specified (the default), then
     * all sides will have a border.
     * NOTICE: having a rounded corner with a border only on one side is strongly
     * discouraged as it leads to undefined and inconsistent behavior across
     * platforms.
     * </pre>
     *
     * <code>optional int32 bitmask = 5;</code>
     * @return The bitmask.
     */
    @java.lang.Override
    public int getBitmask() {
      return bitmask_;
    }
    /**
     * <pre>
     * A bitmask representing which sides should have borders. Bit values are
     * defined by the `Edges` enum. If no sides are specified (the default), then
     * all sides will have a border.
     * NOTICE: having a rounded corner with a border only on one side is strongly
     * discouraged as it leads to undefined and inconsistent behavior across
     * platforms.
     * </pre>
     *
     * <code>optional int32 bitmask = 5;</code>
     * @param value The bitmask to set.
     */
    private void setBitmask(int value) {
      bitField0_ |= 0x00000001;
      bitmask_ = value;
    }
    /**
     * <pre>
     * A bitmask representing which sides should have borders. Bit values are
     * defined by the `Edges` enum. If no sides are specified (the default), then
     * all sides will have a border.
     * NOTICE: having a rounded corner with a border only on one side is strongly
     * discouraged as it leads to undefined and inconsistent behavior across
     * platforms.
     * </pre>
     *
     * <code>optional int32 bitmask = 5;</code>
     */
    private void clearBitmask() {
      bitField0_ = (bitField0_ & ~0x00000001);
      bitmask_ = 0;
    }

    public static final int COLOR_FIELD_NUMBER = 6;
    private int color_;
    /**
     * <pre>
     * The color of the border.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     * @return Whether the color field is set.
     */
    @java.lang.Override
    public boolean hasColor() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The color of the border.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     * @return The color.
     */
    @java.lang.Override
    public int getColor() {
      return color_;
    }
    /**
     * <pre>
     * The color of the border.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     * @param value The color to set.
     */
    private void setColor(int value) {
      bitField0_ |= 0x00000002;
      color_ = value;
    }
    /**
     * <pre>
     * The color of the border.
     * </pre>
     *
     * <code>optional fixed32 color = 6;</code>
     */
    private void clearColor() {
      bitField0_ = (bitField0_ & ~0x00000002);
      color_ = 0;
    }

    public static final int WIDTH_FIELD_NUMBER = 7;
    private int width_;
    /**
     * <pre>
     * Width of the border.
     * </pre>
     *
     * <code>optional int32 width = 7;</code>
     * @return Whether the width field is set.
     */
    @java.lang.Override
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Width of the border.
     * </pre>
     *
     * <code>optional int32 width = 7;</code>
     * @return The width.
     */
    @java.lang.Override
    public int getWidth() {
      return width_;
    }
    /**
     * <pre>
     * Width of the border.
     * </pre>
     *
     * <code>optional int32 width = 7;</code>
     * @param value The width to set.
     */
    private void setWidth(int value) {
      bitField0_ |= 0x00000004;
      width_ = value;
    }
    /**
     * <pre>
     * Width of the border.
     * </pre>
     *
     * <code>optional int32 width = 7;</code>
     */
    private void clearWidth() {
      bitField0_ = (bitField0_ & ~0x00000004);
      width_ = 0;
    }

    public static final int TOP_FIELD_NUMBER = 1;
    private org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border top_;
    /**
     * <pre>
     * Top border.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border top = 1 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasTop() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Top border.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border top = 1 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border getTop() {
      return top_ == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.getDefaultInstance() : top_;
    }
    /**
     * <pre>
     * Top border.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border top = 1 [deprecated = true];</code>
     */
    private void setTop(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border value) {
      value.getClass();
  top_ = value;
      bitField0_ |= 0x00000008;
      }
    /**
     * <pre>
     * Top border.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border top = 1 [deprecated = true];</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeTop(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border value) {
      value.getClass();
  if (top_ != null &&
          top_ != org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.getDefaultInstance()) {
        top_ =
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.newBuilder(top_).mergeFrom(value).buildPartial();
      } else {
        top_ = value;
      }
      bitField0_ |= 0x00000008;
    }
    /**
     * <pre>
     * Top border.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border top = 1 [deprecated = true];</code>
     */
    private void clearTop() {  top_ = null;
      bitField0_ = (bitField0_ & ~0x00000008);
    }

    public static final int BOTTOM_FIELD_NUMBER = 2;
    private org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border bottom_;
    /**
     * <pre>
     * Bottom border.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border bottom = 2 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasBottom() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Bottom border.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border bottom = 2 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border getBottom() {
      return bottom_ == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.getDefaultInstance() : bottom_;
    }
    /**
     * <pre>
     * Bottom border.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border bottom = 2 [deprecated = true];</code>
     */
    private void setBottom(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border value) {
      value.getClass();
  bottom_ = value;
      bitField0_ |= 0x00000010;
      }
    /**
     * <pre>
     * Bottom border.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border bottom = 2 [deprecated = true];</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeBottom(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border value) {
      value.getClass();
  if (bottom_ != null &&
          bottom_ != org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.getDefaultInstance()) {
        bottom_ =
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.newBuilder(bottom_).mergeFrom(value).buildPartial();
      } else {
        bottom_ = value;
      }
      bitField0_ |= 0x00000010;
    }
    /**
     * <pre>
     * Bottom border.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border bottom = 2 [deprecated = true];</code>
     */
    private void clearBottom() {  bottom_ = null;
      bitField0_ = (bitField0_ & ~0x00000010);
    }

    public static final int START_FIELD_NUMBER = 3;
    private org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border start_;
    /**
     * <pre>
     * Border for leading edge (left for LTR languages; right for RTL).
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border start = 3 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasStart() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Border for leading edge (left for LTR languages; right for RTL).
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border start = 3 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border getStart() {
      return start_ == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.getDefaultInstance() : start_;
    }
    /**
     * <pre>
     * Border for leading edge (left for LTR languages; right for RTL).
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border start = 3 [deprecated = true];</code>
     */
    private void setStart(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border value) {
      value.getClass();
  start_ = value;
      bitField0_ |= 0x00000020;
      }
    /**
     * <pre>
     * Border for leading edge (left for LTR languages; right for RTL).
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border start = 3 [deprecated = true];</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeStart(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border value) {
      value.getClass();
  if (start_ != null &&
          start_ != org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.getDefaultInstance()) {
        start_ =
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.newBuilder(start_).mergeFrom(value).buildPartial();
      } else {
        start_ = value;
      }
      bitField0_ |= 0x00000020;
    }
    /**
     * <pre>
     * Border for leading edge (left for LTR languages; right for RTL).
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border start = 3 [deprecated = true];</code>
     */
    private void clearStart() {  start_ = null;
      bitField0_ = (bitField0_ & ~0x00000020);
    }

    public static final int END_FIELD_NUMBER = 4;
    private org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border end_;
    /**
     * <pre>
     * Border for trailing edge (right for LTR languages; left for RTL).
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border end = 4 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasEnd() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Border for trailing edge (right for LTR languages; left for RTL).
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border end = 4 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border getEnd() {
      return end_ == null ? org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.getDefaultInstance() : end_;
    }
    /**
     * <pre>
     * Border for trailing edge (right for LTR languages; left for RTL).
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border end = 4 [deprecated = true];</code>
     */
    private void setEnd(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border value) {
      value.getClass();
  end_ = value;
      bitField0_ |= 0x00000040;
      }
    /**
     * <pre>
     * Border for trailing edge (right for LTR languages; left for RTL).
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border end = 4 [deprecated = true];</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeEnd(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border value) {
      value.getClass();
  if (end_ != null &&
          end_ != org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.getDefaultInstance()) {
        end_ =
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.newBuilder(end_).mergeFrom(value).buildPartial();
      } else {
        end_ = value;
      }
      bitField0_ |= 0x00000040;
    }
    /**
     * <pre>
     * Border for trailing edge (right for LTR languages; left for RTL).
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.Border end = 4 [deprecated = true];</code>
     */
    private void clearEnd() {  end_ = null;
      bitField0_ = (bitField0_ & ~0x00000040);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A set of four Borders for all four edges of a view.
     * NextId: 8
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.piet.Borders}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.Borders)
        org.chromium.components.feed.core.proto.ui.piet.StylesProto.BordersOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * A bitmask representing which sides should have borders. Bit values are
       * defined by the `Edges` enum. If no sides are specified (the default), then
       * all sides will have a border.
       * NOTICE: having a rounded corner with a border only on one side is strongly
       * discouraged as it leads to undefined and inconsistent behavior across
       * platforms.
       * </pre>
       *
       * <code>optional int32 bitmask = 5;</code>
       * @return Whether the bitmask field is set.
       */
      @java.lang.Override
      public boolean hasBitmask() {
        return instance.hasBitmask();
      }
      /**
       * <pre>
       * A bitmask representing which sides should have borders. Bit values are
       * defined by the `Edges` enum. If no sides are specified (the default), then
       * all sides will have a border.
       * NOTICE: having a rounded corner with a border only on one side is strongly
       * discouraged as it leads to undefined and inconsistent behavior across
       * platforms.
       * </pre>
       *
       * <code>optional int32 bitmask = 5;</code>
       * @return The bitmask.
       */
      @java.lang.Override
      public int getBitmask() {
        return instance.getBitmask();
      }
      /**
       * <pre>
       * A bitmask representing which sides should have borders. Bit values are
       * defined by the `Edges` enum. If no sides are specified (the default), then
       * all sides will have a border.
       * NOTICE: having a rounded corner with a border only on one side is strongly
       * discouraged as it leads to undefined and inconsistent behavior across
       * platforms.
       * </pre>
       *
       * <code>optional int32 bitmask = 5;</code>
       * @param value The bitmask to set.
       * @return This builder for chaining.
       */
      public Builder setBitmask(int value) {
        copyOnWrite();
        instance.setBitmask(value);
        return this;
      }
      /**
       * <pre>
       * A bitmask representing which sides should have borders. Bit values are
       * defined by the `Edges` enum. If no sides are specified (the default), then
       * all sides will have a border.
       * NOTICE: having a rounded corner with a border only on one side is strongly
       * discouraged as it leads to undefined and inconsistent behavior across
       * platforms.
       * </pre>
       *
       * <code>optional int32 bitmask = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearBitmask() {
        copyOnWrite();
        instance.clearBitmask();
        return this;
      }

      /**
       * <pre>
       * The color of the border.
       * </pre>
       *
       * <code>optional fixed32 color = 6;</code>
       * @return Whether the color field is set.
       */
      @java.lang.Override
      public boolean hasColor() {
        return instance.hasColor();
      }
      /**
       * <pre>
       * The color of the border.
       * </pre>
       *
       * <code>optional fixed32 color = 6;</code>
       * @return The color.
       */
      @java.lang.Override
      public int getColor() {
        return instance.getColor();
      }
      /**
       * <pre>
       * The color of the border.
       * </pre>
       *
       * <code>optional fixed32 color = 6;</code>
       * @param value The color to set.
       * @return This builder for chaining.
       */
      public Builder setColor(int value) {
        copyOnWrite();
        instance.setColor(value);
        return this;
      }
      /**
       * <pre>
       * The color of the border.
       * </pre>
       *
       * <code>optional fixed32 color = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearColor() {
        copyOnWrite();
        instance.clearColor();
        return this;
      }

      /**
       * <pre>
       * Width of the border.
       * </pre>
       *
       * <code>optional int32 width = 7;</code>
       * @return Whether the width field is set.
       */
      @java.lang.Override
      public boolean hasWidth() {
        return instance.hasWidth();
      }
      /**
       * <pre>
       * Width of the border.
       * </pre>
       *
       * <code>optional int32 width = 7;</code>
       * @return The width.
       */
      @java.lang.Override
      public int getWidth() {
        return instance.getWidth();
      }
      /**
       * <pre>
       * Width of the border.
       * </pre>
       *
       * <code>optional int32 width = 7;</code>
       * @param value The width to set.
       * @return This builder for chaining.
       */
      public Builder setWidth(int value) {
        copyOnWrite();
        instance.setWidth(value);
        return this;
      }
      /**
       * <pre>
       * Width of the border.
       * </pre>
       *
       * <code>optional int32 width = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearWidth() {
        copyOnWrite();
        instance.clearWidth();
        return this;
      }

      /**
       * <pre>
       * Top border.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border top = 1 [deprecated = true];</code>
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean hasTop() {
        return instance.hasTop();
      }
      /**
       * <pre>
       * Top border.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border top = 1 [deprecated = true];</code>
       */
      @java.lang.Override
      @java.lang.Deprecated public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border getTop() {
        return instance.getTop();
      }
      /**
       * <pre>
       * Top border.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border top = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setTop(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border value) {
        copyOnWrite();
        instance.setTop(value);
        return this;
        }
      /**
       * <pre>
       * Top border.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border top = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setTop(
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.Builder builderForValue) {
        copyOnWrite();
        instance.setTop(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Top border.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border top = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder mergeTop(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border value) {
        copyOnWrite();
        instance.mergeTop(value);
        return this;
      }
      /**
       * <pre>
       * Top border.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border top = 1 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearTop() {  copyOnWrite();
        instance.clearTop();
        return this;
      }

      /**
       * <pre>
       * Bottom border.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border bottom = 2 [deprecated = true];</code>
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean hasBottom() {
        return instance.hasBottom();
      }
      /**
       * <pre>
       * Bottom border.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border bottom = 2 [deprecated = true];</code>
       */
      @java.lang.Override
      @java.lang.Deprecated public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border getBottom() {
        return instance.getBottom();
      }
      /**
       * <pre>
       * Bottom border.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border bottom = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setBottom(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border value) {
        copyOnWrite();
        instance.setBottom(value);
        return this;
        }
      /**
       * <pre>
       * Bottom border.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border bottom = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setBottom(
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.Builder builderForValue) {
        copyOnWrite();
        instance.setBottom(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Bottom border.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border bottom = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder mergeBottom(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border value) {
        copyOnWrite();
        instance.mergeBottom(value);
        return this;
      }
      /**
       * <pre>
       * Bottom border.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border bottom = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearBottom() {  copyOnWrite();
        instance.clearBottom();
        return this;
      }

      /**
       * <pre>
       * Border for leading edge (left for LTR languages; right for RTL).
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border start = 3 [deprecated = true];</code>
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean hasStart() {
        return instance.hasStart();
      }
      /**
       * <pre>
       * Border for leading edge (left for LTR languages; right for RTL).
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border start = 3 [deprecated = true];</code>
       */
      @java.lang.Override
      @java.lang.Deprecated public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border getStart() {
        return instance.getStart();
      }
      /**
       * <pre>
       * Border for leading edge (left for LTR languages; right for RTL).
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border start = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setStart(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border value) {
        copyOnWrite();
        instance.setStart(value);
        return this;
        }
      /**
       * <pre>
       * Border for leading edge (left for LTR languages; right for RTL).
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border start = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setStart(
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.Builder builderForValue) {
        copyOnWrite();
        instance.setStart(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Border for leading edge (left for LTR languages; right for RTL).
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border start = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder mergeStart(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border value) {
        copyOnWrite();
        instance.mergeStart(value);
        return this;
      }
      /**
       * <pre>
       * Border for leading edge (left for LTR languages; right for RTL).
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border start = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearStart() {  copyOnWrite();
        instance.clearStart();
        return this;
      }

      /**
       * <pre>
       * Border for trailing edge (right for LTR languages; left for RTL).
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border end = 4 [deprecated = true];</code>
       */
      @java.lang.Override
      @java.lang.Deprecated public boolean hasEnd() {
        return instance.hasEnd();
      }
      /**
       * <pre>
       * Border for trailing edge (right for LTR languages; left for RTL).
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border end = 4 [deprecated = true];</code>
       */
      @java.lang.Override
      @java.lang.Deprecated public org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border getEnd() {
        return instance.getEnd();
      }
      /**
       * <pre>
       * Border for trailing edge (right for LTR languages; left for RTL).
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border end = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setEnd(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border value) {
        copyOnWrite();
        instance.setEnd(value);
        return this;
        }
      /**
       * <pre>
       * Border for trailing edge (right for LTR languages; left for RTL).
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border end = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setEnd(
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border.Builder builderForValue) {
        copyOnWrite();
        instance.setEnd(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Border for trailing edge (right for LTR languages; left for RTL).
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border end = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder mergeEnd(org.chromium.components.feed.core.proto.ui.piet.StylesProto.Border value) {
        copyOnWrite();
        instance.mergeEnd(value);
        return this;
      }
      /**
       * <pre>
       * Border for trailing edge (right for LTR languages; left for RTL).
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.Border end = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearEnd() {  copyOnWrite();
        instance.clearEnd();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.Borders)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "top_",
              "bottom_",
              "start_",
              "end_",
              "bitmask_",
              "color_",
              "width_",
            };
            java.lang.String info =
                "\u0001\u0007\u0000\u0001\u0001\u0007\u0007\u0000\u0000\u0004\u0001\u1409\u0003\u0002" +
                "\u1409\u0004\u0003\u1409\u0005\u0004\u1409\u0006\u0005\u1004\u0000\u0006\u1006\u0001" +
                "\u0007\u1004\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.Borders)
    private static final org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders DEFAULT_INSTANCE;
    static {
      Borders defaultInstance = new Borders();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Borders.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.Borders getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Borders> PARSER;

    public static com.google.protobuf.Parser<Borders> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EdgeWidthsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.EdgeWidths)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Top boundary.
     * </pre>
     *
     * <code>optional uint32 top = 1;</code>
     * @return Whether the top field is set.
     */
    boolean hasTop();
    /**
     * <pre>
     * Top boundary.
     * </pre>
     *
     * <code>optional uint32 top = 1;</code>
     * @return The top.
     */
    int getTop();

    /**
     * <pre>
     * Bottom boundary.
     * </pre>
     *
     * <code>optional uint32 bottom = 2;</code>
     * @return Whether the bottom field is set.
     */
    boolean hasBottom();
    /**
     * <pre>
     * Bottom boundary.
     * </pre>
     *
     * <code>optional uint32 bottom = 2;</code>
     * @return The bottom.
     */
    int getBottom();

    /**
     * <pre>
     * Boundary for leading edge (left for LTR languages; right for RTL).
     * </pre>
     *
     * <code>optional uint32 start = 3;</code>
     * @return Whether the start field is set.
     */
    boolean hasStart();
    /**
     * <pre>
     * Boundary for leading edge (left for LTR languages; right for RTL).
     * </pre>
     *
     * <code>optional uint32 start = 3;</code>
     * @return The start.
     */
    int getStart();

    /**
     * <pre>
     * Boundary for trailing edge (right for LTR languages; left for RTL).
     * </pre>
     *
     * <code>optional uint32 end = 4;</code>
     * @return Whether the end field is set.
     */
    boolean hasEnd();
    /**
     * <pre>
     * Boundary for trailing edge (right for LTR languages; left for RTL).
     * </pre>
     *
     * <code>optional uint32 end = 4;</code>
     * @return The end.
     */
    int getEnd();
  }
  /**
   * <pre>
   * A set of four values for widths of the edges of a view, used for
   * paddings/margins.
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.piet.EdgeWidths}
   */
  public  static final class EdgeWidths extends
      com.google.protobuf.GeneratedMessageLite<
          EdgeWidths, EdgeWidths.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.EdgeWidths)
      EdgeWidthsOrBuilder {
    private EdgeWidths() {
    }
    private int bitField0_;
    public static final int TOP_FIELD_NUMBER = 1;
    private int top_;
    /**
     * <pre>
     * Top boundary.
     * </pre>
     *
     * <code>optional uint32 top = 1;</code>
     * @return Whether the top field is set.
     */
    @java.lang.Override
    public boolean hasTop() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Top boundary.
     * </pre>
     *
     * <code>optional uint32 top = 1;</code>
     * @return The top.
     */
    @java.lang.Override
    public int getTop() {
      return top_;
    }
    /**
     * <pre>
     * Top boundary.
     * </pre>
     *
     * <code>optional uint32 top = 1;</code>
     * @param value The top to set.
     */
    private void setTop(int value) {
      bitField0_ |= 0x00000001;
      top_ = value;
    }
    /**
     * <pre>
     * Top boundary.
     * </pre>
     *
     * <code>optional uint32 top = 1;</code>
     */
    private void clearTop() {
      bitField0_ = (bitField0_ & ~0x00000001);
      top_ = 0;
    }

    public static final int BOTTOM_FIELD_NUMBER = 2;
    private int bottom_;
    /**
     * <pre>
     * Bottom boundary.
     * </pre>
     *
     * <code>optional uint32 bottom = 2;</code>
     * @return Whether the bottom field is set.
     */
    @java.lang.Override
    public boolean hasBottom() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Bottom boundary.
     * </pre>
     *
     * <code>optional uint32 bottom = 2;</code>
     * @return The bottom.
     */
    @java.lang.Override
    public int getBottom() {
      return bottom_;
    }
    /**
     * <pre>
     * Bottom boundary.
     * </pre>
     *
     * <code>optional uint32 bottom = 2;</code>
     * @param value The bottom to set.
     */
    private void setBottom(int value) {
      bitField0_ |= 0x00000002;
      bottom_ = value;
    }
    /**
     * <pre>
     * Bottom boundary.
     * </pre>
     *
     * <code>optional uint32 bottom = 2;</code>
     */
    private void clearBottom() {
      bitField0_ = (bitField0_ & ~0x00000002);
      bottom_ = 0;
    }

    public static final int START_FIELD_NUMBER = 3;
    private int start_;
    /**
     * <pre>
     * Boundary for leading edge (left for LTR languages; right for RTL).
     * </pre>
     *
     * <code>optional uint32 start = 3;</code>
     * @return Whether the start field is set.
     */
    @java.lang.Override
    public boolean hasStart() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Boundary for leading edge (left for LTR languages; right for RTL).
     * </pre>
     *
     * <code>optional uint32 start = 3;</code>
     * @return The start.
     */
    @java.lang.Override
    public int getStart() {
      return start_;
    }
    /**
     * <pre>
     * Boundary for leading edge (left for LTR languages; right for RTL).
     * </pre>
     *
     * <code>optional uint32 start = 3;</code>
     * @param value The start to set.
     */
    private void setStart(int value) {
      bitField0_ |= 0x00000004;
      start_ = value;
    }
    /**
     * <pre>
     * Boundary for leading edge (left for LTR languages; right for RTL).
     * </pre>
     *
     * <code>optional uint32 start = 3;</code>
     */
    private void clearStart() {
      bitField0_ = (bitField0_ & ~0x00000004);
      start_ = 0;
    }

    public static final int END_FIELD_NUMBER = 4;
    private int end_;
    /**
     * <pre>
     * Boundary for trailing edge (right for LTR languages; left for RTL).
     * </pre>
     *
     * <code>optional uint32 end = 4;</code>
     * @return Whether the end field is set.
     */
    @java.lang.Override
    public boolean hasEnd() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Boundary for trailing edge (right for LTR languages; left for RTL).
     * </pre>
     *
     * <code>optional uint32 end = 4;</code>
     * @return The end.
     */
    @java.lang.Override
    public int getEnd() {
      return end_;
    }
    /**
     * <pre>
     * Boundary for trailing edge (right for LTR languages; left for RTL).
     * </pre>
     *
     * <code>optional uint32 end = 4;</code>
     * @param value The end to set.
     */
    private void setEnd(int value) {
      bitField0_ |= 0x00000008;
      end_ = value;
    }
    /**
     * <pre>
     * Boundary for trailing edge (right for LTR languages; left for RTL).
     * </pre>
     *
     * <code>optional uint32 end = 4;</code>
     */
    private void clearEnd() {
      bitField0_ = (bitField0_ & ~0x00000008);
      end_ = 0;
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A set of four values for widths of the edges of a view, used for
     * paddings/margins.
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.piet.EdgeWidths}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.EdgeWidths)
        org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidthsOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Top boundary.
       * </pre>
       *
       * <code>optional uint32 top = 1;</code>
       * @return Whether the top field is set.
       */
      @java.lang.Override
      public boolean hasTop() {
        return instance.hasTop();
      }
      /**
       * <pre>
       * Top boundary.
       * </pre>
       *
       * <code>optional uint32 top = 1;</code>
       * @return The top.
       */
      @java.lang.Override
      public int getTop() {
        return instance.getTop();
      }
      /**
       * <pre>
       * Top boundary.
       * </pre>
       *
       * <code>optional uint32 top = 1;</code>
       * @param value The top to set.
       * @return This builder for chaining.
       */
      public Builder setTop(int value) {
        copyOnWrite();
        instance.setTop(value);
        return this;
      }
      /**
       * <pre>
       * Top boundary.
       * </pre>
       *
       * <code>optional uint32 top = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTop() {
        copyOnWrite();
        instance.clearTop();
        return this;
      }

      /**
       * <pre>
       * Bottom boundary.
       * </pre>
       *
       * <code>optional uint32 bottom = 2;</code>
       * @return Whether the bottom field is set.
       */
      @java.lang.Override
      public boolean hasBottom() {
        return instance.hasBottom();
      }
      /**
       * <pre>
       * Bottom boundary.
       * </pre>
       *
       * <code>optional uint32 bottom = 2;</code>
       * @return The bottom.
       */
      @java.lang.Override
      public int getBottom() {
        return instance.getBottom();
      }
      /**
       * <pre>
       * Bottom boundary.
       * </pre>
       *
       * <code>optional uint32 bottom = 2;</code>
       * @param value The bottom to set.
       * @return This builder for chaining.
       */
      public Builder setBottom(int value) {
        copyOnWrite();
        instance.setBottom(value);
        return this;
      }
      /**
       * <pre>
       * Bottom boundary.
       * </pre>
       *
       * <code>optional uint32 bottom = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearBottom() {
        copyOnWrite();
        instance.clearBottom();
        return this;
      }

      /**
       * <pre>
       * Boundary for leading edge (left for LTR languages; right for RTL).
       * </pre>
       *
       * <code>optional uint32 start = 3;</code>
       * @return Whether the start field is set.
       */
      @java.lang.Override
      public boolean hasStart() {
        return instance.hasStart();
      }
      /**
       * <pre>
       * Boundary for leading edge (left for LTR languages; right for RTL).
       * </pre>
       *
       * <code>optional uint32 start = 3;</code>
       * @return The start.
       */
      @java.lang.Override
      public int getStart() {
        return instance.getStart();
      }
      /**
       * <pre>
       * Boundary for leading edge (left for LTR languages; right for RTL).
       * </pre>
       *
       * <code>optional uint32 start = 3;</code>
       * @param value The start to set.
       * @return This builder for chaining.
       */
      public Builder setStart(int value) {
        copyOnWrite();
        instance.setStart(value);
        return this;
      }
      /**
       * <pre>
       * Boundary for leading edge (left for LTR languages; right for RTL).
       * </pre>
       *
       * <code>optional uint32 start = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearStart() {
        copyOnWrite();
        instance.clearStart();
        return this;
      }

      /**
       * <pre>
       * Boundary for trailing edge (right for LTR languages; left for RTL).
       * </pre>
       *
       * <code>optional uint32 end = 4;</code>
       * @return Whether the end field is set.
       */
      @java.lang.Override
      public boolean hasEnd() {
        return instance.hasEnd();
      }
      /**
       * <pre>
       * Boundary for trailing edge (right for LTR languages; left for RTL).
       * </pre>
       *
       * <code>optional uint32 end = 4;</code>
       * @return The end.
       */
      @java.lang.Override
      public int getEnd() {
        return instance.getEnd();
      }
      /**
       * <pre>
       * Boundary for trailing edge (right for LTR languages; left for RTL).
       * </pre>
       *
       * <code>optional uint32 end = 4;</code>
       * @param value The end to set.
       * @return This builder for chaining.
       */
      public Builder setEnd(int value) {
        copyOnWrite();
        instance.setEnd(value);
        return this;
      }
      /**
       * <pre>
       * Boundary for trailing edge (right for LTR languages; left for RTL).
       * </pre>
       *
       * <code>optional uint32 end = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnd() {
        copyOnWrite();
        instance.clearEnd();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.EdgeWidths)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "top_",
              "bottom_",
              "start_",
              "end_",
            };
            java.lang.String info =
                "\u0001\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0000\u0000\u0001\u100b\u0000\u0002" +
                "\u100b\u0001\u0003\u100b\u0002\u0004\u100b\u0003";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.EdgeWidths)
    private static final org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths DEFAULT_INSTANCE;
    static {
      EdgeWidths defaultInstance = new EdgeWidths();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        EdgeWidths.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.StylesProto.EdgeWidths getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EdgeWidths> PARSER;

    public static com.google.protobuf.Parser<EdgeWidths> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
