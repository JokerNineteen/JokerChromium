// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/ui/piet/form_fields.proto

package org.chromium.components.feed.core.proto.ui.piet;

public final class FormFieldsProto {
  private FormFieldsProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField.formField);
  }
  /**
   * <pre>
   * For text areas, feature authors can specify in more detail the kinds of input
   * they expect to receive. `InputType` can be used for three purposes:
   * - For Picker UI affordances: clients can show special UIs for special types
   *   such as a date picker, time picker, or color picker.
   * - For Auto-Complete: clients can use `InputType` hints to pre-populate
   *   suggestions that may not be available server-side, e.g. email addresses,
   *   URLs from history, or frequently-dialed phone numbers.
   * - For Validation: clients can perform client-side validation of most input
   *   types based on the expected text formats (e.g. email, date, time, or via
   *   regular expressions).
   * </pre>
   *
   * Protobuf enum {@code components.feed.core.proto.ui.piet.InputType}
   */
  public enum InputType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * No special treatment.
     * </pre>
     *
     * <code>DEFAULT = 0;</code>
     */
    DEFAULT(0),
    /**
     * <pre>
     * Any text typed by the user is masked according to platform conventions.
     * </pre>
     *
     * <code>PASSWORD = 1;</code>
     */
    PASSWORD(1),
    /**
     * <pre>
     * Only those characters that are valid in email addresses can be typed into
     * the TEXT field. Client may provide auto-complete suggestions to
     * pre-populate email addresses from client-side data. Typed input must
     * validate as an email address.
     * </pre>
     *
     * <code>EMAIL = 2;</code>
     */
    EMAIL(2),
    /**
     * <pre>
     * Only those characters that are valid in URLs can be typed into the TEXT
     * field. Client may provide auto-complete suggestions to pre-populate browser
     * navigation URLs from client-side data. Typed input must validate as a URL.
     * </pre>
     *
     * <code>URL = 3;</code>
     */
    URL(3),
    /**
     * <pre>
     * Only those characters that are valid in (international) telephone numbers
     * can be typed into the TEXT field. Client may provide auto-complete
     * suggestions to pre-populate browser navigation URLs from client-side data.
     * Typed input must validate as a phone number.
     * </pre>
     *
     * <code>TEL = 4;</code>
     */
    TEL(4),
    /**
     * <pre>
     * Only numeric characters can be typed into the TEXT field. If a range is
     * provided, then typed input must be within the acceptable range. NUMERIC can
     * be used with either TEXT or SLIDER visual types.
     * </pre>
     *
     * <code>NUMERIC = 5;</code>
     */
    NUMERIC(5),
    /**
     * <pre>
     * Clients may provide a Date Picker widget TEXT fields of type DATE.
     * </pre>
     *
     * <code>DATE = 6;</code>
     */
    DATE(6),
    /**
     * <pre>
     * Clients may provide a Time Picker widget TEXT fields of type TIME.
     * </pre>
     *
     * <code>TIME = 7;</code>
     */
    TIME(7),
    /**
     * <pre>
     * Clients may provide a Color Picker widget TEXT fields of type COLOR. The
     * returned value is a color in ARGB hex form with a preceding literal '#'
     * (#AARRGGBB).
     * </pre>
     *
     * <code>COLOR = 8;</code>
     */
    COLOR(8),
    ;

    /**
     * <pre>
     * No special treatment.
     * </pre>
     *
     * <code>DEFAULT = 0;</code>
     */
    public static final int DEFAULT_VALUE = 0;
    /**
     * <pre>
     * Any text typed by the user is masked according to platform conventions.
     * </pre>
     *
     * <code>PASSWORD = 1;</code>
     */
    public static final int PASSWORD_VALUE = 1;
    /**
     * <pre>
     * Only those characters that are valid in email addresses can be typed into
     * the TEXT field. Client may provide auto-complete suggestions to
     * pre-populate email addresses from client-side data. Typed input must
     * validate as an email address.
     * </pre>
     *
     * <code>EMAIL = 2;</code>
     */
    public static final int EMAIL_VALUE = 2;
    /**
     * <pre>
     * Only those characters that are valid in URLs can be typed into the TEXT
     * field. Client may provide auto-complete suggestions to pre-populate browser
     * navigation URLs from client-side data. Typed input must validate as a URL.
     * </pre>
     *
     * <code>URL = 3;</code>
     */
    public static final int URL_VALUE = 3;
    /**
     * <pre>
     * Only those characters that are valid in (international) telephone numbers
     * can be typed into the TEXT field. Client may provide auto-complete
     * suggestions to pre-populate browser navigation URLs from client-side data.
     * Typed input must validate as a phone number.
     * </pre>
     *
     * <code>TEL = 4;</code>
     */
    public static final int TEL_VALUE = 4;
    /**
     * <pre>
     * Only numeric characters can be typed into the TEXT field. If a range is
     * provided, then typed input must be within the acceptable range. NUMERIC can
     * be used with either TEXT or SLIDER visual types.
     * </pre>
     *
     * <code>NUMERIC = 5;</code>
     */
    public static final int NUMERIC_VALUE = 5;
    /**
     * <pre>
     * Clients may provide a Date Picker widget TEXT fields of type DATE.
     * </pre>
     *
     * <code>DATE = 6;</code>
     */
    public static final int DATE_VALUE = 6;
    /**
     * <pre>
     * Clients may provide a Time Picker widget TEXT fields of type TIME.
     * </pre>
     *
     * <code>TIME = 7;</code>
     */
    public static final int TIME_VALUE = 7;
    /**
     * <pre>
     * Clients may provide a Color Picker widget TEXT fields of type COLOR. The
     * returned value is a color in ARGB hex form with a preceding literal '#'
     * (#AARRGGBB).
     * </pre>
     *
     * <code>COLOR = 8;</code>
     */
    public static final int COLOR_VALUE = 8;


    @java.lang.Override
    public final int getNumber() {
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static InputType valueOf(int value) {
      return forNumber(value);
    }

    public static InputType forNumber(int value) {
      switch (value) {
        case 0: return DEFAULT;
        case 1: return PASSWORD;
        case 2: return EMAIL;
        case 3: return URL;
        case 4: return TEL;
        case 5: return NUMERIC;
        case 6: return DATE;
        case 7: return TIME;
        case 8: return COLOR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<InputType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        InputType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<InputType>() {
            @java.lang.Override
            public InputType findValueByNumber(int number) {
              return InputType.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return InputTypeVerifier.INSTANCE;
    }

    private static final class InputTypeVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new InputTypeVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return InputType.forNumber(number) != null;
            }
          };

    private final int value;

    private InputType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:components.feed.core.proto.ui.piet.InputType)
  }

  public interface FormFieldOrBuilder extends
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.FormField)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * A unique ID for the Form in which this field appears.
     * </pre>
     *
     * <code>optional string form_id = 1;</code>
     * @return Whether the formId field is set.
     */
    boolean hasFormId();
    /**
     * <pre>
     * A unique ID for the Form in which this field appears.
     * </pre>
     *
     * <code>optional string form_id = 1;</code>
     * @return The formId.
     */
    java.lang.String getFormId();
    /**
     * <pre>
     * A unique ID for the Form in which this field appears.
     * </pre>
     *
     * <code>optional string form_id = 1;</code>
     * @return The bytes for formId.
     */
    com.google.protobuf.ByteString
        getFormIdBytes();

    /**
     * <pre>
     * A unique ID for this form field. Uniqueness is only required within the
     * same Form. Multiple Forms can have fields with the same ID.
     * </pre>
     *
     * <code>optional string field_id = 2;</code>
     * @return Whether the fieldId field is set.
     */
    boolean hasFieldId();
    /**
     * <pre>
     * A unique ID for this form field. Uniqueness is only required within the
     * same Form. Multiple Forms can have fields with the same ID.
     * </pre>
     *
     * <code>optional string field_id = 2;</code>
     * @return The fieldId.
     */
    java.lang.String getFieldId();
    /**
     * <pre>
     * A unique ID for this form field. Uniqueness is only required within the
     * same Form. Multiple Forms can have fields with the same ID.
     * </pre>
     *
     * <code>optional string field_id = 2;</code>
     * @return The bytes for fieldId.
     */
    com.google.protobuf.ByteString
        getFieldIdBytes();

    /**
     * <pre>
     * All fields are optional by default. If a particular field must be filled
     * in, it should be marked as `is_required`. A required field which has no
     * value provided is considered to have failed validation.
     * </pre>
     *
     * <code>optional bool is_required = 3 [default = false];</code>
     * @return Whether the isRequired field is set.
     */
    boolean hasIsRequired();
    /**
     * <pre>
     * All fields are optional by default. If a particular field must be filled
     * in, it should be marked as `is_required`. A required field which has no
     * value provided is considered to have failed validation.
     * </pre>
     *
     * <code>optional bool is_required = 3 [default = false];</code>
     * @return The isRequired.
     */
    boolean getIsRequired();

    /**
     * <pre>
     * A text field that accepts typed text responses.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.TextArea text_area = 4;</code>
     * @return Whether the textArea field is set.
     */
    boolean hasTextArea();
    /**
     * <pre>
     * A text field that accepts typed text responses.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.TextArea text_area = 4;</code>
     * @return The textArea.
     */
    org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea getTextArea();

    /**
     * <pre>
     * A list or dropdown that allows selecting one or more options from a list.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Selectable selectable = 5;</code>
     * @return Whether the selectable field is set.
     */
    boolean hasSelectable();
    /**
     * <pre>
     * A list or dropdown that allows selecting one or more options from a list.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Selectable selectable = 5;</code>
     * @return The selectable.
     */
    org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable getSelectable();

    /**
     * <pre>
     * A check box or radio button widget.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Checkable checkable = 6;</code>
     * @return Whether the checkable field is set.
     */
    boolean hasCheckable();
    /**
     * <pre>
     * A check box or radio button widget.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Checkable checkable = 6;</code>
     * @return The checkable.
     */
    org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable getCheckable();

    /**
     * <pre>
     * A numeric range slider that can also handle discrete values.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Slider slider = 7;</code>
     * @return Whether the slider field is set.
     */
    boolean hasSlider();
    /**
     * <pre>
     * A numeric range slider that can also handle discrete values.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Slider slider = 7;</code>
     * @return The slider.
     */
    org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider getSlider();

    public org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField.FormFieldTypeCase getFormFieldTypeCase();
  }
  /**
   * <pre>
   * Form Fields can be used to solicit user input and act upon it. Multiple
   * visual types of form fields can be used in a Piet layout, all of which are
   * represented using the `FormField` proto message.
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.piet.FormField}
   */
  public  static final class FormField extends
      com.google.protobuf.GeneratedMessageLite<
          FormField, FormField.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.FormField)
      FormFieldOrBuilder {
    private FormField() {
      formId_ = "";
      fieldId_ = "";
    }
    private int bitField0_;
    private int formFieldTypeCase_ = 0;
    private java.lang.Object formFieldType_;
    public enum FormFieldTypeCase {
      TEXT_AREA(4),
      SELECTABLE(5),
      CHECKABLE(6),
      SLIDER(7),
      FORMFIELDTYPE_NOT_SET(0);
      private final int value;
      private FormFieldTypeCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FormFieldTypeCase valueOf(int value) {
        return forNumber(value);
      }

      public static FormFieldTypeCase forNumber(int value) {
        switch (value) {
          case 4: return TEXT_AREA;
          case 5: return SELECTABLE;
          case 6: return CHECKABLE;
          case 7: return SLIDER;
          case 0: return FORMFIELDTYPE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @java.lang.Override
    public FormFieldTypeCase
    getFormFieldTypeCase() {
      return FormFieldTypeCase.forNumber(
          formFieldTypeCase_);
    }

    private void clearFormFieldType() {
      formFieldTypeCase_ = 0;
      formFieldType_ = null;
    }

    public static final int FORM_ID_FIELD_NUMBER = 1;
    private java.lang.String formId_;
    /**
     * <pre>
     * A unique ID for the Form in which this field appears.
     * </pre>
     *
     * <code>optional string form_id = 1;</code>
     * @return Whether the formId field is set.
     */
    @java.lang.Override
    public boolean hasFormId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * A unique ID for the Form in which this field appears.
     * </pre>
     *
     * <code>optional string form_id = 1;</code>
     * @return The formId.
     */
    @java.lang.Override
    public java.lang.String getFormId() {
      return formId_;
    }
    /**
     * <pre>
     * A unique ID for the Form in which this field appears.
     * </pre>
     *
     * <code>optional string form_id = 1;</code>
     * @return The bytes for formId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFormIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(formId_);
    }
    /**
     * <pre>
     * A unique ID for the Form in which this field appears.
     * </pre>
     *
     * <code>optional string form_id = 1;</code>
     * @param value The formId to set.
     */
    private void setFormId(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000001;
      formId_ = value;
    }
    /**
     * <pre>
     * A unique ID for the Form in which this field appears.
     * </pre>
     *
     * <code>optional string form_id = 1;</code>
     */
    private void clearFormId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      formId_ = getDefaultInstance().getFormId();
    }
    /**
     * <pre>
     * A unique ID for the Form in which this field appears.
     * </pre>
     *
     * <code>optional string form_id = 1;</code>
     * @param value The bytes for formId to set.
     */
    private void setFormIdBytes(
        com.google.protobuf.ByteString value) {
      formId_ = value.toStringUtf8();
      bitField0_ |= 0x00000001;
    }

    public static final int FIELD_ID_FIELD_NUMBER = 2;
    private java.lang.String fieldId_;
    /**
     * <pre>
     * A unique ID for this form field. Uniqueness is only required within the
     * same Form. Multiple Forms can have fields with the same ID.
     * </pre>
     *
     * <code>optional string field_id = 2;</code>
     * @return Whether the fieldId field is set.
     */
    @java.lang.Override
    public boolean hasFieldId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * A unique ID for this form field. Uniqueness is only required within the
     * same Form. Multiple Forms can have fields with the same ID.
     * </pre>
     *
     * <code>optional string field_id = 2;</code>
     * @return The fieldId.
     */
    @java.lang.Override
    public java.lang.String getFieldId() {
      return fieldId_;
    }
    /**
     * <pre>
     * A unique ID for this form field. Uniqueness is only required within the
     * same Form. Multiple Forms can have fields with the same ID.
     * </pre>
     *
     * <code>optional string field_id = 2;</code>
     * @return The bytes for fieldId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFieldIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(fieldId_);
    }
    /**
     * <pre>
     * A unique ID for this form field. Uniqueness is only required within the
     * same Form. Multiple Forms can have fields with the same ID.
     * </pre>
     *
     * <code>optional string field_id = 2;</code>
     * @param value The fieldId to set.
     */
    private void setFieldId(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000002;
      fieldId_ = value;
    }
    /**
     * <pre>
     * A unique ID for this form field. Uniqueness is only required within the
     * same Form. Multiple Forms can have fields with the same ID.
     * </pre>
     *
     * <code>optional string field_id = 2;</code>
     */
    private void clearFieldId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      fieldId_ = getDefaultInstance().getFieldId();
    }
    /**
     * <pre>
     * A unique ID for this form field. Uniqueness is only required within the
     * same Form. Multiple Forms can have fields with the same ID.
     * </pre>
     *
     * <code>optional string field_id = 2;</code>
     * @param value The bytes for fieldId to set.
     */
    private void setFieldIdBytes(
        com.google.protobuf.ByteString value) {
      fieldId_ = value.toStringUtf8();
      bitField0_ |= 0x00000002;
    }

    public static final int IS_REQUIRED_FIELD_NUMBER = 3;
    private boolean isRequired_;
    /**
     * <pre>
     * All fields are optional by default. If a particular field must be filled
     * in, it should be marked as `is_required`. A required field which has no
     * value provided is considered to have failed validation.
     * </pre>
     *
     * <code>optional bool is_required = 3 [default = false];</code>
     * @return Whether the isRequired field is set.
     */
    @java.lang.Override
    public boolean hasIsRequired() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * All fields are optional by default. If a particular field must be filled
     * in, it should be marked as `is_required`. A required field which has no
     * value provided is considered to have failed validation.
     * </pre>
     *
     * <code>optional bool is_required = 3 [default = false];</code>
     * @return The isRequired.
     */
    @java.lang.Override
    public boolean getIsRequired() {
      return isRequired_;
    }
    /**
     * <pre>
     * All fields are optional by default. If a particular field must be filled
     * in, it should be marked as `is_required`. A required field which has no
     * value provided is considered to have failed validation.
     * </pre>
     *
     * <code>optional bool is_required = 3 [default = false];</code>
     * @param value The isRequired to set.
     */
    private void setIsRequired(boolean value) {
      bitField0_ |= 0x00000004;
      isRequired_ = value;
    }
    /**
     * <pre>
     * All fields are optional by default. If a particular field must be filled
     * in, it should be marked as `is_required`. A required field which has no
     * value provided is considered to have failed validation.
     * </pre>
     *
     * <code>optional bool is_required = 3 [default = false];</code>
     */
    private void clearIsRequired() {
      bitField0_ = (bitField0_ & ~0x00000004);
      isRequired_ = false;
    }

    public static final int TEXT_AREA_FIELD_NUMBER = 4;
    /**
     * <pre>
     * A text field that accepts typed text responses.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.TextArea text_area = 4;</code>
     */
    @java.lang.Override
    public boolean hasTextArea() {
      return formFieldTypeCase_ == 4;
    }
    /**
     * <pre>
     * A text field that accepts typed text responses.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.TextArea text_area = 4;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea getTextArea() {
      if (formFieldTypeCase_ == 4) {
         return (org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea) formFieldType_;
      }
      return org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea.getDefaultInstance();
    }
    /**
     * <pre>
     * A text field that accepts typed text responses.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.TextArea text_area = 4;</code>
     */
    private void setTextArea(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea value) {
      value.getClass();
  formFieldType_ = value;
      formFieldTypeCase_ = 4;
    }
    /**
     * <pre>
     * A text field that accepts typed text responses.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.TextArea text_area = 4;</code>
     */
    private void mergeTextArea(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea value) {
      value.getClass();
  if (formFieldTypeCase_ == 4 &&
          formFieldType_ != org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea.getDefaultInstance()) {
        formFieldType_ = org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea.newBuilder((org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea) formFieldType_)
            .mergeFrom(value).buildPartial();
      } else {
        formFieldType_ = value;
      }
      formFieldTypeCase_ = 4;
    }
    /**
     * <pre>
     * A text field that accepts typed text responses.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.TextArea text_area = 4;</code>
     */
    private void clearTextArea() {
      if (formFieldTypeCase_ == 4) {
        formFieldTypeCase_ = 0;
        formFieldType_ = null;
      }
    }

    public static final int SELECTABLE_FIELD_NUMBER = 5;
    /**
     * <pre>
     * A list or dropdown that allows selecting one or more options from a list.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Selectable selectable = 5;</code>
     */
    @java.lang.Override
    public boolean hasSelectable() {
      return formFieldTypeCase_ == 5;
    }
    /**
     * <pre>
     * A list or dropdown that allows selecting one or more options from a list.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Selectable selectable = 5;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable getSelectable() {
      if (formFieldTypeCase_ == 5) {
         return (org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable) formFieldType_;
      }
      return org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable.getDefaultInstance();
    }
    /**
     * <pre>
     * A list or dropdown that allows selecting one or more options from a list.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Selectable selectable = 5;</code>
     */
    private void setSelectable(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable value) {
      value.getClass();
  formFieldType_ = value;
      formFieldTypeCase_ = 5;
    }
    /**
     * <pre>
     * A list or dropdown that allows selecting one or more options from a list.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Selectable selectable = 5;</code>
     */
    private void mergeSelectable(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable value) {
      value.getClass();
  if (formFieldTypeCase_ == 5 &&
          formFieldType_ != org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable.getDefaultInstance()) {
        formFieldType_ = org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable.newBuilder((org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable) formFieldType_)
            .mergeFrom(value).buildPartial();
      } else {
        formFieldType_ = value;
      }
      formFieldTypeCase_ = 5;
    }
    /**
     * <pre>
     * A list or dropdown that allows selecting one or more options from a list.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Selectable selectable = 5;</code>
     */
    private void clearSelectable() {
      if (formFieldTypeCase_ == 5) {
        formFieldTypeCase_ = 0;
        formFieldType_ = null;
      }
    }

    public static final int CHECKABLE_FIELD_NUMBER = 6;
    /**
     * <pre>
     * A check box or radio button widget.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Checkable checkable = 6;</code>
     */
    @java.lang.Override
    public boolean hasCheckable() {
      return formFieldTypeCase_ == 6;
    }
    /**
     * <pre>
     * A check box or radio button widget.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Checkable checkable = 6;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable getCheckable() {
      if (formFieldTypeCase_ == 6) {
         return (org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable) formFieldType_;
      }
      return org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable.getDefaultInstance();
    }
    /**
     * <pre>
     * A check box or radio button widget.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Checkable checkable = 6;</code>
     */
    private void setCheckable(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable value) {
      value.getClass();
  formFieldType_ = value;
      formFieldTypeCase_ = 6;
    }
    /**
     * <pre>
     * A check box or radio button widget.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Checkable checkable = 6;</code>
     */
    private void mergeCheckable(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable value) {
      value.getClass();
  if (formFieldTypeCase_ == 6 &&
          formFieldType_ != org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable.getDefaultInstance()) {
        formFieldType_ = org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable.newBuilder((org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable) formFieldType_)
            .mergeFrom(value).buildPartial();
      } else {
        formFieldType_ = value;
      }
      formFieldTypeCase_ = 6;
    }
    /**
     * <pre>
     * A check box or radio button widget.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Checkable checkable = 6;</code>
     */
    private void clearCheckable() {
      if (formFieldTypeCase_ == 6) {
        formFieldTypeCase_ = 0;
        formFieldType_ = null;
      }
    }

    public static final int SLIDER_FIELD_NUMBER = 7;
    /**
     * <pre>
     * A numeric range slider that can also handle discrete values.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Slider slider = 7;</code>
     */
    @java.lang.Override
    public boolean hasSlider() {
      return formFieldTypeCase_ == 7;
    }
    /**
     * <pre>
     * A numeric range slider that can also handle discrete values.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Slider slider = 7;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider getSlider() {
      if (formFieldTypeCase_ == 7) {
         return (org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider) formFieldType_;
      }
      return org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider.getDefaultInstance();
    }
    /**
     * <pre>
     * A numeric range slider that can also handle discrete values.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Slider slider = 7;</code>
     */
    private void setSlider(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider value) {
      value.getClass();
  formFieldType_ = value;
      formFieldTypeCase_ = 7;
    }
    /**
     * <pre>
     * A numeric range slider that can also handle discrete values.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Slider slider = 7;</code>
     */
    private void mergeSlider(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider value) {
      value.getClass();
  if (formFieldTypeCase_ == 7 &&
          formFieldType_ != org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider.getDefaultInstance()) {
        formFieldType_ = org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider.newBuilder((org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider) formFieldType_)
            .mergeFrom(value).buildPartial();
      } else {
        formFieldType_ = value;
      }
      formFieldTypeCase_ = 7;
    }
    /**
     * <pre>
     * A numeric range slider that can also handle discrete values.
     * </pre>
     *
     * <code>.components.feed.core.proto.ui.piet.Slider slider = 7;</code>
     */
    private void clearSlider() {
      if (formFieldTypeCase_ == 7) {
        formFieldTypeCase_ = 0;
        formFieldType_ = null;
      }
    }

    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Form Fields can be used to solicit user input and act upon it. Multiple
     * visual types of form fields can be used in a Piet layout, all of which are
     * represented using the `FormField` proto message.
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.piet.FormField}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.FormField)
        org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormFieldOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      @java.lang.Override
      public FormFieldTypeCase
          getFormFieldTypeCase() {
        return instance.getFormFieldTypeCase();
      }

      public Builder clearFormFieldType() {
        copyOnWrite();
        instance.clearFormFieldType();
        return this;
      }


      /**
       * <pre>
       * A unique ID for the Form in which this field appears.
       * </pre>
       *
       * <code>optional string form_id = 1;</code>
       * @return Whether the formId field is set.
       */
      @java.lang.Override
      public boolean hasFormId() {
        return instance.hasFormId();
      }
      /**
       * <pre>
       * A unique ID for the Form in which this field appears.
       * </pre>
       *
       * <code>optional string form_id = 1;</code>
       * @return The formId.
       */
      @java.lang.Override
      public java.lang.String getFormId() {
        return instance.getFormId();
      }
      /**
       * <pre>
       * A unique ID for the Form in which this field appears.
       * </pre>
       *
       * <code>optional string form_id = 1;</code>
       * @return The bytes for formId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getFormIdBytes() {
        return instance.getFormIdBytes();
      }
      /**
       * <pre>
       * A unique ID for the Form in which this field appears.
       * </pre>
       *
       * <code>optional string form_id = 1;</code>
       * @param value The formId to set.
       * @return This builder for chaining.
       */
      public Builder setFormId(
          java.lang.String value) {
        copyOnWrite();
        instance.setFormId(value);
        return this;
      }
      /**
       * <pre>
       * A unique ID for the Form in which this field appears.
       * </pre>
       *
       * <code>optional string form_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFormId() {
        copyOnWrite();
        instance.clearFormId();
        return this;
      }
      /**
       * <pre>
       * A unique ID for the Form in which this field appears.
       * </pre>
       *
       * <code>optional string form_id = 1;</code>
       * @param value The bytes for formId to set.
       * @return This builder for chaining.
       */
      public Builder setFormIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFormIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * A unique ID for this form field. Uniqueness is only required within the
       * same Form. Multiple Forms can have fields with the same ID.
       * </pre>
       *
       * <code>optional string field_id = 2;</code>
       * @return Whether the fieldId field is set.
       */
      @java.lang.Override
      public boolean hasFieldId() {
        return instance.hasFieldId();
      }
      /**
       * <pre>
       * A unique ID for this form field. Uniqueness is only required within the
       * same Form. Multiple Forms can have fields with the same ID.
       * </pre>
       *
       * <code>optional string field_id = 2;</code>
       * @return The fieldId.
       */
      @java.lang.Override
      public java.lang.String getFieldId() {
        return instance.getFieldId();
      }
      /**
       * <pre>
       * A unique ID for this form field. Uniqueness is only required within the
       * same Form. Multiple Forms can have fields with the same ID.
       * </pre>
       *
       * <code>optional string field_id = 2;</code>
       * @return The bytes for fieldId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getFieldIdBytes() {
        return instance.getFieldIdBytes();
      }
      /**
       * <pre>
       * A unique ID for this form field. Uniqueness is only required within the
       * same Form. Multiple Forms can have fields with the same ID.
       * </pre>
       *
       * <code>optional string field_id = 2;</code>
       * @param value The fieldId to set.
       * @return This builder for chaining.
       */
      public Builder setFieldId(
          java.lang.String value) {
        copyOnWrite();
        instance.setFieldId(value);
        return this;
      }
      /**
       * <pre>
       * A unique ID for this form field. Uniqueness is only required within the
       * same Form. Multiple Forms can have fields with the same ID.
       * </pre>
       *
       * <code>optional string field_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearFieldId() {
        copyOnWrite();
        instance.clearFieldId();
        return this;
      }
      /**
       * <pre>
       * A unique ID for this form field. Uniqueness is only required within the
       * same Form. Multiple Forms can have fields with the same ID.
       * </pre>
       *
       * <code>optional string field_id = 2;</code>
       * @param value The bytes for fieldId to set.
       * @return This builder for chaining.
       */
      public Builder setFieldIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFieldIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * All fields are optional by default. If a particular field must be filled
       * in, it should be marked as `is_required`. A required field which has no
       * value provided is considered to have failed validation.
       * </pre>
       *
       * <code>optional bool is_required = 3 [default = false];</code>
       * @return Whether the isRequired field is set.
       */
      @java.lang.Override
      public boolean hasIsRequired() {
        return instance.hasIsRequired();
      }
      /**
       * <pre>
       * All fields are optional by default. If a particular field must be filled
       * in, it should be marked as `is_required`. A required field which has no
       * value provided is considered to have failed validation.
       * </pre>
       *
       * <code>optional bool is_required = 3 [default = false];</code>
       * @return The isRequired.
       */
      @java.lang.Override
      public boolean getIsRequired() {
        return instance.getIsRequired();
      }
      /**
       * <pre>
       * All fields are optional by default. If a particular field must be filled
       * in, it should be marked as `is_required`. A required field which has no
       * value provided is considered to have failed validation.
       * </pre>
       *
       * <code>optional bool is_required = 3 [default = false];</code>
       * @param value The isRequired to set.
       * @return This builder for chaining.
       */
      public Builder setIsRequired(boolean value) {
        copyOnWrite();
        instance.setIsRequired(value);
        return this;
      }
      /**
       * <pre>
       * All fields are optional by default. If a particular field must be filled
       * in, it should be marked as `is_required`. A required field which has no
       * value provided is considered to have failed validation.
       * </pre>
       *
       * <code>optional bool is_required = 3 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearIsRequired() {
        copyOnWrite();
        instance.clearIsRequired();
        return this;
      }

      /**
       * <pre>
       * A text field that accepts typed text responses.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.TextArea text_area = 4;</code>
       */
      @java.lang.Override
      public boolean hasTextArea() {
        return instance.hasTextArea();
      }
      /**
       * <pre>
       * A text field that accepts typed text responses.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.TextArea text_area = 4;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea getTextArea() {
        return instance.getTextArea();
      }
      /**
       * <pre>
       * A text field that accepts typed text responses.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.TextArea text_area = 4;</code>
       */
      public Builder setTextArea(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea value) {
        copyOnWrite();
        instance.setTextArea(value);
        return this;
      }
      /**
       * <pre>
       * A text field that accepts typed text responses.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.TextArea text_area = 4;</code>
       */
      public Builder setTextArea(
          org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea.Builder builderForValue) {
        copyOnWrite();
        instance.setTextArea(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A text field that accepts typed text responses.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.TextArea text_area = 4;</code>
       */
      public Builder mergeTextArea(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea value) {
        copyOnWrite();
        instance.mergeTextArea(value);
        return this;
      }
      /**
       * <pre>
       * A text field that accepts typed text responses.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.TextArea text_area = 4;</code>
       */
      public Builder clearTextArea() {
        copyOnWrite();
        instance.clearTextArea();
        return this;
      }

      /**
       * <pre>
       * A list or dropdown that allows selecting one or more options from a list.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Selectable selectable = 5;</code>
       */
      @java.lang.Override
      public boolean hasSelectable() {
        return instance.hasSelectable();
      }
      /**
       * <pre>
       * A list or dropdown that allows selecting one or more options from a list.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Selectable selectable = 5;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable getSelectable() {
        return instance.getSelectable();
      }
      /**
       * <pre>
       * A list or dropdown that allows selecting one or more options from a list.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Selectable selectable = 5;</code>
       */
      public Builder setSelectable(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable value) {
        copyOnWrite();
        instance.setSelectable(value);
        return this;
      }
      /**
       * <pre>
       * A list or dropdown that allows selecting one or more options from a list.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Selectable selectable = 5;</code>
       */
      public Builder setSelectable(
          org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable.Builder builderForValue) {
        copyOnWrite();
        instance.setSelectable(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A list or dropdown that allows selecting one or more options from a list.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Selectable selectable = 5;</code>
       */
      public Builder mergeSelectable(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable value) {
        copyOnWrite();
        instance.mergeSelectable(value);
        return this;
      }
      /**
       * <pre>
       * A list or dropdown that allows selecting one or more options from a list.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Selectable selectable = 5;</code>
       */
      public Builder clearSelectable() {
        copyOnWrite();
        instance.clearSelectable();
        return this;
      }

      /**
       * <pre>
       * A check box or radio button widget.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Checkable checkable = 6;</code>
       */
      @java.lang.Override
      public boolean hasCheckable() {
        return instance.hasCheckable();
      }
      /**
       * <pre>
       * A check box or radio button widget.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Checkable checkable = 6;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable getCheckable() {
        return instance.getCheckable();
      }
      /**
       * <pre>
       * A check box or radio button widget.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Checkable checkable = 6;</code>
       */
      public Builder setCheckable(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable value) {
        copyOnWrite();
        instance.setCheckable(value);
        return this;
      }
      /**
       * <pre>
       * A check box or radio button widget.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Checkable checkable = 6;</code>
       */
      public Builder setCheckable(
          org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable.Builder builderForValue) {
        copyOnWrite();
        instance.setCheckable(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A check box or radio button widget.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Checkable checkable = 6;</code>
       */
      public Builder mergeCheckable(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable value) {
        copyOnWrite();
        instance.mergeCheckable(value);
        return this;
      }
      /**
       * <pre>
       * A check box or radio button widget.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Checkable checkable = 6;</code>
       */
      public Builder clearCheckable() {
        copyOnWrite();
        instance.clearCheckable();
        return this;
      }

      /**
       * <pre>
       * A numeric range slider that can also handle discrete values.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Slider slider = 7;</code>
       */
      @java.lang.Override
      public boolean hasSlider() {
        return instance.hasSlider();
      }
      /**
       * <pre>
       * A numeric range slider that can also handle discrete values.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Slider slider = 7;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider getSlider() {
        return instance.getSlider();
      }
      /**
       * <pre>
       * A numeric range slider that can also handle discrete values.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Slider slider = 7;</code>
       */
      public Builder setSlider(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider value) {
        copyOnWrite();
        instance.setSlider(value);
        return this;
      }
      /**
       * <pre>
       * A numeric range slider that can also handle discrete values.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Slider slider = 7;</code>
       */
      public Builder setSlider(
          org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider.Builder builderForValue) {
        copyOnWrite();
        instance.setSlider(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A numeric range slider that can also handle discrete values.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Slider slider = 7;</code>
       */
      public Builder mergeSlider(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider value) {
        copyOnWrite();
        instance.mergeSlider(value);
        return this;
      }
      /**
       * <pre>
       * A numeric range slider that can also handle discrete values.
       * </pre>
       *
       * <code>.components.feed.core.proto.ui.piet.Slider slider = 7;</code>
       */
      public Builder clearSlider() {
        copyOnWrite();
        instance.clearSlider();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.FormField)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "formFieldType_",
              "formFieldTypeCase_",
              "bitField0_",
              "formId_",
              "fieldId_",
              "isRequired_",
              org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea.class,
              org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable.class,
              org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable.class,
              org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider.class,
            };
            java.lang.String info =
                "\u0001\u0007\u0001\u0001\u0001\u0007\u0007\u0000\u0000\u0000\u0001\u1008\u0000\u0002" +
                "\u1008\u0001\u0003\u1007\u0002\u0004\u103c\u0000\u0005\u103c\u0000\u0006\u103c\u0000" +
                "\u0007\u103c\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.FormField)
    private static final org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField DEFAULT_INSTANCE;
    static {
      FormField defaultInstance = new FormField();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        FormField.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<FormField> PARSER;

    public static com.google.protobuf.Parser<FormField> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
    public static final int FORM_FIELD_FIELD_NUMBER = 193737014;
    /**
     * <code>extend .components.feed.core.proto.ui.piet.ModuleElement { ... }</code>
     */
    public static final
      com.google.protobuf.GeneratedMessageLite.GeneratedExtension<
        org.chromium.components.feed.core.proto.ui.piet.ElementsProto.ModuleElement,
        org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField> formField = com.google.protobuf.GeneratedMessageLite
            .newSingularGeneratedExtension(
          org.chromium.components.feed.core.proto.ui.piet.ElementsProto.ModuleElement.getDefaultInstance(),
          org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField.getDefaultInstance(),
          org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField.getDefaultInstance(),
          null,
          193737014,
          com.google.protobuf.WireFormat.FieldType.MESSAGE,
          org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.FormField.class);
  }

  public interface TextAreaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.TextArea)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Whether this is a special kind of text input; see `InputType`.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.InputType input_type = 1;</code>
     * @return Whether the inputType field is set.
     */
    boolean hasInputType();
    /**
     * <pre>
     * Whether this is a special kind of text input; see `InputType`.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.InputType input_type = 1;</code>
     * @return The inputType.
     */
    org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.InputType getInputType();

    /**
     * <pre>
     * The number of vertical lines to be made visible in the viewport. Content
     * within this field may contain newlines, so
     *   the number of lines in the accepted input text can be more or less than
     *   this number.
     * </pre>
     *
     * <code>optional int32 lines_visible = 2 [default = 1];</code>
     * @return Whether the linesVisible field is set.
     */
    boolean hasLinesVisible();
    /**
     * <pre>
     * The number of vertical lines to be made visible in the viewport. Content
     * within this field may contain newlines, so
     *   the number of lines in the accepted input text can be more or less than
     *   this number.
     * </pre>
     *
     * <code>optional int32 lines_visible = 2 [default = 1];</code>
     * @return The linesVisible.
     */
    int getLinesVisible();

    /**
     * <pre>
     * Auto-complete suggestion to be shown in the UI.
     * </pre>
     *
     * <code>optional string value = 3;</code>
     * @return Whether the value field is set.
     */
    boolean hasValue();
    /**
     * <pre>
     * Auto-complete suggestion to be shown in the UI.
     * </pre>
     *
     * <code>optional string value = 3;</code>
     * @return The value.
     */
    java.lang.String getValue();
    /**
     * <pre>
     * Auto-complete suggestion to be shown in the UI.
     * </pre>
     *
     * <code>optional string value = 3;</code>
     * @return The bytes for value.
     */
    com.google.protobuf.ByteString
        getValueBytes();

    /**
     * <pre>
     * Text to be shown when the text area’s contents are empty. The hint is
     * usually rendered in a duller font and is immediately hidden as soon as the
     * user types some text.
     * </pre>
     *
     * <code>optional string hint = 4;</code>
     * @return Whether the hint field is set.
     */
    boolean hasHint();
    /**
     * <pre>
     * Text to be shown when the text area’s contents are empty. The hint is
     * usually rendered in a duller font and is immediately hidden as soon as the
     * user types some text.
     * </pre>
     *
     * <code>optional string hint = 4;</code>
     * @return The hint.
     */
    java.lang.String getHint();
    /**
     * <pre>
     * Text to be shown when the text area’s contents are empty. The hint is
     * usually rendered in a duller font and is immediately hidden as soon as the
     * user types some text.
     * </pre>
     *
     * <code>optional string hint = 4;</code>
     * @return The bytes for hint.
     */
    com.google.protobuf.ByteString
        getHintBytes();

    /**
     * <pre>
     * If a `regex_pattern` is specified, then the field is considered valid if at
     * least one `regex_pattern` from the set matches user input. Regular
     * expression based validation is only performed when `InputType` is DEFAULT.
     * (i.e., this field is ignored even if provided for types such as PASSWORD,
     * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
     * </pre>
     *
     * <code>repeated string regex_pattern = 5;</code>
     * @return A list containing the regexPattern.
     */
    java.util.List<java.lang.String>
        getRegexPatternList();
    /**
     * <pre>
     * If a `regex_pattern` is specified, then the field is considered valid if at
     * least one `regex_pattern` from the set matches user input. Regular
     * expression based validation is only performed when `InputType` is DEFAULT.
     * (i.e., this field is ignored even if provided for types such as PASSWORD,
     * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
     * </pre>
     *
     * <code>repeated string regex_pattern = 5;</code>
     * @return The count of regexPattern.
     */
    int getRegexPatternCount();
    /**
     * <pre>
     * If a `regex_pattern` is specified, then the field is considered valid if at
     * least one `regex_pattern` from the set matches user input. Regular
     * expression based validation is only performed when `InputType` is DEFAULT.
     * (i.e., this field is ignored even if provided for types such as PASSWORD,
     * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
     * </pre>
     *
     * <code>repeated string regex_pattern = 5;</code>
     * @param index The index of the element to return.
     * @return The regexPattern at the given index.
     */
    java.lang.String getRegexPattern(int index);
    /**
     * <pre>
     * If a `regex_pattern` is specified, then the field is considered valid if at
     * least one `regex_pattern` from the set matches user input. Regular
     * expression based validation is only performed when `InputType` is DEFAULT.
     * (i.e., this field is ignored even if provided for types such as PASSWORD,
     * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
     * </pre>
     *
     * <code>repeated string regex_pattern = 5;</code>
     * @param index The index of the element to return.
     * @return The regexPattern at the given index.
     */
    com.google.protobuf.ByteString
        getRegexPatternBytes(int index);
  }
  /**
   * <pre>
   * Fillable text field where user can type text or use free-form auto-complete
   * suggestions provided by the client platform. A text field can have different
   * visual presentations, and `InputType` decides the kinds of inputs that are
   * possible. Clients may use the hints provided by `InputType` to provide
   * auto-complete for special types (e.g. email, URLs, regular expressions).
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.piet.TextArea}
   */
  public  static final class TextArea extends
      com.google.protobuf.GeneratedMessageLite<
          TextArea, TextArea.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.TextArea)
      TextAreaOrBuilder {
    private TextArea() {
      linesVisible_ = 1;
      value_ = "";
      hint_ = "";
      regexPattern_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    private int bitField0_;
    public static final int INPUT_TYPE_FIELD_NUMBER = 1;
    private int inputType_;
    /**
     * <pre>
     * Whether this is a special kind of text input; see `InputType`.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.InputType input_type = 1;</code>
     * @return Whether the inputType field is set.
     */
    @java.lang.Override
    public boolean hasInputType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Whether this is a special kind of text input; see `InputType`.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.InputType input_type = 1;</code>
     * @return The inputType.
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.InputType getInputType() {
      org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.InputType result = org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.InputType.forNumber(inputType_);
      return result == null ? org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.InputType.DEFAULT : result;
    }
    /**
     * <pre>
     * Whether this is a special kind of text input; see `InputType`.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.InputType input_type = 1;</code>
     * @param value The inputType to set.
     */
    private void setInputType(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.InputType value) {
      inputType_ = value.getNumber();
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * Whether this is a special kind of text input; see `InputType`.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.InputType input_type = 1;</code>
     */
    private void clearInputType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      inputType_ = 0;
    }

    public static final int LINES_VISIBLE_FIELD_NUMBER = 2;
    private int linesVisible_;
    /**
     * <pre>
     * The number of vertical lines to be made visible in the viewport. Content
     * within this field may contain newlines, so
     *   the number of lines in the accepted input text can be more or less than
     *   this number.
     * </pre>
     *
     * <code>optional int32 lines_visible = 2 [default = 1];</code>
     * @return Whether the linesVisible field is set.
     */
    @java.lang.Override
    public boolean hasLinesVisible() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The number of vertical lines to be made visible in the viewport. Content
     * within this field may contain newlines, so
     *   the number of lines in the accepted input text can be more or less than
     *   this number.
     * </pre>
     *
     * <code>optional int32 lines_visible = 2 [default = 1];</code>
     * @return The linesVisible.
     */
    @java.lang.Override
    public int getLinesVisible() {
      return linesVisible_;
    }
    /**
     * <pre>
     * The number of vertical lines to be made visible in the viewport. Content
     * within this field may contain newlines, so
     *   the number of lines in the accepted input text can be more or less than
     *   this number.
     * </pre>
     *
     * <code>optional int32 lines_visible = 2 [default = 1];</code>
     * @param value The linesVisible to set.
     */
    private void setLinesVisible(int value) {
      bitField0_ |= 0x00000002;
      linesVisible_ = value;
    }
    /**
     * <pre>
     * The number of vertical lines to be made visible in the viewport. Content
     * within this field may contain newlines, so
     *   the number of lines in the accepted input text can be more or less than
     *   this number.
     * </pre>
     *
     * <code>optional int32 lines_visible = 2 [default = 1];</code>
     */
    private void clearLinesVisible() {
      bitField0_ = (bitField0_ & ~0x00000002);
      linesVisible_ = 1;
    }

    public static final int VALUE_FIELD_NUMBER = 3;
    private java.lang.String value_;
    /**
     * <pre>
     * Auto-complete suggestion to be shown in the UI.
     * </pre>
     *
     * <code>optional string value = 3;</code>
     * @return Whether the value field is set.
     */
    @java.lang.Override
    public boolean hasValue() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Auto-complete suggestion to be shown in the UI.
     * </pre>
     *
     * <code>optional string value = 3;</code>
     * @return The value.
     */
    @java.lang.Override
    public java.lang.String getValue() {
      return value_;
    }
    /**
     * <pre>
     * Auto-complete suggestion to be shown in the UI.
     * </pre>
     *
     * <code>optional string value = 3;</code>
     * @return The bytes for value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getValueBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(value_);
    }
    /**
     * <pre>
     * Auto-complete suggestion to be shown in the UI.
     * </pre>
     *
     * <code>optional string value = 3;</code>
     * @param value The value to set.
     */
    private void setValue(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000004;
      value_ = value;
    }
    /**
     * <pre>
     * Auto-complete suggestion to be shown in the UI.
     * </pre>
     *
     * <code>optional string value = 3;</code>
     */
    private void clearValue() {
      bitField0_ = (bitField0_ & ~0x00000004);
      value_ = getDefaultInstance().getValue();
    }
    /**
     * <pre>
     * Auto-complete suggestion to be shown in the UI.
     * </pre>
     *
     * <code>optional string value = 3;</code>
     * @param value The bytes for value to set.
     */
    private void setValueBytes(
        com.google.protobuf.ByteString value) {
      value_ = value.toStringUtf8();
      bitField0_ |= 0x00000004;
    }

    public static final int HINT_FIELD_NUMBER = 4;
    private java.lang.String hint_;
    /**
     * <pre>
     * Text to be shown when the text area’s contents are empty. The hint is
     * usually rendered in a duller font and is immediately hidden as soon as the
     * user types some text.
     * </pre>
     *
     * <code>optional string hint = 4;</code>
     * @return Whether the hint field is set.
     */
    @java.lang.Override
    public boolean hasHint() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Text to be shown when the text area’s contents are empty. The hint is
     * usually rendered in a duller font and is immediately hidden as soon as the
     * user types some text.
     * </pre>
     *
     * <code>optional string hint = 4;</code>
     * @return The hint.
     */
    @java.lang.Override
    public java.lang.String getHint() {
      return hint_;
    }
    /**
     * <pre>
     * Text to be shown when the text area’s contents are empty. The hint is
     * usually rendered in a duller font and is immediately hidden as soon as the
     * user types some text.
     * </pre>
     *
     * <code>optional string hint = 4;</code>
     * @return The bytes for hint.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getHintBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(hint_);
    }
    /**
     * <pre>
     * Text to be shown when the text area’s contents are empty. The hint is
     * usually rendered in a duller font and is immediately hidden as soon as the
     * user types some text.
     * </pre>
     *
     * <code>optional string hint = 4;</code>
     * @param value The hint to set.
     */
    private void setHint(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000008;
      hint_ = value;
    }
    /**
     * <pre>
     * Text to be shown when the text area’s contents are empty. The hint is
     * usually rendered in a duller font and is immediately hidden as soon as the
     * user types some text.
     * </pre>
     *
     * <code>optional string hint = 4;</code>
     */
    private void clearHint() {
      bitField0_ = (bitField0_ & ~0x00000008);
      hint_ = getDefaultInstance().getHint();
    }
    /**
     * <pre>
     * Text to be shown when the text area’s contents are empty. The hint is
     * usually rendered in a duller font and is immediately hidden as soon as the
     * user types some text.
     * </pre>
     *
     * <code>optional string hint = 4;</code>
     * @param value The bytes for hint to set.
     */
    private void setHintBytes(
        com.google.protobuf.ByteString value) {
      hint_ = value.toStringUtf8();
      bitField0_ |= 0x00000008;
    }

    public static final int REGEX_PATTERN_FIELD_NUMBER = 5;
    private com.google.protobuf.Internal.ProtobufList<java.lang.String> regexPattern_;
    /**
     * <pre>
     * If a `regex_pattern` is specified, then the field is considered valid if at
     * least one `regex_pattern` from the set matches user input. Regular
     * expression based validation is only performed when `InputType` is DEFAULT.
     * (i.e., this field is ignored even if provided for types such as PASSWORD,
     * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
     * </pre>
     *
     * <code>repeated string regex_pattern = 5;</code>
     * @return A list containing the regexPattern.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getRegexPatternList() {
      return regexPattern_;
    }
    /**
     * <pre>
     * If a `regex_pattern` is specified, then the field is considered valid if at
     * least one `regex_pattern` from the set matches user input. Regular
     * expression based validation is only performed when `InputType` is DEFAULT.
     * (i.e., this field is ignored even if provided for types such as PASSWORD,
     * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
     * </pre>
     *
     * <code>repeated string regex_pattern = 5;</code>
     * @return The count of regexPattern.
     */
    @java.lang.Override
    public int getRegexPatternCount() {
      return regexPattern_.size();
    }
    /**
     * <pre>
     * If a `regex_pattern` is specified, then the field is considered valid if at
     * least one `regex_pattern` from the set matches user input. Regular
     * expression based validation is only performed when `InputType` is DEFAULT.
     * (i.e., this field is ignored even if provided for types such as PASSWORD,
     * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
     * </pre>
     *
     * <code>repeated string regex_pattern = 5;</code>
     * @param index The index of the element to return.
     * @return The regexPattern at the given index.
     */
    @java.lang.Override
    public java.lang.String getRegexPattern(int index) {
      return regexPattern_.get(index);
    }
    /**
     * <pre>
     * If a `regex_pattern` is specified, then the field is considered valid if at
     * least one `regex_pattern` from the set matches user input. Regular
     * expression based validation is only performed when `InputType` is DEFAULT.
     * (i.e., this field is ignored even if provided for types such as PASSWORD,
     * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
     * </pre>
     *
     * <code>repeated string regex_pattern = 5;</code>
     * @param index The index of the value to return.
     * @return The bytes of the regexPattern at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRegexPatternBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          regexPattern_.get(index));
    }
    private void ensureRegexPatternIsMutable() {
      com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          regexPattern_;  if (!tmp.isModifiable()) {
        regexPattern_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * If a `regex_pattern` is specified, then the field is considered valid if at
     * least one `regex_pattern` from the set matches user input. Regular
     * expression based validation is only performed when `InputType` is DEFAULT.
     * (i.e., this field is ignored even if provided for types such as PASSWORD,
     * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
     * </pre>
     *
     * <code>repeated string regex_pattern = 5;</code>
     * @param index The index to set the value at.
     * @param value The regexPattern to set.
     */
    private void setRegexPattern(
        int index, java.lang.String value) {
      value.getClass();
  ensureRegexPatternIsMutable();
      regexPattern_.set(index, value);
    }
    /**
     * <pre>
     * If a `regex_pattern` is specified, then the field is considered valid if at
     * least one `regex_pattern` from the set matches user input. Regular
     * expression based validation is only performed when `InputType` is DEFAULT.
     * (i.e., this field is ignored even if provided for types such as PASSWORD,
     * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
     * </pre>
     *
     * <code>repeated string regex_pattern = 5;</code>
     * @param value The regexPattern to add.
     */
    private void addRegexPattern(
        java.lang.String value) {
      value.getClass();
  ensureRegexPatternIsMutable();
      regexPattern_.add(value);
    }
    /**
     * <pre>
     * If a `regex_pattern` is specified, then the field is considered valid if at
     * least one `regex_pattern` from the set matches user input. Regular
     * expression based validation is only performed when `InputType` is DEFAULT.
     * (i.e., this field is ignored even if provided for types such as PASSWORD,
     * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
     * </pre>
     *
     * <code>repeated string regex_pattern = 5;</code>
     * @param values The regexPattern to add.
     */
    private void addAllRegexPattern(
        java.lang.Iterable<java.lang.String> values) {
      ensureRegexPatternIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, regexPattern_);
    }
    /**
     * <pre>
     * If a `regex_pattern` is specified, then the field is considered valid if at
     * least one `regex_pattern` from the set matches user input. Regular
     * expression based validation is only performed when `InputType` is DEFAULT.
     * (i.e., this field is ignored even if provided for types such as PASSWORD,
     * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
     * </pre>
     *
     * <code>repeated string regex_pattern = 5;</code>
     */
    private void clearRegexPattern() {
      regexPattern_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     * If a `regex_pattern` is specified, then the field is considered valid if at
     * least one `regex_pattern` from the set matches user input. Regular
     * expression based validation is only performed when `InputType` is DEFAULT.
     * (i.e., this field is ignored even if provided for types such as PASSWORD,
     * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
     * </pre>
     *
     * <code>repeated string regex_pattern = 5;</code>
     * @param value The bytes of the regexPattern to add.
     */
    private void addRegexPatternBytes(
        com.google.protobuf.ByteString value) {
      ensureRegexPatternIsMutable();
      regexPattern_.add(value.toStringUtf8());
    }

    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Fillable text field where user can type text or use free-form auto-complete
     * suggestions provided by the client platform. A text field can have different
     * visual presentations, and `InputType` decides the kinds of inputs that are
     * possible. Clients may use the hints provided by `InputType` to provide
     * auto-complete for special types (e.g. email, URLs, regular expressions).
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.piet.TextArea}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.TextArea)
        org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextAreaOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Whether this is a special kind of text input; see `InputType`.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.InputType input_type = 1;</code>
       * @return Whether the inputType field is set.
       */
      @java.lang.Override
      public boolean hasInputType() {
        return instance.hasInputType();
      }
      /**
       * <pre>
       * Whether this is a special kind of text input; see `InputType`.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.InputType input_type = 1;</code>
       * @return The inputType.
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.InputType getInputType() {
        return instance.getInputType();
      }
      /**
       * <pre>
       * Whether this is a special kind of text input; see `InputType`.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.InputType input_type = 1;</code>
       * @param value The enum numeric value on the wire for inputType to set.
       * @return This builder for chaining.
       */
      public Builder setInputType(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.InputType value) {
        copyOnWrite();
        instance.setInputType(value);
        return this;
      }
      /**
       * <pre>
       * Whether this is a special kind of text input; see `InputType`.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.InputType input_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearInputType() {
        copyOnWrite();
        instance.clearInputType();
        return this;
      }

      /**
       * <pre>
       * The number of vertical lines to be made visible in the viewport. Content
       * within this field may contain newlines, so
       *   the number of lines in the accepted input text can be more or less than
       *   this number.
       * </pre>
       *
       * <code>optional int32 lines_visible = 2 [default = 1];</code>
       * @return Whether the linesVisible field is set.
       */
      @java.lang.Override
      public boolean hasLinesVisible() {
        return instance.hasLinesVisible();
      }
      /**
       * <pre>
       * The number of vertical lines to be made visible in the viewport. Content
       * within this field may contain newlines, so
       *   the number of lines in the accepted input text can be more or less than
       *   this number.
       * </pre>
       *
       * <code>optional int32 lines_visible = 2 [default = 1];</code>
       * @return The linesVisible.
       */
      @java.lang.Override
      public int getLinesVisible() {
        return instance.getLinesVisible();
      }
      /**
       * <pre>
       * The number of vertical lines to be made visible in the viewport. Content
       * within this field may contain newlines, so
       *   the number of lines in the accepted input text can be more or less than
       *   this number.
       * </pre>
       *
       * <code>optional int32 lines_visible = 2 [default = 1];</code>
       * @param value The linesVisible to set.
       * @return This builder for chaining.
       */
      public Builder setLinesVisible(int value) {
        copyOnWrite();
        instance.setLinesVisible(value);
        return this;
      }
      /**
       * <pre>
       * The number of vertical lines to be made visible in the viewport. Content
       * within this field may contain newlines, so
       *   the number of lines in the accepted input text can be more or less than
       *   this number.
       * </pre>
       *
       * <code>optional int32 lines_visible = 2 [default = 1];</code>
       * @return This builder for chaining.
       */
      public Builder clearLinesVisible() {
        copyOnWrite();
        instance.clearLinesVisible();
        return this;
      }

      /**
       * <pre>
       * Auto-complete suggestion to be shown in the UI.
       * </pre>
       *
       * <code>optional string value = 3;</code>
       * @return Whether the value field is set.
       */
      @java.lang.Override
      public boolean hasValue() {
        return instance.hasValue();
      }
      /**
       * <pre>
       * Auto-complete suggestion to be shown in the UI.
       * </pre>
       *
       * <code>optional string value = 3;</code>
       * @return The value.
       */
      @java.lang.Override
      public java.lang.String getValue() {
        return instance.getValue();
      }
      /**
       * <pre>
       * Auto-complete suggestion to be shown in the UI.
       * </pre>
       *
       * <code>optional string value = 3;</code>
       * @return The bytes for value.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getValueBytes() {
        return instance.getValueBytes();
      }
      /**
       * <pre>
       * Auto-complete suggestion to be shown in the UI.
       * </pre>
       *
       * <code>optional string value = 3;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(
          java.lang.String value) {
        copyOnWrite();
        instance.setValue(value);
        return this;
      }
      /**
       * <pre>
       * Auto-complete suggestion to be shown in the UI.
       * </pre>
       *
       * <code>optional string value = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        copyOnWrite();
        instance.clearValue();
        return this;
      }
      /**
       * <pre>
       * Auto-complete suggestion to be shown in the UI.
       * </pre>
       *
       * <code>optional string value = 3;</code>
       * @param value The bytes for value to set.
       * @return This builder for chaining.
       */
      public Builder setValueBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setValueBytes(value);
        return this;
      }

      /**
       * <pre>
       * Text to be shown when the text area’s contents are empty. The hint is
       * usually rendered in a duller font and is immediately hidden as soon as the
       * user types some text.
       * </pre>
       *
       * <code>optional string hint = 4;</code>
       * @return Whether the hint field is set.
       */
      @java.lang.Override
      public boolean hasHint() {
        return instance.hasHint();
      }
      /**
       * <pre>
       * Text to be shown when the text area’s contents are empty. The hint is
       * usually rendered in a duller font and is immediately hidden as soon as the
       * user types some text.
       * </pre>
       *
       * <code>optional string hint = 4;</code>
       * @return The hint.
       */
      @java.lang.Override
      public java.lang.String getHint() {
        return instance.getHint();
      }
      /**
       * <pre>
       * Text to be shown when the text area’s contents are empty. The hint is
       * usually rendered in a duller font and is immediately hidden as soon as the
       * user types some text.
       * </pre>
       *
       * <code>optional string hint = 4;</code>
       * @return The bytes for hint.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getHintBytes() {
        return instance.getHintBytes();
      }
      /**
       * <pre>
       * Text to be shown when the text area’s contents are empty. The hint is
       * usually rendered in a duller font and is immediately hidden as soon as the
       * user types some text.
       * </pre>
       *
       * <code>optional string hint = 4;</code>
       * @param value The hint to set.
       * @return This builder for chaining.
       */
      public Builder setHint(
          java.lang.String value) {
        copyOnWrite();
        instance.setHint(value);
        return this;
      }
      /**
       * <pre>
       * Text to be shown when the text area’s contents are empty. The hint is
       * usually rendered in a duller font and is immediately hidden as soon as the
       * user types some text.
       * </pre>
       *
       * <code>optional string hint = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearHint() {
        copyOnWrite();
        instance.clearHint();
        return this;
      }
      /**
       * <pre>
       * Text to be shown when the text area’s contents are empty. The hint is
       * usually rendered in a duller font and is immediately hidden as soon as the
       * user types some text.
       * </pre>
       *
       * <code>optional string hint = 4;</code>
       * @param value The bytes for hint to set.
       * @return This builder for chaining.
       */
      public Builder setHintBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setHintBytes(value);
        return this;
      }

      /**
       * <pre>
       * If a `regex_pattern` is specified, then the field is considered valid if at
       * least one `regex_pattern` from the set matches user input. Regular
       * expression based validation is only performed when `InputType` is DEFAULT.
       * (i.e., this field is ignored even if provided for types such as PASSWORD,
       * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
       * </pre>
       *
       * <code>repeated string regex_pattern = 5;</code>
       * @return A list containing the regexPattern.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getRegexPatternList() {
        return java.util.Collections.unmodifiableList(
            instance.getRegexPatternList());
      }
      /**
       * <pre>
       * If a `regex_pattern` is specified, then the field is considered valid if at
       * least one `regex_pattern` from the set matches user input. Regular
       * expression based validation is only performed when `InputType` is DEFAULT.
       * (i.e., this field is ignored even if provided for types such as PASSWORD,
       * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
       * </pre>
       *
       * <code>repeated string regex_pattern = 5;</code>
       * @return The count of regexPattern.
       */
      @java.lang.Override
      public int getRegexPatternCount() {
        return instance.getRegexPatternCount();
      }
      /**
       * <pre>
       * If a `regex_pattern` is specified, then the field is considered valid if at
       * least one `regex_pattern` from the set matches user input. Regular
       * expression based validation is only performed when `InputType` is DEFAULT.
       * (i.e., this field is ignored even if provided for types such as PASSWORD,
       * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
       * </pre>
       *
       * <code>repeated string regex_pattern = 5;</code>
       * @param index The index of the element to return.
       * @return The regexPattern at the given index.
       */
      @java.lang.Override
      public java.lang.String getRegexPattern(int index) {
        return instance.getRegexPattern(index);
      }
      /**
       * <pre>
       * If a `regex_pattern` is specified, then the field is considered valid if at
       * least one `regex_pattern` from the set matches user input. Regular
       * expression based validation is only performed when `InputType` is DEFAULT.
       * (i.e., this field is ignored even if provided for types such as PASSWORD,
       * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
       * </pre>
       *
       * <code>repeated string regex_pattern = 5;</code>
       * @param index The index of the value to return.
       * @return The bytes of the regexPattern at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getRegexPatternBytes(int index) {
        return instance.getRegexPatternBytes(index);
      }
      /**
       * <pre>
       * If a `regex_pattern` is specified, then the field is considered valid if at
       * least one `regex_pattern` from the set matches user input. Regular
       * expression based validation is only performed when `InputType` is DEFAULT.
       * (i.e., this field is ignored even if provided for types such as PASSWORD,
       * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
       * </pre>
       *
       * <code>repeated string regex_pattern = 5;</code>
       * @param index The index to set the value at.
       * @param value The regexPattern to set.
       * @return This builder for chaining.
       */
      public Builder setRegexPattern(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setRegexPattern(index, value);
        return this;
      }
      /**
       * <pre>
       * If a `regex_pattern` is specified, then the field is considered valid if at
       * least one `regex_pattern` from the set matches user input. Regular
       * expression based validation is only performed when `InputType` is DEFAULT.
       * (i.e., this field is ignored even if provided for types such as PASSWORD,
       * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
       * </pre>
       *
       * <code>repeated string regex_pattern = 5;</code>
       * @param value The regexPattern to add.
       * @return This builder for chaining.
       */
      public Builder addRegexPattern(
          java.lang.String value) {
        copyOnWrite();
        instance.addRegexPattern(value);
        return this;
      }
      /**
       * <pre>
       * If a `regex_pattern` is specified, then the field is considered valid if at
       * least one `regex_pattern` from the set matches user input. Regular
       * expression based validation is only performed when `InputType` is DEFAULT.
       * (i.e., this field is ignored even if provided for types such as PASSWORD,
       * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
       * </pre>
       *
       * <code>repeated string regex_pattern = 5;</code>
       * @param values The regexPattern to add.
       * @return This builder for chaining.
       */
      public Builder addAllRegexPattern(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllRegexPattern(values);
        return this;
      }
      /**
       * <pre>
       * If a `regex_pattern` is specified, then the field is considered valid if at
       * least one `regex_pattern` from the set matches user input. Regular
       * expression based validation is only performed when `InputType` is DEFAULT.
       * (i.e., this field is ignored even if provided for types such as PASSWORD,
       * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
       * </pre>
       *
       * <code>repeated string regex_pattern = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearRegexPattern() {
        copyOnWrite();
        instance.clearRegexPattern();
        return this;
      }
      /**
       * <pre>
       * If a `regex_pattern` is specified, then the field is considered valid if at
       * least one `regex_pattern` from the set matches user input. Regular
       * expression based validation is only performed when `InputType` is DEFAULT.
       * (i.e., this field is ignored even if provided for types such as PASSWORD,
       * EMAIL, URL, TEL, NUMERIC, DATE, TIME, or COLOR.)
       * </pre>
       *
       * <code>repeated string regex_pattern = 5;</code>
       * @param value The bytes of the regexPattern to add.
       * @return This builder for chaining.
       */
      public Builder addRegexPatternBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addRegexPatternBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.TextArea)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "inputType_",
              org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.InputType.internalGetVerifier(),
              "linesVisible_",
              "value_",
              "hint_",
              "regexPattern_",
            };
            java.lang.String info =
                "\u0001\u0005\u0000\u0001\u0001\u0005\u0005\u0000\u0001\u0000\u0001\u100c\u0000\u0002" +
                "\u1004\u0001\u0003\u1008\u0002\u0004\u1008\u0003\u0005\u001a";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.TextArea)
    private static final org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea DEFAULT_INSTANCE;
    static {
      TextArea defaultInstance = new TextArea();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TextArea.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.TextArea getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TextArea> PARSER;

    public static com.google.protobuf.Parser<TextArea> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SelectableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.Selectable)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Whether multiple items from a SELECTABLE field can be selected at once.
     * </pre>
     *
     * <code>optional bool is_multi_select = 1;</code>
     * @return Whether the isMultiSelect field is set.
     */
    boolean hasIsMultiSelect();
    /**
     * <pre>
     * Whether multiple items from a SELECTABLE field can be selected at once.
     * </pre>
     *
     * <code>optional bool is_multi_select = 1;</code>
     * @return The isMultiSelect.
     */
    boolean getIsMultiSelect();

    /**
     * <pre>
     * The number of vertical lines to be visible in the viewport. Non-positive
     * values are overridden and set to 1. Note that this does not affect how many
     * items can be selected by the user; see `is_multi_select`.
     * </pre>
     *
     * <code>optional int32 lines_visible = 2 [default = 1];</code>
     * @return Whether the linesVisible field is set.
     */
    boolean hasLinesVisible();
    /**
     * <pre>
     * The number of vertical lines to be visible in the viewport. Non-positive
     * values are overridden and set to 1. Note that this does not affect how many
     * items can be selected by the user; see `is_multi_select`.
     * </pre>
     *
     * <code>optional int32 lines_visible = 2 [default = 1];</code>
     * @return The linesVisible.
     */
    int getLinesVisible();

    /**
     * <pre>
     * Options to be included in the selectable dropdown or list.
     * </pre>
     *
     * <code>repeated string options = 3;</code>
     * @return A list containing the options.
     */
    java.util.List<java.lang.String>
        getOptionsList();
    /**
     * <pre>
     * Options to be included in the selectable dropdown or list.
     * </pre>
     *
     * <code>repeated string options = 3;</code>
     * @return The count of options.
     */
    int getOptionsCount();
    /**
     * <pre>
     * Options to be included in the selectable dropdown or list.
     * </pre>
     *
     * <code>repeated string options = 3;</code>
     * @param index The index of the element to return.
     * @return The options at the given index.
     */
    java.lang.String getOptions(int index);
    /**
     * <pre>
     * Options to be included in the selectable dropdown or list.
     * </pre>
     *
     * <code>repeated string options = 3;</code>
     * @param index The index of the element to return.
     * @return The options at the given index.
     */
    com.google.protobuf.ByteString
        getOptionsBytes(int index);
  }
  /**
   * <pre>
   * A dropdown or list-selection widget that shows multiple items, and the user
   * can pick one or many from that list.
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.piet.Selectable}
   */
  public  static final class Selectable extends
      com.google.protobuf.GeneratedMessageLite<
          Selectable, Selectable.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.Selectable)
      SelectableOrBuilder {
    private Selectable() {
      linesVisible_ = 1;
      options_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    private int bitField0_;
    public static final int IS_MULTI_SELECT_FIELD_NUMBER = 1;
    private boolean isMultiSelect_;
    /**
     * <pre>
     * Whether multiple items from a SELECTABLE field can be selected at once.
     * </pre>
     *
     * <code>optional bool is_multi_select = 1;</code>
     * @return Whether the isMultiSelect field is set.
     */
    @java.lang.Override
    public boolean hasIsMultiSelect() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Whether multiple items from a SELECTABLE field can be selected at once.
     * </pre>
     *
     * <code>optional bool is_multi_select = 1;</code>
     * @return The isMultiSelect.
     */
    @java.lang.Override
    public boolean getIsMultiSelect() {
      return isMultiSelect_;
    }
    /**
     * <pre>
     * Whether multiple items from a SELECTABLE field can be selected at once.
     * </pre>
     *
     * <code>optional bool is_multi_select = 1;</code>
     * @param value The isMultiSelect to set.
     */
    private void setIsMultiSelect(boolean value) {
      bitField0_ |= 0x00000001;
      isMultiSelect_ = value;
    }
    /**
     * <pre>
     * Whether multiple items from a SELECTABLE field can be selected at once.
     * </pre>
     *
     * <code>optional bool is_multi_select = 1;</code>
     */
    private void clearIsMultiSelect() {
      bitField0_ = (bitField0_ & ~0x00000001);
      isMultiSelect_ = false;
    }

    public static final int LINES_VISIBLE_FIELD_NUMBER = 2;
    private int linesVisible_;
    /**
     * <pre>
     * The number of vertical lines to be visible in the viewport. Non-positive
     * values are overridden and set to 1. Note that this does not affect how many
     * items can be selected by the user; see `is_multi_select`.
     * </pre>
     *
     * <code>optional int32 lines_visible = 2 [default = 1];</code>
     * @return Whether the linesVisible field is set.
     */
    @java.lang.Override
    public boolean hasLinesVisible() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The number of vertical lines to be visible in the viewport. Non-positive
     * values are overridden and set to 1. Note that this does not affect how many
     * items can be selected by the user; see `is_multi_select`.
     * </pre>
     *
     * <code>optional int32 lines_visible = 2 [default = 1];</code>
     * @return The linesVisible.
     */
    @java.lang.Override
    public int getLinesVisible() {
      return linesVisible_;
    }
    /**
     * <pre>
     * The number of vertical lines to be visible in the viewport. Non-positive
     * values are overridden and set to 1. Note that this does not affect how many
     * items can be selected by the user; see `is_multi_select`.
     * </pre>
     *
     * <code>optional int32 lines_visible = 2 [default = 1];</code>
     * @param value The linesVisible to set.
     */
    private void setLinesVisible(int value) {
      bitField0_ |= 0x00000002;
      linesVisible_ = value;
    }
    /**
     * <pre>
     * The number of vertical lines to be visible in the viewport. Non-positive
     * values are overridden and set to 1. Note that this does not affect how many
     * items can be selected by the user; see `is_multi_select`.
     * </pre>
     *
     * <code>optional int32 lines_visible = 2 [default = 1];</code>
     */
    private void clearLinesVisible() {
      bitField0_ = (bitField0_ & ~0x00000002);
      linesVisible_ = 1;
    }

    public static final int OPTIONS_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.ProtobufList<java.lang.String> options_;
    /**
     * <pre>
     * Options to be included in the selectable dropdown or list.
     * </pre>
     *
     * <code>repeated string options = 3;</code>
     * @return A list containing the options.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getOptionsList() {
      return options_;
    }
    /**
     * <pre>
     * Options to be included in the selectable dropdown or list.
     * </pre>
     *
     * <code>repeated string options = 3;</code>
     * @return The count of options.
     */
    @java.lang.Override
    public int getOptionsCount() {
      return options_.size();
    }
    /**
     * <pre>
     * Options to be included in the selectable dropdown or list.
     * </pre>
     *
     * <code>repeated string options = 3;</code>
     * @param index The index of the element to return.
     * @return The options at the given index.
     */
    @java.lang.Override
    public java.lang.String getOptions(int index) {
      return options_.get(index);
    }
    /**
     * <pre>
     * Options to be included in the selectable dropdown or list.
     * </pre>
     *
     * <code>repeated string options = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the options at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOptionsBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          options_.get(index));
    }
    private void ensureOptionsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          options_;  if (!tmp.isModifiable()) {
        options_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * Options to be included in the selectable dropdown or list.
     * </pre>
     *
     * <code>repeated string options = 3;</code>
     * @param index The index to set the value at.
     * @param value The options to set.
     */
    private void setOptions(
        int index, java.lang.String value) {
      value.getClass();
  ensureOptionsIsMutable();
      options_.set(index, value);
    }
    /**
     * <pre>
     * Options to be included in the selectable dropdown or list.
     * </pre>
     *
     * <code>repeated string options = 3;</code>
     * @param value The options to add.
     */
    private void addOptions(
        java.lang.String value) {
      value.getClass();
  ensureOptionsIsMutable();
      options_.add(value);
    }
    /**
     * <pre>
     * Options to be included in the selectable dropdown or list.
     * </pre>
     *
     * <code>repeated string options = 3;</code>
     * @param values The options to add.
     */
    private void addAllOptions(
        java.lang.Iterable<java.lang.String> values) {
      ensureOptionsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, options_);
    }
    /**
     * <pre>
     * Options to be included in the selectable dropdown or list.
     * </pre>
     *
     * <code>repeated string options = 3;</code>
     */
    private void clearOptions() {
      options_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     * Options to be included in the selectable dropdown or list.
     * </pre>
     *
     * <code>repeated string options = 3;</code>
     * @param value The bytes of the options to add.
     */
    private void addOptionsBytes(
        com.google.protobuf.ByteString value) {
      ensureOptionsIsMutable();
      options_.add(value.toStringUtf8());
    }

    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A dropdown or list-selection widget that shows multiple items, and the user
     * can pick one or many from that list.
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.piet.Selectable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.Selectable)
        org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.SelectableOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Whether multiple items from a SELECTABLE field can be selected at once.
       * </pre>
       *
       * <code>optional bool is_multi_select = 1;</code>
       * @return Whether the isMultiSelect field is set.
       */
      @java.lang.Override
      public boolean hasIsMultiSelect() {
        return instance.hasIsMultiSelect();
      }
      /**
       * <pre>
       * Whether multiple items from a SELECTABLE field can be selected at once.
       * </pre>
       *
       * <code>optional bool is_multi_select = 1;</code>
       * @return The isMultiSelect.
       */
      @java.lang.Override
      public boolean getIsMultiSelect() {
        return instance.getIsMultiSelect();
      }
      /**
       * <pre>
       * Whether multiple items from a SELECTABLE field can be selected at once.
       * </pre>
       *
       * <code>optional bool is_multi_select = 1;</code>
       * @param value The isMultiSelect to set.
       * @return This builder for chaining.
       */
      public Builder setIsMultiSelect(boolean value) {
        copyOnWrite();
        instance.setIsMultiSelect(value);
        return this;
      }
      /**
       * <pre>
       * Whether multiple items from a SELECTABLE field can be selected at once.
       * </pre>
       *
       * <code>optional bool is_multi_select = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsMultiSelect() {
        copyOnWrite();
        instance.clearIsMultiSelect();
        return this;
      }

      /**
       * <pre>
       * The number of vertical lines to be visible in the viewport. Non-positive
       * values are overridden and set to 1. Note that this does not affect how many
       * items can be selected by the user; see `is_multi_select`.
       * </pre>
       *
       * <code>optional int32 lines_visible = 2 [default = 1];</code>
       * @return Whether the linesVisible field is set.
       */
      @java.lang.Override
      public boolean hasLinesVisible() {
        return instance.hasLinesVisible();
      }
      /**
       * <pre>
       * The number of vertical lines to be visible in the viewport. Non-positive
       * values are overridden and set to 1. Note that this does not affect how many
       * items can be selected by the user; see `is_multi_select`.
       * </pre>
       *
       * <code>optional int32 lines_visible = 2 [default = 1];</code>
       * @return The linesVisible.
       */
      @java.lang.Override
      public int getLinesVisible() {
        return instance.getLinesVisible();
      }
      /**
       * <pre>
       * The number of vertical lines to be visible in the viewport. Non-positive
       * values are overridden and set to 1. Note that this does not affect how many
       * items can be selected by the user; see `is_multi_select`.
       * </pre>
       *
       * <code>optional int32 lines_visible = 2 [default = 1];</code>
       * @param value The linesVisible to set.
       * @return This builder for chaining.
       */
      public Builder setLinesVisible(int value) {
        copyOnWrite();
        instance.setLinesVisible(value);
        return this;
      }
      /**
       * <pre>
       * The number of vertical lines to be visible in the viewport. Non-positive
       * values are overridden and set to 1. Note that this does not affect how many
       * items can be selected by the user; see `is_multi_select`.
       * </pre>
       *
       * <code>optional int32 lines_visible = 2 [default = 1];</code>
       * @return This builder for chaining.
       */
      public Builder clearLinesVisible() {
        copyOnWrite();
        instance.clearLinesVisible();
        return this;
      }

      /**
       * <pre>
       * Options to be included in the selectable dropdown or list.
       * </pre>
       *
       * <code>repeated string options = 3;</code>
       * @return A list containing the options.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getOptionsList() {
        return java.util.Collections.unmodifiableList(
            instance.getOptionsList());
      }
      /**
       * <pre>
       * Options to be included in the selectable dropdown or list.
       * </pre>
       *
       * <code>repeated string options = 3;</code>
       * @return The count of options.
       */
      @java.lang.Override
      public int getOptionsCount() {
        return instance.getOptionsCount();
      }
      /**
       * <pre>
       * Options to be included in the selectable dropdown or list.
       * </pre>
       *
       * <code>repeated string options = 3;</code>
       * @param index The index of the element to return.
       * @return The options at the given index.
       */
      @java.lang.Override
      public java.lang.String getOptions(int index) {
        return instance.getOptions(index);
      }
      /**
       * <pre>
       * Options to be included in the selectable dropdown or list.
       * </pre>
       *
       * <code>repeated string options = 3;</code>
       * @param index The index of the value to return.
       * @return The bytes of the options at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getOptionsBytes(int index) {
        return instance.getOptionsBytes(index);
      }
      /**
       * <pre>
       * Options to be included in the selectable dropdown or list.
       * </pre>
       *
       * <code>repeated string options = 3;</code>
       * @param index The index to set the value at.
       * @param value The options to set.
       * @return This builder for chaining.
       */
      public Builder setOptions(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setOptions(index, value);
        return this;
      }
      /**
       * <pre>
       * Options to be included in the selectable dropdown or list.
       * </pre>
       *
       * <code>repeated string options = 3;</code>
       * @param value The options to add.
       * @return This builder for chaining.
       */
      public Builder addOptions(
          java.lang.String value) {
        copyOnWrite();
        instance.addOptions(value);
        return this;
      }
      /**
       * <pre>
       * Options to be included in the selectable dropdown or list.
       * </pre>
       *
       * <code>repeated string options = 3;</code>
       * @param values The options to add.
       * @return This builder for chaining.
       */
      public Builder addAllOptions(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllOptions(values);
        return this;
      }
      /**
       * <pre>
       * Options to be included in the selectable dropdown or list.
       * </pre>
       *
       * <code>repeated string options = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptions() {
        copyOnWrite();
        instance.clearOptions();
        return this;
      }
      /**
       * <pre>
       * Options to be included in the selectable dropdown or list.
       * </pre>
       *
       * <code>repeated string options = 3;</code>
       * @param value The bytes of the options to add.
       * @return This builder for chaining.
       */
      public Builder addOptionsBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addOptionsBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.Selectable)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "isMultiSelect_",
              "linesVisible_",
              "options_",
            };
            java.lang.String info =
                "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0001\u0000\u0001\u1007\u0000\u0002" +
                "\u1004\u0001\u0003\u001a";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.Selectable)
    private static final org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable DEFAULT_INSTANCE;
    static {
      Selectable defaultInstance = new Selectable();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Selectable.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Selectable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Selectable> PARSER;

    public static com.google.protobuf.Parser<Selectable> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CheckableOrBuilder extends
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.Checkable)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Multiple checkable fields that have the same `group_id` are treated as
     * mutually exclusive (i.e. like radio buttons) such that checking any one
     * will automatically un-check every other checkable field with the same
     * `group_id`.
     * If no `group_id` is specified, then a checkable field behaves like an
     * independent checkbox. This field may affect the visual presentation of the
     * field (i.e. circular radio button versus square checkbox, depending on
     * platform conventions).
     * </pre>
     *
     * <code>optional string group_id = 1;</code>
     * @return Whether the groupId field is set.
     */
    boolean hasGroupId();
    /**
     * <pre>
     * Multiple checkable fields that have the same `group_id` are treated as
     * mutually exclusive (i.e. like radio buttons) such that checking any one
     * will automatically un-check every other checkable field with the same
     * `group_id`.
     * If no `group_id` is specified, then a checkable field behaves like an
     * independent checkbox. This field may affect the visual presentation of the
     * field (i.e. circular radio button versus square checkbox, depending on
     * platform conventions).
     * </pre>
     *
     * <code>optional string group_id = 1;</code>
     * @return The groupId.
     */
    java.lang.String getGroupId();
    /**
     * <pre>
     * Multiple checkable fields that have the same `group_id` are treated as
     * mutually exclusive (i.e. like radio buttons) such that checking any one
     * will automatically un-check every other checkable field with the same
     * `group_id`.
     * If no `group_id` is specified, then a checkable field behaves like an
     * independent checkbox. This field may affect the visual presentation of the
     * field (i.e. circular radio button versus square checkbox, depending on
     * platform conventions).
     * </pre>
     *
     * <code>optional string group_id = 1;</code>
     * @return The bytes for groupId.
     */
    com.google.protobuf.ByteString
        getGroupIdBytes();
  }
  /**
   * <pre>
   * A single form field type that represents both, check boxes and radio buttons.
   * To group together multiple radio buttons such that only one is selectable at
   * a given time, set the same `group_id` on all of them. To use a single
   * independent checkbox, ensure that `group_id` is not set.
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.piet.Checkable}
   */
  public  static final class Checkable extends
      com.google.protobuf.GeneratedMessageLite<
          Checkable, Checkable.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.Checkable)
      CheckableOrBuilder {
    private Checkable() {
      groupId_ = "";
    }
    private int bitField0_;
    public static final int GROUP_ID_FIELD_NUMBER = 1;
    private java.lang.String groupId_;
    /**
     * <pre>
     * Multiple checkable fields that have the same `group_id` are treated as
     * mutually exclusive (i.e. like radio buttons) such that checking any one
     * will automatically un-check every other checkable field with the same
     * `group_id`.
     * If no `group_id` is specified, then a checkable field behaves like an
     * independent checkbox. This field may affect the visual presentation of the
     * field (i.e. circular radio button versus square checkbox, depending on
     * platform conventions).
     * </pre>
     *
     * <code>optional string group_id = 1;</code>
     * @return Whether the groupId field is set.
     */
    @java.lang.Override
    public boolean hasGroupId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Multiple checkable fields that have the same `group_id` are treated as
     * mutually exclusive (i.e. like radio buttons) such that checking any one
     * will automatically un-check every other checkable field with the same
     * `group_id`.
     * If no `group_id` is specified, then a checkable field behaves like an
     * independent checkbox. This field may affect the visual presentation of the
     * field (i.e. circular radio button versus square checkbox, depending on
     * platform conventions).
     * </pre>
     *
     * <code>optional string group_id = 1;</code>
     * @return The groupId.
     */
    @java.lang.Override
    public java.lang.String getGroupId() {
      return groupId_;
    }
    /**
     * <pre>
     * Multiple checkable fields that have the same `group_id` are treated as
     * mutually exclusive (i.e. like radio buttons) such that checking any one
     * will automatically un-check every other checkable field with the same
     * `group_id`.
     * If no `group_id` is specified, then a checkable field behaves like an
     * independent checkbox. This field may affect the visual presentation of the
     * field (i.e. circular radio button versus square checkbox, depending on
     * platform conventions).
     * </pre>
     *
     * <code>optional string group_id = 1;</code>
     * @return The bytes for groupId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getGroupIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(groupId_);
    }
    /**
     * <pre>
     * Multiple checkable fields that have the same `group_id` are treated as
     * mutually exclusive (i.e. like radio buttons) such that checking any one
     * will automatically un-check every other checkable field with the same
     * `group_id`.
     * If no `group_id` is specified, then a checkable field behaves like an
     * independent checkbox. This field may affect the visual presentation of the
     * field (i.e. circular radio button versus square checkbox, depending on
     * platform conventions).
     * </pre>
     *
     * <code>optional string group_id = 1;</code>
     * @param value The groupId to set.
     */
    private void setGroupId(
        java.lang.String value) {
      value.getClass();
  bitField0_ |= 0x00000001;
      groupId_ = value;
    }
    /**
     * <pre>
     * Multiple checkable fields that have the same `group_id` are treated as
     * mutually exclusive (i.e. like radio buttons) such that checking any one
     * will automatically un-check every other checkable field with the same
     * `group_id`.
     * If no `group_id` is specified, then a checkable field behaves like an
     * independent checkbox. This field may affect the visual presentation of the
     * field (i.e. circular radio button versus square checkbox, depending on
     * platform conventions).
     * </pre>
     *
     * <code>optional string group_id = 1;</code>
     */
    private void clearGroupId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      groupId_ = getDefaultInstance().getGroupId();
    }
    /**
     * <pre>
     * Multiple checkable fields that have the same `group_id` are treated as
     * mutually exclusive (i.e. like radio buttons) such that checking any one
     * will automatically un-check every other checkable field with the same
     * `group_id`.
     * If no `group_id` is specified, then a checkable field behaves like an
     * independent checkbox. This field may affect the visual presentation of the
     * field (i.e. circular radio button versus square checkbox, depending on
     * platform conventions).
     * </pre>
     *
     * <code>optional string group_id = 1;</code>
     * @param value The bytes for groupId to set.
     */
    private void setGroupIdBytes(
        com.google.protobuf.ByteString value) {
      groupId_ = value.toStringUtf8();
      bitField0_ |= 0x00000001;
    }

    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A single form field type that represents both, check boxes and radio buttons.
     * To group together multiple radio buttons such that only one is selectable at
     * a given time, set the same `group_id` on all of them. To use a single
     * independent checkbox, ensure that `group_id` is not set.
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.piet.Checkable}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.Checkable)
        org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.CheckableOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Multiple checkable fields that have the same `group_id` are treated as
       * mutually exclusive (i.e. like radio buttons) such that checking any one
       * will automatically un-check every other checkable field with the same
       * `group_id`.
       * If no `group_id` is specified, then a checkable field behaves like an
       * independent checkbox. This field may affect the visual presentation of the
       * field (i.e. circular radio button versus square checkbox, depending on
       * platform conventions).
       * </pre>
       *
       * <code>optional string group_id = 1;</code>
       * @return Whether the groupId field is set.
       */
      @java.lang.Override
      public boolean hasGroupId() {
        return instance.hasGroupId();
      }
      /**
       * <pre>
       * Multiple checkable fields that have the same `group_id` are treated as
       * mutually exclusive (i.e. like radio buttons) such that checking any one
       * will automatically un-check every other checkable field with the same
       * `group_id`.
       * If no `group_id` is specified, then a checkable field behaves like an
       * independent checkbox. This field may affect the visual presentation of the
       * field (i.e. circular radio button versus square checkbox, depending on
       * platform conventions).
       * </pre>
       *
       * <code>optional string group_id = 1;</code>
       * @return The groupId.
       */
      @java.lang.Override
      public java.lang.String getGroupId() {
        return instance.getGroupId();
      }
      /**
       * <pre>
       * Multiple checkable fields that have the same `group_id` are treated as
       * mutually exclusive (i.e. like radio buttons) such that checking any one
       * will automatically un-check every other checkable field with the same
       * `group_id`.
       * If no `group_id` is specified, then a checkable field behaves like an
       * independent checkbox. This field may affect the visual presentation of the
       * field (i.e. circular radio button versus square checkbox, depending on
       * platform conventions).
       * </pre>
       *
       * <code>optional string group_id = 1;</code>
       * @return The bytes for groupId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getGroupIdBytes() {
        return instance.getGroupIdBytes();
      }
      /**
       * <pre>
       * Multiple checkable fields that have the same `group_id` are treated as
       * mutually exclusive (i.e. like radio buttons) such that checking any one
       * will automatically un-check every other checkable field with the same
       * `group_id`.
       * If no `group_id` is specified, then a checkable field behaves like an
       * independent checkbox. This field may affect the visual presentation of the
       * field (i.e. circular radio button versus square checkbox, depending on
       * platform conventions).
       * </pre>
       *
       * <code>optional string group_id = 1;</code>
       * @param value The groupId to set.
       * @return This builder for chaining.
       */
      public Builder setGroupId(
          java.lang.String value) {
        copyOnWrite();
        instance.setGroupId(value);
        return this;
      }
      /**
       * <pre>
       * Multiple checkable fields that have the same `group_id` are treated as
       * mutually exclusive (i.e. like radio buttons) such that checking any one
       * will automatically un-check every other checkable field with the same
       * `group_id`.
       * If no `group_id` is specified, then a checkable field behaves like an
       * independent checkbox. This field may affect the visual presentation of the
       * field (i.e. circular radio button versus square checkbox, depending on
       * platform conventions).
       * </pre>
       *
       * <code>optional string group_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearGroupId() {
        copyOnWrite();
        instance.clearGroupId();
        return this;
      }
      /**
       * <pre>
       * Multiple checkable fields that have the same `group_id` are treated as
       * mutually exclusive (i.e. like radio buttons) such that checking any one
       * will automatically un-check every other checkable field with the same
       * `group_id`.
       * If no `group_id` is specified, then a checkable field behaves like an
       * independent checkbox. This field may affect the visual presentation of the
       * field (i.e. circular radio button versus square checkbox, depending on
       * platform conventions).
       * </pre>
       *
       * <code>optional string group_id = 1;</code>
       * @param value The bytes for groupId to set.
       * @return This builder for chaining.
       */
      public Builder setGroupIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setGroupIdBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.Checkable)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "groupId_",
            };
            java.lang.String info =
                "\u0001\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u1008\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.Checkable)
    private static final org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable DEFAULT_INSTANCE;
    static {
      Checkable defaultInstance = new Checkable();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Checkable.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Checkable getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Checkable> PARSER;

    public static com.google.protobuf.Parser<Checkable> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SliderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:components.feed.core.proto.ui.piet.Slider)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The minimum value, inclusive.
     * </pre>
     *
     * <code>optional int32 minimum = 1;</code>
     * @return Whether the minimum field is set.
     */
    boolean hasMinimum();
    /**
     * <pre>
     * The minimum value, inclusive.
     * </pre>
     *
     * <code>optional int32 minimum = 1;</code>
     * @return The minimum.
     */
    int getMinimum();

    /**
     * <pre>
     * The maximum value, inclusive.
     * </pre>
     *
     * <code>optional int32 maximum = 2;</code>
     * @return Whether the maximum field is set.
     */
    boolean hasMaximum();
    /**
     * <pre>
     * The maximum value, inclusive.
     * </pre>
     *
     * <code>optional int32 maximum = 2;</code>
     * @return The maximum.
     */
    int getMaximum();

    /**
     * <pre>
     * The step between successive values.
     * </pre>
     *
     * <code>optional int32 step = 3;</code>
     * @return Whether the step field is set.
     */
    boolean hasStep();
    /**
     * <pre>
     * The step between successive values.
     * </pre>
     *
     * <code>optional int32 step = 3;</code>
     * @return The step.
     */
    int getStep();
  }
  /**
   * <pre>
   * Numeric input types, or non-numeric input types that accept a discrete set
   * of values can be represented using sliders. For a read-only progress-bar-like
   * appearance, use a slider with `is_enabled` set to false.
   * </pre>
   *
   * Protobuf type {@code components.feed.core.proto.ui.piet.Slider}
   */
  public  static final class Slider extends
      com.google.protobuf.GeneratedMessageLite<
          Slider, Slider.Builder> implements
      // @@protoc_insertion_point(message_implements:components.feed.core.proto.ui.piet.Slider)
      SliderOrBuilder {
    private Slider() {
    }
    private int bitField0_;
    public static final int MINIMUM_FIELD_NUMBER = 1;
    private int minimum_;
    /**
     * <pre>
     * The minimum value, inclusive.
     * </pre>
     *
     * <code>optional int32 minimum = 1;</code>
     * @return Whether the minimum field is set.
     */
    @java.lang.Override
    public boolean hasMinimum() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The minimum value, inclusive.
     * </pre>
     *
     * <code>optional int32 minimum = 1;</code>
     * @return The minimum.
     */
    @java.lang.Override
    public int getMinimum() {
      return minimum_;
    }
    /**
     * <pre>
     * The minimum value, inclusive.
     * </pre>
     *
     * <code>optional int32 minimum = 1;</code>
     * @param value The minimum to set.
     */
    private void setMinimum(int value) {
      bitField0_ |= 0x00000001;
      minimum_ = value;
    }
    /**
     * <pre>
     * The minimum value, inclusive.
     * </pre>
     *
     * <code>optional int32 minimum = 1;</code>
     */
    private void clearMinimum() {
      bitField0_ = (bitField0_ & ~0x00000001);
      minimum_ = 0;
    }

    public static final int MAXIMUM_FIELD_NUMBER = 2;
    private int maximum_;
    /**
     * <pre>
     * The maximum value, inclusive.
     * </pre>
     *
     * <code>optional int32 maximum = 2;</code>
     * @return Whether the maximum field is set.
     */
    @java.lang.Override
    public boolean hasMaximum() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The maximum value, inclusive.
     * </pre>
     *
     * <code>optional int32 maximum = 2;</code>
     * @return The maximum.
     */
    @java.lang.Override
    public int getMaximum() {
      return maximum_;
    }
    /**
     * <pre>
     * The maximum value, inclusive.
     * </pre>
     *
     * <code>optional int32 maximum = 2;</code>
     * @param value The maximum to set.
     */
    private void setMaximum(int value) {
      bitField0_ |= 0x00000002;
      maximum_ = value;
    }
    /**
     * <pre>
     * The maximum value, inclusive.
     * </pre>
     *
     * <code>optional int32 maximum = 2;</code>
     */
    private void clearMaximum() {
      bitField0_ = (bitField0_ & ~0x00000002);
      maximum_ = 0;
    }

    public static final int STEP_FIELD_NUMBER = 3;
    private int step_;
    /**
     * <pre>
     * The step between successive values.
     * </pre>
     *
     * <code>optional int32 step = 3;</code>
     * @return Whether the step field is set.
     */
    @java.lang.Override
    public boolean hasStep() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The step between successive values.
     * </pre>
     *
     * <code>optional int32 step = 3;</code>
     * @return The step.
     */
    @java.lang.Override
    public int getStep() {
      return step_;
    }
    /**
     * <pre>
     * The step between successive values.
     * </pre>
     *
     * <code>optional int32 step = 3;</code>
     * @param value The step to set.
     */
    private void setStep(int value) {
      bitField0_ |= 0x00000004;
      step_ = value;
    }
    /**
     * <pre>
     * The step between successive values.
     * </pre>
     *
     * <code>optional int32 step = 3;</code>
     */
    private void clearStep() {
      bitField0_ = (bitField0_ & ~0x00000004);
      step_ = 0;
    }

    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Numeric input types, or non-numeric input types that accept a discrete set
     * of values can be represented using sliders. For a read-only progress-bar-like
     * appearance, use a slider with `is_enabled` set to false.
     * </pre>
     *
     * Protobuf type {@code components.feed.core.proto.ui.piet.Slider}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider, Builder> implements
        // @@protoc_insertion_point(builder_implements:components.feed.core.proto.ui.piet.Slider)
        org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.SliderOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The minimum value, inclusive.
       * </pre>
       *
       * <code>optional int32 minimum = 1;</code>
       * @return Whether the minimum field is set.
       */
      @java.lang.Override
      public boolean hasMinimum() {
        return instance.hasMinimum();
      }
      /**
       * <pre>
       * The minimum value, inclusive.
       * </pre>
       *
       * <code>optional int32 minimum = 1;</code>
       * @return The minimum.
       */
      @java.lang.Override
      public int getMinimum() {
        return instance.getMinimum();
      }
      /**
       * <pre>
       * The minimum value, inclusive.
       * </pre>
       *
       * <code>optional int32 minimum = 1;</code>
       * @param value The minimum to set.
       * @return This builder for chaining.
       */
      public Builder setMinimum(int value) {
        copyOnWrite();
        instance.setMinimum(value);
        return this;
      }
      /**
       * <pre>
       * The minimum value, inclusive.
       * </pre>
       *
       * <code>optional int32 minimum = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearMinimum() {
        copyOnWrite();
        instance.clearMinimum();
        return this;
      }

      /**
       * <pre>
       * The maximum value, inclusive.
       * </pre>
       *
       * <code>optional int32 maximum = 2;</code>
       * @return Whether the maximum field is set.
       */
      @java.lang.Override
      public boolean hasMaximum() {
        return instance.hasMaximum();
      }
      /**
       * <pre>
       * The maximum value, inclusive.
       * </pre>
       *
       * <code>optional int32 maximum = 2;</code>
       * @return The maximum.
       */
      @java.lang.Override
      public int getMaximum() {
        return instance.getMaximum();
      }
      /**
       * <pre>
       * The maximum value, inclusive.
       * </pre>
       *
       * <code>optional int32 maximum = 2;</code>
       * @param value The maximum to set.
       * @return This builder for chaining.
       */
      public Builder setMaximum(int value) {
        copyOnWrite();
        instance.setMaximum(value);
        return this;
      }
      /**
       * <pre>
       * The maximum value, inclusive.
       * </pre>
       *
       * <code>optional int32 maximum = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaximum() {
        copyOnWrite();
        instance.clearMaximum();
        return this;
      }

      /**
       * <pre>
       * The step between successive values.
       * </pre>
       *
       * <code>optional int32 step = 3;</code>
       * @return Whether the step field is set.
       */
      @java.lang.Override
      public boolean hasStep() {
        return instance.hasStep();
      }
      /**
       * <pre>
       * The step between successive values.
       * </pre>
       *
       * <code>optional int32 step = 3;</code>
       * @return The step.
       */
      @java.lang.Override
      public int getStep() {
        return instance.getStep();
      }
      /**
       * <pre>
       * The step between successive values.
       * </pre>
       *
       * <code>optional int32 step = 3;</code>
       * @param value The step to set.
       * @return This builder for chaining.
       */
      public Builder setStep(int value) {
        copyOnWrite();
        instance.setStep(value);
        return this;
      }
      /**
       * <pre>
       * The step between successive values.
       * </pre>
       *
       * <code>optional int32 step = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearStep() {
        copyOnWrite();
        instance.clearStep();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:components.feed.core.proto.ui.piet.Slider)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "minimum_",
              "maximum_",
              "step_",
            };
            java.lang.String info =
                "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u1004\u0000\u0002" +
                "\u1004\u0001\u0003\u1004\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:components.feed.core.proto.ui.piet.Slider)
    private static final org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider DEFAULT_INSTANCE;
    static {
      Slider defaultInstance = new Slider();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Slider.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.ui.piet.FormFieldsProto.Slider getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Slider> PARSER;

    public static com.google.protobuf.Parser<Slider> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
