// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/wire/piet_shared_state_item.proto

package org.chromium.components.feed.core.proto.wire;

public final class PietSharedStateItemProto {
  private PietSharedStateItemProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface PietSharedStateItemOrBuilder extends
      // @@protoc_insertion_point(interface_extends:feedwire1.PietSharedStateItem)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * ContentId identifying the shared state.
     * </pre>
     *
     * <code>optional .feedwire1.ContentId content_id = 1;</code>
     * @return Whether the contentId field is set.
     */
    boolean hasContentId();
    /**
     * <pre>
     * ContentId identifying the shared state.
     * </pre>
     *
     * <code>optional .feedwire1.ContentId content_id = 1;</code>
     * @return The contentId.
     */
    org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId getContentId();

    /**
     * <pre>
     * A Piet Shared State which is used by a set of Piet cards.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.PietSharedState piet_shared_state = 2;</code>
     * @return Whether the pietSharedState field is set.
     */
    boolean hasPietSharedState();
    /**
     * <pre>
     * A Piet Shared State which is used by a set of Piet cards.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.PietSharedState piet_shared_state = 2;</code>
     * @return The pietSharedState.
     */
    org.chromium.components.feed.core.proto.ui.piet.PietProto.PietSharedState getPietSharedState();
  }
  /**
   * <pre>
   * This is a metadata payload containing a Piet Shared State.
   * </pre>
   *
   * Protobuf type {@code feedwire1.PietSharedStateItem}
   */
  public  static final class PietSharedStateItem extends
      com.google.protobuf.GeneratedMessageLite<
          PietSharedStateItem, PietSharedStateItem.Builder> implements
      // @@protoc_insertion_point(message_implements:feedwire1.PietSharedStateItem)
      PietSharedStateItemOrBuilder {
    private PietSharedStateItem() {
    }
    private int bitField0_;
    public static final int CONTENT_ID_FIELD_NUMBER = 1;
    private org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId contentId_;
    /**
     * <pre>
     * ContentId identifying the shared state.
     * </pre>
     *
     * <code>optional .feedwire1.ContentId content_id = 1;</code>
     */
    @java.lang.Override
    public boolean hasContentId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * ContentId identifying the shared state.
     * </pre>
     *
     * <code>optional .feedwire1.ContentId content_id = 1;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId getContentId() {
      return contentId_ == null ? org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId.getDefaultInstance() : contentId_;
    }
    /**
     * <pre>
     * ContentId identifying the shared state.
     * </pre>
     *
     * <code>optional .feedwire1.ContentId content_id = 1;</code>
     */
    private void setContentId(org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId value) {
      value.getClass();
  contentId_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <pre>
     * ContentId identifying the shared state.
     * </pre>
     *
     * <code>optional .feedwire1.ContentId content_id = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeContentId(org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId value) {
      value.getClass();
  if (contentId_ != null &&
          contentId_ != org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId.getDefaultInstance()) {
        contentId_ =
          org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId.newBuilder(contentId_).mergeFrom(value).buildPartial();
      } else {
        contentId_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * ContentId identifying the shared state.
     * </pre>
     *
     * <code>optional .feedwire1.ContentId content_id = 1;</code>
     */
    private void clearContentId() {  contentId_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int PIET_SHARED_STATE_FIELD_NUMBER = 2;
    private org.chromium.components.feed.core.proto.ui.piet.PietProto.PietSharedState pietSharedState_;
    /**
     * <pre>
     * A Piet Shared State which is used by a set of Piet cards.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.PietSharedState piet_shared_state = 2;</code>
     */
    @java.lang.Override
    public boolean hasPietSharedState() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * A Piet Shared State which is used by a set of Piet cards.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.PietSharedState piet_shared_state = 2;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.ui.piet.PietProto.PietSharedState getPietSharedState() {
      return pietSharedState_ == null ? org.chromium.components.feed.core.proto.ui.piet.PietProto.PietSharedState.getDefaultInstance() : pietSharedState_;
    }
    /**
     * <pre>
     * A Piet Shared State which is used by a set of Piet cards.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.PietSharedState piet_shared_state = 2;</code>
     */
    private void setPietSharedState(org.chromium.components.feed.core.proto.ui.piet.PietProto.PietSharedState value) {
      value.getClass();
  pietSharedState_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <pre>
     * A Piet Shared State which is used by a set of Piet cards.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.PietSharedState piet_shared_state = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergePietSharedState(org.chromium.components.feed.core.proto.ui.piet.PietProto.PietSharedState value) {
      value.getClass();
  if (pietSharedState_ != null &&
          pietSharedState_ != org.chromium.components.feed.core.proto.ui.piet.PietProto.PietSharedState.getDefaultInstance()) {
        pietSharedState_ =
          org.chromium.components.feed.core.proto.ui.piet.PietProto.PietSharedState.newBuilder(pietSharedState_).mergeFrom(value).buildPartial();
      } else {
        pietSharedState_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * A Piet Shared State which is used by a set of Piet cards.
     * </pre>
     *
     * <code>optional .components.feed.core.proto.ui.piet.PietSharedState piet_shared_state = 2;</code>
     */
    private void clearPietSharedState() {  pietSharedState_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * This is a metadata payload containing a Piet Shared State.
     * </pre>
     *
     * Protobuf type {@code feedwire1.PietSharedStateItem}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem, Builder> implements
        // @@protoc_insertion_point(builder_implements:feedwire1.PietSharedStateItem)
        org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItemOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * ContentId identifying the shared state.
       * </pre>
       *
       * <code>optional .feedwire1.ContentId content_id = 1;</code>
       */
      @java.lang.Override
      public boolean hasContentId() {
        return instance.hasContentId();
      }
      /**
       * <pre>
       * ContentId identifying the shared state.
       * </pre>
       *
       * <code>optional .feedwire1.ContentId content_id = 1;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId getContentId() {
        return instance.getContentId();
      }
      /**
       * <pre>
       * ContentId identifying the shared state.
       * </pre>
       *
       * <code>optional .feedwire1.ContentId content_id = 1;</code>
       */
      public Builder setContentId(org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId value) {
        copyOnWrite();
        instance.setContentId(value);
        return this;
        }
      /**
       * <pre>
       * ContentId identifying the shared state.
       * </pre>
       *
       * <code>optional .feedwire1.ContentId content_id = 1;</code>
       */
      public Builder setContentId(
          org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId.Builder builderForValue) {
        copyOnWrite();
        instance.setContentId(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * ContentId identifying the shared state.
       * </pre>
       *
       * <code>optional .feedwire1.ContentId content_id = 1;</code>
       */
      public Builder mergeContentId(org.chromium.components.feed.core.proto.wire.ContentIdProto.ContentId value) {
        copyOnWrite();
        instance.mergeContentId(value);
        return this;
      }
      /**
       * <pre>
       * ContentId identifying the shared state.
       * </pre>
       *
       * <code>optional .feedwire1.ContentId content_id = 1;</code>
       */
      public Builder clearContentId() {  copyOnWrite();
        instance.clearContentId();
        return this;
      }

      /**
       * <pre>
       * A Piet Shared State which is used by a set of Piet cards.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.PietSharedState piet_shared_state = 2;</code>
       */
      @java.lang.Override
      public boolean hasPietSharedState() {
        return instance.hasPietSharedState();
      }
      /**
       * <pre>
       * A Piet Shared State which is used by a set of Piet cards.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.PietSharedState piet_shared_state = 2;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.ui.piet.PietProto.PietSharedState getPietSharedState() {
        return instance.getPietSharedState();
      }
      /**
       * <pre>
       * A Piet Shared State which is used by a set of Piet cards.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.PietSharedState piet_shared_state = 2;</code>
       */
      public Builder setPietSharedState(org.chromium.components.feed.core.proto.ui.piet.PietProto.PietSharedState value) {
        copyOnWrite();
        instance.setPietSharedState(value);
        return this;
        }
      /**
       * <pre>
       * A Piet Shared State which is used by a set of Piet cards.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.PietSharedState piet_shared_state = 2;</code>
       */
      public Builder setPietSharedState(
          org.chromium.components.feed.core.proto.ui.piet.PietProto.PietSharedState.Builder builderForValue) {
        copyOnWrite();
        instance.setPietSharedState(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A Piet Shared State which is used by a set of Piet cards.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.PietSharedState piet_shared_state = 2;</code>
       */
      public Builder mergePietSharedState(org.chromium.components.feed.core.proto.ui.piet.PietProto.PietSharedState value) {
        copyOnWrite();
        instance.mergePietSharedState(value);
        return this;
      }
      /**
       * <pre>
       * A Piet Shared State which is used by a set of Piet cards.
       * </pre>
       *
       * <code>optional .components.feed.core.proto.ui.piet.PietSharedState piet_shared_state = 2;</code>
       */
      public Builder clearPietSharedState() {  copyOnWrite();
        instance.clearPietSharedState();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:feedwire1.PietSharedStateItem)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "contentId_",
              "pietSharedState_",
            };
            java.lang.String info =
                "\u0001\u0002\u0000\u0001\u0001\u0002\u0002\u0000\u0000\u0001\u0001\u1009\u0000\u0002" +
                "\u1409\u0001";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:feedwire1.PietSharedStateItem)
    private static final org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem DEFAULT_INSTANCE;
    static {
      PietSharedStateItem defaultInstance = new PietSharedStateItem();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        PietSharedStateItem.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.wire.PietSharedStateItemProto.PietSharedStateItem getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PietSharedStateItem> PARSER;

    public static com.google.protobuf.Parser<PietSharedStateItem> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
