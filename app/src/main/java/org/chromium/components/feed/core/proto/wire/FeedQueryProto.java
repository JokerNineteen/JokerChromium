// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/wire/feed_query.proto

package org.chromium.components.feed.core.proto.wire;

public final class FeedQueryProto {
  private FeedQueryProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface FeedQueryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:feedwire1.FeedQuery)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The reason the query is being initiated.
     * </pre>
     *
     * <code>optional .feedwire1.FeedQuery.RequestReason reason = 1;</code>
     * @return Whether the reason field is set.
     */
    boolean hasReason();
    /**
     * <pre>
     * The reason the query is being initiated.
     * </pre>
     *
     * <code>optional .feedwire1.FeedQuery.RequestReason reason = 1;</code>
     * @return The reason.
     */
    org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery.RequestReason getReason();

    /**
     * <pre>
     * Used to fetch the next page when scrolling copied from
     * Token.next_page_token
     * </pre>
     *
     * <code>optional bytes page_token = 2;</code>
     * @return Whether the pageToken field is set.
     */
    boolean hasPageToken();
    /**
     * <pre>
     * Used to fetch the next page when scrolling copied from
     * Token.next_page_token
     * </pre>
     *
     * <code>optional bytes page_token = 2;</code>
     * @return The pageToken.
     */
    com.google.protobuf.ByteString getPageToken();

    /**
     * <pre>
     * Information on how to do content fulfillment for Chrome.
     * </pre>
     *
     * <code>optional .feedwire1.ChromeFulfillmentInfo chrome_fulfillment_info = 3;</code>
     * @return Whether the chromeFulfillmentInfo field is set.
     */
    boolean hasChromeFulfillmentInfo();
    /**
     * <pre>
     * Information on how to do content fulfillment for Chrome.
     * </pre>
     *
     * <code>optional .feedwire1.ChromeFulfillmentInfo chrome_fulfillment_info = 3;</code>
     * @return The chromeFulfillmentInfo.
     */
    org.chromium.components.feed.core.proto.wire.ChromeFulfillmentInfoProto.ChromeFulfillmentInfo getChromeFulfillmentInfo();
  }
  /**
   * Protobuf type {@code feedwire1.FeedQuery}
   */
  public  static final class FeedQuery extends
      com.google.protobuf.GeneratedMessageLite<
          FeedQuery, FeedQuery.Builder> implements
      // @@protoc_insertion_point(message_implements:feedwire1.FeedQuery)
      FeedQueryOrBuilder {
    private FeedQuery() {
      pageToken_ = com.google.protobuf.ByteString.EMPTY;
    }
    /**
     * Protobuf enum {@code feedwire1.FeedQuery.RequestReason}
     */
    public enum RequestReason
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       * Bucket for any not listed. Should not be used (prefer adding a new
       * request reason)
       * </pre>
       *
       * <code>UNKNOWN_REQUEST_REASON = 0;</code>
       */
      UNKNOWN_REQUEST_REASON(0),
      /**
       * <pre>
       * App is manually triggering a request, outside of scheduling a request.
       * Should be used rarely.
       * </pre>
       *
       * <code>MANUAL_REFRESH = 1;</code>
       */
      MANUAL_REFRESH(1),
      /**
       * <pre>
       * Host wants a request to refresh content.
       * </pre>
       *
       * <code>SCHEDULED_REFRESH = 2;</code>
       */
      SCHEDULED_REFRESH(2),
      /**
       * <pre>
       * Loading more content (should be deprecated soon for more clarity behind
       * reason).
       * </pre>
       *
       * <code>NEXT_PAGE_SCROLL = 4;</code>
       */
      NEXT_PAGE_SCROLL(4),
      /**
       * <pre>
       * Refresh after clearing all content
       * </pre>
       *
       * <code>CLEAR_ALL = 5;</code>
       */
      CLEAR_ALL(5),
      /**
       * <pre>
       * Refresh from zero state (no content)
       * </pre>
       *
       * <code>ZERO_STATE_REFRESH = 6;</code>
       */
      ZERO_STATE_REFRESH(6),
      /**
       * <pre>
       * Initial loading of content for a session
       * </pre>
       *
       * <code>INITIAL_LOAD = 7;</code>
       */
      INITIAL_LOAD(7),
      /**
       * <pre>
       * Loading new content (while displaying existing content)
       * </pre>
       *
       * <code>WITH_CONTENT = 8;</code>
       */
      WITH_CONTENT(8),
      ;

      /**
       * <pre>
       * Bucket for any not listed. Should not be used (prefer adding a new
       * request reason)
       * </pre>
       *
       * <code>UNKNOWN_REQUEST_REASON = 0;</code>
       */
      public static final int UNKNOWN_REQUEST_REASON_VALUE = 0;
      /**
       * <pre>
       * App is manually triggering a request, outside of scheduling a request.
       * Should be used rarely.
       * </pre>
       *
       * <code>MANUAL_REFRESH = 1;</code>
       */
      public static final int MANUAL_REFRESH_VALUE = 1;
      /**
       * <pre>
       * Host wants a request to refresh content.
       * </pre>
       *
       * <code>SCHEDULED_REFRESH = 2;</code>
       */
      public static final int SCHEDULED_REFRESH_VALUE = 2;
      /**
       * <pre>
       * Loading more content (should be deprecated soon for more clarity behind
       * reason).
       * </pre>
       *
       * <code>NEXT_PAGE_SCROLL = 4;</code>
       */
      public static final int NEXT_PAGE_SCROLL_VALUE = 4;
      /**
       * <pre>
       * Refresh after clearing all content
       * </pre>
       *
       * <code>CLEAR_ALL = 5;</code>
       */
      public static final int CLEAR_ALL_VALUE = 5;
      /**
       * <pre>
       * Refresh from zero state (no content)
       * </pre>
       *
       * <code>ZERO_STATE_REFRESH = 6;</code>
       */
      public static final int ZERO_STATE_REFRESH_VALUE = 6;
      /**
       * <pre>
       * Initial loading of content for a session
       * </pre>
       *
       * <code>INITIAL_LOAD = 7;</code>
       */
      public static final int INITIAL_LOAD_VALUE = 7;
      /**
       * <pre>
       * Loading new content (while displaying existing content)
       * </pre>
       *
       * <code>WITH_CONTENT = 8;</code>
       */
      public static final int WITH_CONTENT_VALUE = 8;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RequestReason valueOf(int value) {
        return forNumber(value);
      }

      public static RequestReason forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN_REQUEST_REASON;
          case 1: return MANUAL_REFRESH;
          case 2: return SCHEDULED_REFRESH;
          case 4: return NEXT_PAGE_SCROLL;
          case 5: return CLEAR_ALL;
          case 6: return ZERO_STATE_REFRESH;
          case 7: return INITIAL_LOAD;
          case 8: return WITH_CONTENT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<RequestReason>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          RequestReason> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RequestReason>() {
              @java.lang.Override
              public RequestReason findValueByNumber(int number) {
                return RequestReason.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return RequestReasonVerifier.INSTANCE;
      }

      private static final class RequestReasonVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new RequestReasonVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return RequestReason.forNumber(number) != null;
              }
            };

      private final int value;

      private RequestReason(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:feedwire1.FeedQuery.RequestReason)
    }

    private int bitField0_;
    public static final int REASON_FIELD_NUMBER = 1;
    private int reason_;
    /**
     * <pre>
     * The reason the query is being initiated.
     * </pre>
     *
     * <code>optional .feedwire1.FeedQuery.RequestReason reason = 1;</code>
     * @return Whether the reason field is set.
     */
    @java.lang.Override
    public boolean hasReason() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The reason the query is being initiated.
     * </pre>
     *
     * <code>optional .feedwire1.FeedQuery.RequestReason reason = 1;</code>
     * @return The reason.
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery.RequestReason getReason() {
      org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery.RequestReason result = org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery.RequestReason.forNumber(reason_);
      return result == null ? org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery.RequestReason.UNKNOWN_REQUEST_REASON : result;
    }
    /**
     * <pre>
     * The reason the query is being initiated.
     * </pre>
     *
     * <code>optional .feedwire1.FeedQuery.RequestReason reason = 1;</code>
     * @param value The reason to set.
     */
    private void setReason(org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery.RequestReason value) {
      reason_ = value.getNumber();
      bitField0_ |= 0x00000001;
    }
    /**
     * <pre>
     * The reason the query is being initiated.
     * </pre>
     *
     * <code>optional .feedwire1.FeedQuery.RequestReason reason = 1;</code>
     */
    private void clearReason() {
      bitField0_ = (bitField0_ & ~0x00000001);
      reason_ = 0;
    }

    public static final int PAGE_TOKEN_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString pageToken_;
    /**
     * <pre>
     * Used to fetch the next page when scrolling copied from
     * Token.next_page_token
     * </pre>
     *
     * <code>optional bytes page_token = 2;</code>
     * @return Whether the pageToken field is set.
     */
    @java.lang.Override
    public boolean hasPageToken() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Used to fetch the next page when scrolling copied from
     * Token.next_page_token
     * </pre>
     *
     * <code>optional bytes page_token = 2;</code>
     * @return The pageToken.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPageToken() {
      return pageToken_;
    }
    /**
     * <pre>
     * Used to fetch the next page when scrolling copied from
     * Token.next_page_token
     * </pre>
     *
     * <code>optional bytes page_token = 2;</code>
     * @param value The pageToken to set.
     */
    private void setPageToken(com.google.protobuf.ByteString value) {
      value.getClass();
  bitField0_ |= 0x00000002;
      pageToken_ = value;
    }
    /**
     * <pre>
     * Used to fetch the next page when scrolling copied from
     * Token.next_page_token
     * </pre>
     *
     * <code>optional bytes page_token = 2;</code>
     */
    private void clearPageToken() {
      bitField0_ = (bitField0_ & ~0x00000002);
      pageToken_ = getDefaultInstance().getPageToken();
    }

    public static final int CHROME_FULFILLMENT_INFO_FIELD_NUMBER = 3;
    private org.chromium.components.feed.core.proto.wire.ChromeFulfillmentInfoProto.ChromeFulfillmentInfo chromeFulfillmentInfo_;
    /**
     * <pre>
     * Information on how to do content fulfillment for Chrome.
     * </pre>
     *
     * <code>optional .feedwire1.ChromeFulfillmentInfo chrome_fulfillment_info = 3;</code>
     */
    @java.lang.Override
    public boolean hasChromeFulfillmentInfo() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Information on how to do content fulfillment for Chrome.
     * </pre>
     *
     * <code>optional .feedwire1.ChromeFulfillmentInfo chrome_fulfillment_info = 3;</code>
     */
    @java.lang.Override
    public org.chromium.components.feed.core.proto.wire.ChromeFulfillmentInfoProto.ChromeFulfillmentInfo getChromeFulfillmentInfo() {
      return chromeFulfillmentInfo_ == null ? org.chromium.components.feed.core.proto.wire.ChromeFulfillmentInfoProto.ChromeFulfillmentInfo.getDefaultInstance() : chromeFulfillmentInfo_;
    }
    /**
     * <pre>
     * Information on how to do content fulfillment for Chrome.
     * </pre>
     *
     * <code>optional .feedwire1.ChromeFulfillmentInfo chrome_fulfillment_info = 3;</code>
     */
    private void setChromeFulfillmentInfo(org.chromium.components.feed.core.proto.wire.ChromeFulfillmentInfoProto.ChromeFulfillmentInfo value) {
      value.getClass();
  chromeFulfillmentInfo_ = value;
      bitField0_ |= 0x00000004;
      }
    /**
     * <pre>
     * Information on how to do content fulfillment for Chrome.
     * </pre>
     *
     * <code>optional .feedwire1.ChromeFulfillmentInfo chrome_fulfillment_info = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeChromeFulfillmentInfo(org.chromium.components.feed.core.proto.wire.ChromeFulfillmentInfoProto.ChromeFulfillmentInfo value) {
      value.getClass();
  if (chromeFulfillmentInfo_ != null &&
          chromeFulfillmentInfo_ != org.chromium.components.feed.core.proto.wire.ChromeFulfillmentInfoProto.ChromeFulfillmentInfo.getDefaultInstance()) {
        chromeFulfillmentInfo_ =
          org.chromium.components.feed.core.proto.wire.ChromeFulfillmentInfoProto.ChromeFulfillmentInfo.newBuilder(chromeFulfillmentInfo_).mergeFrom(value).buildPartial();
      } else {
        chromeFulfillmentInfo_ = value;
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <pre>
     * Information on how to do content fulfillment for Chrome.
     * </pre>
     *
     * <code>optional .feedwire1.ChromeFulfillmentInfo chrome_fulfillment_info = 3;</code>
     */
    private void clearChromeFulfillmentInfo() {  chromeFulfillmentInfo_ = null;
      bitField0_ = (bitField0_ & ~0x00000004);
    }

    public static org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code feedwire1.FeedQuery}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery, Builder> implements
        // @@protoc_insertion_point(builder_implements:feedwire1.FeedQuery)
        org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQueryOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The reason the query is being initiated.
       * </pre>
       *
       * <code>optional .feedwire1.FeedQuery.RequestReason reason = 1;</code>
       * @return Whether the reason field is set.
       */
      @java.lang.Override
      public boolean hasReason() {
        return instance.hasReason();
      }
      /**
       * <pre>
       * The reason the query is being initiated.
       * </pre>
       *
       * <code>optional .feedwire1.FeedQuery.RequestReason reason = 1;</code>
       * @return The reason.
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery.RequestReason getReason() {
        return instance.getReason();
      }
      /**
       * <pre>
       * The reason the query is being initiated.
       * </pre>
       *
       * <code>optional .feedwire1.FeedQuery.RequestReason reason = 1;</code>
       * @param value The enum numeric value on the wire for reason to set.
       * @return This builder for chaining.
       */
      public Builder setReason(org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery.RequestReason value) {
        copyOnWrite();
        instance.setReason(value);
        return this;
      }
      /**
       * <pre>
       * The reason the query is being initiated.
       * </pre>
       *
       * <code>optional .feedwire1.FeedQuery.RequestReason reason = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearReason() {
        copyOnWrite();
        instance.clearReason();
        return this;
      }

      /**
       * <pre>
       * Used to fetch the next page when scrolling copied from
       * Token.next_page_token
       * </pre>
       *
       * <code>optional bytes page_token = 2;</code>
       * @return Whether the pageToken field is set.
       */
      @java.lang.Override
      public boolean hasPageToken() {
        return instance.hasPageToken();
      }
      /**
       * <pre>
       * Used to fetch the next page when scrolling copied from
       * Token.next_page_token
       * </pre>
       *
       * <code>optional bytes page_token = 2;</code>
       * @return The pageToken.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPageToken() {
        return instance.getPageToken();
      }
      /**
       * <pre>
       * Used to fetch the next page when scrolling copied from
       * Token.next_page_token
       * </pre>
       *
       * <code>optional bytes page_token = 2;</code>
       * @param value The pageToken to set.
       * @return This builder for chaining.
       */
      public Builder setPageToken(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPageToken(value);
        return this;
      }
      /**
       * <pre>
       * Used to fetch the next page when scrolling copied from
       * Token.next_page_token
       * </pre>
       *
       * <code>optional bytes page_token = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPageToken() {
        copyOnWrite();
        instance.clearPageToken();
        return this;
      }

      /**
       * <pre>
       * Information on how to do content fulfillment for Chrome.
       * </pre>
       *
       * <code>optional .feedwire1.ChromeFulfillmentInfo chrome_fulfillment_info = 3;</code>
       */
      @java.lang.Override
      public boolean hasChromeFulfillmentInfo() {
        return instance.hasChromeFulfillmentInfo();
      }
      /**
       * <pre>
       * Information on how to do content fulfillment for Chrome.
       * </pre>
       *
       * <code>optional .feedwire1.ChromeFulfillmentInfo chrome_fulfillment_info = 3;</code>
       */
      @java.lang.Override
      public org.chromium.components.feed.core.proto.wire.ChromeFulfillmentInfoProto.ChromeFulfillmentInfo getChromeFulfillmentInfo() {
        return instance.getChromeFulfillmentInfo();
      }
      /**
       * <pre>
       * Information on how to do content fulfillment for Chrome.
       * </pre>
       *
       * <code>optional .feedwire1.ChromeFulfillmentInfo chrome_fulfillment_info = 3;</code>
       */
      public Builder setChromeFulfillmentInfo(org.chromium.components.feed.core.proto.wire.ChromeFulfillmentInfoProto.ChromeFulfillmentInfo value) {
        copyOnWrite();
        instance.setChromeFulfillmentInfo(value);
        return this;
        }
      /**
       * <pre>
       * Information on how to do content fulfillment for Chrome.
       * </pre>
       *
       * <code>optional .feedwire1.ChromeFulfillmentInfo chrome_fulfillment_info = 3;</code>
       */
      public Builder setChromeFulfillmentInfo(
          org.chromium.components.feed.core.proto.wire.ChromeFulfillmentInfoProto.ChromeFulfillmentInfo.Builder builderForValue) {
        copyOnWrite();
        instance.setChromeFulfillmentInfo(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Information on how to do content fulfillment for Chrome.
       * </pre>
       *
       * <code>optional .feedwire1.ChromeFulfillmentInfo chrome_fulfillment_info = 3;</code>
       */
      public Builder mergeChromeFulfillmentInfo(org.chromium.components.feed.core.proto.wire.ChromeFulfillmentInfoProto.ChromeFulfillmentInfo value) {
        copyOnWrite();
        instance.mergeChromeFulfillmentInfo(value);
        return this;
      }
      /**
       * <pre>
       * Information on how to do content fulfillment for Chrome.
       * </pre>
       *
       * <code>optional .feedwire1.ChromeFulfillmentInfo chrome_fulfillment_info = 3;</code>
       */
      public Builder clearChromeFulfillmentInfo() {  copyOnWrite();
        instance.clearChromeFulfillmentInfo();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:feedwire1.FeedQuery)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "reason_",
              org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery.RequestReason.internalGetVerifier(),
              "pageToken_",
              "chromeFulfillmentInfo_",
            };
            java.lang.String info =
                "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u100c\u0000\u0002" +
                "\u100a\u0001\u0003\u1009\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:feedwire1.FeedQuery)
    private static final org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery DEFAULT_INSTANCE;
    static {
      FeedQuery defaultInstance = new FeedQuery();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        FeedQuery.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.wire.FeedQueryProto.FeedQuery getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<FeedQuery> PARSER;

    public static com.google.protobuf.Parser<FeedQuery> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
