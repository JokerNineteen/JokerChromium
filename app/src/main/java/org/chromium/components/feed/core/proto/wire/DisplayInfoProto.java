// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/wire/display_info.proto

package org.chromium.components.feed.core.proto.wire;

public final class DisplayInfoProto {
  private DisplayInfoProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface DisplayInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:feedwire1.DisplayInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Density of the screen in physical pixels per density independent pixel
     * (DIP); see:
     * http://developer.android.com/reference/android/util/DisplayMetrics.html#density
     * </pre>
     *
     * <code>optional float screen_density = 1;</code>
     * @return Whether the screenDensity field is set.
     */
    boolean hasScreenDensity();
    /**
     * <pre>
     * Density of the screen in physical pixels per density independent pixel
     * (DIP); see:
     * http://developer.android.com/reference/android/util/DisplayMetrics.html#density
     * </pre>
     *
     * <code>optional float screen_density = 1;</code>
     * @return The screenDensity.
     */
    float getScreenDensity();

    /**
     * <pre>
     * The width of the screen in pixels.
     * </pre>
     *
     * <code>optional uint32 screen_width_in_pixels = 2;</code>
     * @return Whether the screenWidthInPixels field is set.
     */
    boolean hasScreenWidthInPixels();
    /**
     * <pre>
     * The width of the screen in pixels.
     * </pre>
     *
     * <code>optional uint32 screen_width_in_pixels = 2;</code>
     * @return The screenWidthInPixels.
     */
    int getScreenWidthInPixels();

    /**
     * <pre>
     * The height of the screen in pixels.
     * </pre>
     *
     * <code>optional uint32 screen_height_in_pixels = 3;</code>
     * @return Whether the screenHeightInPixels field is set.
     */
    boolean hasScreenHeightInPixels();
    /**
     * <pre>
     * The height of the screen in pixels.
     * </pre>
     *
     * <code>optional uint32 screen_height_in_pixels = 3;</code>
     * @return The screenHeightInPixels.
     */
    int getScreenHeightInPixels();
  }
  /**
   * <pre>
   * The information about the client's screen.
   * Next id: 4
   * </pre>
   *
   * Protobuf type {@code feedwire1.DisplayInfo}
   */
  public  static final class DisplayInfo extends
      com.google.protobuf.GeneratedMessageLite<
          DisplayInfo, DisplayInfo.Builder> implements
      // @@protoc_insertion_point(message_implements:feedwire1.DisplayInfo)
      DisplayInfoOrBuilder {
    private DisplayInfo() {
    }
    private int bitField0_;
    public static final int SCREEN_DENSITY_FIELD_NUMBER = 1;
    private float screenDensity_;
    /**
     * <pre>
     * Density of the screen in physical pixels per density independent pixel
     * (DIP); see:
     * http://developer.android.com/reference/android/util/DisplayMetrics.html#density
     * </pre>
     *
     * <code>optional float screen_density = 1;</code>
     * @return Whether the screenDensity field is set.
     */
    @java.lang.Override
    public boolean hasScreenDensity() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Density of the screen in physical pixels per density independent pixel
     * (DIP); see:
     * http://developer.android.com/reference/android/util/DisplayMetrics.html#density
     * </pre>
     *
     * <code>optional float screen_density = 1;</code>
     * @return The screenDensity.
     */
    @java.lang.Override
    public float getScreenDensity() {
      return screenDensity_;
    }
    /**
     * <pre>
     * Density of the screen in physical pixels per density independent pixel
     * (DIP); see:
     * http://developer.android.com/reference/android/util/DisplayMetrics.html#density
     * </pre>
     *
     * <code>optional float screen_density = 1;</code>
     * @param value The screenDensity to set.
     */
    private void setScreenDensity(float value) {
      bitField0_ |= 0x00000001;
      screenDensity_ = value;
    }
    /**
     * <pre>
     * Density of the screen in physical pixels per density independent pixel
     * (DIP); see:
     * http://developer.android.com/reference/android/util/DisplayMetrics.html#density
     * </pre>
     *
     * <code>optional float screen_density = 1;</code>
     */
    private void clearScreenDensity() {
      bitField0_ = (bitField0_ & ~0x00000001);
      screenDensity_ = 0F;
    }

    public static final int SCREEN_WIDTH_IN_PIXELS_FIELD_NUMBER = 2;
    private int screenWidthInPixels_;
    /**
     * <pre>
     * The width of the screen in pixels.
     * </pre>
     *
     * <code>optional uint32 screen_width_in_pixels = 2;</code>
     * @return Whether the screenWidthInPixels field is set.
     */
    @java.lang.Override
    public boolean hasScreenWidthInPixels() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The width of the screen in pixels.
     * </pre>
     *
     * <code>optional uint32 screen_width_in_pixels = 2;</code>
     * @return The screenWidthInPixels.
     */
    @java.lang.Override
    public int getScreenWidthInPixels() {
      return screenWidthInPixels_;
    }
    /**
     * <pre>
     * The width of the screen in pixels.
     * </pre>
     *
     * <code>optional uint32 screen_width_in_pixels = 2;</code>
     * @param value The screenWidthInPixels to set.
     */
    private void setScreenWidthInPixels(int value) {
      bitField0_ |= 0x00000002;
      screenWidthInPixels_ = value;
    }
    /**
     * <pre>
     * The width of the screen in pixels.
     * </pre>
     *
     * <code>optional uint32 screen_width_in_pixels = 2;</code>
     */
    private void clearScreenWidthInPixels() {
      bitField0_ = (bitField0_ & ~0x00000002);
      screenWidthInPixels_ = 0;
    }

    public static final int SCREEN_HEIGHT_IN_PIXELS_FIELD_NUMBER = 3;
    private int screenHeightInPixels_;
    /**
     * <pre>
     * The height of the screen in pixels.
     * </pre>
     *
     * <code>optional uint32 screen_height_in_pixels = 3;</code>
     * @return Whether the screenHeightInPixels field is set.
     */
    @java.lang.Override
    public boolean hasScreenHeightInPixels() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The height of the screen in pixels.
     * </pre>
     *
     * <code>optional uint32 screen_height_in_pixels = 3;</code>
     * @return The screenHeightInPixels.
     */
    @java.lang.Override
    public int getScreenHeightInPixels() {
      return screenHeightInPixels_;
    }
    /**
     * <pre>
     * The height of the screen in pixels.
     * </pre>
     *
     * <code>optional uint32 screen_height_in_pixels = 3;</code>
     * @param value The screenHeightInPixels to set.
     */
    private void setScreenHeightInPixels(int value) {
      bitField0_ |= 0x00000004;
      screenHeightInPixels_ = value;
    }
    /**
     * <pre>
     * The height of the screen in pixels.
     * </pre>
     *
     * <code>optional uint32 screen_height_in_pixels = 3;</code>
     */
    private void clearScreenHeightInPixels() {
      bitField0_ = (bitField0_ & ~0x00000004);
      screenHeightInPixels_ = 0;
    }

    public static org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * The information about the client's screen.
     * Next id: 4
     * </pre>
     *
     * Protobuf type {@code feedwire1.DisplayInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo, Builder> implements
        // @@protoc_insertion_point(builder_implements:feedwire1.DisplayInfo)
        org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfoOrBuilder {
      // Construct using org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Density of the screen in physical pixels per density independent pixel
       * (DIP); see:
       * http://developer.android.com/reference/android/util/DisplayMetrics.html#density
       * </pre>
       *
       * <code>optional float screen_density = 1;</code>
       * @return Whether the screenDensity field is set.
       */
      @java.lang.Override
      public boolean hasScreenDensity() {
        return instance.hasScreenDensity();
      }
      /**
       * <pre>
       * Density of the screen in physical pixels per density independent pixel
       * (DIP); see:
       * http://developer.android.com/reference/android/util/DisplayMetrics.html#density
       * </pre>
       *
       * <code>optional float screen_density = 1;</code>
       * @return The screenDensity.
       */
      @java.lang.Override
      public float getScreenDensity() {
        return instance.getScreenDensity();
      }
      /**
       * <pre>
       * Density of the screen in physical pixels per density independent pixel
       * (DIP); see:
       * http://developer.android.com/reference/android/util/DisplayMetrics.html#density
       * </pre>
       *
       * <code>optional float screen_density = 1;</code>
       * @param value The screenDensity to set.
       * @return This builder for chaining.
       */
      public Builder setScreenDensity(float value) {
        copyOnWrite();
        instance.setScreenDensity(value);
        return this;
      }
      /**
       * <pre>
       * Density of the screen in physical pixels per density independent pixel
       * (DIP); see:
       * http://developer.android.com/reference/android/util/DisplayMetrics.html#density
       * </pre>
       *
       * <code>optional float screen_density = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearScreenDensity() {
        copyOnWrite();
        instance.clearScreenDensity();
        return this;
      }

      /**
       * <pre>
       * The width of the screen in pixels.
       * </pre>
       *
       * <code>optional uint32 screen_width_in_pixels = 2;</code>
       * @return Whether the screenWidthInPixels field is set.
       */
      @java.lang.Override
      public boolean hasScreenWidthInPixels() {
        return instance.hasScreenWidthInPixels();
      }
      /**
       * <pre>
       * The width of the screen in pixels.
       * </pre>
       *
       * <code>optional uint32 screen_width_in_pixels = 2;</code>
       * @return The screenWidthInPixels.
       */
      @java.lang.Override
      public int getScreenWidthInPixels() {
        return instance.getScreenWidthInPixels();
      }
      /**
       * <pre>
       * The width of the screen in pixels.
       * </pre>
       *
       * <code>optional uint32 screen_width_in_pixels = 2;</code>
       * @param value The screenWidthInPixels to set.
       * @return This builder for chaining.
       */
      public Builder setScreenWidthInPixels(int value) {
        copyOnWrite();
        instance.setScreenWidthInPixels(value);
        return this;
      }
      /**
       * <pre>
       * The width of the screen in pixels.
       * </pre>
       *
       * <code>optional uint32 screen_width_in_pixels = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearScreenWidthInPixels() {
        copyOnWrite();
        instance.clearScreenWidthInPixels();
        return this;
      }

      /**
       * <pre>
       * The height of the screen in pixels.
       * </pre>
       *
       * <code>optional uint32 screen_height_in_pixels = 3;</code>
       * @return Whether the screenHeightInPixels field is set.
       */
      @java.lang.Override
      public boolean hasScreenHeightInPixels() {
        return instance.hasScreenHeightInPixels();
      }
      /**
       * <pre>
       * The height of the screen in pixels.
       * </pre>
       *
       * <code>optional uint32 screen_height_in_pixels = 3;</code>
       * @return The screenHeightInPixels.
       */
      @java.lang.Override
      public int getScreenHeightInPixels() {
        return instance.getScreenHeightInPixels();
      }
      /**
       * <pre>
       * The height of the screen in pixels.
       * </pre>
       *
       * <code>optional uint32 screen_height_in_pixels = 3;</code>
       * @param value The screenHeightInPixels to set.
       * @return This builder for chaining.
       */
      public Builder setScreenHeightInPixels(int value) {
        copyOnWrite();
        instance.setScreenHeightInPixels(value);
        return this;
      }
      /**
       * <pre>
       * The height of the screen in pixels.
       * </pre>
       *
       * <code>optional uint32 screen_height_in_pixels = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearScreenHeightInPixels() {
        copyOnWrite();
        instance.clearScreenHeightInPixels();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:feedwire1.DisplayInfo)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "screenDensity_",
              "screenWidthInPixels_",
              "screenHeightInPixels_",
            };
            java.lang.String info =
                "\u0001\u0003\u0000\u0001\u0001\u0003\u0003\u0000\u0000\u0000\u0001\u1001\u0000\u0002" +
                "\u100b\u0001\u0003\u100b\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo> parser = PARSER;
          if (parser == null) {
            synchronized (org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:feedwire1.DisplayInfo)
    private static final org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo DEFAULT_INSTANCE;
    static {
      DisplayInfo defaultInstance = new DisplayInfo();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        DisplayInfo.class, defaultInstance);
    }

    public static org.chromium.components.feed.core.proto.wire.DisplayInfoProto.DisplayInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<DisplayInfo> PARSER;

    public static com.google.protobuf.Parser<DisplayInfo> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
