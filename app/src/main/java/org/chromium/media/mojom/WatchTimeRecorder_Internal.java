// WatchTimeRecorder_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     media/mojo/mojom/watch_time_recorder.mojom
//

package org.chromium.media.mojom;


class WatchTimeRecorder_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<WatchTimeRecorder, WatchTimeRecorder.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<WatchTimeRecorder, WatchTimeRecorder.Proxy>() {

        @Override
        public String getName() {
            return "media.mojom.WatchTimeRecorder";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, WatchTimeRecorder impl) {
            return new Stub(core, impl);
        }

        @Override
        public WatchTimeRecorder[] buildArray(int size) {
          return new WatchTimeRecorder[size];
        }
    };


    private static final int RECORD_WATCH_TIME_ORDINAL = 0;

    private static final int FINALIZE_WATCH_TIME_ORDINAL = 1;

    private static final int ON_ERROR_ORDINAL = 2;

    private static final int UPDATE_SECONDARY_PROPERTIES_ORDINAL = 3;

    private static final int SET_AUTOPLAY_INITIATED_ORDINAL = 4;

    private static final int ON_DURATION_CHANGED_ORDINAL = 5;

    private static final int UPDATE_VIDEO_DECODE_STATS_ORDINAL = 6;

    private static final int UPDATE_UNDERFLOW_COUNT_ORDINAL = 7;

    private static final int UPDATE_UNDERFLOW_DURATION_ORDINAL = 8;

    private static final int ON_CURRENT_TIMESTAMP_CHANGED_ORDINAL = 9;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements WatchTimeRecorder.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void recordWatchTime(
int key, org.chromium.mojo_base.mojom.TimeDelta watchTime) {

            WatchTimeRecorderRecordWatchTimeParams _message = new WatchTimeRecorderRecordWatchTimeParams();

            _message.key = key;

            _message.watchTime = watchTime;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(RECORD_WATCH_TIME_ORDINAL)));

        }


        @Override
        public void finalizeWatchTime(
int[] watchTimeKeys) {

            WatchTimeRecorderFinalizeWatchTimeParams _message = new WatchTimeRecorderFinalizeWatchTimeParams();

            _message.watchTimeKeys = watchTimeKeys;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(FINALIZE_WATCH_TIME_ORDINAL)));

        }


        @Override
        public void onError(
int status) {

            WatchTimeRecorderOnErrorParams _message = new WatchTimeRecorderOnErrorParams();

            _message.status = status;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_ERROR_ORDINAL)));

        }


        @Override
        public void updateSecondaryProperties(
SecondaryPlaybackProperties secondaryProperties) {

            WatchTimeRecorderUpdateSecondaryPropertiesParams _message = new WatchTimeRecorderUpdateSecondaryPropertiesParams();

            _message.secondaryProperties = secondaryProperties;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_SECONDARY_PROPERTIES_ORDINAL)));

        }


        @Override
        public void setAutoplayInitiated(
boolean value) {

            WatchTimeRecorderSetAutoplayInitiatedParams _message = new WatchTimeRecorderSetAutoplayInitiatedParams();

            _message.value = value;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_AUTOPLAY_INITIATED_ORDINAL)));

        }


        @Override
        public void onDurationChanged(
org.chromium.mojo_base.mojom.TimeDelta duration) {

            WatchTimeRecorderOnDurationChangedParams _message = new WatchTimeRecorderOnDurationChangedParams();

            _message.duration = duration;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_DURATION_CHANGED_ORDINAL)));

        }


        @Override
        public void updateVideoDecodeStats(
int framesDecoded, int framesDropped) {

            WatchTimeRecorderUpdateVideoDecodeStatsParams _message = new WatchTimeRecorderUpdateVideoDecodeStatsParams();

            _message.framesDecoded = framesDecoded;

            _message.framesDropped = framesDropped;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_VIDEO_DECODE_STATS_ORDINAL)));

        }


        @Override
        public void updateUnderflowCount(
int totalCount) {

            WatchTimeRecorderUpdateUnderflowCountParams _message = new WatchTimeRecorderUpdateUnderflowCountParams();

            _message.totalCount = totalCount;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_UNDERFLOW_COUNT_ORDINAL)));

        }


        @Override
        public void updateUnderflowDuration(
int totalCompletedCount, org.chromium.mojo_base.mojom.TimeDelta totalDuration) {

            WatchTimeRecorderUpdateUnderflowDurationParams _message = new WatchTimeRecorderUpdateUnderflowDurationParams();

            _message.totalCompletedCount = totalCompletedCount;

            _message.totalDuration = totalDuration;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UPDATE_UNDERFLOW_DURATION_ORDINAL)));

        }


        @Override
        public void onCurrentTimestampChanged(
org.chromium.mojo_base.mojom.TimeDelta lastTimestamp) {

            WatchTimeRecorderOnCurrentTimestampChangedParams _message = new WatchTimeRecorderOnCurrentTimestampChangedParams();

            _message.lastTimestamp = lastTimestamp;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_CURRENT_TIMESTAMP_CHANGED_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<WatchTimeRecorder> {

        Stub(org.chromium.mojo.system.Core core, WatchTimeRecorder impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                WatchTimeRecorder_Internal.MANAGER, messageWithHeader);





                    case RECORD_WATCH_TIME_ORDINAL: {

                        WatchTimeRecorderRecordWatchTimeParams data =
                                WatchTimeRecorderRecordWatchTimeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().recordWatchTime(data.key, data.watchTime);
                        return true;
                    }





                    case FINALIZE_WATCH_TIME_ORDINAL: {

                        WatchTimeRecorderFinalizeWatchTimeParams data =
                                WatchTimeRecorderFinalizeWatchTimeParams.deserialize(messageWithHeader.getPayload());

                        getImpl().finalizeWatchTime(data.watchTimeKeys);
                        return true;
                    }





                    case ON_ERROR_ORDINAL: {

                        WatchTimeRecorderOnErrorParams data =
                                WatchTimeRecorderOnErrorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onError(data.status);
                        return true;
                    }





                    case UPDATE_SECONDARY_PROPERTIES_ORDINAL: {

                        WatchTimeRecorderUpdateSecondaryPropertiesParams data =
                                WatchTimeRecorderUpdateSecondaryPropertiesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateSecondaryProperties(data.secondaryProperties);
                        return true;
                    }





                    case SET_AUTOPLAY_INITIATED_ORDINAL: {

                        WatchTimeRecorderSetAutoplayInitiatedParams data =
                                WatchTimeRecorderSetAutoplayInitiatedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setAutoplayInitiated(data.value);
                        return true;
                    }





                    case ON_DURATION_CHANGED_ORDINAL: {

                        WatchTimeRecorderOnDurationChangedParams data =
                                WatchTimeRecorderOnDurationChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onDurationChanged(data.duration);
                        return true;
                    }





                    case UPDATE_VIDEO_DECODE_STATS_ORDINAL: {

                        WatchTimeRecorderUpdateVideoDecodeStatsParams data =
                                WatchTimeRecorderUpdateVideoDecodeStatsParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateVideoDecodeStats(data.framesDecoded, data.framesDropped);
                        return true;
                    }





                    case UPDATE_UNDERFLOW_COUNT_ORDINAL: {

                        WatchTimeRecorderUpdateUnderflowCountParams data =
                                WatchTimeRecorderUpdateUnderflowCountParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateUnderflowCount(data.totalCount);
                        return true;
                    }





                    case UPDATE_UNDERFLOW_DURATION_ORDINAL: {

                        WatchTimeRecorderUpdateUnderflowDurationParams data =
                                WatchTimeRecorderUpdateUnderflowDurationParams.deserialize(messageWithHeader.getPayload());

                        getImpl().updateUnderflowDuration(data.totalCompletedCount, data.totalDuration);
                        return true;
                    }





                    case ON_CURRENT_TIMESTAMP_CHANGED_ORDINAL: {

                        WatchTimeRecorderOnCurrentTimestampChangedParams data =
                                WatchTimeRecorderOnCurrentTimestampChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onCurrentTimestampChanged(data.lastTimestamp);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), WatchTimeRecorder_Internal.MANAGER, messageWithHeader, receiver);






















                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class WatchTimeRecorderRecordWatchTimeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int key;
        public org.chromium.mojo_base.mojom.TimeDelta watchTime;

        private WatchTimeRecorderRecordWatchTimeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WatchTimeRecorderRecordWatchTimeParams() {
            this(0);
        }

        public static WatchTimeRecorderRecordWatchTimeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WatchTimeRecorderRecordWatchTimeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WatchTimeRecorderRecordWatchTimeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WatchTimeRecorderRecordWatchTimeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WatchTimeRecorderRecordWatchTimeParams(elementsOrVersion);
                    {
                        
                    result.key = decoder0.readInt(8);
                        WatchTimeKey.validate(result.key);
                        result.key = WatchTimeKey.toKnownValue(result.key);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.watchTime = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.key, 8);
            
            encoder0.encode(this.watchTime, 16, false);
        }
    }



    
    static final class WatchTimeRecorderFinalizeWatchTimeParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int[] watchTimeKeys;

        private WatchTimeRecorderFinalizeWatchTimeParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WatchTimeRecorderFinalizeWatchTimeParams() {
            this(0);
        }

        public static WatchTimeRecorderFinalizeWatchTimeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WatchTimeRecorderFinalizeWatchTimeParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WatchTimeRecorderFinalizeWatchTimeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WatchTimeRecorderFinalizeWatchTimeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WatchTimeRecorderFinalizeWatchTimeParams(elementsOrVersion);
                    {
                        
                    result.watchTimeKeys = decoder0.readInts(8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    {
                        for (int i1 = 0; i1 < result.watchTimeKeys.length; ++i1) {
                            WatchTimeKey.validate(result.watchTimeKeys[i1]);
                        }
                    }
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.watchTimeKeys, 8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
    }



    
    static final class WatchTimeRecorderOnErrorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int status;

        private WatchTimeRecorderOnErrorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WatchTimeRecorderOnErrorParams() {
            this(0);
        }

        public static WatchTimeRecorderOnErrorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WatchTimeRecorderOnErrorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WatchTimeRecorderOnErrorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WatchTimeRecorderOnErrorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WatchTimeRecorderOnErrorParams(elementsOrVersion);
                    {
                        
                    result.status = decoder0.readInt(8);
                        PipelineStatus.validate(result.status);
                        result.status = PipelineStatus.toKnownValue(result.status);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.status, 8);
        }
    }



    
    static final class WatchTimeRecorderUpdateSecondaryPropertiesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SecondaryPlaybackProperties secondaryProperties;

        private WatchTimeRecorderUpdateSecondaryPropertiesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WatchTimeRecorderUpdateSecondaryPropertiesParams() {
            this(0);
        }

        public static WatchTimeRecorderUpdateSecondaryPropertiesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WatchTimeRecorderUpdateSecondaryPropertiesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WatchTimeRecorderUpdateSecondaryPropertiesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WatchTimeRecorderUpdateSecondaryPropertiesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WatchTimeRecorderUpdateSecondaryPropertiesParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.secondaryProperties = SecondaryPlaybackProperties.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.secondaryProperties, 8, false);
        }
    }



    
    static final class WatchTimeRecorderSetAutoplayInitiatedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean value;

        private WatchTimeRecorderSetAutoplayInitiatedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WatchTimeRecorderSetAutoplayInitiatedParams() {
            this(0);
        }

        public static WatchTimeRecorderSetAutoplayInitiatedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WatchTimeRecorderSetAutoplayInitiatedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WatchTimeRecorderSetAutoplayInitiatedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WatchTimeRecorderSetAutoplayInitiatedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WatchTimeRecorderSetAutoplayInitiatedParams(elementsOrVersion);
                    {
                        
                    result.value = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.value, 8, 0);
        }
    }



    
    static final class WatchTimeRecorderOnDurationChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.TimeDelta duration;

        private WatchTimeRecorderOnDurationChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WatchTimeRecorderOnDurationChangedParams() {
            this(0);
        }

        public static WatchTimeRecorderOnDurationChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WatchTimeRecorderOnDurationChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WatchTimeRecorderOnDurationChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WatchTimeRecorderOnDurationChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WatchTimeRecorderOnDurationChangedParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.duration = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.duration, 8, false);
        }
    }



    
    static final class WatchTimeRecorderUpdateVideoDecodeStatsParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int framesDecoded;
        public int framesDropped;

        private WatchTimeRecorderUpdateVideoDecodeStatsParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WatchTimeRecorderUpdateVideoDecodeStatsParams() {
            this(0);
        }

        public static WatchTimeRecorderUpdateVideoDecodeStatsParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WatchTimeRecorderUpdateVideoDecodeStatsParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WatchTimeRecorderUpdateVideoDecodeStatsParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WatchTimeRecorderUpdateVideoDecodeStatsParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WatchTimeRecorderUpdateVideoDecodeStatsParams(elementsOrVersion);
                    {
                        
                    result.framesDecoded = decoder0.readInt(8);
                    }
                    {
                        
                    result.framesDropped = decoder0.readInt(12);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.framesDecoded, 8);
            
            encoder0.encode(this.framesDropped, 12);
        }
    }



    
    static final class WatchTimeRecorderUpdateUnderflowCountParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int totalCount;

        private WatchTimeRecorderUpdateUnderflowCountParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WatchTimeRecorderUpdateUnderflowCountParams() {
            this(0);
        }

        public static WatchTimeRecorderUpdateUnderflowCountParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WatchTimeRecorderUpdateUnderflowCountParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WatchTimeRecorderUpdateUnderflowCountParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WatchTimeRecorderUpdateUnderflowCountParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WatchTimeRecorderUpdateUnderflowCountParams(elementsOrVersion);
                    {
                        
                    result.totalCount = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.totalCount, 8);
        }
    }



    
    static final class WatchTimeRecorderUpdateUnderflowDurationParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int totalCompletedCount;
        public org.chromium.mojo_base.mojom.TimeDelta totalDuration;

        private WatchTimeRecorderUpdateUnderflowDurationParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WatchTimeRecorderUpdateUnderflowDurationParams() {
            this(0);
        }

        public static WatchTimeRecorderUpdateUnderflowDurationParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WatchTimeRecorderUpdateUnderflowDurationParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WatchTimeRecorderUpdateUnderflowDurationParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WatchTimeRecorderUpdateUnderflowDurationParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WatchTimeRecorderUpdateUnderflowDurationParams(elementsOrVersion);
                    {
                        
                    result.totalCompletedCount = decoder0.readInt(8);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.totalDuration = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.totalCompletedCount, 8);
            
            encoder0.encode(this.totalDuration, 16, false);
        }
    }



    
    static final class WatchTimeRecorderOnCurrentTimestampChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.TimeDelta lastTimestamp;

        private WatchTimeRecorderOnCurrentTimestampChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public WatchTimeRecorderOnCurrentTimestampChangedParams() {
            this(0);
        }

        public static WatchTimeRecorderOnCurrentTimestampChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static WatchTimeRecorderOnCurrentTimestampChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static WatchTimeRecorderOnCurrentTimestampChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            WatchTimeRecorderOnCurrentTimestampChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new WatchTimeRecorderOnCurrentTimestampChangedParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.lastTimestamp = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.lastTimestamp, 8, false);
        }
    }



}
