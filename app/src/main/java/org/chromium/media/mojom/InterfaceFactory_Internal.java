// InterfaceFactory_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     media/mojo/mojom/interface_factory.mojom
//

package org.chromium.media.mojom;


class InterfaceFactory_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<InterfaceFactory, InterfaceFactory.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<InterfaceFactory, InterfaceFactory.Proxy>() {

        @Override
        public String getName() {
            return "media.mojom.InterfaceFactory";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, InterfaceFactory impl) {
            return new Stub(core, impl);
        }

        @Override
        public InterfaceFactory[] buildArray(int size) {
          return new InterfaceFactory[size];
        }
    };


    private static final int CREATE_AUDIO_DECODER_ORDINAL = 0;

    private static final int CREATE_VIDEO_DECODER_ORDINAL = 1;

    private static final int CREATE_DEFAULT_RENDERER_ORDINAL = 2;

    private static final int CREATE_MEDIA_PLAYER_RENDERER_ORDINAL = 3;

    private static final int CREATE_FLINGING_RENDERER_ORDINAL = 4;

    private static final int CREATE_CDM_ORDINAL = 5;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements InterfaceFactory.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void createAudioDecoder(
org.chromium.mojo.bindings.InterfaceRequest<AudioDecoder> audioDecoder) {

            InterfaceFactoryCreateAudioDecoderParams _message = new InterfaceFactoryCreateAudioDecoderParams();

            _message.audioDecoder = audioDecoder;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_AUDIO_DECODER_ORDINAL)));

        }


        @Override
        public void createVideoDecoder(
org.chromium.mojo.bindings.InterfaceRequest<VideoDecoder> videoDecoder) {

            InterfaceFactoryCreateVideoDecoderParams _message = new InterfaceFactoryCreateVideoDecoderParams();

            _message.videoDecoder = videoDecoder;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_VIDEO_DECODER_ORDINAL)));

        }


        @Override
        public void createDefaultRenderer(
String audioDeviceId, org.chromium.mojo.bindings.InterfaceRequest<Renderer> renderer) {

            InterfaceFactoryCreateDefaultRendererParams _message = new InterfaceFactoryCreateDefaultRendererParams();

            _message.audioDeviceId = audioDeviceId;

            _message.renderer = renderer;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_DEFAULT_RENDERER_ORDINAL)));

        }


        @Override
        public void createMediaPlayerRenderer(
MediaPlayerRendererClientExtension clientExtension, org.chromium.mojo.bindings.InterfaceRequest<Renderer> renderer, org.chromium.mojo.bindings.InterfaceRequest<MediaPlayerRendererExtension> rendererExtension) {

            InterfaceFactoryCreateMediaPlayerRendererParams _message = new InterfaceFactoryCreateMediaPlayerRendererParams();

            _message.clientExtension = clientExtension;

            _message.renderer = renderer;

            _message.rendererExtension = rendererExtension;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_MEDIA_PLAYER_RENDERER_ORDINAL)));

        }


        @Override
        public void createFlingingRenderer(
String presentationId, FlingingRendererClientExtension clientExtension, org.chromium.mojo.bindings.InterfaceRequest<Renderer> renderer) {

            InterfaceFactoryCreateFlingingRendererParams _message = new InterfaceFactoryCreateFlingingRendererParams();

            _message.presentationId = presentationId;

            _message.clientExtension = clientExtension;

            _message.renderer = renderer;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_FLINGING_RENDERER_ORDINAL)));

        }


        @Override
        public void createCdm(
String keySystem, CdmConfig cdmConfig, 
CreateCdmResponse callback) {

            InterfaceFactoryCreateCdmParams _message = new InterfaceFactoryCreateCdmParams();

            _message.keySystem = keySystem;

            _message.cdmConfig = cdmConfig;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CREATE_CDM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new InterfaceFactoryCreateCdmResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<InterfaceFactory> {

        Stub(org.chromium.mojo.system.Core core, InterfaceFactory impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                InterfaceFactory_Internal.MANAGER, messageWithHeader);





                    case CREATE_AUDIO_DECODER_ORDINAL: {

                        InterfaceFactoryCreateAudioDecoderParams data =
                                InterfaceFactoryCreateAudioDecoderParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createAudioDecoder(data.audioDecoder);
                        return true;
                    }





                    case CREATE_VIDEO_DECODER_ORDINAL: {

                        InterfaceFactoryCreateVideoDecoderParams data =
                                InterfaceFactoryCreateVideoDecoderParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createVideoDecoder(data.videoDecoder);
                        return true;
                    }





                    case CREATE_DEFAULT_RENDERER_ORDINAL: {

                        InterfaceFactoryCreateDefaultRendererParams data =
                                InterfaceFactoryCreateDefaultRendererParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createDefaultRenderer(data.audioDeviceId, data.renderer);
                        return true;
                    }





                    case CREATE_MEDIA_PLAYER_RENDERER_ORDINAL: {

                        InterfaceFactoryCreateMediaPlayerRendererParams data =
                                InterfaceFactoryCreateMediaPlayerRendererParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createMediaPlayerRenderer(data.clientExtension, data.renderer, data.rendererExtension);
                        return true;
                    }





                    case CREATE_FLINGING_RENDERER_ORDINAL: {

                        InterfaceFactoryCreateFlingingRendererParams data =
                                InterfaceFactoryCreateFlingingRendererParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createFlingingRenderer(data.presentationId, data.clientExtension, data.renderer);
                        return true;
                    }




                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), InterfaceFactory_Internal.MANAGER, messageWithHeader, receiver);

















                    case CREATE_CDM_ORDINAL: {

                        InterfaceFactoryCreateCdmParams data =
                                InterfaceFactoryCreateCdmParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createCdm(data.keySystem, data.cdmConfig, new InterfaceFactoryCreateCdmResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class InterfaceFactoryCreateAudioDecoderParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<AudioDecoder> audioDecoder;

        private InterfaceFactoryCreateAudioDecoderParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public InterfaceFactoryCreateAudioDecoderParams() {
            this(0);
        }

        public static InterfaceFactoryCreateAudioDecoderParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static InterfaceFactoryCreateAudioDecoderParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static InterfaceFactoryCreateAudioDecoderParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            InterfaceFactoryCreateAudioDecoderParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new InterfaceFactoryCreateAudioDecoderParams(elementsOrVersion);
                    {
                        
                    result.audioDecoder = decoder0.readInterfaceRequest(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.audioDecoder, 8, false);
        }
    }



    
    static final class InterfaceFactoryCreateVideoDecoderParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<VideoDecoder> videoDecoder;

        private InterfaceFactoryCreateVideoDecoderParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public InterfaceFactoryCreateVideoDecoderParams() {
            this(0);
        }

        public static InterfaceFactoryCreateVideoDecoderParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static InterfaceFactoryCreateVideoDecoderParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static InterfaceFactoryCreateVideoDecoderParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            InterfaceFactoryCreateVideoDecoderParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new InterfaceFactoryCreateVideoDecoderParams(elementsOrVersion);
                    {
                        
                    result.videoDecoder = decoder0.readInterfaceRequest(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.videoDecoder, 8, false);
        }
    }



    
    static final class InterfaceFactoryCreateDefaultRendererParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String audioDeviceId;
        public org.chromium.mojo.bindings.InterfaceRequest<Renderer> renderer;

        private InterfaceFactoryCreateDefaultRendererParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public InterfaceFactoryCreateDefaultRendererParams() {
            this(0);
        }

        public static InterfaceFactoryCreateDefaultRendererParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static InterfaceFactoryCreateDefaultRendererParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static InterfaceFactoryCreateDefaultRendererParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            InterfaceFactoryCreateDefaultRendererParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new InterfaceFactoryCreateDefaultRendererParams(elementsOrVersion);
                    {
                        
                    result.audioDeviceId = decoder0.readString(8, false);
                    }
                    {
                        
                    result.renderer = decoder0.readInterfaceRequest(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.audioDeviceId, 8, false);
            
            encoder0.encode(this.renderer, 16, false);
        }
    }



    
    static final class InterfaceFactoryCreateMediaPlayerRendererParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public MediaPlayerRendererClientExtension clientExtension;
        public org.chromium.mojo.bindings.InterfaceRequest<Renderer> renderer;
        public org.chromium.mojo.bindings.InterfaceRequest<MediaPlayerRendererExtension> rendererExtension;

        private InterfaceFactoryCreateMediaPlayerRendererParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public InterfaceFactoryCreateMediaPlayerRendererParams() {
            this(0);
        }

        public static InterfaceFactoryCreateMediaPlayerRendererParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static InterfaceFactoryCreateMediaPlayerRendererParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static InterfaceFactoryCreateMediaPlayerRendererParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            InterfaceFactoryCreateMediaPlayerRendererParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new InterfaceFactoryCreateMediaPlayerRendererParams(elementsOrVersion);
                    {
                        
                    result.clientExtension = decoder0.readServiceInterface(8, false, MediaPlayerRendererClientExtension.MANAGER);
                    }
                    {
                        
                    result.renderer = decoder0.readInterfaceRequest(16, false);
                    }
                    {
                        
                    result.rendererExtension = decoder0.readInterfaceRequest(20, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.clientExtension, 8, false, MediaPlayerRendererClientExtension.MANAGER);
            
            encoder0.encode(this.renderer, 16, false);
            
            encoder0.encode(this.rendererExtension, 20, false);
        }
    }



    
    static final class InterfaceFactoryCreateFlingingRendererParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String presentationId;
        public FlingingRendererClientExtension clientExtension;
        public org.chromium.mojo.bindings.InterfaceRequest<Renderer> renderer;

        private InterfaceFactoryCreateFlingingRendererParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public InterfaceFactoryCreateFlingingRendererParams() {
            this(0);
        }

        public static InterfaceFactoryCreateFlingingRendererParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static InterfaceFactoryCreateFlingingRendererParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static InterfaceFactoryCreateFlingingRendererParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            InterfaceFactoryCreateFlingingRendererParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new InterfaceFactoryCreateFlingingRendererParams(elementsOrVersion);
                    {
                        
                    result.presentationId = decoder0.readString(8, false);
                    }
                    {
                        
                    result.clientExtension = decoder0.readServiceInterface(16, false, FlingingRendererClientExtension.MANAGER);
                    }
                    {
                        
                    result.renderer = decoder0.readInterfaceRequest(24, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.presentationId, 8, false);
            
            encoder0.encode(this.clientExtension, 16, false, FlingingRendererClientExtension.MANAGER);
            
            encoder0.encode(this.renderer, 24, false);
        }
    }



    
    static final class InterfaceFactoryCreateCdmParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String keySystem;
        public CdmConfig cdmConfig;

        private InterfaceFactoryCreateCdmParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public InterfaceFactoryCreateCdmParams() {
            this(0);
        }

        public static InterfaceFactoryCreateCdmParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static InterfaceFactoryCreateCdmParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static InterfaceFactoryCreateCdmParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            InterfaceFactoryCreateCdmParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new InterfaceFactoryCreateCdmParams(elementsOrVersion);
                    {
                        
                    result.keySystem = decoder0.readString(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.cdmConfig = CdmConfig.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.keySystem, 8, false);
            
            encoder0.encode(this.cdmConfig, 16, false);
        }
    }



    
    static final class InterfaceFactoryCreateCdmResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ContentDecryptionModule cdm;
        public org.chromium.mojo_base.mojom.UnguessableToken cdmId;
        public Decryptor decryptor;
        public String errorMessage;

        private InterfaceFactoryCreateCdmResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public InterfaceFactoryCreateCdmResponseParams() {
            this(0);
        }

        public static InterfaceFactoryCreateCdmResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static InterfaceFactoryCreateCdmResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static InterfaceFactoryCreateCdmResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            InterfaceFactoryCreateCdmResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new InterfaceFactoryCreateCdmResponseParams(elementsOrVersion);
                    {
                        
                    result.cdm = decoder0.readServiceInterface(8, true, ContentDecryptionModule.MANAGER);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.cdmId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    result.decryptor = decoder0.readServiceInterface(24, true, Decryptor.MANAGER);
                    }
                    {
                        
                    result.errorMessage = decoder0.readString(32, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.cdm, 8, true, ContentDecryptionModule.MANAGER);
            
            encoder0.encode(this.cdmId, 16, true);
            
            encoder0.encode(this.decryptor, 24, true, Decryptor.MANAGER);
            
            encoder0.encode(this.errorMessage, 32, false);
        }
    }

    static class InterfaceFactoryCreateCdmResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final InterfaceFactory.CreateCdmResponse mCallback;

        InterfaceFactoryCreateCdmResponseParamsForwardToCallback(InterfaceFactory.CreateCdmResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(CREATE_CDM_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                InterfaceFactoryCreateCdmResponseParams response = InterfaceFactoryCreateCdmResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.cdm, response.cdmId, response.decryptor, response.errorMessage);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class InterfaceFactoryCreateCdmResponseParamsProxyToResponder implements InterfaceFactory.CreateCdmResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        InterfaceFactoryCreateCdmResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(ContentDecryptionModule cdm, org.chromium.mojo_base.mojom.UnguessableToken cdmId, Decryptor decryptor, String errorMessage) {
            InterfaceFactoryCreateCdmResponseParams _response = new InterfaceFactoryCreateCdmResponseParams();

            _response.cdm = cdm;

            _response.cdmId = cdmId;

            _response.decryptor = decryptor;

            _response.errorMessage = errorMessage;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    CREATE_CDM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



}
