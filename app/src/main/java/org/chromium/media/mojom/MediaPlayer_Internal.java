// MediaPlayer_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     media/mojo/mojom/media_player.mojom
//

package org.chromium.media.mojom;


class MediaPlayer_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<MediaPlayer, MediaPlayer.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<MediaPlayer, MediaPlayer.Proxy>() {

        @Override
        public String getName() {
            return "media.mojom.MediaPlayer";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, MediaPlayer impl) {
            return new Stub(core, impl);
        }

        @Override
        public MediaPlayer[] buildArray(int size) {
          return new MediaPlayer[size];
        }
    };


    private static final int ADD_MEDIA_PLAYER_OBSERVER_ORDINAL = 0;

    private static final int REQUEST_PLAY_ORDINAL = 1;

    private static final int REQUEST_PAUSE_ORDINAL = 2;

    private static final int REQUEST_SEEK_FORWARD_ORDINAL = 3;

    private static final int REQUEST_SEEK_BACKWARD_ORDINAL = 4;

    private static final int REQUEST_ENTER_PICTURE_IN_PICTURE_ORDINAL = 5;

    private static final int REQUEST_EXIT_PICTURE_IN_PICTURE_ORDINAL = 6;

    private static final int SET_AUDIO_SINK_ID_ORDINAL = 7;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements MediaPlayer.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void addMediaPlayerObserver(
org.chromium.mojo.bindings.AssociatedInterfaceNotSupported observer) {

            MediaPlayerAddMediaPlayerObserverParams _message = new MediaPlayerAddMediaPlayerObserverParams();

            _message.observer = observer;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ADD_MEDIA_PLAYER_OBSERVER_ORDINAL)));

        }


        @Override
        public void requestPlay(
) {

            MediaPlayerRequestPlayParams _message = new MediaPlayerRequestPlayParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REQUEST_PLAY_ORDINAL)));

        }


        @Override
        public void requestPause(
boolean triggeredByUser) {

            MediaPlayerRequestPauseParams _message = new MediaPlayerRequestPauseParams();

            _message.triggeredByUser = triggeredByUser;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REQUEST_PAUSE_ORDINAL)));

        }


        @Override
        public void requestSeekForward(
org.chromium.mojo_base.mojom.TimeDelta seekTime) {

            MediaPlayerRequestSeekForwardParams _message = new MediaPlayerRequestSeekForwardParams();

            _message.seekTime = seekTime;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REQUEST_SEEK_FORWARD_ORDINAL)));

        }


        @Override
        public void requestSeekBackward(
org.chromium.mojo_base.mojom.TimeDelta seekTime) {

            MediaPlayerRequestSeekBackwardParams _message = new MediaPlayerRequestSeekBackwardParams();

            _message.seekTime = seekTime;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REQUEST_SEEK_BACKWARD_ORDINAL)));

        }


        @Override
        public void requestEnterPictureInPicture(
) {

            MediaPlayerRequestEnterPictureInPictureParams _message = new MediaPlayerRequestEnterPictureInPictureParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REQUEST_ENTER_PICTURE_IN_PICTURE_ORDINAL)));

        }


        @Override
        public void requestExitPictureInPicture(
) {

            MediaPlayerRequestExitPictureInPictureParams _message = new MediaPlayerRequestExitPictureInPictureParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REQUEST_EXIT_PICTURE_IN_PICTURE_ORDINAL)));

        }


        @Override
        public void setAudioSinkId(
String sinkId) {

            MediaPlayerSetAudioSinkIdParams _message = new MediaPlayerSetAudioSinkIdParams();

            _message.sinkId = sinkId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_AUDIO_SINK_ID_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<MediaPlayer> {

        Stub(org.chromium.mojo.system.Core core, MediaPlayer impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                MediaPlayer_Internal.MANAGER, messageWithHeader);





                    case ADD_MEDIA_PLAYER_OBSERVER_ORDINAL: {

                        MediaPlayerAddMediaPlayerObserverParams data =
                                MediaPlayerAddMediaPlayerObserverParams.deserialize(messageWithHeader.getPayload());

                        getImpl().addMediaPlayerObserver(data.observer);
                        return true;
                    }





                    case REQUEST_PLAY_ORDINAL: {

                        MediaPlayerRequestPlayParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestPlay();
                        return true;
                    }





                    case REQUEST_PAUSE_ORDINAL: {

                        MediaPlayerRequestPauseParams data =
                                MediaPlayerRequestPauseParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestPause(data.triggeredByUser);
                        return true;
                    }





                    case REQUEST_SEEK_FORWARD_ORDINAL: {

                        MediaPlayerRequestSeekForwardParams data =
                                MediaPlayerRequestSeekForwardParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestSeekForward(data.seekTime);
                        return true;
                    }





                    case REQUEST_SEEK_BACKWARD_ORDINAL: {

                        MediaPlayerRequestSeekBackwardParams data =
                                MediaPlayerRequestSeekBackwardParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestSeekBackward(data.seekTime);
                        return true;
                    }





                    case REQUEST_ENTER_PICTURE_IN_PICTURE_ORDINAL: {

                        MediaPlayerRequestEnterPictureInPictureParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestEnterPictureInPicture();
                        return true;
                    }





                    case REQUEST_EXIT_PICTURE_IN_PICTURE_ORDINAL: {

                        MediaPlayerRequestExitPictureInPictureParams.deserialize(messageWithHeader.getPayload());

                        getImpl().requestExitPictureInPicture();
                        return true;
                    }





                    case SET_AUDIO_SINK_ID_ORDINAL: {

                        MediaPlayerSetAudioSinkIdParams data =
                                MediaPlayerSetAudioSinkIdParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setAudioSinkId(data.sinkId);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), MediaPlayer_Internal.MANAGER, messageWithHeader, receiver);


















                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class MediaPlayerAddMediaPlayerObserverParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported observer;

        private MediaPlayerAddMediaPlayerObserverParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerAddMediaPlayerObserverParams() {
            this(0);
        }

        public static MediaPlayerAddMediaPlayerObserverParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerAddMediaPlayerObserverParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerAddMediaPlayerObserverParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerAddMediaPlayerObserverParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerAddMediaPlayerObserverParams(elementsOrVersion);
                    {
                        
                    result.observer = decoder0.readAssociatedServiceInterfaceNotSupported(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.observer, 8, false);
        }
    }



    
    static final class MediaPlayerRequestPlayParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private MediaPlayerRequestPlayParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerRequestPlayParams() {
            this(0);
        }

        public static MediaPlayerRequestPlayParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerRequestPlayParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerRequestPlayParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerRequestPlayParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerRequestPlayParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class MediaPlayerRequestPauseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean triggeredByUser;

        private MediaPlayerRequestPauseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerRequestPauseParams() {
            this(0);
        }

        public static MediaPlayerRequestPauseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerRequestPauseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerRequestPauseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerRequestPauseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerRequestPauseParams(elementsOrVersion);
                    {
                        
                    result.triggeredByUser = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.triggeredByUser, 8, 0);
        }
    }



    
    static final class MediaPlayerRequestSeekForwardParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.TimeDelta seekTime;

        private MediaPlayerRequestSeekForwardParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerRequestSeekForwardParams() {
            this(0);
        }

        public static MediaPlayerRequestSeekForwardParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerRequestSeekForwardParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerRequestSeekForwardParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerRequestSeekForwardParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerRequestSeekForwardParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.seekTime = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.seekTime, 8, false);
        }
    }



    
    static final class MediaPlayerRequestSeekBackwardParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.TimeDelta seekTime;

        private MediaPlayerRequestSeekBackwardParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerRequestSeekBackwardParams() {
            this(0);
        }

        public static MediaPlayerRequestSeekBackwardParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerRequestSeekBackwardParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerRequestSeekBackwardParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerRequestSeekBackwardParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerRequestSeekBackwardParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.seekTime = org.chromium.mojo_base.mojom.TimeDelta.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.seekTime, 8, false);
        }
    }



    
    static final class MediaPlayerRequestEnterPictureInPictureParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private MediaPlayerRequestEnterPictureInPictureParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerRequestEnterPictureInPictureParams() {
            this(0);
        }

        public static MediaPlayerRequestEnterPictureInPictureParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerRequestEnterPictureInPictureParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerRequestEnterPictureInPictureParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerRequestEnterPictureInPictureParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerRequestEnterPictureInPictureParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class MediaPlayerRequestExitPictureInPictureParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private MediaPlayerRequestExitPictureInPictureParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerRequestExitPictureInPictureParams() {
            this(0);
        }

        public static MediaPlayerRequestExitPictureInPictureParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerRequestExitPictureInPictureParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerRequestExitPictureInPictureParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerRequestExitPictureInPictureParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerRequestExitPictureInPictureParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class MediaPlayerSetAudioSinkIdParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String sinkId;

        private MediaPlayerSetAudioSinkIdParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerSetAudioSinkIdParams() {
            this(0);
        }

        public static MediaPlayerSetAudioSinkIdParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerSetAudioSinkIdParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerSetAudioSinkIdParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerSetAudioSinkIdParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerSetAudioSinkIdParams(elementsOrVersion);
                    {
                        
                    result.sinkId = decoder0.readString(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.sinkId, 8, false);
        }
    }



}
