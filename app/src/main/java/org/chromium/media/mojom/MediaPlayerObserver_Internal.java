// MediaPlayerObserver_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     media/mojo/mojom/media_player.mojom
//

package org.chromium.media.mojom;


class MediaPlayerObserver_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<MediaPlayerObserver, MediaPlayerObserver.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<MediaPlayerObserver, MediaPlayerObserver.Proxy>() {

        @Override
        public String getName() {
            return "media.mojom.MediaPlayerObserver";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, MediaPlayerObserver impl) {
            return new Stub(core, impl);
        }

        @Override
        public MediaPlayerObserver[] buildArray(int size) {
          return new MediaPlayerObserver[size];
        }
    };


    private static final int ON_MEDIA_PLAYING_ORDINAL = 0;

    private static final int ON_MEDIA_PAUSED_ORDINAL = 1;

    private static final int ON_MUTED_STATUS_CHANGED_ORDINAL = 2;

    private static final int ON_MEDIA_METADATA_CHANGED_ORDINAL = 3;

    private static final int ON_MEDIA_POSITION_STATE_CHANGED_ORDINAL = 4;

    private static final int ON_MEDIA_EFFECTIVELY_FULLSCREEN_CHANGED_ORDINAL = 5;

    private static final int ON_MEDIA_SIZE_CHANGED_ORDINAL = 6;

    private static final int ON_PICTURE_IN_PICTURE_AVAILABILITY_CHANGED_ORDINAL = 7;

    private static final int ON_AUDIO_OUTPUT_SINK_CHANGED_ORDINAL = 8;

    private static final int ON_AUDIO_OUTPUT_SINK_CHANGING_DISABLED_ORDINAL = 9;

    private static final int ON_BUFFER_UNDERFLOW_ORDINAL = 10;

    private static final int ON_SEEK_ORDINAL = 11;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements MediaPlayerObserver.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void onMediaPlaying(
) {

            MediaPlayerObserverOnMediaPlayingParams _message = new MediaPlayerObserverOnMediaPlayingParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_MEDIA_PLAYING_ORDINAL)));

        }


        @Override
        public void onMediaPaused(
boolean streamEnded) {

            MediaPlayerObserverOnMediaPausedParams _message = new MediaPlayerObserverOnMediaPausedParams();

            _message.streamEnded = streamEnded;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_MEDIA_PAUSED_ORDINAL)));

        }


        @Override
        public void onMutedStatusChanged(
boolean muted) {

            MediaPlayerObserverOnMutedStatusChangedParams _message = new MediaPlayerObserverOnMutedStatusChangedParams();

            _message.muted = muted;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_MUTED_STATUS_CHANGED_ORDINAL)));

        }


        @Override
        public void onMediaMetadataChanged(
boolean hasAudio, boolean hasVideo, int contentType) {

            MediaPlayerObserverOnMediaMetadataChangedParams _message = new MediaPlayerObserverOnMediaMetadataChangedParams();

            _message.hasAudio = hasAudio;

            _message.hasVideo = hasVideo;

            _message.contentType = contentType;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_MEDIA_METADATA_CHANGED_ORDINAL)));

        }


        @Override
        public void onMediaPositionStateChanged(
org.chromium.media_session.mojom.MediaPosition mediaPosition) {

            MediaPlayerObserverOnMediaPositionStateChangedParams _message = new MediaPlayerObserverOnMediaPositionStateChangedParams();

            _message.mediaPosition = mediaPosition;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_MEDIA_POSITION_STATE_CHANGED_ORDINAL)));

        }


        @Override
        public void onMediaEffectivelyFullscreenChanged(
int status) {

            MediaPlayerObserverOnMediaEffectivelyFullscreenChangedParams _message = new MediaPlayerObserverOnMediaEffectivelyFullscreenChangedParams();

            _message.status = status;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_MEDIA_EFFECTIVELY_FULLSCREEN_CHANGED_ORDINAL)));

        }


        @Override
        public void onMediaSizeChanged(
org.chromium.gfx.mojom.Size size) {

            MediaPlayerObserverOnMediaSizeChangedParams _message = new MediaPlayerObserverOnMediaSizeChangedParams();

            _message.size = size;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_MEDIA_SIZE_CHANGED_ORDINAL)));

        }


        @Override
        public void onPictureInPictureAvailabilityChanged(
boolean available) {

            MediaPlayerObserverOnPictureInPictureAvailabilityChangedParams _message = new MediaPlayerObserverOnPictureInPictureAvailabilityChangedParams();

            _message.available = available;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_PICTURE_IN_PICTURE_AVAILABILITY_CHANGED_ORDINAL)));

        }


        @Override
        public void onAudioOutputSinkChanged(
String hashedDeviceId) {

            MediaPlayerObserverOnAudioOutputSinkChangedParams _message = new MediaPlayerObserverOnAudioOutputSinkChangedParams();

            _message.hashedDeviceId = hashedDeviceId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_AUDIO_OUTPUT_SINK_CHANGED_ORDINAL)));

        }


        @Override
        public void onAudioOutputSinkChangingDisabled(
) {

            MediaPlayerObserverOnAudioOutputSinkChangingDisabledParams _message = new MediaPlayerObserverOnAudioOutputSinkChangingDisabledParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_AUDIO_OUTPUT_SINK_CHANGING_DISABLED_ORDINAL)));

        }


        @Override
        public void onBufferUnderflow(
) {

            MediaPlayerObserverOnBufferUnderflowParams _message = new MediaPlayerObserverOnBufferUnderflowParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_BUFFER_UNDERFLOW_ORDINAL)));

        }


        @Override
        public void onSeek(
) {

            MediaPlayerObserverOnSeekParams _message = new MediaPlayerObserverOnSeekParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_SEEK_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<MediaPlayerObserver> {

        Stub(org.chromium.mojo.system.Core core, MediaPlayerObserver impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                MediaPlayerObserver_Internal.MANAGER, messageWithHeader);





                    case ON_MEDIA_PLAYING_ORDINAL: {

                        MediaPlayerObserverOnMediaPlayingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onMediaPlaying();
                        return true;
                    }





                    case ON_MEDIA_PAUSED_ORDINAL: {

                        MediaPlayerObserverOnMediaPausedParams data =
                                MediaPlayerObserverOnMediaPausedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onMediaPaused(data.streamEnded);
                        return true;
                    }





                    case ON_MUTED_STATUS_CHANGED_ORDINAL: {

                        MediaPlayerObserverOnMutedStatusChangedParams data =
                                MediaPlayerObserverOnMutedStatusChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onMutedStatusChanged(data.muted);
                        return true;
                    }





                    case ON_MEDIA_METADATA_CHANGED_ORDINAL: {

                        MediaPlayerObserverOnMediaMetadataChangedParams data =
                                MediaPlayerObserverOnMediaMetadataChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onMediaMetadataChanged(data.hasAudio, data.hasVideo, data.contentType);
                        return true;
                    }





                    case ON_MEDIA_POSITION_STATE_CHANGED_ORDINAL: {

                        MediaPlayerObserverOnMediaPositionStateChangedParams data =
                                MediaPlayerObserverOnMediaPositionStateChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onMediaPositionStateChanged(data.mediaPosition);
                        return true;
                    }





                    case ON_MEDIA_EFFECTIVELY_FULLSCREEN_CHANGED_ORDINAL: {

                        MediaPlayerObserverOnMediaEffectivelyFullscreenChangedParams data =
                                MediaPlayerObserverOnMediaEffectivelyFullscreenChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onMediaEffectivelyFullscreenChanged(data.status);
                        return true;
                    }





                    case ON_MEDIA_SIZE_CHANGED_ORDINAL: {

                        MediaPlayerObserverOnMediaSizeChangedParams data =
                                MediaPlayerObserverOnMediaSizeChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onMediaSizeChanged(data.size);
                        return true;
                    }





                    case ON_PICTURE_IN_PICTURE_AVAILABILITY_CHANGED_ORDINAL: {

                        MediaPlayerObserverOnPictureInPictureAvailabilityChangedParams data =
                                MediaPlayerObserverOnPictureInPictureAvailabilityChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onPictureInPictureAvailabilityChanged(data.available);
                        return true;
                    }





                    case ON_AUDIO_OUTPUT_SINK_CHANGED_ORDINAL: {

                        MediaPlayerObserverOnAudioOutputSinkChangedParams data =
                                MediaPlayerObserverOnAudioOutputSinkChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onAudioOutputSinkChanged(data.hashedDeviceId);
                        return true;
                    }





                    case ON_AUDIO_OUTPUT_SINK_CHANGING_DISABLED_ORDINAL: {

                        MediaPlayerObserverOnAudioOutputSinkChangingDisabledParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onAudioOutputSinkChangingDisabled();
                        return true;
                    }





                    case ON_BUFFER_UNDERFLOW_ORDINAL: {

                        MediaPlayerObserverOnBufferUnderflowParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onBufferUnderflow();
                        return true;
                    }





                    case ON_SEEK_ORDINAL: {

                        MediaPlayerObserverOnSeekParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onSeek();
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), MediaPlayerObserver_Internal.MANAGER, messageWithHeader, receiver);


























                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class MediaPlayerObserverOnMediaPlayingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private MediaPlayerObserverOnMediaPlayingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerObserverOnMediaPlayingParams() {
            this(0);
        }

        public static MediaPlayerObserverOnMediaPlayingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerObserverOnMediaPlayingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerObserverOnMediaPlayingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerObserverOnMediaPlayingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerObserverOnMediaPlayingParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class MediaPlayerObserverOnMediaPausedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean streamEnded;

        private MediaPlayerObserverOnMediaPausedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerObserverOnMediaPausedParams() {
            this(0);
        }

        public static MediaPlayerObserverOnMediaPausedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerObserverOnMediaPausedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerObserverOnMediaPausedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerObserverOnMediaPausedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerObserverOnMediaPausedParams(elementsOrVersion);
                    {
                        
                    result.streamEnded = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.streamEnded, 8, 0);
        }
    }



    
    static final class MediaPlayerObserverOnMutedStatusChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean muted;

        private MediaPlayerObserverOnMutedStatusChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerObserverOnMutedStatusChangedParams() {
            this(0);
        }

        public static MediaPlayerObserverOnMutedStatusChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerObserverOnMutedStatusChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerObserverOnMutedStatusChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerObserverOnMutedStatusChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerObserverOnMutedStatusChangedParams(elementsOrVersion);
                    {
                        
                    result.muted = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.muted, 8, 0);
        }
    }



    
    static final class MediaPlayerObserverOnMediaMetadataChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean hasAudio;
        public boolean hasVideo;
        public int contentType;

        private MediaPlayerObserverOnMediaMetadataChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerObserverOnMediaMetadataChangedParams() {
            this(0);
        }

        public static MediaPlayerObserverOnMediaMetadataChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerObserverOnMediaMetadataChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerObserverOnMediaMetadataChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerObserverOnMediaMetadataChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerObserverOnMediaMetadataChangedParams(elementsOrVersion);
                    {
                        
                    result.hasAudio = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.hasVideo = decoder0.readBoolean(8, 1);
                    }
                    {
                        
                    result.contentType = decoder0.readInt(12);
                        MediaContentType.validate(result.contentType);
                        result.contentType = MediaContentType.toKnownValue(result.contentType);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.hasAudio, 8, 0);
            
            encoder0.encode(this.hasVideo, 8, 1);
            
            encoder0.encode(this.contentType, 12);
        }
    }



    
    static final class MediaPlayerObserverOnMediaPositionStateChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.media_session.mojom.MediaPosition mediaPosition;

        private MediaPlayerObserverOnMediaPositionStateChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerObserverOnMediaPositionStateChangedParams() {
            this(0);
        }

        public static MediaPlayerObserverOnMediaPositionStateChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerObserverOnMediaPositionStateChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerObserverOnMediaPositionStateChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerObserverOnMediaPositionStateChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerObserverOnMediaPositionStateChangedParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.mediaPosition = org.chromium.media_session.mojom.MediaPosition.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.mediaPosition, 8, false);
        }
    }



    
    static final class MediaPlayerObserverOnMediaEffectivelyFullscreenChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int status;

        private MediaPlayerObserverOnMediaEffectivelyFullscreenChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerObserverOnMediaEffectivelyFullscreenChangedParams() {
            this(0);
        }

        public static MediaPlayerObserverOnMediaEffectivelyFullscreenChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerObserverOnMediaEffectivelyFullscreenChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerObserverOnMediaEffectivelyFullscreenChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerObserverOnMediaEffectivelyFullscreenChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerObserverOnMediaEffectivelyFullscreenChangedParams(elementsOrVersion);
                    {
                        
                    result.status = decoder0.readInt(8);
                        FullscreenVideoStatus.validate(result.status);
                        result.status = FullscreenVideoStatus.toKnownValue(result.status);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.status, 8);
        }
    }



    
    static final class MediaPlayerObserverOnMediaSizeChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Size size;

        private MediaPlayerObserverOnMediaSizeChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerObserverOnMediaSizeChangedParams() {
            this(0);
        }

        public static MediaPlayerObserverOnMediaSizeChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerObserverOnMediaSizeChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerObserverOnMediaSizeChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerObserverOnMediaSizeChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerObserverOnMediaSizeChangedParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.size = org.chromium.gfx.mojom.Size.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.size, 8, false);
        }
    }



    
    static final class MediaPlayerObserverOnPictureInPictureAvailabilityChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean available;

        private MediaPlayerObserverOnPictureInPictureAvailabilityChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerObserverOnPictureInPictureAvailabilityChangedParams() {
            this(0);
        }

        public static MediaPlayerObserverOnPictureInPictureAvailabilityChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerObserverOnPictureInPictureAvailabilityChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerObserverOnPictureInPictureAvailabilityChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerObserverOnPictureInPictureAvailabilityChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerObserverOnPictureInPictureAvailabilityChangedParams(elementsOrVersion);
                    {
                        
                    result.available = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.available, 8, 0);
        }
    }



    
    static final class MediaPlayerObserverOnAudioOutputSinkChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String hashedDeviceId;

        private MediaPlayerObserverOnAudioOutputSinkChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerObserverOnAudioOutputSinkChangedParams() {
            this(0);
        }

        public static MediaPlayerObserverOnAudioOutputSinkChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerObserverOnAudioOutputSinkChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerObserverOnAudioOutputSinkChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerObserverOnAudioOutputSinkChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerObserverOnAudioOutputSinkChangedParams(elementsOrVersion);
                    {
                        
                    result.hashedDeviceId = decoder0.readString(8, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.hashedDeviceId, 8, false);
        }
    }



    
    static final class MediaPlayerObserverOnAudioOutputSinkChangingDisabledParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private MediaPlayerObserverOnAudioOutputSinkChangingDisabledParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerObserverOnAudioOutputSinkChangingDisabledParams() {
            this(0);
        }

        public static MediaPlayerObserverOnAudioOutputSinkChangingDisabledParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerObserverOnAudioOutputSinkChangingDisabledParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerObserverOnAudioOutputSinkChangingDisabledParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerObserverOnAudioOutputSinkChangingDisabledParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerObserverOnAudioOutputSinkChangingDisabledParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class MediaPlayerObserverOnBufferUnderflowParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private MediaPlayerObserverOnBufferUnderflowParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerObserverOnBufferUnderflowParams() {
            this(0);
        }

        public static MediaPlayerObserverOnBufferUnderflowParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerObserverOnBufferUnderflowParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerObserverOnBufferUnderflowParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerObserverOnBufferUnderflowParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerObserverOnBufferUnderflowParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class MediaPlayerObserverOnSeekParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private MediaPlayerObserverOnSeekParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public MediaPlayerObserverOnSeekParams() {
            this(0);
        }

        public static MediaPlayerObserverOnSeekParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static MediaPlayerObserverOnSeekParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static MediaPlayerObserverOnSeekParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            MediaPlayerObserverOnSeekParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new MediaPlayerObserverOnSeekParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



}
